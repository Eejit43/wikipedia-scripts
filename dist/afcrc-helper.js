// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper/afcrc-helper.ts

"use strict";(()=>{var re=Object.defineProperty;var x=(f,e)=>()=>(f&&(e=f(f=0)),e);var Y=(f,e)=>{for(var t in e)re(f,t,{get:e[t],enumerable:!0})};async function W(f){return(await L.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:f})).query.pages[0].revisions?.[0].slots.main.content.trim()}var L,j=x(()=>{"use strict";L=new mw.Api});var D,Z=x(()=>{"use strict";D=class f extends OO.ui.Dialog{contentLayout;logOutput;closeButton;helperDialog;constructor(e){super({size:"large"}),f.static.name="ActionsDialog",f.static.title="Actions",this.helperDialog=e}initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);addLogEntry(e,t="notice"){let n=new OO.ui.MessageWidget({type:t,inline:!0,label:new OO.ui.HtmlSnippet(e)});this.logOutput.append(n.$element[0]),this.updateSize();let s=this.$body;s[0].scrollTo({top:s[0].scrollHeight,behavior:"smooth"})}showReload(){this.closeButton.$element.remove();let e=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});e.on("click",()=>{this.helperDialog.allowTabClosure(),window.location.reload()}),this.contentLayout.$element.append(e.$element)}};Object.assign(D.prototype,OO.ui.Dialog.prototype)});var A,K=x(()=>{"use strict";j();Z();A=class f extends OO.ui.ProcessDialog{SCRIPT_MESSAGE=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";requestPageType;pageTitle;createdPageWatchMethod;beforeText;pageContent;parsedRequests;editsCreationsToMake=[];shouldStopTabClosure=!0;constructor(e,t,n){super({size:"large"}),f.static.name="AfcrcHelperDialog",f.static.title="afcrc-helper",f.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=t,this.requestPageType=e,this.createdPageWatchMethod=n&&["nochange","preferences","unwatch","watch"].includes(n)?n:"preferences",document.body.classList.add("afcrc-helper-open"),window.addEventListener("beforeunload",s=>{this.parsedRequests.length>0&&this.shouldStopTabClosure&&s.preventDefault()})}getActionProcess=e=>!e||e==="cancel"?new OO.ui.Process(()=>{this.parsedRequests.length>0?OO.ui.confirm("Are you sure you want to close? All changes will be discarded.").then(t=>{t&&(this.close(),this.shouldStopTabClosure=!1)}):this.close()}):e==="save"?new OO.ui.Process(()=>{this.performActions()}):f.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>f.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty(),document.body.classList.remove("afcrc-helper-open")});async load(){this.pageContent=await W(this.pageTitle)??"",this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=/^(.*?)==/s.exec(this.pageContent)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==");let e=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(t=>t[0]);for(let t of e){if(/{{afc-c\|/i.test(t))continue;let s=/^==(.*?)==$/m.exec(t)[1].trim();this.parseSubtypeRequests(t,s)}}loadInputElements(){if(this.parsedRequests.length>0){let e=0,t=()=>{let s=Math.min(e+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${e+1}-${s}/${this.parsedRequests.length} requests)`);for(let o=e;o<s;o++)this.loadSubtypeElements(o);s<this.parsedRequests.length?(e=s,setTimeout(t,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};t()}else{let e=new OO.ui.MessageWidget({type:"notice",label:"No valid requests to handle!"}),t=new OO.ui.PanelLayout({padded:!0,expanded:!1});t.$element.append(e.$element),this.$body.append(t.$element),this.updateSize()}}async performActions(){let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let t=new D(this);e.addWindows([t]),t.open();let n={accepted:0,denied:0,"commented on":0,closed:0},s=await W(this.pageTitle)??"";this.performSubtypeActions(t,n,s)}formatDeniedReason(e){let t=e.startsWith("autofill:")?/autofill:(\w+)/.exec(e)[1]:`decline|2=${e}`,n=e.startsWith("autofill:")&&e.includes(",")?" "+e.slice(e.indexOf(",")+1).trim():"";return`{{subst:AfC ${this.requestPageType}|${t}}}${n}`}mapDeniedReasons(e,t,n){if(t)return`* ${this.formatDeniedReason(e[0][1])} ~~~~`;let s={};for(let[i,a]of e)a in s||(s[a]=[]),s[a].push(i);let o=Object.entries(s);return o.map(([i,a])=>`* ${this.formatDeniedReason(i)}${o.length>1||!n?` (${a.map(l=>`[[${l}]]`).join(", ")})`:""} ~~~~`).join(`
`)}mapComments(e,t,n){if(t)return`* {{AfC comment|1=${e[0][1]}}} ~~~~`;let s={};for(let[i,a]of e)a in s||(s[a]=[]),s[a].push(i);let o=Object.entries(s);return o.map(([i,a])=>`* {{AfC comment|1=${i}}}${o.length>1||!n?` (${a.map(l=>`[[${l}]]`).join(", ")})`:""} ~~~~`).join(`
`)}modifySectionData(e,{prepend:t,append:n}){let{fullSectionText:s,sectionText:o}=e;return t&&(e.sectionText=t+`
`+e.sectionText),n&&(e.sectionText+=`
`+n),e.fullSectionText=e.fullSectionText.replace(o,e.sectionText),e.pageText=e.pageText.replace(s,e.fullSectionText),e}async makeAllEditsCreations(e){for(let[t,n]of this.editsCreationsToMake.entries()){let s=n.type==="edit"?()=>L.edit(n.title,n.transform):()=>L.create(n.title,{summary:n.summary,watchlist:this.createdPageWatchMethod},n.text),o=document.createElement("a");o.target="_blank",o.href=mw.util.getUrl(n.title,"isRedirect"in n&&n.isRedirect?{redirect:"no"}:void 0),o.textContent=n.title;let i=`afcrc-helper-action-result-${t}`;e.addLogEntry(`${n.type==="edit"?"Editing":"Creating"} ${o.outerHTML}... <span id="${i}"></span>`),await s().then(a=>{if(a.result==="Success"){let l;"nochange"in a||(l=document.createElement("a"),l.target="_blank",l.href=mw.util.getUrl(`Special:Diff/${a.oldrevid?`${a.oldrevid}/`:""}${a.newrevid}`),l.textContent="diff");let d=document.querySelector(`#${i}`);l?d.append("(done, see ",l,")"):d.textContent="(done, no changes)"}}).catch(async(a,l)=>{a==="ratelimited"?(e.addLogEntry(`Rate limited. Waiting for 70 seconds... (resuming at ${new Date(Date.now()+7e4).toLocaleTimeString()})`,"warning"),await new Promise(d=>setTimeout(d,7e4)),e.addLogEntry("Continuing...","success"),await s().catch((d,c)=>{e.addLogEntry(`Error ${n.type==="edit"?"editing":"creating"} ${o.outerHTML}: ${c?.error?.info??"Unknown error"} (${d}).`,"error")})):e.addLogEntry(`Error ${n.type==="edit"?"editing":"creating"} ${o.outerHTML}: ${l?.error?.info??"Unknown error"} (${a}).`,"error")})}}allowTabClosure(){this.shouldStopTabClosure=!1}parseSubtypeRequests(e,t){throw new Error("Not implemented.")}loadSubtypeElements(e){throw new Error("Not implemented.")}updateRequestColor(e,t){throw new Error("Not implemented.")}async performSubtypeActions(e,t,n){throw new Error("Not implemented.")}};Object.assign(A.prototype,OO.ui.ProcessDialog.prototype)});var N,ee=x(()=>{"use strict";N=class{titleIndex;title;detailsElement;responderElement;dialog;templateParametersEditor;templateEditorsInfo=[];actionRadioInput;tagSelect;denyReasonInput;closingReasonDropdown;commentInput;tagSelectLayout;denyReasonLayout;closingReasonLayout;commentLayout;constructor(e,t,n,s,o){this.titleIndex=e,this.title=t,this.detailsElement=n,this.responderElement=s,this.dialog=o}setUp(){let e=document.createElement("div"),t=document.createElement("b");t.textContent=this.title,e.append(t),this.actionRadioInput=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(n=>new OO.ui.RadioOptionWidget({data:n.toLowerCase(),label:n}))}),this.actionRadioInput.selectItemByData("none"),this.actionRadioInput.on("choose",n=>{this.handleActionChange(n)}),this.loadCommentLayout(),e.append(this.actionRadioInput.$element[0],this.commentLayout.$element[0]),this.responderElement.append(e)}updateFromAction(e){switch(this.actionRadioInput.chooseItem(this.actionRadioInput.findItemFromData(e.action)),e.action){case"accept":{if(this.tagSelect.setValue(e.redirectTemplates??[]),e.redirectTemplates)for(let[t,n]of e.redirectTemplateParameters.entries()){if(!e.redirectTemplates.includes(n.name))continue;let s=this.templateEditorsInfo[t].parameters;for(let[o,i]of n.parameters.entries())s[o].editor.setValue(i.editor.getValue())}break}case"deny":{this.denyReasonInput.setValue(e.denyReason),this.denyReasonInput.getMenu().chooseItem(this.denyReasonInput.getMenu().findItemFromData(e.denyReason));break}case"close":{this.closingReasonDropdown.getMenu().chooseItem(this.closingReasonDropdown.getMenu().findItemFromData(e.closingReason.id));break}}this.commentInput.setValue(e.comment??"")}handleActionChange(e){setTimeout(()=>this.dialog.updateSize(),0);let t=e.getData();switch(this.updateActionsToTake({action:t}),this.dialog.updateRequestColor(this.detailsElement,this.titleIndex),this.tagSelectLayout&&this.tagSelectLayout.$element.hide(),this.templateParametersEditor&&(this.templateParametersEditor.style.display="none"),this.denyReasonLayout&&this.denyReasonLayout.$element.hide(),this.closingReasonLayout&&this.closingReasonLayout.$element.hide(),t){case"accept":{(!this.tagSelectLayout||!this.templateParametersEditor)&&this.loadTagSelectAndParametersEditor(),this.tagSelectLayout.$element.show(),this.templateParametersEditor.style.display="block";break}case"deny":{this.denyReasonLayout||this.loadDenyReasonLayout(),this.denyReasonLayout.$element.show();break}case"close":{this.closingReasonLayout||this.loadClosingReasonLayout(),this.closingReasonLayout.$element.show();break}}if(["accept","comment","close"].includes(t)){this.commentLayout.$element.show();let n=this.commentInput.getValue().trim();n?this.updateActionsToTake({comment:n}):this.updateActionsToTake({comment:void 0})}else this.commentLayout.$element.hide(),this.updateActionsToTake({comment:void 0})}loadTagSelectAndParametersEditor(){this.tagSelect=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.entries(this.dialog.redirectTemplates).map(([n,{redirect:s}])=>{if(!s)return{data:n,label:n};let o=new OO.ui.HtmlSnippet(`<span class="afcrc-helper-redirect-possibilities">${n}</span>`);return{data:n,label:o}})}),this.tagSelect.getMenu().filterMode="substring",this.tagSelect.on("change",n=>{let s=n.map(a=>a.getData()),o=s.toSorted((a,l)=>a.toLowerCase().localeCompare(l.toLowerCase()));if(s.join(";")!==o.join(";")){let a=n.at(-1);this.tagSelect.reorder(a,o.indexOf(a.getData()))}this.updateActionsToTake({redirectTemplates:o});let i=0;for(let a of this.templateEditorsInfo){let l=o.includes(a.name);a.details.style.display=l?"block":"none",l&&i++}e.textContent=`Template parameters (${i>0?`for ${i} template${i>1?"s":""}`:"none to show"})`,t.style.display=i>0?"none":"block"}),this.tagSelectLayout=new OO.ui.FieldLayout(this.tagSelect,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates:"}),this.commentLayout.$element[0].before(this.tagSelectLayout.$element[0]),this.templateParametersEditor=document.createElement("details"),this.templateParametersEditor.classList.add("afcrc-helper-template-parameters-container");let e=document.createElement("summary");e.textContent="Template parameters (none to show)",this.templateParametersEditor.append(e);for(let[n,s]of Object.entries(this.dialog.redirectTemplates)){let o=Object.entries(s.parameters);if(o.length===0)continue;let i=document.createElement("details");i.style.display="none";let a=document.createElement("summary");a.textContent=n,i.append(a);let l={name:n,details:i,parameters:[]};for(let[d,c]of o){let b=new OO.ui.TextInputWidget({placeholder:c.default?.toString(),required:c.required}),y=new OO.ui.FieldLayout(b,{label:new OO.ui.HtmlSnippet(`${d}${!c.label||d.toLowerCase()===c.label.toLowerCase()?"":` (${c.label})`}${c.description?` (${c.description})`:""} (type: ${c.type}) ${c.suggested?" (suggested)":""}${c.example?` (example: "${c.example}")`:""}`),align:"inline"});i.append(y.$element[0]),l.parameters.push({name:d,aliases:c.aliases,editor:b})}this.templateParametersEditor.append(i),this.templateEditorsInfo.push(l)}this.updateActionsToTake({redirectTemplateParameters:this.templateEditorsInfo});let t=document.createElement("div");t.id="afcrc-helper-no-templates-message",t.textContent="No templates with parameters to display!",this.templateParametersEditor.append(t),this.commentLayout.$element[0].before(this.templateParametersEditor)}loadDenyReasonLayout(){this.denyReasonInput=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["unrelated","apparently unrelated titles"],["notredirect","article creation requests"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([e,t])=>({data:`autofill:${e}`,label:`Autofilled text for ${t}`}))}),this.denyReasonInput.on("change",e=>{this.updateActionsToTake({denyReason:e||"autofill:unlikely"})}),this.denyReasonInput.setValue("autofill:unlikely"),this.denyReasonInput.getMenu().selectItemByData("autofill:unlikely"),this.denyReasonLayout=new OO.ui.FieldLayout(this.denyReasonInput,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'}),this.denyReasonLayout.$element.hide(),this.commentLayout.$element[0].before(this.denyReasonLayout.$element[0])}loadClosingReasonLayout(){this.closingReasonDropdown=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([e,t])=>new OO.ui.MenuOptionWidget({data:t,label:e}))}}),this.closingReasonDropdown.getMenu().on("choose",e=>{this.updateActionsToTake({closingReason:{name:e.getLabel(),id:e.getData()}}),this.dialog.updateRequestColor(this.detailsElement,this.titleIndex)}),this.closingReasonDropdown.getMenu().chooseItem(this.closingReasonDropdown.getMenu().findItemFromData("s")),this.closingReasonLayout=new OO.ui.FieldLayout(this.closingReasonDropdown,{align:"inline",label:"Closing reason:"}),this.closingReasonLayout.$element.hide(),this.commentLayout.$element[0].before(this.closingReasonLayout.$element[0])}loadCommentLayout(){this.commentInput=new OO.ui.TextInputWidget,this.commentInput.on("change",e=>{let t=e.trim();t?this.updateActionsToTake({comment:t}):this.updateActionsToTake({comment:void 0})}),this.commentLayout=new OO.ui.FieldLayout(this.commentInput,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"}),this.commentLayout.$element.hide()}updateActionsToTake(e){Object.assign(this.dialog.actionsToTake[this.titleIndex].requests[this.title],e)}}});var te={};Y(te,{default:()=>Q});var Q,ne=x(()=>{"use strict";j();K();ee();Q=class extends A{redirectTemplates;parsedRequests=[];actionsToTake=[];async load(){this.redirectTemplates=JSON.parse(await W("User:Eejit43/scripts/redirect-helper.json")??"{}"),super.load()}parseSubtypeRequests(e,t){let n={},s=t.matchAll(/\[\[(.*?)]]/g).toArray().map(l=>l[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);if(s.length===0)return;n.pages=s;let o=/Target of redirect: ?\[\[(.*?)]]/.exec(e)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!o)return;n.target=o,n.reason=/reason: ?(.*?)\*source(?: \(if applicable\))?:/is.exec(e)?.[1].trim()??"",n.source=/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is.exec(e)?.[1].trim()??"";let i=e.match(e.includes("<references />")?/<references \/>\n+(.*)/:new RegExp(`(?:<references \\/>${n.source?`|${n.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))?.[1].trim(),a=i?/(?:Special:Contributions\/|User(?: talk)?:)(.*?)\|/.exec(i)?.[1].trim():null;n.requester=i&&a?{type:/\[\[User( talk)?:/.test(i)?"user":"ip",name:a}:null,this.parsedRequests.push(n),this.actionsToTake.push({target:n.target,requests:Object.fromEntries(s.map(l=>[l,{originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"}]))})}loadSubtypeElements(e){let t=this.parsedRequests[e],n=document.createElement("details");n.classList.add("afcrc-helper-request"),n.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));let s=document.createElement("summary");s.innerHTML=t.pages.map(u=>`<b>${u}</b>`).join(", ")+" \u2192 ",s.addEventListener("keyup",u=>{document.activeElement?.tagName==="INPUT"&&u.key===" "&&u.preventDefault()});let o=document.createElement("input");o.classList.add("afcrc-helper-target-editor"),o.style.width=`${t.target.length}ch`,o.value=t.target,o.addEventListener("input",()=>{o.value=o.value.replaceAll("_"," "),o.style.width=`${o.value.length}ch`,this.actionsToTake[e].target=o.value,i.href=mw.util.getUrl(o.value)}),s.append(o);let i=document.createElement("a");i.classList.add("afcrc-helper-external-link"),i.target="_blank",i.href=mw.util.getUrl(t.target),i.innerHTML=`
<svg viewbox="0 0 48 48">
<path d="M36 24c-1.2 0-2 0.8-2 2v12c0 1.2-0.8 2-2 2h-22c-1.2
    0-2-0.8-2-2v-22c0-1.2 0.8-2 2-2h12c1.2 0 2-0.8 2-2s-0.8-2-2-2h-12c-3.4
    0-6 2.6-6 6v22c0 3.4 2.6 6 6 6h22c3.4 0 6-2.6
    6-6v-12c0-1.2-0.8-2-2-2z"></path>
<path d="M43.8 5.2c-0.2-0.4-0.6-0.8-1-1-0.2-0.2-0.6-0.2-0.8-0.2h-12c-1.2
    0-2 0.8-2 2s0.8 2 2 2h7.2l-18.6 18.6c-0.8 0.8-0.8 2 0 2.8 0.4 0.4 0.8
    0.6 1.4 0.6s1-0.2 1.4-0.6l18.6-18.6v7.2c0 1.2 0.8 2 2 2s2-0.8
    2-2v-12c0-0.2 0-0.6-0.2-0.8z"></path>
</svg>`,s.append(i),n.append(s);let a=document.createElement("div");a.classList.add("afcrc-helper-request-info");let l=document.createElement("span");l.style.color="dimgray",l.textContent="None";let d=document.createElement("span");d.style.color="dimgray",d.textContent="Unknown";let c=document.createElement("div"),b=document.createElement("b");b.textContent="Reason: ",c.append(b),t.reason?c.append(t.reason):c.append(l.cloneNode(!0)),a.append(c);let y=document.createElement("div"),C=document.createElement("b");C.textContent="Source: ",y.append(C),t.source?y.append(t.source):y.append(l.cloneNode(!0)),a.append(y);let T=document.createElement("div"),E=document.createElement("b");if(E.textContent="Requester: ",T.append(E),t.requester){let u=document.createElement("a");u.target="_blank",u.href=t.requester.type==="user"?mw.util.getUrl(`User:${t.requester.name}`):mw.util.getUrl(`Special:Contributions/${t.requester.name}`),u.textContent=t.requester.name,T.append(u)}else T.append(d.cloneNode(!0));a.append(T),n.append(a),n.append(document.createElement("hr"));let g=document.createElement("div");g.classList.add("afcrc-helper-request-responder");let p=[];if(t.pages.length>1){let u=new OO.ui.ButtonWidget({id:"afcrc-helper-sync-all-with-first-button",label:"Sync all requests with first",icon:"recentChanges"});u.on("click",()=>{let O=this.actionsToTake[e].requests[t.pages[0]];for(let[R,k]of p.entries())R!==0&&k.updateFromAction(O)}),g.append(u.$element[0])}for(let u of t.pages){let O=new N(e,u,n,g,this);O.setUp(),p.push(O)}n.append(g),this.$body.append(n),this.updateSize()}updateRequestColor(e,t){let n=Object.values(this.actionsToTake[t].requests),s=n.every(l=>l.action==="accept"||l.action==="deny"),o=n.find(l=>l.action==="close")?.closingReason?.id,i=n.every(l=>l.action==="close"&&l.closingReason?.id===o),a="";if(s){let l=n.filter(c=>c.action==="accept").length,d=n.filter(c=>c.action==="deny").length;l>0&&d>0?a="#fff17e":l>0?a="#a0ffa0":a="#ffcece"}else i&&(o==="r"?a="#ffcece":o==="s"?a="#90c090":a="#b8b8b8");e.style.backgroundColor=a}async performSubtypeActions(e,t,n){if(this.actionsToTake.some(o=>Object.values(o.requests).some(i=>i.action!=="none"))){for(let{target:i,requests:a}of this.actionsToTake){let l=Object.values(a).some(p=>p.action==="accept"||p.action==="deny"),d=Object.values(a).every(p=>p.action==="accept"||p.action==="deny"),c=Object.values(a).find(p=>p.action==="close")?.closingReason?.id,b=Object.values(a).every(p=>p.action==="close"&&p.closingReason?.id===c),y=[],C=[],T=[],E=Object.keys(a).length;for(let[p,u]of Object.entries(a))switch(u.action){case"accept":{l&&!d?e.addLogEntry(`Not all requests to "${i}" were accepted or denied, the handling of "${p}" will be ignored.`,"warning"):(y.push(p),u.comment&&T.push([p,u.comment]),t.accepted++);break}case"deny":{l&&!d?e.addLogEntry(`Not all requests to "${i}" were accepted or denied, the handling of "${p}" is being ignored.`,"warning"):(C.push([p,u.denyReason]),t.denied++);break}case"comment":{u.comment?(T.push([p,u.comment]),t["commented on"]++):e.addLogEntry(`The request to create "${p}" \u2192 "${i}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{b?(u.comment&&T.push([p,u.comment]),t.closed++):e.addLogEntry(`Not all requests to "${i}" were closed with the same reason, the handling of "${p}" is being ignored.`,"warning");break}}let g={pageText:n,...Object.values(a)[0].originalText};if(T.length>0&&(g=this.modifySectionData(g,{append:this.mapComments(T,E===1,T.length===E)})),d){let p;if(y.length>0&&C.length>0){p="p";let u=`* {{subst:AfC redirect}} (${y.map(R=>`[[${R}]]`).join(", ")}) ~~~~`,O=this.mapDeniedReasons(C,!1,!1);for(let R of y)this.handleAcceptedRedirect(R,a[R],i);g=this.modifySectionData(g,{append:`${u}
${O}`})}else if(y.length>0){p="a";for(let u of y)this.handleAcceptedRedirect(u,a[u],i);g=this.modifySectionData(g,{append:`* {{subst:AfC redirect${y.length>1?"|all":""}}} ~~~~`})}else p="d",g=this.modifySectionData(g,{append:this.mapDeniedReasons(C,E===1,!0)});g=this.modifySectionData(g,{prepend:`{{AfC-c|${p}}}`,append:"{{AfC-c|b}}"})}else b&&(g=this.modifySectionData(g,{prepend:`{{AfC-c|${c}}}`,append:"{{AfC-c|b}}"}));n=g.pageText}if(this.beforeText+this.pageContent===n){e.addLogEntry("No requests have been handled (page content identical)!");return}let o=Object.entries(t).filter(([,i])=>i>0).map(([i,a])=>`${i} ${a}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:n,summary:`Handling AfC redirect requests (${o})${this.SCRIPT_MESSAGE}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}handleAcceptedRedirect(e,t,n){let s=t.redirectTemplates&&t.redirectTemplates.length>0?t.redirectTemplates.map(i=>{let a=t.redirectTemplateParameters?.find(c=>c.name===i);if(!a)return`{{${i}}}`;let l=a.parameters.findLastIndex((c,b)=>c.name===(b+1).toString()&&c.editor.getValue().trim()),d=a.parameters.map((c,b)=>{let y=c.editor.getValue().trim();return!y&&b>l?null:`|${c.name===(b+1).toString()?"":`${c.name}=`}${y}`}).filter(Boolean).join("");return`{{${i}${d}}}`}):null,o=mw.Title.newFromText(e);this.editsCreationsToMake.push({type:"create",isRedirect:!0,title:o.getPrefixedText(),text:`#REDIRECT [[${n}]]${s?`

{{Redirect category shell|
${s.join(`
`)}
}}`:""}`,summary:`Creating redirect to [[${n}]] as requested at [[WP:AFC/R]]${this.SCRIPT_MESSAGE}`},{type:"create",isRedirect:!1,title:o.getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.SCRIPT_MESSAGE}`})}}});var q,ae=x(()=>{"use strict";j();q=class extends OO.ui.TextInputWidget{supportsSortKey;validCategories=new Set;constructor(e,t=!1){super(e),OO.ui.mixin.LookupElement.call(this,e),this.supportsSortKey=t}getLookupRequest=()=>{let e=this.getValue().split("|")[0],t=$.Deferred();if(e||t.resolve([]),this.supportsSortKey){let s=this.getValue().split("|")[1];if(s&&this.validCategories.has(e)){let o=[{data:`${e}|${s}`,label:`${e} (with sort key "${s}")`}];t.resolve(o),this.emit("showing-values",o)}}let n=mw.Title.newFromText(e);return L.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:n?.getMainText()??e,generator:"allpages",prop:"categories"}).catch(()=>null).then(s=>{if(s?.query?.pages){let o=s.query.pages.filter(i=>!i.categories?.some(a=>a.title==="Category:Wikipedia soft redirected categories")).map(i=>{let a=i.title.split(":")[1];return this.supportsSortKey&&this.validCategories.add(a),{data:a,label:a}});this.emit("showing-values",o),t.resolve(o)}else t.resolve([])}),t.promise({abort(){}})};getLookupCacheDataFromResponse=e=>e??[];getLookupMenuOptionsFromData=e=>e.map(({data:t,label:n})=>new OO.ui.MenuOptionWidget({data:t,label:n}))};Object.assign(q.prototype,OO.ui.mixin.LookupElement.prototype)});var P,oe=x(()=>{"use strict";j();P=class extends OO.ui.TextInputWidget{constructor(e){super(e),OO.ui.mixin.LookupElement.call(this,e)}getLookupRequest=()=>{let e=this.getValue(),t=$.Deferred();e||t.resolve([]);let n=mw.Title.newFromText(e);return L.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:n?.getNamespaceId()??0,gapprefix:n?.getMainText()??e,generator:"allpages"}).catch(()=>null).then(s=>{if(s?.query?.pages){let o=s.query.pages.map(i=>({data:i.title,label:i.title}));this.emit("showing-values",o),t.resolve(o)}else t.resolve([])}),t.promise({abort(){}})};getLookupCacheDataFromResponse=e=>e??[];getLookupMenuOptionsFromData=e=>e.map(({data:t,label:n})=>new OO.ui.MenuOptionWidget({data:t,label:n}))};Object.assign(P.prototype,OO.ui.mixin.LookupElement.prototype)});var ie={};Y(ie,{default:()=>J});var J,se=x(()=>{"use strict";ae();K();oe();J=class extends A{parsedRequests=[];actionsToTake=[];parseSubtypeRequests(e,t){let n={},s=/:?Category:(.*?)(]]|$)/.exec(t)?.[1].trim();if(!s)return;n.category=s.replaceAll("_"," "),n.examples=[...(/example pages which belong to this category:(.*?)(parent category\/categories:|\n\[\[(special:contributions\/|user:))/is.exec(e)?.[1]??"").matchAll(/\*\s*(?:\[\[)?(.*?)(\||]]|\s*?\n)/g)].map(d=>d[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean),n.parents=[...(/parent category\/categories:(.*?)(\n\n|\n\[\[(special:contributions\/|user:))/is.exec(e)?.[1]??"").matchAll(/(?<!\|)#?:?Category:(.*?)(\||]]|\s*?\n)/g)].map(d=>d[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);let o=e.indexOf("[[User:"),i=e.indexOf("[[User talk:"),a=e.indexOf("[[Special:Contributions/"),l=Math.min(...[o,i,a].filter(d=>d!==-1));n.requester=l===Number.POSITIVE_INFINITY?null:l===a?{type:"ip",name:/\[\[Special:Contributions\/(.*?)(\||]])/.exec(e)[1].trim()}:{type:"user",name:/\[\[User(?: talk)?:(.*?)(\||]])/.exec(e)[1].trim()},n.requester?.name||(n.requester=null),this.parsedRequests.push(n),this.actionsToTake.push({category:n.category,categorizedPages:n.examples,parents:n.parents,categoriesToRemove:[...n.parents],originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"})}loadSubtypeElements(e){let t=this.parsedRequests[e],n=document.createElement("details");n.classList.add("afcrc-helper-request"),n.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));let s=document.createElement("summary");s.innerHTML=`<b>Category:${t.category}</b>`,n.append(s);let o=document.createElement("div");o.classList.add("afcrc-helper-request-info");let i=document.createElement("span");i.style.color="dimgray",i.textContent="None";let a=document.createElement("span");a.style.color="dimgray",a.textContent="Unknown";let l=document.createElement("div"),d=document.createElement("b");if(d.textContent="Examples: ",l.append(d),t.examples.length>0)for(let[r,m]of t.examples.entries()){let h=document.createElement("a");h.target="_blank",h.href=mw.util.getUrl(m),h.textContent=m,l.append(h),r!==t.examples.length-1&&l.append(", ")}else l.append(i.cloneNode(!0));o.append(l);let c=document.createElement("div"),b=document.createElement("b");if(b.textContent="Parents: ",c.append(b),t.parents.length>0)for(let[r,m]of t.parents.entries()){let h=document.createElement("a");h.target="_blank",h.href=mw.util.getUrl(`Category:${m}`),h.textContent=m,c.append(h),r!==t.parents.length-1&&c.append(", ")}else c.append(i.cloneNode(!0));o.append(c);let y=document.createElement("div"),C=document.createElement("b");if(C.textContent="Requester: ",y.append(C),t.requester){let r=document.createElement("a");r.target="_blank",r.href=t.requester.type==="user"?mw.util.getUrl(`User:${t.requester.name}`):mw.util.getUrl(`Special:Contributions/${t.requester.name}`),r.textContent=t.requester.name,y.append(r)}else y.append(a.cloneNode(!0));o.append(y),n.append(o),n.append(document.createElement("hr"));let T=document.createElement("div");T.classList.add("afcrc-helper-request-responder");let E=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(r=>new OO.ui.RadioOptionWidget({data:r.toLowerCase(),label:r}))});E.selectItemByLabel("None"),E.on("choose",r=>{setTimeout(()=>this.updateSize(),0);let m=r.getData();if(this.actionsToTake[e].action=m,["comment","close"].includes(m)){G.$element.show();let h=B.getValue().trim();h?this.actionsToTake[e].comment=h:delete this.actionsToTake[e].comment}else G.$element.hide(),delete this.actionsToTake[e].comment;switch(this.updateRequestColor(n,e),O.$element.hide(),F.$element.hide(),U.$element.hide(),V.$element.hide(),_.$element.hide(),m){case"accept":{O.$element.show(),F.$element.show(),U.$element.show();break}case"deny":{V.$element.show();break}case"close":{_.$element.show();break}}});let g=new P({placeholder:"Add pages here"});g.on("change",()=>{let r=g.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^:/,""),r.length>0&&g.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),g.on("showing-values",r=>{for(let m of r)p.addAllowedValue(m.data)});let p=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:g});p.on("change",r=>{let m=r.map(w=>w.getData()),h=m.toSorted((w,M)=>w.toLowerCase().localeCompare(M.toLowerCase()));if(m.join(";")!==h.join(";")){let w=r.at(-1);p.reorder(w,h.indexOf(w.getData()))}this.actionsToTake[e].categorizedPages=h});let{categorizedPages:u}=this.actionsToTake[e];for(let r of u)p.addAllowedValue(r);p.setValue(u);let O=new OO.ui.FieldLayout(p,{align:"inline",label:"Pages to categorize:"});O.$element.hide();let R=new q({placeholder:"Add categories here"});R.on("change",()=>{let r=R.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^Category:/,""),r.length>0&&R.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),R.on("showing-values",r=>{for(let m of r)k.addAllowedValue(m.data)});let k=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:R});k.on("change",r=>{let m=r.map(w=>w.getData()),h=m.toSorted((w,M)=>w.toLowerCase().localeCompare(M.toLowerCase()));if(m.join(";")!==h.join(";")){let w=r.at(-1);k.reorder(w,h.indexOf(w.getData()))}this.actionsToTake[e].categoriesToRemove=h});let{parents:H}=this.actionsToTake[e];for(let r of H)k.addAllowedValue(r);k.setValue(H);let F=new OO.ui.FieldLayout(k,{align:"inline",label:"Categories to remove from pages to categorize:"});F.$element.hide();let v=new q({placeholder:"Add categories here"},!0);v.on("change",()=>{let r=v.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^Category:/,""),r.length>0&&v.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),v.on("showing-values",r=>{for(let m of r)S.addAllowedValue(m.data)});let S=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:v});S.on("change",r=>{let m=r.map(w=>w.getData()),h=m.toSorted((w,M)=>w.toLowerCase().localeCompare(M.toLowerCase()));if(m.join(";")!==h.join(";")){let w=r.at(-1);S.reorder(w,h.indexOf(w.getData()))}this.actionsToTake[e].parents=h});for(let r of H)S.addAllowedValue(r),v.validCategories.add(r);S.setValue(H);let U=new OO.ui.FieldLayout(S,{align:"inline",label:"Parent categories:"});U.$element.hide();let I=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing categories"],["empty","empty submissions"],["unlikely","categories that are unlikely to have enough pages"],["notcategory","page creation requests"],["notenglish","requests not in English"]].map(([r,m])=>({data:`autofill:${r}`,label:`Autofilled text for ${m}`}))});I.on("change",()=>{this.actionsToTake[e].denyReason=I.getValue()||"autofill:unlikely"}),I.setValue("autofill:unlikely"),I.getMenu().selectItemByData("autofill:unlikely");let V=new OO.ui.FieldLayout(I,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'});V.$element.hide();let z=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([r,m])=>new OO.ui.MenuOptionWidget({data:m,label:r}))}});z.getMenu().on("choose",r=>{this.actionsToTake[e].closingReason={name:r.getLabel(),id:r.getData()},this.updateRequestColor(n,e)}),z.getMenu().chooseItem(z.getMenu().findItemFromData("s"));let _=new OO.ui.FieldLayout(z,{align:"inline",label:"Closing reason:"});_.$element.hide();let B=new OO.ui.TextInputWidget;B.on("change",()=>{let r=B.getValue().trim();r?this.actionsToTake[e].comment=r:delete this.actionsToTake[e].comment});let G=new OO.ui.FieldLayout(B,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});G.$element.hide(),T.append(E.$element[0],O.$element[0],F.$element[0],U.$element[0],V.$element[0],_.$element[0],G.$element[0]),n.append(T),this.$body.append(n),this.updateSize()}updateRequestColor(e,t){let{action:n}=this.actionsToTake[t],s="";n==="accept"?s="#a0ffa0":n==="deny"?s="#ffcece":n==="close"&&(this.actionsToTake[t].closingReason?.id==="r"?s="#ffcece":this.actionsToTake[t].closingReason?.id==="s"?s="#90c090":s="#b8b8b8"),e.style.backgroundColor=s}async performSubtypeActions(e,t,n){if(this.actionsToTake.some(o=>o.action!=="none")){for(let i of this.actionsToTake){let a={pageText:n,...i.originalText};switch(i.action){case"accept":{a=this.modifySectionData(a,{prepend:"{{AfC-c|a}}",append:`* {{subst:AfC category}} ~~~~
{{AfC-c|b}}`}),this.handleAcceptedCategory(i),t.accepted++;break}case"deny":{a=this.modifySectionData(a,{prepend:"{{AfC-c|d}}",append:`* ${this.formatDeniedReason(i.denyReason)} ~~~~
{{AfC-c|b}}`}),t.denied++;break}case"comment":{i.comment?(a=this.modifySectionData(a,{append:`* {{AfC comment|1=${i.comment}}} ~~~~`}),t["commented on"]++):e.addLogEntry(`The request to create "${i.category}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{a=this.modifySectionData(a,{prepend:`{{AfC-c|${i.closingReason.id}}}`,append:(i.comment?`* {{AfC comment|1=${i.comment}}} ~~~~`:"")+`
{{AfC-c|b}}`}),t.closed++;break}}n=a.pageText}if(this.beforeText+this.pageContent===n){e.addLogEntry("No requests have been handled (page content identical)!");return}let o=Object.entries(t).filter(([,i])=>i>0).map(([i,a])=>`${i} ${a}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:n,summary:`Handling AfC category requests (${o})${this.SCRIPT_MESSAGE}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}handleAcceptedCategory(e){this.editsCreationsToMake.push({type:"create",isRedirect:!1,title:`Category:${e.category}`,text:e.parents.map(t=>`[[Category:${t}]]`).join(`
`),summary:`Creating category as requested at [[WP:AFC/C]]${this.SCRIPT_MESSAGE}`},{type:"create",isRedirect:!1,title:`Category talk:${e.category}`,text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.SCRIPT_MESSAGE}`},...e.categorizedPages.map(t=>({type:"edit",title:t,transform:({content:n})=>{let s=!1;n=n.replace(/((\[\[:?[Cc]ategory:.+?]]\n?)+)/,o=>{s=!0;let i=o.endsWith(`
`);return`${o}${i?"":`
`}[[Category:${e.category}]]${i?`
`:""}`}),s||(n+=`
[[Category:${e.category}]]`);for(let o of e.categoriesToRemove)n=n.replaceAll(new RegExp(`\\[\\[:?[Cc]ategory:${o}(\\|.*?)?\\]\\]
?`,"gi"),"");return{text:n,summary:`Adding page to [[:Category:${e.category}]] as requested at [[WP:AFC/C]]${this.SCRIPT_MESSAGE}`}}})))}}});var X=`body.afcrc-helper-open #mw-teleport-target{z-index:500}.afcrc-helper-request{margin:10px;border-radius:5px;background-color:#eee;padding:5px;color:#202122}.afcrc-helper-request summary{cursor:pointer}.afcrc-helper-target-editor{min-width:1ch;max-width:calc(100% - 4ch);font-family:monospace}.afcrc-helper-external-link{-webkit-text-decoration:none!important;text-decoration:none!important}.afcrc-helper-external-link svg{display:inline-block;width:1em;height:1em;fill:currentcolor}.afcrc-helper-request-info,.afcrc-helper-request-responder{margin:5px}.afcrc-helper-request-info>div,.afcrc-helper-request-responder>div{margin-top:8px;margin-bottom:8px}.afcrc-helper-request-responder>div:last-of-type{margin-bottom:0}.afcrc-helper-request-responder .oo-ui-fieldLayout{margin-left:8px}.afcrc-helper-request-responder .oo-ui-fieldLayout-header{width:-moz-max-content;width:max-content}#afcrc-helper-sync-all-with-first-button{margin-bottom:5px}.afcrc-helper-action-radio{margin-top:8px}.afcrc-helper-action-radio .oo-ui-radioOptionWidget{display:inline;padding:8px}.afcrc-closing-reason-input,.afcrc-comment-input{max-width:50%}.afcrc-helper-redirect-possibilities:after{content:" (redirect with possibilities)";font-style:italic}.afcrc-helper-template-parameters-container,.afcrc-helper-template-parameters-container details{margin-top:10px;margin-bottom:10px;border:1px solid #a2a9b1;border-radius:2px;background-color:#fff;padding:5px}.afcrc-helper-template-parameters-container{margin-left:8px}.afcrc-helper-template-parameters-container summary{cursor:pointer;font-weight:700}.afcrc-helper-template-parameters-container details{margin-top:5px;margin-bottom:5px;background-color:#e2e2e2}.afcrc-helper-template-parameters-container details .oo-ui-fieldLayout-header{max-width:100%!important}#afcrc-helper-no-templates-message{padding:5px}.afcrc-helper-actions-container div{margin-top:8px;margin-bottom:8px}
`;mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],async()=>{let{default:f}=await Promise.resolve().then(()=>(ne(),te)),{default:e}=await Promise.resolve().then(()=>(se(),ie)),t=mw.config.get("wgPageName").replaceAll("_"," "),n=t==="Wikipedia:Articles for creation/Redirects";if(!n&&!(t==="Wikipedia:Articles for creation/Categories"))return;let o=n?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${o} creation requests`,"afcrc-helper").addEventListener("click",a=>{a.preventDefault(),mw.util.addCSS(X);let l=new OO.ui.WindowManager;document.body.append(l.$element[0]);let d=o==="redirect"?f:e,c=new d(o,t,window.afcrcConfiguration?.createdPageWatchMethod);l.addWindows([c]),c.open(),c.load()})});})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
