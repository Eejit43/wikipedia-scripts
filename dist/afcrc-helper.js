// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper/afcrc-helper.ts

"use strict";(()=>{var se=Object.defineProperty;var k=(f,e)=>()=>(f&&(e=f(f=0)),e);var J=(f,e)=>{for(var t in e)se(f,t,{get:e[t],enumerable:!0})};var S,G=k(()=>{"use strict";S=class f extends OO.ui.Dialog{contentLayout;logOutput;closeButton;constructor(){super({size:"large"}),f.static.name="ActionsDialog",f.static.title="Actions"}initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);addLogEntry(e,t="notice"){let n=new OO.ui.MessageWidget({type:t,inline:!0,label:new OO.ui.HtmlSnippet(e)});this.logOutput.append(n.$element[0]),this.updateSize(),this.closeButton.scrollElementIntoView()}showReload(){this.closeButton.$element.remove();let e=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});e.on("click",()=>{window.location.reload()}),this.contentLayout.$element.append(e.$element)}};Object.assign(S.prototype,OO.ui.Dialog.prototype)});var E,Q=k(()=>{"use strict";G();E=class f extends OO.ui.ProcessDialog{api=new mw.Api;scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";requestPageType;pageTitle;createdPageWatchMethod;beforeText;pageContent;parsedRequests;editsCreationsToMake=[];constructor(e,t,n){super({size:"large"}),f.static.name="AfcrcHelperDialog",f.static.title="afcrc-helper",f.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=t,this.requestPageType=e,this.createdPageWatchMethod=n&&["nochange","preferences","unwatch","watch"].includes(n)?n:"preferences",document.body.classList.add("afcrc-helper-open")}getActionProcess=e=>!e||e==="cancel"?new OO.ui.Process(()=>{this.parsedRequests.length>0?OO.ui.confirm("Are you sure you want to close? All changes will be discarded.").then(t=>t?this.close():null):this.close()}):e==="save"?new OO.ui.Process(()=>{this.performActions()}):f.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>f.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty(),document.body.classList.remove("afcrc-helper-open")});async load(){let e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle});this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=/^(.*?)==/s.exec(this.pageContent)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==");let e=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(t=>t[0]);for(let t of e){if(/{{afc-c\|/i.test(t))continue;let s=/^==(.*?)==$/m.exec(t)[1].trim();this.parseSubtypeRequests(t,s)}}loadInputElements(){if(this.parsedRequests.length>0){let e=0,t=()=>{let s=Math.min(e+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${e+1}-${s}/${this.parsedRequests.length} requests)`);for(let i=e;i<s;i++)this.loadSubtypeElements(i);s<this.parsedRequests.length?(e=s,setTimeout(t,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};t()}else{let e=new OO.ui.MessageWidget({type:"notice",label:"No valid requests to handle!"}),t=new OO.ui.PanelLayout({padded:!0,expanded:!1});t.$element.append(e.$element),this.$body.append(t.$element),this.updateSize()}}async performActions(){let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let t=new S;e.addWindows([t]),t.open();let n={accepted:0,denied:0,"commented on":0,closed:0},s=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();this.performSubtypeActions(t,n,s)}formatDeniedReason(e){let t=e.startsWith("autofill:")?/autofill:(\w+)/.exec(e)[1]:`decline|2=${e}`,n=e.startsWith("autofill:")&&e.includes(",")?" "+e.slice(e.indexOf(",")+1).trim():"";return`{{subst:AfC ${this.requestPageType}|${t}}}${n}`}mapDeniedReasons(e,t,n){if(t)return`* ${this.formatDeniedReason(e[0][1])} ~~~~`;let s={};for(let[o,a]of e)a in s||(s[a]=[]),s[a].push(o);let i=Object.entries(s);return i.map(([o,a])=>`* ${this.formatDeniedReason(o)}${i.length>1||!n?` (${a.map(l=>`[[${l}]]`).join(", ")})`:""} ~~~~`).join(`
`)}mapComments(e,t,n){if(t)return`* {{AfC comment|1=${e[0][1]}}} ~~~~`;let s={};for(let[o,a]of e)a in s||(s[a]=[]),s[a].push(o);let i=Object.entries(s);return i.map(([o,a])=>`* {{AfC comment|1=${o}}}${i.length>1||!n?` (${a.map(l=>`[[${l}]]`).join(", ")})`:""} ~~~~`).join(`
`)}modifySectionData(e,{prepend:t,append:n}){let{fullSectionText:s,sectionText:i}=e;return t&&(e.sectionText=t+`
`+e.sectionText),n&&(e.sectionText+=`
`+n),e.fullSectionText=e.fullSectionText.replace(i,e.sectionText),e.pageText=e.pageText.replace(s,e.fullSectionText),e}async makeAllEditsCreations(e){for(let[t,n]of this.editsCreationsToMake.entries()){let s=n.type==="edit"?this.api.edit(n.title,n.transform):this.api.create(n.title,{summary:n.summary,watchlist:this.createdPageWatchMethod},n.text),i=document.createElement("a");i.target="_blank",i.href=mw.util.getUrl(n.title,"isRedirect"in n&&n.isRedirect?{redirect:"no"}:void 0),i.textContent=n.title;let o=`afcrc-helper-action-result-${t}`;e.addLogEntry(`${n.type==="edit"?"Editing":"Creating"} ${i.outerHTML}... <span id="${o}"></span>`),await s.then(a=>{if(a.result==="Success"){let l;"nochange"in a||(l=document.createElement("a"),l.target="_blank",l.href=mw.util.getUrl(`Special:Diff/${a.oldrevid?`${a.oldrevid}/`:""}${a.newrevid}`),l.textContent="diff");let p=document.querySelector(`#${o}`);l?p.append("(done, see ",l,")"):p.textContent="(done, no changes)"}}).catch(async(a,l)=>{a==="ratelimited"?(e.addLogEntry(`Rate limited. Waiting for 70 seconds... (resuming at ${new Date(Date.now()+7e4).toLocaleTimeString()})`,"warning"),await new Promise(p=>setTimeout(p,7e4)),e.addLogEntry("Continuing...","success"),await s.catch((p,d)=>{e.addLogEntry(`Error ${n.type==="edit"?"editing":"creating"} ${i.outerHTML}: ${d?.error.info??"Unknown error"} (${p}).`,"error")})):e.addLogEntry(`Error ${n.type==="edit"?"editing":"creating"} ${i.outerHTML}: ${l?.error.info??"Unknown error"} (${a}).`,"error")})}}parseSubtypeRequests(e,t){throw new Error("Not implemented.")}loadSubtypeElements(e){throw new Error("Not implemented.")}updateRequestColor(e,t){throw new Error("Not implemented.")}async performSubtypeActions(e,t,n){throw new Error("Not implemented.")}};Object.assign(E.prototype,OO.ui.ProcessDialog.prototype)});var W,Y=k(()=>{"use strict";W=class{titleIndex;title;detailsElement;responderElement;dialog;templateParametersEditor;templateEditorsInfo=[];commentInput;tagSelectLayout;denyReasonLayout;closingReasonLayout;commentLayout;constructor(e,t,n,s,i){this.titleIndex=e,this.title=t,this.detailsElement=n,this.responderElement=s,this.dialog=i}setUp(){let e=document.createElement("div"),t=document.createElement("b");t.textContent=this.title,e.append(t);let n=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(s=>new OO.ui.RadioOptionWidget({data:s,label:s}))});n.selectItemByLabel("None"),n.on("choose",s=>{this.handleActionChange(s)}),this.loadCommentLayout(),e.append(n.$element[0],this.commentLayout.$element[0]),this.responderElement.append(e)}handleActionChange(e){setTimeout(()=>this.dialog.updateSize(),0);let t=e.getData().toLowerCase();switch(this.updateActionsToTake({action:t}),this.dialog.updateRequestColor(this.detailsElement,this.titleIndex),this.tagSelectLayout&&this.tagSelectLayout.$element.hide(),this.templateParametersEditor&&(this.templateParametersEditor.style.display="none"),this.denyReasonLayout&&this.denyReasonLayout.$element.hide(),this.closingReasonLayout&&this.closingReasonLayout.$element.hide(),t){case"accept":{(!this.tagSelectLayout||!this.templateParametersEditor)&&this.loadTagSelectAndParametersEditor(),this.tagSelectLayout.$element.show(),this.templateParametersEditor.style.display="block";break}case"deny":{this.denyReasonLayout||this.loadDenyReasonLayout(),this.denyReasonLayout.$element.show();break}case"close":{this.closingReasonLayout||this.loadClosingReasonLayout(),this.closingReasonLayout.$element.show();break}}if(["accept","comment","close"].includes(t)){this.commentLayout.$element.show();let n=this.commentInput.getValue().trim();n?this.updateActionsToTake({comment:n}):this.updateActionsToTake({comment:void 0})}else this.commentLayout.$element.hide(),this.updateActionsToTake({comment:void 0})}loadTagSelectAndParametersEditor(){let e=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.entries(this.dialog.redirectTemplates).map(([s,{redirect:i}])=>{if(!i)return{data:s,label:s};let o=new OO.ui.HtmlSnippet(`<span class="afcrc-helper-redirect-possibilities">${s}</span>`);return{data:s,label:o}})});e.getMenu().filterMode="substring",e.on("change",s=>{let i=s.map(l=>l.getData()),o=i.toSorted((l,p)=>l.toLowerCase().localeCompare(p.toLowerCase()));if(i.join(";")!==o.join(";")){let l=s.at(-1);e.reorder(l,o.indexOf(l.getData()))}this.updateActionsToTake({redirectTemplates:o});let a=0;for(let l of this.templateEditorsInfo){let p=o.includes(l.name);l.details.style.display=p?"block":"none",p&&a++}t.textContent=`Template parameters (${a>0?`for ${a} template${a>1?"s":""}`:"none to show"})`,n.style.display=a>0?"none":"block"}),this.tagSelectLayout=new OO.ui.FieldLayout(e,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates:"}),this.commentLayout.$element[0].before(this.tagSelectLayout.$element[0]),this.templateParametersEditor=document.createElement("details"),this.templateParametersEditor.classList.add("afcrc-helper-template-parameters-container");let t=document.createElement("summary");t.textContent="Template parameters (none to show)",this.templateParametersEditor.append(t);for(let[s,i]of Object.entries(this.dialog.redirectTemplates)){let o=Object.entries(i.parameters);if(o.length===0)continue;let a=document.createElement("details");a.style.display="none";let l=document.createElement("summary");l.textContent=s,a.append(l);let p={name:s,details:a,parameters:[]};for(let[d,u]of o){let g=new OO.ui.TextInputWidget({placeholder:u.default?.toString(),required:u.required}),R=new OO.ui.FieldLayout(g,{label:new OO.ui.HtmlSnippet(`${d}${!u.label||d.toLowerCase()===u.label.toLowerCase()?"":` (${u.label})`}${u.description?` (${u.description})`:""} (type: ${u.type}) ${u.suggested?" (suggested)":""}${u.example?` (example: "${u.example}")`:""}`),align:"inline"});a.append(R.$element[0]),p.parameters.push({name:d,aliases:u.aliases,editor:g})}this.templateParametersEditor.append(a),this.templateEditorsInfo.push(p)}this.updateActionsToTake({redirectTemplateParameters:this.templateEditorsInfo});let n=document.createElement("div");n.id="afcrc-helper-no-templates-message",n.textContent="No templates with parameters to display!",this.templateParametersEditor.append(n),this.commentLayout.$element[0].before(this.templateParametersEditor)}loadDenyReasonLayout(){let e=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["unrelated","apparently unrelated titles"],["notredirect","article creation requests"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([t,n])=>({data:`autofill:${t}`,label:`Autofilled text for ${n}`}))});e.on("change",t=>{this.updateActionsToTake({denyReason:t||"autofill:unlikely"})}),e.setValue("autofill:unlikely"),e.getMenu().selectItemByData("autofill:unlikely"),this.denyReasonLayout=new OO.ui.FieldLayout(e,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'}),this.denyReasonLayout.$element.hide(),this.commentLayout.$element[0].before(this.denyReasonLayout.$element[0])}loadClosingReasonLayout(){let e=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([t,n])=>new OO.ui.MenuOptionWidget({data:n,label:t}))}});e.getMenu().selectItemByData("r"),e.getMenu().on("choose",t=>{this.updateActionsToTake({closingReason:{name:t.getLabel(),id:t.getData()}}),this.dialog.updateRequestColor(this.detailsElement,this.titleIndex)}),this.closingReasonLayout=new OO.ui.FieldLayout(e,{align:"inline",label:"Closing reason:"}),this.closingReasonLayout.$element.hide(),this.commentLayout.$element[0].before(this.closingReasonLayout.$element[0])}loadCommentLayout(){this.commentInput=new OO.ui.TextInputWidget,this.commentInput.on("change",e=>{let t=e.trim();t?this.updateActionsToTake({comment:t}):this.updateActionsToTake({comment:void 0})}),this.commentLayout=new OO.ui.FieldLayout(this.commentInput,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"}),this.commentLayout.$element.hide()}updateActionsToTake(e){Object.assign(this.dialog.actionsToTake[this.titleIndex].requests[this.title],e)}}});var X={};J(X,{default:()=>B});var B,Z=k(()=>{"use strict";Q();Y();B=class extends E{redirectTemplates;parsedRequests=[];actionsToTake=[];async load(){let e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"});this.redirectTemplates=JSON.parse(e.query.pages[0]?.revisions?.[0]?.slots?.main?.content||"{}"),super.load()}parseSubtypeRequests(e,t){let n={},s=t.matchAll(/\[\[(.*?)]]/g).toArray().map(l=>l[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);if(s.length===0)return;n.pages=s;let i=/Target of redirect: ?\[\[(.*?)]]/.exec(e)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!i)return;n.target=i,n.reason=/reason: ?(.*?)\*source(?: \(if applicable\))?:/is.exec(e)?.[1].trim()??"",n.source=/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is.exec(e)?.[1].trim()??"";let o=e.match(e.includes("<references />")?/<references \/>\n+(.*)/:new RegExp(`(?:<references \\/>${n.source?`|${n.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))?.[1].trim(),a=o?/(?:Special:Contributions\/|User(?: talk)?:)(.*?)\|/.exec(o)?.[1].trim():null;n.requester=o&&a?{type:/\[\[User( talk)?:/.test(o)?"user":"ip",name:a}:null,this.parsedRequests.push(n),this.actionsToTake.push({target:n.target,requests:Object.fromEntries(s.map(l=>[l,{originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"}]))})}loadSubtypeElements(e){let t=this.parsedRequests[e],n=document.createElement("details");n.classList.add("afcrc-helper-request"),n.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));let s=document.createElement("summary");s.innerHTML=t.pages.map(c=>`<b>${c}</b>`).join(", ")+" \u2192 ",s.addEventListener("keyup",c=>{document.activeElement?.tagName==="INPUT"&&c.key===" "&&c.preventDefault()});let i=document.createElement("input");i.classList.add("afcrc-helper-target-editor"),i.style.width=`${t.target.length}ch`,i.value=t.target,i.addEventListener("input",()=>{i.value=i.value.replaceAll("_"," "),i.style.width=`${i.value.length}ch`,this.actionsToTake[e].target=i.value,o.href=mw.util.getUrl(i.value)}),s.append(i);let o=document.createElement("a");o.classList.add("afcrc-helper-external-link"),o.target="_blank",o.href=mw.util.getUrl(t.target),o.innerHTML=`
<svg viewbox="0 0 48 48">
<path d="M36 24c-1.2 0-2 0.8-2 2v12c0 1.2-0.8 2-2 2h-22c-1.2
    0-2-0.8-2-2v-22c0-1.2 0.8-2 2-2h12c1.2 0 2-0.8 2-2s-0.8-2-2-2h-12c-3.4
    0-6 2.6-6 6v22c0 3.4 2.6 6 6 6h22c3.4 0 6-2.6
    6-6v-12c0-1.2-0.8-2-2-2z"></path>
<path d="M43.8 5.2c-0.2-0.4-0.6-0.8-1-1-0.2-0.2-0.6-0.2-0.8-0.2h-12c-1.2
    0-2 0.8-2 2s0.8 2 2 2h7.2l-18.6 18.6c-0.8 0.8-0.8 2 0 2.8 0.4 0.4 0.8
    0.6 1.4 0.6s1-0.2 1.4-0.6l18.6-18.6v7.2c0 1.2 0.8 2 2 2s2-0.8
    2-2v-12c0-0.2 0-0.6-0.2-0.8z"></path>
</svg>`,s.append(o),n.append(s);let a=document.createElement("div");a.classList.add("afcrc-helper-request-info");let l=document.createElement("span");l.style.color="dimgray",l.textContent="None";let p=document.createElement("span");p.style.color="dimgray",p.textContent="Unknown";let d=document.createElement("div"),u=document.createElement("b");u.textContent="Reason: ",d.append(u),t.reason?d.append(t.reason):d.append(l.cloneNode(!0)),a.append(d);let g=document.createElement("div"),R=document.createElement("b");R.textContent="Source: ",g.append(R),t.source?g.append(t.source):g.append(l.cloneNode(!0)),a.append(g);let T=document.createElement("div"),O=document.createElement("b");if(O.textContent="Requester: ",T.append(O),t.requester){let c=document.createElement("a");c.target="_blank",c.href=t.requester.type==="user"?mw.util.getUrl(`User:${t.requester.name}`):mw.util.getUrl(`Special:Contributions/${t.requester.name}`),c.textContent=t.requester.name,T.append(c)}else T.append(p.cloneNode(!0));a.append(T),n.append(a),n.append(document.createElement("hr"));let h=document.createElement("div");h.classList.add("afcrc-helper-request-responder");for(let c of t.pages)new W(e,c,n,h,this).setUp();n.append(h),this.$body.append(n),this.updateSize()}updateRequestColor(e,t){let n=Object.values(this.actionsToTake[t].requests),s=n.every(l=>l.action==="accept"||l.action==="deny"),i=n.find(l=>l.action==="close")?.closingReason?.id,o=n.every(l=>l.action==="close"&&l.closingReason?.id===i),a="";if(s){let l=n.filter(d=>d.action==="accept").length,p=n.filter(d=>d.action==="deny").length;l>0&&p>0?a="#fff17e":l>0?a="#a0ffa0":a="#ffcece"}else o&&(i==="r"?a="#ffcece":i==="s"?a="#90c090":a="#b8b8b8");e.style.backgroundColor=a}async performSubtypeActions(e,t,n){if(this.actionsToTake.some(i=>Object.values(i.requests).some(o=>o.action!=="none"))){for(let{target:o,requests:a}of this.actionsToTake){let l=Object.values(a).some(c=>c.action==="accept"||c.action==="deny"),p=Object.values(a).every(c=>c.action==="accept"||c.action==="deny"),d=Object.values(a).find(c=>c.action==="close")?.closingReason?.id,u=Object.values(a).every(c=>c.action==="close"&&c.closingReason?.id===d),g=[],R=[],T=[],O=Object.keys(a).length;for(let[c,w]of Object.entries(a))switch(w.action){case"accept":{l&&!p?e.addLogEntry(`Not all requests to "${o}" were accepted or denied, the handling of "${c}" will be ignored.`,"warning"):(g.push(c),w.comment&&T.push([c,w.comment]),t.accepted++);break}case"deny":{l&&!p?e.addLogEntry(`Not all requests to "${o}" were accepted or denied, the handling of "${c}" is being ignored.`,"warning"):(R.push([c,w.denyReason]),t.denied++);break}case"comment":{w.comment?(T.push([c,w.comment]),t["commented on"]++):e.addLogEntry(`The request to create "${c}" \u2192 "${o}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{u?(w.comment&&T.push([c,w.comment]),t.closed++):e.addLogEntry(`Not all requests to "${o}" were closed with the same reason, the handling of "${c}" is being ignored.`,"warning");break}}let h={pageText:n,...Object.values(a)[0].originalText};if(T.length>0&&(h=this.modifySectionData(h,{append:this.mapComments(T,O===1,T.length===O)})),p){let c;if(g.length>0&&R.length>0){c="p";let w=`* {{subst:AfC redirect}} (${g.map(C=>`[[${C}]]`).join(", ")}) ~~~~`,x=this.mapDeniedReasons(R,!1,!1);for(let C of g)this.handleAcceptedRedirect(C,a[C],o);h=this.modifySectionData(h,{append:`${w}
${x}`})}else if(g.length>0){c="a";for(let w of g)this.handleAcceptedRedirect(w,a[w],o);h=this.modifySectionData(h,{append:`* {{subst:AfC redirect${g.length>1?"|all":""}}} ~~~~`})}else c="d",h=this.modifySectionData(h,{append:this.mapDeniedReasons(R,O===1,!0)});h=this.modifySectionData(h,{prepend:`{{AfC-c|${c}}}`,append:"{{AfC-c|b}}"})}else u&&(h=this.modifySectionData(h,{prepend:`{{AfC-c|${d}}}`,append:"{{AfC-c|b}}"}));n=h.pageText}if(this.beforeText+this.pageContent===n){e.addLogEntry("No requests have been handled (page content identical)!");return}let i=Object.entries(t).filter(([,o])=>o>0).map(([o,a])=>`${o} ${a}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:n,summary:`Handling AfC redirect requests (${i})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}handleAcceptedRedirect(e,t,n){let s=t.redirectTemplates&&t.redirectTemplates.length>0?t.redirectTemplates.map(o=>{let a=t.redirectTemplateParameters?.find(d=>d.name===o);if(!a)return`{{${o}}}`;let l=a.parameters.findLastIndex((d,u)=>d.name===(u+1).toString()&&d.editor.getValue().trim()),p=a.parameters.map((d,u)=>{let g=d.editor.getValue().trim();return!g&&u>l?null:`|${d.name===(u+1).toString()?"":`${d.name}=`}${g}`}).filter(Boolean).join("");return`{{${o}${p}}}`}):null,i=mw.Title.newFromText(e);this.editsCreationsToMake.push({type:"create",isRedirect:!0,title:i.getPrefixedText(),text:`#REDIRECT [[${n}]]${s?`

{{Redirect category shell|
${s.join(`
`)}
}}`:""}`,summary:`Creating redirect to [[${n}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:i.getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}}});var v,ee=k(()=>{"use strict";v=class extends OO.ui.TextInputWidget{api=new mw.Api;supportsSortKey;validCategories=new Set;constructor(e,t=!1){super(e),OO.ui.mixin.LookupElement.call(this,e),this.supportsSortKey=t}getLookupRequest=()=>{let e=this.getValue().split("|")[0],t=$.Deferred();if(e||t.resolve([]),this.supportsSortKey){let s=this.getValue().split("|")[1];if(s&&this.validCategories.has(e)){let i=[{data:`${e}|${s}`,label:`${e} (with sort key "${s}")`}];t.resolve(i),this.emit("showing-values",i)}}let n=mw.Title.newFromText(e);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:n?.getMainText()??e,generator:"allpages",prop:"categories"}).catch(()=>null).then(s=>{if(s?.query?.pages){let i=s.query.pages.filter(o=>!o.categories?.some(a=>a.title==="Category:Wikipedia soft redirected categories")).map(o=>{let a=o.title.split(":")[1];return this.supportsSortKey&&this.validCategories.add(a),{data:a,label:a}});this.emit("showing-values",i),t.resolve(i)}else t.resolve([])}),t.promise({abort(){}})};getLookupCacheDataFromResponse=e=>e??[];getLookupMenuOptionsFromData=e=>e.map(({data:t,label:n})=>new OO.ui.MenuOptionWidget({data:t,label:n}))};Object.assign(v.prototype,OO.ui.mixin.LookupElement.prototype)});var P,te=k(()=>{"use strict";P=class extends OO.ui.TextInputWidget{api=new mw.Api;constructor(e){super(e),OO.ui.mixin.LookupElement.call(this,e)}getLookupRequest=()=>{let e=this.getValue(),t=$.Deferred();e||t.resolve([]);let n=mw.Title.newFromText(e);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:n?.getNamespaceId()??0,gapprefix:n?.getMainText()??e,generator:"allpages"}).catch(()=>null).then(s=>{if(s?.query?.pages){let i=s.query.pages.map(o=>({data:o.title,label:o.title}));this.emit("showing-values",i),t.resolve(i)}else t.resolve([])}),t.promise({abort(){}})};getLookupCacheDataFromResponse=e=>e??[];getLookupMenuOptionsFromData=e=>e.map(({data:t,label:n})=>new OO.ui.MenuOptionWidget({data:t,label:n}))};Object.assign(P.prototype,OO.ui.mixin.LookupElement.prototype)});var ne={};J(ne,{default:()=>_});var _,ae=k(()=>{"use strict";ee();Q();te();_=class extends E{parsedRequests=[];actionsToTake=[];parseSubtypeRequests(e,t){let n={},s=/:?Category:(.*?)(]]|$)/.exec(t)?.[1].trim();if(!s)return;n.category=s.replaceAll("_"," "),n.examples=[...(/example pages which belong to this category:(.*?)(parent category\/categories:|\n\[\[(special:contributions\/|user:))/is.exec(e)?.[1]??"").matchAll(/\*\s*(?:\[\[)?(.*?)(\||]]|\s*?\n)/g)].map(p=>p[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean),n.parents=[...(/parent category\/categories:(.*?)(\n\n|\n\[\[(special:contributions\/|user:))/is.exec(e)?.[1]??"").matchAll(/(?<!\|)#?:?Category:(.*?)(\||]]|\s*?\n)/g)].map(p=>p[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);let i=e.indexOf("[[User:"),o=e.indexOf("[[User talk:"),a=e.indexOf("[[Special:Contributions/"),l=Math.min(...[i,o,a].filter(p=>p!==-1));n.requester=l===Number.POSITIVE_INFINITY?null:l===a?{type:"ip",name:/\[\[Special:Contributions\/(.*?)(\||]])/.exec(e)[1].trim()}:{type:"user",name:/\[\[User(?: talk)?:(.*?)(\||]])/.exec(e)[1].trim()},n.requester?.name||(n.requester=null),this.parsedRequests.push(n),this.actionsToTake.push({category:n.category,categorizedPages:n.examples,parents:n.parents,categoriesToRemove:[...n.parents],originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"})}loadSubtypeElements(e){let t=this.parsedRequests[e],n=document.createElement("details");n.classList.add("afcrc-helper-request"),n.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));let s=document.createElement("summary");s.innerHTML=`<b>Category:${t.category}</b>`,n.append(s);let i=document.createElement("div");i.classList.add("afcrc-helper-request-info");let o=document.createElement("span");o.style.color="dimgray",o.textContent="None";let a=document.createElement("span");a.style.color="dimgray",a.textContent="Unknown";let l=document.createElement("div"),p=document.createElement("b");if(p.textContent="Examples: ",l.append(p),t.examples.length>0)for(let[r,m]of t.examples.entries()){let y=document.createElement("a");y.target="_blank",y.href=mw.util.getUrl(m),y.textContent=m,l.append(y),r!==t.examples.length-1&&l.append(", ")}else l.append(o.cloneNode(!0));i.append(l);let d=document.createElement("div"),u=document.createElement("b");if(u.textContent="Parents: ",d.append(u),t.parents.length>0)for(let[r,m]of t.parents.entries()){let y=document.createElement("a");y.target="_blank",y.href=mw.util.getUrl(`Category:${m}`),y.textContent=m,d.append(y),r!==t.parents.length-1&&d.append(", ")}else d.append(o.cloneNode(!0));i.append(d);let g=document.createElement("div"),R=document.createElement("b");if(R.textContent="Requester: ",g.append(R),t.requester){let r=document.createElement("a");r.target="_blank",r.href=t.requester.type==="user"?mw.util.getUrl(`User:${t.requester.name}`):mw.util.getUrl(`Special:Contributions/${t.requester.name}`),r.textContent=t.requester.name,g.append(r)}else g.append(a.cloneNode(!0));i.append(g),n.append(i),n.append(document.createElement("hr"));let T=document.createElement("div");T.classList.add("afcrc-helper-request-responder");let O=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(r=>new OO.ui.RadioOptionWidget({data:r,label:r}))});O.selectItemByLabel("None"),O.on("choose",()=>{setTimeout(()=>this.updateSize(),0);let r=O.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[e].action=r,["comment","close"].includes(r)){z.$element.show();let m=V.getValue().trim();m?this.actionsToTake[e].comment=m:delete this.actionsToTake[e].comment}else z.$element.hide(),delete this.actionsToTake[e].comment;switch(this.updateRequestColor(n,e),x.$element.hide(),j.$element.hide(),N.$element.hide(),U.$element.hide(),F.$element.hide(),r){case"accept":{x.$element.show(),j.$element.show(),N.$element.show();break}case"deny":{U.$element.show();break}case"close":{F.$element.show();break}}});let h=new P({placeholder:"Add pages here"});h.on("change",()=>{let r=h.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^:/,""),r.length>0&&h.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),h.on("showing-values",r=>{for(let m of r)c.addAllowedValue(m.data)});let c=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:h});c.on("change",r=>{let m=r.map(b=>b.getData()),y=m.toSorted((b,M)=>b.toLowerCase().localeCompare(M.toLowerCase()));if(m.join(";")!==y.join(";")){let b=r.at(-1);c.reorder(b,y.indexOf(b.getData()))}this.actionsToTake[e].categorizedPages=y});let{categorizedPages:w}=this.actionsToTake[e];for(let r of w)c.addAllowedValue(r);c.setValue(w);let x=new OO.ui.FieldLayout(c,{align:"inline",label:"Pages to categorize:"});x.$element.hide();let C=new v({placeholder:"Add categories here"});C.on("change",()=>{let r=C.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^Category:/,""),r.length>0&&C.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),C.on("showing-values",r=>{for(let m of r)L.addAllowedValue(m.data)});let L=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:C});L.on("change",r=>{let m=r.map(b=>b.getData()),y=m.toSorted((b,M)=>b.toLowerCase().localeCompare(M.toLowerCase()));if(m.join(";")!==y.join(";")){let b=r.at(-1);L.reorder(b,y.indexOf(b.getData()))}this.actionsToTake[e].categoriesToRemove=y});let{parents:I}=this.actionsToTake[e];for(let r of I)L.addAllowedValue(r);L.setValue(I);let j=new OO.ui.FieldLayout(L,{align:"inline",label:"Categories to remove from pages to categorize:"});j.$element.hide();let q=new v({placeholder:"Add categories here"},!0);q.on("change",()=>{let r=q.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^Category:/,""),r.length>0&&q.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),q.on("showing-values",r=>{for(let m of r)A.addAllowedValue(m.data)});let A=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:q});A.on("change",r=>{let m=r.map(b=>b.getData()),y=m.toSorted((b,M)=>b.toLowerCase().localeCompare(M.toLowerCase()));if(m.join(";")!==y.join(";")){let b=r.at(-1);A.reorder(b,y.indexOf(b.getData()))}this.actionsToTake[e].parents=y});for(let r of I)A.addAllowedValue(r),q.validCategories.add(r);A.setValue(I);let N=new OO.ui.FieldLayout(A,{align:"inline",label:"Parent categories:"});N.$element.hide();let D=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing categories"],["empty","empty submissions"],["unlikely","categories that are unlikely to have enough pages"],["notcategory","page creation requests"],["notenglish","requests not in English"]].map(([r,m])=>({data:`autofill:${r}`,label:`Autofilled text for ${m}`}))});D.on("change",()=>{this.actionsToTake[e].denyReason=D.getValue()||"autofill:unlikely"}),D.setValue("autofill:unlikely"),D.getMenu().selectItemByData("autofill:unlikely");let U=new OO.ui.FieldLayout(D,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'});U.$element.hide();let H=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([r,m])=>new OO.ui.MenuOptionWidget({data:m,label:r}))}});H.getMenu().on("choose",()=>{let r=H.getMenu().findSelectedItem();this.actionsToTake[e].closingReason={name:r.getLabel(),id:r.getData()},this.updateRequestColor(n,e)}),H.getMenu().selectItemByData("r"),this.actionsToTake[e].closingReason={name:"No response",id:"r"};let F=new OO.ui.FieldLayout(H,{align:"inline",label:"Closing reason:"});F.$element.hide();let V=new OO.ui.TextInputWidget;V.on("change",()=>{let r=V.getValue().trim();r?this.actionsToTake[e].comment=r:delete this.actionsToTake[e].comment});let z=new OO.ui.FieldLayout(V,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});z.$element.hide(),T.append(O.$element[0],x.$element[0],j.$element[0],N.$element[0],U.$element[0],F.$element[0],z.$element[0]),n.append(T),this.$body.append(n),this.updateSize()}updateRequestColor(e,t){let{action:n}=this.actionsToTake[t],s="";n==="accept"?s="#a0ffa0":n==="deny"?s="#ffcece":n==="close"&&(this.actionsToTake[t].closingReason?.id==="r"?s="#ffcece":this.actionsToTake[t].closingReason?.id==="s"?s="#90c090":s="#b8b8b8"),e.style.backgroundColor=s}async performSubtypeActions(e,t,n){if(this.actionsToTake.some(i=>i.action!=="none")){for(let o of this.actionsToTake){let a={pageText:n,...o.originalText};switch(o.action){case"accept":{a=this.modifySectionData(a,{prepend:"{{AfC-c|a}}",append:`* {{subst:AfC category}} ~~~~
{{AfC-c|b}}`}),this.handleAcceptedCategory(o),t.accepted++;break}case"deny":{a=this.modifySectionData(a,{prepend:"{{AfC-c|d}}",append:`* ${this.formatDeniedReason(o.denyReason)} ~~~~
{{AfC-c|b}}`}),t.denied++;break}case"comment":{o.comment?(a=this.modifySectionData(a,{append:`* {{AfC comment|1=${o.comment}}} ~~~~`}),t["commented on"]++):e.addLogEntry(`The request to create "${o.category}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{a=this.modifySectionData(a,{prepend:`{{AfC-c|${o.closingReason.id}}}`,append:(o.comment?`* {{AfC comment|1=${o.comment}}} ~~~~`:"")+`
{{AfC-c|b}}`}),t.closed++;break}}n=a.pageText}if(this.beforeText+this.pageContent===n){e.addLogEntry("No requests have been handled (page content identical)!");return}let i=Object.entries(t).filter(([,o])=>o>0).map(([o,a])=>`${o} ${a}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:n,summary:`Handling AfC category requests (${i})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}handleAcceptedCategory(e){this.editsCreationsToMake.push({type:"create",isRedirect:!1,title:`Category:${e.category}`,text:e.parents.map(t=>`[[Category:${t}]]`).join(`
`),summary:`Creating category as requested at [[WP:AFC/C]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:`Category talk:${e.category}`,text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`},...e.categorizedPages.map(t=>({type:"edit",title:t,transform:({content:n})=>{let s=!1;n=n.replace(/((\[\[:?[Cc]ategory:.+?]]\n?)+)/,i=>{s=!0;let o=i.endsWith(`
`);return`${i}${o?"":`
`}[[Category:${e.category}]]${o?`
`:""}`}),s||(n+=`
[[Category:${e.category}]]`);for(let i of e.categoriesToRemove)n=n.replaceAll(new RegExp(`\\[\\[:?[Cc]ategory:${i}(\\|.*?)?\\]\\]
?`,"gi"),"");return{text:n,summary:`Adding page to [[:Category:${e.category}]] as requested at [[WP:AFC/C]]${this.scriptMessage}`}}})))}}});var K=`body.afcrc-helper-open #mw-teleport-target{z-index:500}.afcrc-helper-request{margin:10px;border-radius:5px;background-color:#eee;padding:5px;color:#202122}.afcrc-helper-request summary{cursor:pointer}.afcrc-helper-target-editor{min-width:1ch;max-width:calc(100% - 4ch);font-family:monospace}.afcrc-helper-external-link{-webkit-text-decoration:none!important;text-decoration:none!important}.afcrc-helper-external-link svg{display:inline-block;width:1em;height:1em;fill:currentcolor}.afcrc-helper-request-info,.afcrc-helper-request-responder{margin:5px}.afcrc-helper-request-info>div,.afcrc-helper-request-responder>div{margin-top:8px;margin-bottom:8px}.afcrc-helper-request-responder>div:last-of-type{margin-bottom:0}.afcrc-helper-request-responder .oo-ui-fieldLayout{margin-left:8px}.afcrc-helper-request-responder .oo-ui-fieldLayout-header{width:-moz-max-content;width:max-content}.afcrc-helper-action-radio{margin-top:8px}.afcrc-helper-action-radio .oo-ui-radioOptionWidget{display:inline;padding:8px}.afcrc-closing-reason-input,.afcrc-comment-input{max-width:50%}.afcrc-helper-redirect-possibilities:after{content:" (redirect with possibilities)";font-style:italic}.afcrc-helper-template-parameters-container,.afcrc-helper-template-parameters-container details{margin-top:10px;margin-bottom:10px;border:1px solid #a2a9b1;border-radius:2px;background-color:#fff;padding:5px}.afcrc-helper-template-parameters-container{margin-left:8px}.afcrc-helper-template-parameters-container summary{cursor:pointer;font-weight:700}.afcrc-helper-template-parameters-container details{margin-top:5px;margin-bottom:5px;background-color:#e2e2e2}#afcrc-helper-no-templates-message{padding:5px}.afcrc-helper-actions-container div{margin-top:8px;margin-bottom:8px}
`;mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],async()=>{let{default:f}=await Promise.resolve().then(()=>(Z(),X)),{default:e}=await Promise.resolve().then(()=>(ae(),ne)),t=mw.config.get("wgPageName").replaceAll("_"," "),n=t==="Wikipedia:Articles for creation/Redirects";if(!n&&!(t==="Wikipedia:Articles for creation/Categories"))return;let i=n?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${i} creation requests`,"afcrc-helper").addEventListener("click",a=>{a.preventDefault(),mw.util.addCSS(K);let l=new OO.ui.WindowManager;document.body.append(l.$element[0]);let p=i==="redirect"?f:e,d=new p(i,t,window.afcrcConfiguration?.createdPageWatchMethod);l.addWindows([d]),d.open(),d.load()})});})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
