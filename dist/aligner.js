// <pre>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/aligner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#align-parameters {
    display: none;
}

#content:has(#wpTextbox1) #align-parameters {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Align template parameters","align-parameters").addEventListener("click",s=>{s.preventDefault();let n=$("#wpTextbox1");if(n.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let e=n.textSelection("getContents");if(!e)return mw.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});let o=0;function S(t){if(t==="")return mw.notify("Infobox not found!",{type:"error",autoHideSeconds:"short"});if(a!==0)return mw.notify("Template was not properly closed!",{type:"error",autoHideSeconds:"short"});let r=0,l=String(t),f=t.split(`
`),w=[];for(let h of f){let u=x(h.trim());for(let p of u){let g=p.trim();if(!g.startsWith("|")||g.split("=").length!==2){w.push(g);continue}let[m,L]=y(g);m=m.slice(1).trim(),m.length>r&&(r=m.length),w.push("| "+m+"="+L)}}let c="";r+=2;for(let h of w){let u=y(h);if(u.length<2){c+=h+=`
`;continue}let p=u[0].trim();for(;p.length<r;)p+=" ";c+=p+" = "+u[1].trim()+`
`}c.endsWith(`
`)&&(c=c.slice(0,-1)),n.textSelection("setContents",n.textSelection("getContents").replace(l,c).replace(/\n+$/,"")),n.textSelection("setSelection",{start:0})}let d="",a=0,b=["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"];for(let t=0;t<e.length;t++){let r=!1;for(let l of b){l="{{"+l;let f=l.length;e.length-t>f&&(e.slice(t,t+f).toLowerCase()===l||e.slice(t,t+f).toLowerCase()===l.replace(" ","_"))&&(a++,d+=e[t],r=!0)}a>=1&&!r&&(d+=e[t],e[t]==="{"?a++:e[t]==="}"&&(a--,a===0&&(o++,S(d),d="")))}o===0?mw.notify("No templates found to align!",{type:"warn",autoHideSeconds:"short"}):mw.notify(`Successfully aligned ${o} template${o>1?"s":""}!`,{type:"success",autoHideSeconds:"short"})})});function y(i){let s=i.split("=");return s.length<=2?s:[s.shift(),s.join("=")]}function x(i){if(i.startsWith("{{")&&i.endsWith("}}"))return i.includes("|")?["{{"+x(i.slice(2,-2))[0],...x(i.slice(2,-2)).slice(1),"}}"]:[i];let s=[],n="",e=0;for(let o of i)n+=o,o==="{"||o==="["?e+=1:o===""||o==="]"?e--:o==="|"&&e===0&&n.trim()!=="|"&&(s.push(n.slice(0,-1).trim()),n="|");return s.push(n),s}})();

// </pre>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc2NyaXB0cy9hbGlnbmVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIoKCkgPT4ge1xuICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpIDwgMCkgcmV0dXJuOyAvLyBEb24ndCBydW4gaW4gdmlydHVhbCBuYW1lc3BhY2VzXG4gICAgaWYgKCFtdy5jb25maWcuZ2V0KCd3Z0lzUHJvYmFibHlFZGl0YWJsZScpKSByZXR1cm47IC8vIERvbid0IHJ1biBpZiB1c2VyIGNhbid0IGVkaXQgcGFnZVxuXG4gICAgbXcubG9hZGVyLnVzaW5nKFsnbWVkaWF3aWtpLnV0aWwnLCAnanF1ZXJ5LnRleHRTZWxlY3Rpb24nXSwgKCkgPT4ge1xuICAgICAgICBtdy51dGlsLmFkZENTUyhgXG4jYWxpZ24tcGFyYW1ldGVycyB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuI2NvbnRlbnQ6aGFzKCN3cFRleHRib3gxKSAjYWxpZ24tcGFyYW1ldGVycyB7XG4gICAgZGlzcGxheTogdW5zZXQ7XG59YCk7XG5cbiAgICAgICAgY29uc3QgbGluayA9IG13LnV0aWwuYWRkUG9ydGxldExpbmsoXG4gICAgICAgICAgICBtdy5jb25maWcuZ2V0KCdza2luJykgPT09ICdtaW5lcnZhJyA/ICdwLW5hdmlnYXRpb24nIDogJ3AtY2FjdGlvbnMnLFxuICAgICAgICAgICAgJyMnLFxuICAgICAgICAgICAgJ0FsaWduIHRlbXBsYXRlIHBhcmFtZXRlcnMnLFxuICAgICAgICAgICAgJ2FsaWduLXBhcmFtZXRlcnMnLFxuICAgICAgICApITtcblxuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBjb25zdCBlZGl0Qm94ID0gJCgnI3dwVGV4dGJveDEnKTtcbiAgICAgICAgICAgIGlmIChlZGl0Qm94Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG13Lm5vdGlmeSgnRWRpdCBib3ggbm90IGZvdW5kIScsIHsgdHlwZTogJ2Vycm9yJywgYXV0b0hpZGVTZWNvbmRzOiAnc2hvcnQnIH0pO1xuXG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdnZXRDb250ZW50cycpO1xuICAgICAgICAgICAgaWYgKCF0ZXh0KSByZXR1cm4gbXcubm90aWZ5KCdFZGl0IGJveCB2YWx1ZSBub3QgZm91bmQhJywgeyB0eXBlOiAnZXJyb3InLCBhdXRvSGlkZVNlY29uZHM6ICdzaG9ydCcgfSk7XG5cbiAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmluaXNoZXMgcHJvY2Vzc2luZyBhbiBpbmZvYm94IGFuZCB1cGRhdGVzIHRoZSBlZGl0IGJveCBjb250ZW50cy5cbiAgICAgICAgICAgICAqIEBwYXJhbSB0ZW1wbGF0ZSBUaGUgdGVtcGxhdGUgc3RyaW5nIHRvIHByb2Nlc3MuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NJbmZvYm94KHRlbXBsYXRlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVtcGxhdGUgPT09ICcnKSByZXR1cm4gbXcubm90aWZ5KCdJbmZvYm94IG5vdCBmb3VuZCEnLCB7IHR5cGU6ICdlcnJvcicsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChvcGVuICE9PSAwKSByZXR1cm4gbXcubm90aWZ5KCdUZW1wbGF0ZSB3YXMgbm90IHByb3Blcmx5IGNsb3NlZCEnLCB7IHR5cGU6ICdlcnJvcicsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcblxuICAgICAgICAgICAgICAgIGxldCBtYXhMZW5ndGggPSAwO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZ1RlbXBsYXRlID0gU3RyaW5nKHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lcyA9IHRlbXBsYXRlLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdMaW5lcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnNJbkxpbmUgPSBzcGxpdEludG9QYXJhbWV0ZXJzKGxpbmUudHJpbSgpKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiBwYXJhbWV0ZXJzSW5MaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gcGFyYW1ldGVyLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGluZS5zdGFydHNXaXRoKCd8JykgfHwgbGluZS5zcGxpdCgnPScpLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpbmVzLnB1c2gobGluZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBbZmlyc3RQYXJ0LCBsYXN0UGFydF0gPSBzcGxpdFBhcmFtZXRlcihsaW5lKSBhcyBbc3RyaW5nLCBzdHJpbmddOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1jb25zdFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RQYXJ0ID0gZmlyc3RQYXJ0LnNsaWNlKDEpLnRyaW0oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0UGFydC5sZW5ndGggPiBtYXhMZW5ndGgpIG1heExlbmd0aCA9IGZpcnN0UGFydC5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpbmVzLnB1c2goJ3wgJyArIGZpcnN0UGFydCArICc9JyArIGxhc3RQYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBvdXRwdXQgPSAnJztcblxuICAgICAgICAgICAgICAgIG1heExlbmd0aCArPSAyOyAvLyB0byBpbmNsdWRlICd8ICdcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGxpbmUgb2YgbmV3TGluZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBzcGxpdFBhcmFtZXRlcihsaW5lKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGxpbmUgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaXJzdFBhcnQgPSBwYXJ0c1swXS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGZpcnN0UGFydC5sZW5ndGggPCBtYXhMZW5ndGgpIGZpcnN0UGFydCArPSAnICc7XG5cbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGZpcnN0UGFydCArICcgPSAnICsgcGFydHNbMV0udHJpbSgpICsgJ1xcbic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dC5lbmRzV2l0aCgnXFxuJykpIG91dHB1dCA9IG91dHB1dC5zbGljZSgwLCAtMSk7XG5cbiAgICAgICAgICAgICAgICBlZGl0Qm94LnRleHRTZWxlY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICdzZXRDb250ZW50cycsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRCb3gudGV4dFNlbGVjdGlvbignZ2V0Q29udGVudHMnKS5yZXBsYWNlKG9yaWdUZW1wbGF0ZSwgb3V0cHV0KS5yZXBsYWNlKC9cXG4rJC8sICcnKSxcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdzZXRTZWxlY3Rpb24nLCB7IHN0YXJ0OiAwIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSAnJztcbiAgICAgICAgICAgIGxldCBvcGVuID0gMDtcblxuICAgICAgICAgICAgY29uc3Qgc2VhcmNoZXMgPSBbJ2luZm9ib3gnLCAnc3BlY2llc2JveCcsICd0YXhvYm94JywgJ2F1dG9tYXRpYyB0YXhvYm94JywgJ29zbSBsb2NhdGlvbiBtYXAnLCAnbW90b3JzcG9ydCBzZWFzb24nXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRleHQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZvbyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2VhcmNoIG9mIHNlYXJjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaCA9ICd7eycgKyBzZWFyY2g7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlYXJjaExlbmd0aCA9IHNlYXJjaC5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC5sZW5ndGggLSBpbmRleCA+IHNlYXJjaExlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHRleHQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoTGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2ggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaExlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoLnJlcGxhY2UoJyAnLCAnXycpKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4rKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlICs9IHRleHRbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9vID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvcGVuID49IDEgJiYgIWZvbykge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSArPSB0ZXh0W2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dFtpbmRleF0gPT09ICd7Jykgb3BlbisrO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0ZXh0W2luZGV4XSA9PT0gJ30nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuLS07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzSW5mb2JveCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSBtdy5ub3RpZnkoJ05vIHRlbXBsYXRlcyBmb3VuZCB0byBhbGlnbiEnLCB7IHR5cGU6ICd3YXJuJywgYXV0b0hpZGVTZWNvbmRzOiAnc2hvcnQnIH0pO1xuICAgICAgICAgICAgZWxzZSBtdy5ub3RpZnkoYFN1Y2Nlc3NmdWxseSBhbGlnbmVkICR7Y291bnR9IHRlbXBsYXRlJHtjb3VudCA+IDEgPyAncycgOiAnJ30hYCwgeyB0eXBlOiAnc3VjY2VzcycsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpO1xuXG4vKipcbiAqIFNwbGl0cyBhIHN0cmluZyBpbnRvIGFuIEFycmF5IGNvbnRhaW5pbmcgdGhlIGtleSBhbmQgdmFsdWUuXG4gKiBAcGFyYW0gc3RyaW5nIFRoZSBmdWxsIHN0cmluZyB0byBzcGxpdC5cbiAqL1xuZnVuY3Rpb24gc3BsaXRQYXJhbWV0ZXIoc3RyaW5nOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzcGxpdCA9IHN0cmluZy5zcGxpdCgnPScpO1xuICAgIGlmIChzcGxpdC5sZW5ndGggPD0gMikgcmV0dXJuIHNwbGl0O1xuXG4gICAgY29uc3QgZmlyc3QgPSBzcGxpdC5zaGlmdCgpO1xuICAgIHJldHVybiBbZmlyc3QhLCBzcGxpdC5qb2luKCc9JyldO1xufVxuXG4vKipcbiAqIFNwbGl0cyBhIHRlbXBsYXRlIGludG8gYW4gQXJyYXkgd2l0aCBhbGwgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBzdHJpbmcgVGhlIHRlbXBsYXRlIHRvIHByb2Nlc3MuXG4gKi9cbmZ1bmN0aW9uIHNwbGl0SW50b1BhcmFtZXRlcnMoc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgaWYgKHN0cmluZy5zdGFydHNXaXRoKCd7eycpICYmIHN0cmluZy5lbmRzV2l0aCgnfX0nKSkge1xuICAgICAgICBpZiAoIXN0cmluZy5pbmNsdWRlcygnfCcpKSByZXR1cm4gW3N0cmluZ107XG5cbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHNwbGl0SW50b1BhcmFtZXRlcnMoc3RyaW5nLnNsaWNlKDIsIC0yKSk7XG4gICAgICAgIHJldHVybiBbJ3t7JyArIHJlc3VsdHNbMF0sIC4uLnNwbGl0SW50b1BhcmFtZXRlcnMoc3RyaW5nLnNsaWNlKDIsIC0yKSkuc2xpY2UoMSksICd9fSddO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBbXTtcbiAgICBsZXQgdGVtcG9yYXJ5ID0gJyc7XG4gICAgbGV0IG9wZW4gPSAwO1xuXG4gICAgZm9yIChjb25zdCBjaGFyIG9mIHN0cmluZykge1xuICAgICAgICB0ZW1wb3JhcnkgKz0gY2hhcjtcblxuICAgICAgICBpZiAoY2hhciA9PT0gJ3snIHx8IGNoYXIgPT09ICdbJykgb3BlbiArPSAxO1xuICAgICAgICBlbHNlIGlmIChjaGFyID09PSAnJyB8fCBjaGFyID09PSAnXScpIG9wZW4tLTtcbiAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJ3wnICYmIG9wZW4gPT09IDAgJiYgdGVtcG9yYXJ5LnRyaW0oKSAhPT0gJ3wnKSB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzLnB1c2godGVtcG9yYXJ5LnNsaWNlKDAsIC0xKS50cmltKCkpO1xuICAgICAgICAgICAgdGVtcG9yYXJ5ID0gJ3wnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyYW1ldGVycy5wdXNoKHRlbXBvcmFyeSk7XG5cbiAgICByZXR1cm4gcGFyYW1ldGVycztcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7OzttQkFDUSxHQUFHLE9BQU8sSUFBSSxtQkFBbUIsRUFBSSxHQUNwQyxHQUFHLE9BQU8sSUFBSSxzQkFBc0IsR0FFekMsR0FBRyxPQUFPLE1BQU0sQ0FBQyxpQkFBa0Isc0JBQXNCLEVBQUcsSUFBTSxDQUM5RCxHQUFHLEtBQUssT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT3JCLEVBRW1CLEdBQUcsS0FBSyxlQUNqQixHQUFHLE9BQU8sSUFBSSxNQUFNLElBQU0sVUFBWSxlQUFpQixhQUN2RCxJQUNBLDRCQUNBLGtCQUNKLEVBRUssaUJBQWlCLFFBQVVBLEdBQVUsQ0FDdENBLEVBQU0sZUFBZSxFQUVyQixJQUFNQyxFQUFVLEVBQUUsYUFBYSxFQUMvQixHQUFJQSxFQUFRLFNBQVcsRUFBRyxPQUFPLEdBQUcsT0FBTyxzQkFBdUIsQ0FBRSxLQUFNLFFBQVMsZ0JBQWlCLE9BQVEsQ0FBQyxFQUU3RyxJQUFNQyxFQUFPRCxFQUFRLGNBQWMsYUFBYSxFQUNoRCxHQUFJLENBQUNDLEVBQU0sT0FBTyxHQUFHLE9BQU8sNEJB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LEVBQ2hHLEdBQUcsT0FBTyx3QkFBd0JBLENBQUssWUFBWUEsRUFBUSxFQUFJLElBQU0sRUFBRSxJQUFLLENBQUUsS0FBTSxVQUFXLGdCQUFpQixPQUFRLENBQUMsQ0FDbEksQ0FBQyxDQUNMLENBQUMsRUFPTCxTQUFTYyxFQUFlUSxFQUFnQixDQUNwQyxJQUFNQyxFQUFRRCxFQUFPLE1BQU0sR0FBRyxFQUM5QixPQUFJQyxFQUFNLFFBQVUsRUFBVUEsRUFHdkIsQ0FET0EsRUFBTSxNQUFNLEVBQ1ZBLEVBQU0sS0FBSyxHQUFHLENBQUMsQ0FDbkMsQ0FNQSxTQUFTYixFQUFvQlksRUFBMEIsQ0FDbkQsR0FBSUEsRUFBTyxXQUFXLElBQUksR0FBS0EsRUFBTyxTQUFTLElBQUksRUFDL0MsT0FBS0EsRUFBTyxTQUFTLEdBQUcsRUFHakIsQ0FBQyxLQURRWixFQUFvQlksRUFBTyxNQUFNLEVBQUcsRUFBRSxDQUFDLEVBQ2hDLENBQUMsRUFBRyxHQUFHWixFQUFvQlksRUFBTyxNQUFNLEVBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEVBQUcsSUFBSSxFQUhuRCxDQUFDQSxDQUFNLEVBTTdDLElBQU1FLEVBQWEsQ0FBQyxFQUNoQkMsRUFBWSxHQUNadEIsRUFBTyxFQUVYLFFBQVd1QixLQUFRSixFQUNmRyxHQUFhQyxFQUVUQSxJQUFTLEtBQU9BLElBQVMsSUFBS3ZCLEdBQVEsRUFDakN1QixJQUFTLElBQU1BLElBQVMsSUFBS3ZCLElBQzdCdUIsSUFBUyxLQUFPdkIsSUFBUyxHQUFLc0IsRUFBVSxLQUFLLElBQU0sTUFDeERELEVBQVcsS0FBS0MsRUFBVSxNQUFNLEVBQUcsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUM3Q0EsRUFBWSxLQUlwQixPQUFBRCxFQUFXLEtBQUtDLENBQVMsRUFFbEJELENBQ1giLAogICJuYW1lcyI6IFsiZXZlbnQiLCAiZWRpdEJveCIsICJ0ZXh0IiwgImNvdW50IiwgInByb2Nlc3NJbmZvYm94IiwgInRlbXBsYXRlIiwgIm9wZW4iLCAibWF4TGVuZ3RoIiwgIm9yaWdUZW1wbGF0ZSIsICJsaW5lcyIsICJuZXdMaW5lcyIsICJsaW5lIiwgInBhcmFtZXRlcnNJbkxpbmUiLCAic3BsaXRJbnRvUGFyYW1ldGVycyIsICJwYXJhbWV0ZXIiLCAiZmlyc3RQYXJ0IiwgImxhc3RQYXJ0IiwgInNwbGl0UGFyYW1ldGVyIiwgIm91dHB1dCIsICJwYXJ0cyIsICJzZWFyY2hlcyIsICJpbmRleCIsICJmb28iLCAic2VhcmNoIiwgInNlYXJjaExlbmd0aCIsICJzdHJpbmciLCAic3BsaXQiLCAicGFyYW1ldGVycyIsICJ0ZW1wb3JhcnkiLCAiY2hhciJdCn0K
