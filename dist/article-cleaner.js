// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{var v=new mw.Api;async function A(e){return(await v.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:e})).query.pages[0].revisions?.[0].slots.main.content.trim()}mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{let e=!1,p="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";function d(r){r.value.includes(p.slice(1))||(r.value&&!r.value.startsWith("/* ")&&!r.value.endsWith(" */ ")?r.value+=`; ${p.charAt(0).toLowerCase()+p.slice(1)}`:r.value=`${r.value}${p}`),e=!1}async function h(r){r.preventDefault();let o=$(mw.config.get("skin")==="minerva"?"#wikitext-editor":"#wpTextbox1");if(o.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let g=o.textSelection("getContents"),s=g;if(s=R(s),s=N(s),s=I(s),s=M(s),s=P(s),s=F(s,[O,D]),s=_(s),s=y(s),s=H(s),s=await U(s),s=W(s),s=y(s,!0),s=j(s),g===s)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let l=ve.init.target.getSurface().getModel();l.getLinearFragment(l.getRangeFromSourceOffsets(0,g.length)).insertContent(s),l.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else o.textSelection("setContents",s),o.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let f=document.querySelector("#wpSummary");f?d(f):e=!0}}mw.config.get("skin")==="minerva"?(mw.hook("mobileFrontend.editorOpened").add(()=>{let r=document.querySelector(".overlay-header .switcher-container"),g=new OO.ui.ButtonWidget({icon:"articleCheck",framed:!1}).$element[0];g.addEventListener("click",h),r.before(g)}),mw.hook("wikipage.content").add(r=>{if(r[0]?.classList.contains("preview")&&e){let o=document.querySelector(".summary-input textarea");d(o)}})):(mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner").addEventListener("click",h),mw.hook("ve.saveDialog.stateChanged").add(()=>{if(e){let o=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");d(o)}}))});function x(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function R(e){let p=/[\u0000-\u0009\u000B\u000C\u000E-\u001F\u007F\u00AD\u200B-\u200F\u202A-\u202E\u2060\u2063\uFEFF]/g;return p.test(e)&&(e=e.replaceAll(p,"")),e}function N(e){let p={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},d=["and","birth","career","death","education","life","of","or"],h=Object.fromEntries(Object.entries(p).flatMap(([f,l])=>[[f.toLowerCase(),f],...l.map(a=>[a,f])])),o=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(f=>{let{name:l}=f.groups,{startMarkup:a,endMarkup:m}=f.groups;l=l.replaceAll(/'{3}/g,"");let w=l.matchAll(/\[\[(.+?)]]/g).toArray();for(let t of w)l=l.replace(t[0],t[1].split("|").at(-1));let u=Math.max(a.length,m.length,2);return{name:l,depth:u,original:f[0]}}),g=new Set(o.map(f=>f.name)),s=o.length>0&&/^\n*=+ | =+\n+$/.test(o[0].original)?" ":"";for(let f of o){let l=f.name.toLowerCase(),m=l in h&&!g.has(h[l])?h[l]:f.name;for(let u of d)m=m.replaceAll(new RegExp(`\\b${u}\\b`,"gi"),u);m=m.charAt(0).toUpperCase()+m.slice(1);let w=`${"=".repeat(f.depth)}${s}${m}${s}${"=".repeat(f.depth)}`;f.original!==w&&(e=e.replace(f.original,`

${w}
`))}return e}function I(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function M(e){let d=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(r=>{let[o,g,s]=r;return{type:g.toUpperCase(),value:s,original:o}}),h=mw.Title.newFromText(mw.config.get("wgPageName"));for(let r of d){let o=new RegExp(`${x(r.original)}
*`,"g"),g=mw.Title.newFromText(r.value);if(!g)continue;let s=mw.Title.makeTitle(h.getNamespaceId(),g.getMainText());if(!s)continue;let f=r.type==="DISPLAYTITLE"?h.toText():h.getMainText(),l=r.type==="DISPLAYTITLE"?s.toText():s.getMainText();if(f===l){e=e.replace(o,"");continue}let a=`{{${r.type}:${l}}}
`;e=e.replace(o,a)}return e}function P(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function F(e,p){let d=[],h=[],r=!1,o=!1,g=0;function s(a,m=!0){let w=e.slice(g,g+a.length)===a;return w&&m&&(g+=a.length),w}for(;g<e.length;)if(s("<nowiki>"))r=!0;else if(s("</nowiki>"))r=!1;else if(s("<!--"))o=!0;else if(s("-->"))o=!1;else if(!r&&!o)if(s("[["))h.push({start:g-2,end:-1,isNested:h.length>0});else if(s("]]")){let a=h.pop();if(!a)continue;a.end=g,d.push(a)}else g++;else g++;let f=[],l=Object.values(mw.config.get("wgFormattedNamespaces"));for(let a of d){let m=e.slice(a.start+2,a.end-2),[w,...u]=m.split("|");e=e.slice(0,a.start+2)+"\0".repeat(w.length)+e.slice(a.start+2+w.length);let t=w.replaceAll("_"," ").trim(),i=u.join("|");i=i===" "?" ":i.trim();let c=t.startsWith(":");c&&(t=t.slice(1));let T=!1,n=t.charAt(0).toUpperCase()+t.slice(1),b=t.charAt(0).toLowerCase()+t.slice(1),S=t.split(":")[0];S=S.charAt(0).toUpperCase()+S.slice(1),t.includes(":")&&(n.startsWith("Image:")&&(t=`${t.startsWith("Image:")?"F":"f"}ile:${t.slice(6)}`),c&&(["Image","File","Category"].includes(n.split(":")[0])||!l.includes(S))&&(T=!0));let k="";if(/[!',.:;?]$/.test(i)&&!["Image","File","Category"].includes(n.split(":")[0])){let E=i.slice(-1);t.endsWith(E)||(k=E,i=i.slice(0,-1))}t===i?i="":new RegExp(`^${x(t)}[a-z]+$`).test(i)&&(k=i.slice(t.length)+k,i="");for(let E of[n,b])E===i?(t=E,i=""):new RegExp(`^${x(E)}[a-z]+$`).test(i)&&(t=E,k=i.slice(E.length)+k,i="");(i&&t.includes(":")&&l.includes(S)||t.startsWith("file:")||t.startsWith("category:"))&&(t=t.charAt(0).toUpperCase()+t.slice(1)),t=`${T?":":""}${t}`,t=t.padStart(w.length,"\0");let L=`[[${t}${i?`|${i}`:""}]]${k}`;f.push([a,L])}for(let a of p)e=a(e,1);for(let a=0;a<2;a++)for(let[m,w]of f)a===0&&m.isNested||a===1&&!m.isNested||(e=e.slice(0,m.start)+w.padEnd(m.end-m.start,"\0")+e.slice(m.end));for(let a of p)e=a(e,2);return e.replaceAll("\0","")}function O(e,p){let d="\x7F",h="\x9F";return p===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",d),e=e.replaceAll("\xA0",h)):(e=e.replaceAll(d,"..."),e=e.replaceAll(h,"&nbsp;")),e}function D(e,p){return p===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(d,h,r)=>`${h}\u2013${r}`.padEnd(d.length,"\0"))),e}function _(e){let p=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let d of p)for(;d.test(e);)e=e.replace(d,"");return e}function y(e,p=!1){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),p||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`

$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),p||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim(),e}function H(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>.*?<\/ref>|<ref(?!erences).*?\/>)+)([!,.;?])?/g,(l,a,m)=>(m??"")+a);let p=[],d=!1,h=!1,r=0;function o(l){let a=e.slice(r,r+l.length)===l;return a&&(r+=l.length),a}function g(l){for(;r<e.length&&!o(l);)r++}for(;r<e.length;)if(o("<nowiki>"))d=!0;else if(o("</nowiki>"))d=!1;else if(o("<!--"))h=!0;else if(o("-->"))h=!1;else if(!d&&!h)if(!o("<references")&&o("<ref")){let l=r-4;g(">");let a=e.slice(l,r-1).trim().endsWith("/");p.push(a?{start:l,end:r,isSelfClosing:a}:{start:l,end:-1})}else o("</ref>")?p.at(-1).end=r:r++;else r++;let s=new DOMParser,f=[];for(let l of p){let a=e.slice(l.start,l.end),m=/<ref(?!erences).*?>/is.exec(a)[0],u=s.parseFromString(l.isSelfClosing?m.replace(/ *\/ *>/," />"):m+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),t=a.slice(m.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();u=l.isSelfClosing||t.length===0?u.replace(/>\s*<\/ref>/," />"):`${u.slice(0,-6)}${t}</ref>`,a!==u&&f.push([a,u])}for(let[l,a]of f)e=e.replace(l,a);return e}var C;async function U(e){let p;(T=>(T[T.Expanded=0]="Expanded",T[T.ExpandedAligned=1]="ExpandedAligned",T[T.Minimized=2]="Minimized",T[T.MinimizedSpaced=3]="MinimizedSpaced"))(p||={});let d;(c=>(c[c.User=2]="User",c[c.Template=10]="Template",c[c.Draft=118]="Draft"))(d||={}),C??=JSON.parse(await A("User:Eejit43/scripts/article-cleaner.json")??"[]");let h=Object.fromEntries(C.flatMap(u=>u.from.map(t=>[t.charAt(0).toLowerCase()+t.slice(1),u.to])));class r{location;isNested=!1;fullText;fullTextEscaped;rawName;name;parameters=[];subTemplates=[];PLACEHOLDER_STRINGS=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];PIPE_ESCAPE_REGEXES=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];TAG_EQUALS_ESCAPE_REGEXES=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];templateAliases=h;defaultTemplateStyles={1:["album rating","album reviews","american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","chembox","cricket uniform","election box","episode list","external music video","extra album cover","field hockey kit","football box","football kit","footballbox","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","judo bracket","judo repechage","listen","location map","medical resources","motorsport season","multiple image","music ratings","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","repechage","rugbybox","sidebar","single ratings","singles","song ratings","speciesbox","starbox","succession box","taxobox","team bracket","track listing","tweet","virusbox","volleyball kit","nteambracket","2nteam-nteambracket","2teambracket","3teambracket","3teamrr","4teambracket","4teamrr","5teambracket","5teamrr","6teambracket","6teamrr","7teambracket","7teamrr","8teambracket","8teamroundrobin","8teamrr","9teambracket","10teambracket","11teambracket","12teambracket","13teambracket","14teambracket","15teambracket","16teambracket","18teambracket","20teambracket","24teambracket","27teambracket","32teambracket","40teambracket","48teambracket","64teambracket","128teambracket"],2:["birth date","coord","death date","end date","lang","start date"],3:["infobox mapframe"]};namespaceSpecificTemplates={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};templatesToKeepContent=["draft categories"];templatesToSubst=["articlepagename","articlespace","basepagename","fullpagename","namespace","namespacenumber","pagename","rootpagename","subjectpagename","subjectspace","subpagename","talkpagename","talkspace","pagenamebase"];constructor(t){this.location={start:t}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let n of this.subTemplates)n.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(n.fullText,this.PLACEHOLDER_STRINGS[0]);let t=this.fullTextEscaped.slice(2,-2).trim();for(let n of this.PIPE_ESCAPE_REGEXES)for(;n.test(t);)t=t.replaceAll(n,`$1${this.PLACEHOLDER_STRINGS[1]}$2`);for(let n of this.TAG_EQUALS_ESCAPE_REGEXES)t=t.replaceAll(n,(b,S,k)=>b.replace(k,k.replaceAll("=",this.PLACEHOLDER_STRINGS[2])));let i=t.split("|").map(n=>n.replaceAll(this.PLACEHOLDER_STRINGS[1],"|").trim());this.rawName=i.shift(),this.name=this.rawName.replaceAll("_"," "),this.name.toLowerCase().startsWith("template:")&&(this.name=this.name.slice(9));let c=this.name.charAt(0).toLowerCase()+this.name.slice(1);if(c in this.templateAliases){let n=this.name.startsWith(this.name.charAt(0).toLowerCase()),b=this.templateAliases[c];this.name=n?b.charAt(0).toLowerCase()+b.slice(1):b}let T=i.map(n=>{let b=n.indexOf("=");if(b===-1)return{key:null,value:n.replaceAll(this.PLACEHOLDER_STRINGS[2],"=").trim()};let S=n.slice(b+1).replaceAll(this.PLACEHOLDER_STRINGS[2],"=");return{key:n.slice(0,b).trim(),value:`${S.startsWith(`
`)?`
`:""}${S.trim()}`}});this.parameters=T}shouldBeRemoved(){for(let[t,i]of Object.entries(this.namespaceSpecificTemplates))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(t)&&i.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let t=0,i;for(let[c,T]of Object.entries(this.defaultTemplateStyles))for(let n of T)this.name.toLowerCase().startsWith(n)&&n.length>=t&&(t=n.length,i=Number.parseInt(c));return i}cleanupParameters(){let t=new Set(["cover","image_flag","image","logo","map_image"]);for(let i=1;i<=10;i++)t.add(`image${i}`);this.parameters=this.parameters.map(({key:i,value:c})=>(i&&t.has(i)&&(c=c.trim(),c.startsWith("[[")&&c.endsWith("]]")&&(c=/\[\[(.*?)]]/g.exec(c)[1].split("|")[0]),c=c.replace(/^(File|Image):/,"").replaceAll("_"," ")),{key:i,value:c}))}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.templatesToKeepContent.includes(this.name.toLowerCase())?this.parameters[0].value:"";let t=mw.config.get("wgNamespaceNumber")!==10&&this.templatesToSubst.some(n=>n===this.name.toLowerCase()||this.name.toLowerCase().startsWith(`${n}:`)),i=this.getStyle();if(i===void 0){let n=this.name;this.name.toLowerCase().startsWith("template:")&&(n=this.name.slice(9)),t&&(n=`subst:${n}`),n!==this.rawName&&(this.fullTextEscaped=this.fullTextEscaped.replace(this.rawName,n));for(let b of this.subTemplates)this.fullTextEscaped=this.fullTextEscaped.replace(this.PLACEHOLDER_STRINGS[0],b.format());return this.fullTextEscaped}let c=[`{{${t?"subst:":""}${this.name}`];if(this.cleanupParameters(),i===0||i===1){let n=0;i===1&&(n=Math.max(...this.parameters.map(b=>b.key?.length??0)));for(let[b,S]of this.parameters.entries())!S.key&&!S.value&&this.parameters.slice(b+1).every(k=>k.key??!k.value)||c.push(`| ${S.key?`${S.key.padEnd(n)} = `:""}${S.value}`)}else for(let[n,b]of this.parameters.entries())!b.value&&(b.key||this.parameters.slice(n+1).every(S=>S.key??!S.value))||c.push(`|${b.key?`${b.key}=`:""}${b.value}`);c.push("}}"),c.length===2?(c[0]+="}}",c.pop()):i===3&&(c[c.length-2]+="}}",c.pop());let T=c.join(i===0||i===1?`
`:i===3?" ":"");for(let n of this.subTemplates)T=T.replace(this.PLACEHOLDER_STRINGS[0],n.format());return T}}let o=[],g=[],s=!1,f=!1,l=!1,a=0;function m(u){let t=e.slice(a,a+u.length)===u;return t&&(a+=u.length),t}for(;a<e.length;)if(m("<nowiki>"))f=!0;else if(m("</nowiki>"))f=!1;else if(m("<!--"))l=!0;else if(m("-->"))l=!1;else if(!f&&!l)if(m("[["))s=!0;else if(s&&m("]]"))s=!1;else if(m("{{")){let u=new r(a-2);g.length>0&&(u.isNested=!0,g.at(-1)?.subTemplates.push(u)),g.push(u)}else if(m("}}")){let u=g.pop();if(!u)continue;u.location.end=a,o.push(u)}else a++;else a++;let w=e;for(let u of o)u.isNested||(u.parse(),w=w.replace(u.fullText,u.format()));return w}function W(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let p=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let d of p)e=e.replaceAll(new RegExp(` *<!-- ?${x(d)}.*?--> *
?`,"gs"),"");return e}function j(e){let p=[...e.matchAll(/\[\[Category:/g)].length;return e=e.replaceAll(/\n*{{(uncategorized|improve categories)(\|.+?)?}}\n*/gi,""),p===0&&!/{{uncategorized/i.test(e)?e+=`

{{Uncategorized|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`:p===1&&!/{{improve categories/i.test(e)&&(e+=`

{{Improve categories|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`),e}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
