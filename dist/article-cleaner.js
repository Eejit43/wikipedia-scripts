// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),d=!1,c="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(d){let f=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");f.value.includes(c.slice(1))||(f.value?f.value+=`; ${c.charAt(0).toLowerCase()+c.slice(1)}`:f.value=c),d=!1}}),e.addEventListener("click",f=>{f.preventDefault();let r=$("#wpTextbox1");if(r.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let p=r.textSelection("getContents"),i=p;if(i=E(i),i=v(i),i=L(i),i=I(i),i=N(i,[R,F]),i=M(i),i=y(i),i=D(i),i=O(i),i=P(i),i=y(i,!0),p===i)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let u=ve.init.target.getSurface().getModel();u.getLinearFragment(u.getRangeFromSourceOffsets(0,p.length)).insertContent(i),u.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else r.textSelection("setContents",i),r.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let h=document.querySelector("#wpSummary");h?h.value.includes(c.slice(1))||(h.value?h.value+=`; ${c.charAt(0).toLowerCase()+c.slice(1)}`:h.value=c):d=!0}})});function k(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function E(e){let d={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},c=["and","birth","career","death","education","life","of","or"],f=Object.fromEntries(Object.entries(d).flatMap(([u,a])=>[[u.toLowerCase(),u],...a.map(s=>[s,u])])),p=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(u=>{let{name:a}=u.groups,{startMarkup:s,endMarkup:g}=u.groups;a=a.replaceAll(/'{3}/g,"");let o=a.matchAll(/\[\[(.+?)]]/g).toArray();for(let t of o)a=a.replace(t[0],t[1].split("|").at(-1));let l=Math.max(s.length,g.length,2);return{name:a,depth:l,original:u[0]}}),i=new Set(p.map(u=>u.name)),h=p.length>0&&/^\n*=+ | =+\n+$/.test(p[0].original)?" ":"";for(let u of p){let a=u.name.toLowerCase(),g=a in f&&!i.has(f[a])?f[a]:u.name;for(let l of c)g=g.replaceAll(new RegExp(`\\b${l}\\b`,"gi"),l);g=g.charAt(0).toUpperCase()+g.slice(1);let o=`${"=".repeat(u.depth)}${h}${g}${h}${"=".repeat(u.depth)}`;u.original!==o&&(e=e.replace(u.original,`

${o}
`))}return e}function v(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function L(e){let c=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(r=>{let[p,i,h]=r;return{type:i.toUpperCase(),value:h,original:p}}),f=mw.Title.newFromText(mw.config.get("wgPageName"));for(let r of c){let p=new RegExp(`${k(r.original)}
*`,"g"),i=mw.Title.makeTitle(f.getNamespaceId(),r.value.includes(":")?r.value.split(":")[1]:r.value);if(!i)continue;if(f.toText()===i.toText()){e=e.replace(p,"");continue}let h=`{{${r.type}:${i.toText()}}}
`;e=e.replace(p,h)}return e}function I(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function N(e,d){let c=[],f=[],r=!1,p=!1,i=0;function h(s,g=!0){let o=e.slice(i,i+s.length)===s;return o&&g&&(i+=s.length),o}for(;i<e.length;)if(h("<nowiki>"))r=!0;else if(h("</nowiki>"))r=!1;else if(h("<!--"))p=!0;else if(h("-->"))p=!1;else if(!r&&!p)if(h("[["))f.push({start:i-2,end:-1,isNested:f.length>0});else if(h("]]")){let s=f.pop();if(!s)continue;s.end=i,c.push(s)}else i++;else i++;let u=[],a=Object.values(mw.config.get("wgFormattedNamespaces"));for(let s of c){let g=e.slice(s.start+2,s.end-2),[o,...l]=g.split("|");e=e.slice(0,s.start+2)+"\0".repeat(o.length)+e.slice(s.start+2+o.length);let t=o.replaceAll("_"," ").trim(),n=l.join("|");n=n===" "?" ":n.trim();let x=t.startsWith(":");x&&(t=t.slice(1));let m=!1,b=t.charAt(0).toUpperCase()+t.slice(1),T=t.charAt(0).toLowerCase()+t.slice(1),w=t.split(":")[0];w=w.charAt(0).toUpperCase()+w.slice(1),t.includes(":")&&(b.startsWith("Image:")&&(t=`${t.startsWith("Image:")?"F":"f"}ile:${t.slice(6)}`),x&&(["Image","File","Category"].includes(b.split(":")[0])||!a.includes(w))&&(m=!0));let A="";t===n?n="":new RegExp(`^${k(t)}[a-z]+$`).test(n)&&(A=n.slice(t.length),n="");for(let S of[b,T])S===n?(t=S,n=""):new RegExp(`^${k(S)}[a-z]+$`).test(n)&&(t=S,A=n.slice(S.length),n="");(n&&t.includes(":")&&a.includes(w)||t.startsWith("file:")||t.startsWith("category:"))&&(t=t.charAt(0).toUpperCase()+t.slice(1)),t=`${m?":":""}${t}`,t=t.padStart(o.length,"\0");let C=`[[${t}${n?`|${n}`:""}]]${A}`;u.push([s,C])}for(let s of d)e=s(e,1);for(let s=0;s<2;s++)for(let[g,o]of u)s===0&&g.isNested||s===1&&!g.isNested||(e=e.slice(0,g.start)+o.padEnd(g.end-g.start,"\0")+e.slice(g.end));for(let s of d)e=s(e,2);return e.replaceAll("\0","")}function R(e,d){let c="\x7F",f="\x9F";return d===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",c),e=e.replaceAll("\xA0",f)):(e=e.replaceAll(c,"..."),e=e.replaceAll(f,"&nbsp;")),e}function F(e,d){return d===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(c,f,r)=>`${f}\u2013${r}`.padEnd(c.length,"\0"))),e}function M(e){let d=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let c of d)for(;c.test(e);)e=e.replace(c,"");return e}function y(e,d=!1){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),e=e.replaceAll(/^ +| +$/gm,""),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),d||(e=e.replaceAll(/\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim(),e}function D(e){e=e.replaceAll(/((?:<ref(?!erences).*?>.*?<\/ref>)+)([!,.;?])/g,"$2$1");let d=[],c=!1,f=!1,r=0;function p(a){let s=e.slice(r,r+a.length)===a;return s&&(r+=a.length),s}function i(a){for(;r<e.length&&!p(a);)r++}for(;r<e.length;)if(p("<nowiki>"))c=!0;else if(p("</nowiki>"))c=!1;else if(p("<!--"))f=!0;else if(p("-->"))f=!1;else if(!c&&!f)if(!p("<references")&&p("<ref")){let a=r-4;i(">");let s=e.slice(a,r-1).trim().endsWith("/");d.push(s?{start:a,end:r,isSelfClosing:s}:{start:a,end:-1})}else p("</ref>")?d.at(-1).end=r:r++;else r++;let h=new DOMParser,u=[];for(let a of d){let s=e.slice(a.start,a.end),g=/<ref(?!erences).*?>/is.exec(s)[0],l=h.parseFromString(a.isSelfClosing?g.replace(/ *\/ *>/," />"):g+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),t=s.slice(g.length,-6).trim().replaceAll(/^\[ *([^\]]*) *]$/gm,"$1").trim();l=a.isSelfClosing||t.length===0?l.replace(/>\s*<\/ref>/," />"):`${l.slice(0,-6)}${t}</ref>`,s!==l&&u.push([s,l])}for(let[a,s]of u)e=e.replace(a,s);return e}function O(e){let d;(x=>(x[x.Expanded=0]="Expanded",x[x.ExpandedAligned=1]="ExpandedAligned",x[x.Minimized=2]="Minimized",x[x.MinimizedSpaced=3]="MinimizedSpaced"))(d||={});let c;(t=>(t[t.User=2]="User",t[t.Draft=118]="Draft"))(c||={});class f{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["automatic taxobox","blockquote","hybridbox","ichnobox","infobox","infraspeciesbox","listen","location map many","motorsport season","multiple image","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","sidebar","speciesbox","starbox","succession box","taxobox","virusbox"],2:["coord","end date","lang","langx","start date"],3:["infobox mapframe"]};namespaceSpecificTemplates={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};templatesToKeepContent=["draft categories"];constructor(l){this.location={start:l}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let m of this.subTemplates)m.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(m.fullText,this.placeholderStrings[0]);let l=this.fullTextEscaped.slice(2,-2).trim();for(let m of this.pipeEscapeRegexes)for(;m.test(l);)l=l.replaceAll(m,`$1${this.placeholderStrings[1]}$2`);let t=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];for(let m of t)l=l.replaceAll(m,(b,T,w)=>b.replace(w,w.replaceAll("=",this.placeholderStrings[2])));let n=l.split("|").map(m=>m.replaceAll(this.placeholderStrings[1],"|").trim());this.name=n.shift()?.replaceAll("_"," ");let x=n.map(m=>{let b=m.indexOf("=");if(b===-1)return{key:null,value:m.replaceAll(this.placeholderStrings[2],"=").trim()};let T=m.slice(b+1).replaceAll(this.placeholderStrings[2],"=");return{key:m.slice(0,b).trim(),value:`${T.startsWith(`
`)?`
`:""}${T.trim()}`}});this.parameters=x}shouldBeRemoved(){for(let[l,t]of Object.entries(this.namespaceSpecificTemplates))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(l)&&t.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let l=0,t;for(let[n,x]of Object.entries(this.defaultTemplateStyles))for(let m of x)this.name.toLowerCase().startsWith(m)&&m.length>=l&&(l=m.length,t=Number.parseInt(n));return t}cleanupParameters(){let l=new Set(["image","logo","cover"]);for(let t=1;t<=10;t++)l.add(`image${t}`);this.parameters=this.parameters.map(({key:t,value:n})=>(t&&l.has(t)&&(n=n.trim(),n.startsWith("[[")&&n.endsWith("]]")&&(n=/\[\[(.*?)]]/g.exec(n)[1].split("|")[0]),n=n.replace(/^(File|Image):/,"").replaceAll("_"," ")),{key:t,value:n}))}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.templatesToKeepContent.includes(this.name.toLowerCase())?this.parameters[0].value:"";let l=this.getStyle();if(l===void 0)return this.fullText;let t=[`{{${this.name}`];if(this.cleanupParameters(),l===0||l===1){let x=0;l===1&&(x=Math.max(...this.parameters.map(m=>m.key?.length??0)));for(let m of this.parameters)t.push(`| ${m.key?`${m.key.padEnd(x)} = `:""}${m.value}`)}else for(let x of this.parameters)x.value&&t.push(`|${x.key?`${x.key}=`:""}${x.value}`);t.push("}}"),t.length===2?(t[0]+="}}",t.pop()):l===3&&(t[t.length-2]+="}}",t.pop());let n=t.join(l===0||l===1?`
`:l===3?" ":"");for(let x of this.subTemplates)n=n.replace(this.placeholderStrings[0],x.format());return n}}let r=[],p=[],i=!1,h=!1,u=!1,a=0;function s(o){let l=e.slice(a,a+o.length)===o;return l&&(a+=o.length),l}for(;a<e.length;)if(s("<nowiki>"))h=!0;else if(s("</nowiki>"))h=!1;else if(s("<!--"))u=!0;else if(s("-->"))u=!1;else if(!h&&!u)if(s("[["))i=!0;else if(i&&s("]]"))i=!1;else if(s("{{")){let o=new f(a-2);p.length>0&&(o.isNested=!0,p.at(-1)?.subTemplates.push(o)),p.push(o)}else if(s("}}")){let o=p.pop();if(!o)continue;o.location.end=a,r.push(o)}else a++;else a++;let g=e;for(let o of r)o.isNested||(o.parse(),g=g.replace(o.fullText,o.format()));return g}function P(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let d=["EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created.","Inline citations added to your article will automatically display here.","Note: The following pages were redirects to "];for(let c of d)e=e.replaceAll(new RegExp(`<!-- ?${k(c)}.*?-->
?`,"gs"),"");return e}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
