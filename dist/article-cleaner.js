// <pre>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{var N=new mw.Api;async function C(e){return(await N.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:e})).query.pages[0].revisions?.[0].slots.main.content.trim()}(()=>{if(mw.config.get("wgNamespaceNumber")<0||!mw.config.get("wgIsProbablyEditable"))return;let e=["mediawiki.util","jquery.textSelection"];mw.config.get("skin")!=="minerva"&&e.push("mobile.editor.overlay"),mw.loader.using(e,()=>{let u=!1,d="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";function h(n){setTimeout(()=>{n.value.includes(d.slice(1))||(n.value+=n.value&&!n.value.startsWith("/* ")&&!n.value.endsWith(" */ ")?`; ${d.charAt(0).toLowerCase()+d.slice(1)}`:d)},0),u=!1}async function o(n){n.preventDefault();let m=$(mw.config.get("skin")==="minerva"?"#wikitext-editor":"#wpTextbox1");if(m.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let f=m.textSelection("getContents"),t=f;if(t=v(t),t=P(t),t=M(t),t=_(t),t=O(t),t=D(t,[F,H]),t=U(t),t=R(t),t=G(t),t=await W(t),t=j(t),t=R(t,!0),t=B(t),f===t)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let i=ve.init.target.getSurface().getModel();i.getLinearFragment(i.getRangeFromSourceOffsets(0,f.length)).insertContent(t),i.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else m.textSelection("setContents",t),m.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let r=document.querySelector("#wpSummary");r?h(r):u=!0}}mw.config.get("skin")==="minerva"?(mw.hook("mobileFrontend.editorOpened").add(()=>{let n=document.querySelector(".overlay-header .switcher-container"),f=new OO.ui.ButtonWidget({icon:"articleCheck",framed:!1}).$element[0];f.addEventListener("click",o),n.before(f)}),mw.hook("wikipage.content").add(n=>{if(n[0]?.classList.contains("preview")&&u){let m=document.querySelector(".summary-input textarea");h(m)}})):(mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner").addEventListener("click",o),mw.hook("ve.saveDialog.stateChanged").add(()=>{if(u){let m=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");h(m)}}))})})();function x(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function v(e){let u=/[\u0000-\u0009\u000B\u000C\u000E-\u001F\u007F\u00AD\u200B-\u200F\u202A-\u202E\u2060\u2063\uFEFF]/g;return u.test(e)&&(e=e.replaceAll(u,"")),e}function P(e){let u={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},d=["and","birth","career","death","education","life","of","or"],h=Object.fromEntries(Object.entries(u).flatMap(([t,r])=>[[t.toLowerCase(),t],...r.map(i=>[i,t])])),n=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(t=>{let{name:r}=t.groups,{startMarkup:i,endMarkup:c}=t.groups;r=r.replaceAll(/'{3}/g,"");let S=r.matchAll(/\[\[(.+?)]]/g).toArray();for(let a of S)r=r.replace(a[0],a[1].split("|").at(-1));let p=Math.max(i.length,c.length,2);return{name:r,depth:p,original:t[0]}}),m=new Set(n.map(t=>t.name)),f=n.length>0&&/^\n*=+ | =+\n+$/.test(n[0].original)?" ":"";for(let t of n){let r=t.name.toLowerCase(),c=r in h&&!m.has(h[r])?h[r]:t.name;for(let p of d)c=c.replaceAll(new RegExp(`\\b${p}\\b`,"gi"),p);c=c.charAt(0).toUpperCase()+c.slice(1);let S=`${"=".repeat(t.depth)}${f}${c}${f}${"=".repeat(t.depth)}`;t.original!==S&&(e=e.replace(t.original,`

${S}
`))}return e}function M(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function _(e){let d=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(o=>{let[n,m,f]=o;return{type:m.toUpperCase(),value:f,original:n}}),h=mw.Title.newFromText(mw.config.get("wgPageName"));for(let o of d){let n=new RegExp(`${x(o.original)}
*`,"g"),m=mw.Title.newFromText(o.value);if(!m)continue;let f=mw.Title.makeTitle(h.getNamespaceId(),m.getMainText());if(!f)continue;let t=o.type==="DISPLAYTITLE"?h.toText():h.getMainText(),r=o.type==="DISPLAYTITLE"?f.toText():f.getMainText();if(t===r){e=e.replace(n,"");continue}let i=`{{${o.type}:${r}}}
`;e=e.replace(n,i)}return e}function O(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function D(e,u){let d=[],h=[],o=!1,n=!1,m=0;function f(i,c=!0){let S=e.slice(m,m+i.length)===i;return S&&c&&(m+=i.length),S}for(;m<e.length;)if(f("<nowiki>"))o=!0;else if(f("</nowiki>"))o=!1;else if(f("<!--"))n=!0;else if(f("-->"))n=!1;else if(!o&&!n)if(f("[["))h.push({start:m-2,end:-1,isNested:h.length>0});else if(f("]]")){let i=h.pop();if(!i)continue;i.end=m,d.push(i)}else m++;else m++;let t=[],r=Object.values(mw.config.get("wgFormattedNamespaces"));for(let i of d){let c=e.slice(i.start+2,i.end-2),[S,...p]=c.split("|");e=e.slice(0,i.start+2)+"\0".repeat(S.length)+e.slice(i.start+2+S.length);let a=S.replaceAll("_"," ").trim(),s=p.join("|");s=s===" "?" ":s.trim();let E=a.startsWith(":");E&&(a=a.slice(1));let b=!1,l=a.charAt(0).toUpperCase()+a.slice(1),g=a.charAt(0).toLowerCase()+a.slice(1),T=a.split(":")[0];T=T.charAt(0).toUpperCase()+T.slice(1),a.includes(":")&&(l.startsWith("Image:")&&(a=`${a.startsWith("Image:")?"F":"f"}ile:${a.slice(6)}`),E&&(["Image","File","Category"].includes(l.split(":")[0])||!r.includes(T))&&(b=!0));let w="",L="",k=/^('{2,})(.*?)\1$/.exec(s);if(k&&!k[2].includes("''")&&(w=k[1],s=k[2].trim(),L=k[1]),/[!,.:;?]$/.test(s)&&!["Image","File","Category"].includes(l.split(":")[0])){let A=s.slice(-1);a.endsWith(A)||(L+=A,s=s.slice(0,-1))}a===s?s="":new RegExp(`^${x(a)}[a-z]+$`).test(s)&&(L=s.slice(a.length)+L,s="");for(let A of[l,g])A===s?(a=A,s=""):new RegExp(`^${x(A)}[a-z]+$`).test(s)&&(a=A,L=s.slice(A.length)+L,s="");(s&&a.includes(":")&&r.includes(T)||a.startsWith("file:")||a.startsWith("category:"))&&(a=a.charAt(0).toUpperCase()+a.slice(1)),a=`${b?":":""}${a}`,a=a.padStart(S.length,"\0");let I=`${w}[[${a}${s?`|${s}`:""}]]${L}`;t.push([i,I])}for(let i of u)e=i(e,1);for(let i=0;i<2;i++)for(let[c,S]of t)i===0&&c.isNested||i===1&&!c.isNested||(e=e.slice(0,c.start)+S.padEnd(c.end-c.start,"\0")+e.slice(c.end));for(let i of u)e=i(e,2);return e.replaceAll("\0","")}function F(e,u){return u===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026","\x7F"),e=e.replaceAll("\xA0","\x9F")):(e=e.replaceAll("\x7F","..."),e=e.replaceAll("\x9F","&nbsp;")),e}function H(e,u){return u===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(d,h,o)=>`${h}\u2013${o}`.padEnd(d.length,"\0"))),e}function U(e){let u=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let d of u)for(;d.test(e);)e=e.replace(d,"");return e}function R(e,u=!1){let h=["poem","pre","references","templatedata"],o=[];e=e.replaceAll(new RegExp(`(<(${h.join("|")})(?: [^<>]*?)?>)(.*?)(</\\2>)`,"gs"),(n,m,f,t,r)=>(t=t.replaceAll(/ +$/gm,"").trim(),o.push(`${m}
${t}
${r}`),"\u{F0000}")),e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),u||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`

$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),u||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim();for(let n of o)e=e.replace("\u{F0000}",n);return e}function G(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>.*?<\/ref>|<ref(?!erences).*?\/>)+)([!,.;?])?/g,(r,i,c)=>(c??"")+i);let u=[],d=!1,h=!1,o=0;function n(r){let i=e.slice(o,o+r.length)===r;return i&&(o+=r.length),i}function m(r){for(;o<e.length&&!n(r);)o++}for(;o<e.length;)if(n("<nowiki>"))d=!0;else if(n("</nowiki>"))d=!1;else if(n("<!--"))h=!0;else if(n("-->"))h=!1;else if(!d&&!h)if(!n("<references")&&n("<ref")){let r=o-4;m(">");let i=e.slice(r,o-1).trim().endsWith("/");u.push(i?{start:r,end:o,isSelfClosing:i}:{start:r,end:-1})}else n("</ref>")?u.at(-1).end=o:o++;else o++;let f=new DOMParser,t=[];for(let r of u){let i=e.slice(r.start,r.end),c=/<ref(?!erences).*?>/is.exec(i)[0],p=f.parseFromString(r.isSelfClosing?c.replace(/ *\/ *>/," />"):c+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),a=i.slice(c.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();p=r.isSelfClosing||a.length===0?p.replace(/>\s*<\/ref>/," />"):`${p.slice(0,-6)}${a}</ref>`,i!==p&&t.push([i,p])}for(let[r,i]of t)e=e.replace(r,i);return e}var y;async function W(e){let u;(b=>(b[b.Expanded=0]="Expanded",b[b.ExpandedAligned=1]="ExpandedAligned",b[b.Minimized=2]="Minimized",b[b.MinimizedSpaced=3]="MinimizedSpaced"))(u||={});let d;(E=>(E[E.User=2]="User",E[E.Template=10]="Template",E[E.Draft=118]="Draft"))(d||={}),y??=JSON.parse(await C("User:Eejit43/scripts/article-cleaner.json")??"[]");let h=Object.fromEntries(y.flatMap(p=>p.from.map(a=>[a.charAt(0).toLowerCase()+a.slice(1),p.to])));class o{location;isNested=!1;fullText;fullTextEscaped;rawName;name;parameters=[];subTemplates=[];PLACEHOLDER_STRINGS=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];PIPE_ESCAPE_REGEXES=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];TAG_EQUALS_ESCAPE_REGEXES=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];TEMPLATE_ALIASES=h;DEFAULT_TEMPLATE_STYLES={1:["album rating","album reviews","american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","chembox","cricket uniform","election box","emblem table","episode list","external music video","extra album cover","field hockey kit","football box","football kit","footballbox","gallery","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","judo bracket","judo repechage","listen","location map","medical resources","motorsport season","multiple image","music ratings","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","repechage","rugbybox","sidebar","single ratings","singles","song ratings","speciesbox","starbox","subject bar","succession box","taxobox","team bracket","track listing","tweet","virusbox","volleyball kit","weather box","nteambracket","2nteam-nteambracket","2teambracket","3teambracket","3teamrr","4teambracket","4teamrr","5teambracket","5teamrr","6teambracket","6teamrr","7teambracket","7teamrr","8teambracket","8teamroundrobin","8teamrr","9teambracket","10teambracket","11teambracket","12teambracket","13teambracket","14teambracket","15teambracket","16teambracket","18teambracket","20teambracket","24teambracket","27teambracket","32teambracket","40teambracket","48teambracket","64teambracket","128teambracket"],2:["birth date","coord","death date","end date","lang","start date"],3:["infobox mapframe"]};NAMESPACE_SPECIFIC_TEMPLATES={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};TEMPLATES_TO_KEEP_CONTENT=["draft categories"];TEMPLATES_TO_SUBST=["articlepagename","articlespace","basepagename","fullpagename","namespace","namespacenumber","pagename","rootpagename","subjectpagename","subjectspace","subpagename","talkpagename","talkspace","pagenamebase"];IMAGE_PARAMETERS=new Set(["cover","image_flag","image_seal","image_skyline","image","logo","map_image"]);IGNORED_IMAGE_SYNTAX=new Set(["thumb","thumbnail","frame","framed","frameless","border","right","left","center","none","baseline","middle","sub","super","text-top","text-bottom","top","bottom"]);constructor(a){this.location={start:a};for(let s=1;s<=10;s++)this.IMAGE_PARAMETERS.add(`image${s}`)}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let l of this.subTemplates)l.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(l.fullText,this.PLACEHOLDER_STRINGS[0]);let a=this.fullTextEscaped.slice(2,-2).trim();for(let l of this.PIPE_ESCAPE_REGEXES)for(;l.test(a);)a=a.replaceAll(l,`$1${this.PLACEHOLDER_STRINGS[1]}$2`);for(let l of this.TAG_EQUALS_ESCAPE_REGEXES)a=a.replaceAll(l,(g,T,w)=>g.replace(w,w.replaceAll("=",this.PLACEHOLDER_STRINGS[2])));let s=a.split("|").map(l=>l.replaceAll(this.PLACEHOLDER_STRINGS[1],"|").trim());this.rawName=s.shift(),this.name=this.rawName.replaceAll("_"," "),this.name.toLowerCase().startsWith("template:")&&(this.name=this.name.slice(9));let E=this.name.charAt(0).toLowerCase()+this.name.slice(1);if(E in this.TEMPLATE_ALIASES){let l=this.name.startsWith(this.name.charAt(0).toLowerCase()),g=this.TEMPLATE_ALIASES[E],T=g.startsWith(g.slice(0,2).toUpperCase())&&/^[A-Z]+$/.exec(g.slice(0,2));this.name=l&&!T?g.charAt(0).toLowerCase()+g.slice(1):g}let b=s.map(l=>{let g=l.indexOf("=");if(g===-1)return{key:null,value:l.replaceAll(this.PLACEHOLDER_STRINGS[2],"=").trim()};let T=l.slice(g+1).replaceAll(this.PLACEHOLDER_STRINGS[2],"=");return{key:l.slice(0,g).trim(),value:`${T.startsWith(`
`)?`
`:""}${T.trim()}`}});this.parameters=b}shouldBeRemoved(){for(let[a,s]of Object.entries(this.NAMESPACE_SPECIFIC_TEMPLATES))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(a)&&s.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let a=0,s;for(let[E,b]of Object.entries(this.DEFAULT_TEMPLATE_STYLES))for(let l of b)this.name.toLowerCase().startsWith(l)&&l.length>=a&&(a=l.length,s=Number.parseInt(E));return s}cleanupParameters(){this.parameters=this.parameters.map(({key:a,value:s})=>{if(a&&this.IMAGE_PARAMETERS.has(a)){s=s.trim();let E=s,b=[];s.startsWith("[[")&&s.endsWith("]]")&&(b=s.slice(2,-2).split("|"),s=b[0].trim()),s=s.replace(/^(File|Image):/,"").replaceAll("_"," ");let l=E.slice(2,-2).split("|").slice(1).map(g=>g.trim()).filter(g=>!this.IGNORED_IMAGE_SYNTAX.has(g)).join("|");l.length>0&&(s+=` <!-- Previous additional data: "${l}" -->`)}return{key:a,value:s}})}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.TEMPLATES_TO_KEEP_CONTENT.includes(this.name.toLowerCase())?this.parameters[0].value:"";let a=mw.config.get("wgNamespaceNumber")!==10&&this.TEMPLATES_TO_SUBST.some(l=>l===this.name.toLowerCase()||this.name.toLowerCase().startsWith(`${l}:`)),s=this.getStyle();if(s===void 0){let l=this.name;this.name.toLowerCase().startsWith("template:")&&(l=this.name.slice(9)),a&&(l=`subst:${l}`),l!==this.rawName&&(this.fullTextEscaped=this.fullTextEscaped.replace(this.rawName,l));for(let g of this.subTemplates)this.fullTextEscaped=this.fullTextEscaped.replace(this.PLACEHOLDER_STRINGS[0],g.format());return this.fullTextEscaped}let E=[`{{${a?"subst:":""}${this.name}`];if(this.cleanupParameters(),s===0||s===1){let l=0;s===1&&(l=Math.max(...this.parameters.map(g=>g.key?.length??0)));for(let[g,T]of this.parameters.entries())!T.key&&!T.value&&this.parameters.slice(g+1).every(w=>w.key??!w.value)||E.push(`| ${T.key?`${T.key.padEnd(l)} = `:""}${T.value}`)}else for(let[l,g]of this.parameters.entries())!g.value&&(g.key||this.parameters.slice(l+1).every(T=>T.key??!T.value))||E.push(`|${g.key?`${g.key}=`:""}${g.value}`);E.push("}}"),E.length===2?(E[0]+="}}",E.pop()):s===3&&(E[E.length-2]+="}}",E.pop());let b=E.join(s===0||s===1?`
`:s===3?" ":"");for(let l of this.subTemplates)b=b.replace(this.PLACEHOLDER_STRINGS[0],l.format());return b}}let n=[],m=[],f=!1,t=!1,r=!1,i=0;function c(p){let a=e.slice(i,i+p.length)===p;return a&&(i+=p.length),a}for(;i<e.length;)if(c("<nowiki>"))t=!0;else if(c("</nowiki>"))t=!1;else if(c("<!--"))r=!0;else if(c("-->"))r=!1;else if(!t&&!r)if(c("[["))f=!0;else if(f&&c("]]"))f=!1;else if(c("{{")){let p=new o(i-2);m.length>0&&(p.isNested=!0,m.at(-1)?.subTemplates.push(p)),m.push(p)}else if(c("}}")){let p=m.pop();if(!p)continue;p.location.end=i,n.push(p)}else i++;else i++;let S=e;for(let p of n)p.isNested||(p.parse(),S=S.replace(p.fullText,p.format()));return S}function j(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let u=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let d of u)e=e.replaceAll(new RegExp(` *<!-- ?${x(d)}.*?--> *
?`,"gs"),"");return e}function B(e){let u=mw.config.get("wgNamespaceNumber")!==0,d=!!new URLSearchParams(window.location.search).get("section"),h=mw.config.get("wgCategories").includes("All disambiguation pages"),o=mw.config.get("wgIsRedirect");if(u||d||h||o)return e;let n=[...e.matchAll(/\[\[Category:/g)].length;return e=e.replaceAll(/\n*{{(uncategorized|improve categories)(\|.+?)?}}({{|\n+|$)/gi,""),n===0&&!/{{uncategorized/i.test(e)?e+=`

{{Uncategorized|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`:n===1&&!/{{improve categories/i.test(e)&&(e+=`

{{Improve categories|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`),e}})();

// </pre>
//# sourceMappingURL=data:application/json;base64,
