// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),c=!1,g="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(c){let p=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");p.value.includes(g.slice(1))||(p.value&&!p.value.startsWith("/* ")&&!p.value.endsWith(" */ ")?p.value+=`; ${g.charAt(0).toLowerCase()+g.slice(1)}`:p.value=`${p.value}${g}`),c=!1}}),e.addEventListener("click",async p=>{p.preventDefault();let n=$("#wpTextbox1");if(n.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let f=n.textSelection("getContents"),a=f;if(a=E(a),a=C(a),a=N(a),a=L(a),a=R(a),a=I(a,[F,M]),a=O(a),a=v(a),a=P(a),a=await D(a),a=U(a),a=v(a,!0),a=W(a),f===a)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let m=ve.init.target.getSurface().getModel();m.getLinearFragment(m.getRangeFromSourceOffsets(0,f.length)).insertContent(a),m.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else n.textSelection("setContents",a),n.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let d=document.querySelector("#wpSummary");d?d.value.includes(g.slice(1))||(d.value?d.value+=`; ${g.charAt(0).toLowerCase()+g.slice(1)}`:d.value=g):c=!0}})});function A(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function E(e){let c=/[\u0000-\u0009\u000B\u000C\u000E-\u001F\u007F\u00AD\u200B-\u200F\u202A-\u202E\u2060\u2063\uFEFF]/g;return c.test(e)&&(e=e.replaceAll(c,"")),e}function C(e){let c={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},g=["and","birth","career","death","education","life","of","or"],p=Object.fromEntries(Object.entries(c).flatMap(([m,r])=>[[m.toLowerCase(),m],...r.map(s=>[s,m])])),f=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(m=>{let{name:r}=m.groups,{startMarkup:s,endMarkup:o}=m.groups;r=r.replaceAll(/'{3}/g,"");let b=r.matchAll(/\[\[(.+?)]]/g).toArray();for(let t of b)r=r.replace(t[0],t[1].split("|").at(-1));let T=Math.max(s.length,o.length,2);return{name:r,depth:T,original:m[0]}}),a=new Set(f.map(m=>m.name)),d=f.length>0&&/^\n*=+ | =+\n+$/.test(f[0].original)?" ":"";for(let m of f){let r=m.name.toLowerCase(),o=r in p&&!a.has(p[r])?p[r]:m.name;for(let T of g)o=o.replaceAll(new RegExp(`\\b${T}\\b`,"gi"),T);o=o.charAt(0).toUpperCase()+o.slice(1);let b=`${"=".repeat(m.depth)}${d}${o}${d}${"=".repeat(m.depth)}`;m.original!==b&&(e=e.replace(m.original,`

${b}
`))}return e}function N(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function L(e){let g=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(n=>{let[f,a,d]=n;return{type:a.toUpperCase(),value:d,original:f}}),p=mw.Title.newFromText(mw.config.get("wgPageName"));for(let n of g){let f=new RegExp(`${A(n.original)}
*`,"g"),a=mw.Title.newFromText(n.value);if(!a)continue;let d=mw.Title.makeTitle(p.getNamespaceId(),a.getMainText());if(!d)continue;let m=n.type==="DISPLAYTITLE"?p.toText():p.getMainText(),r=n.type==="DISPLAYTITLE"?d.toText():d.getMainText();if(m===r){e=e.replace(f,"");continue}let s=`{{${n.type}:${r}}}
`;e=e.replace(f,s)}return e}function R(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function I(e,c){let g=[],p=[],n=!1,f=!1,a=0;function d(s,o=!0){let b=e.slice(a,a+s.length)===s;return b&&o&&(a+=s.length),b}for(;a<e.length;)if(d("<nowiki>"))n=!0;else if(d("</nowiki>"))n=!1;else if(d("<!--"))f=!0;else if(d("-->"))f=!1;else if(!n&&!f)if(d("[["))p.push({start:a-2,end:-1,isNested:p.length>0});else if(d("]]")){let s=p.pop();if(!s)continue;s.end=a,g.push(s)}else a++;else a++;let m=[],r=Object.values(mw.config.get("wgFormattedNamespaces"));for(let s of g){let o=e.slice(s.start+2,s.end-2),[b,...T]=o.split("|");e=e.slice(0,s.start+2)+"\0".repeat(b.length)+e.slice(s.start+2+b.length);let t=b.replaceAll("_"," ").trim(),i=T.join("|");i=i===" "?" ":i.trim();let h=t.startsWith(":");h&&(t=t.slice(1));let l=!1,w=t.charAt(0).toUpperCase()+t.slice(1),x=t.charAt(0).toLowerCase()+t.slice(1),u=t.split(":")[0];u=u.charAt(0).toUpperCase()+u.slice(1),t.includes(":")&&(w.startsWith("Image:")&&(t=`${t.startsWith("Image:")?"F":"f"}ile:${t.slice(6)}`),h&&(["Image","File","Category"].includes(w.split(":")[0])||!r.includes(u))&&(l=!0));let k="";if(/[!',.:;?]$/.test(i)){let S=i.slice(-1);t.endsWith(S)||(k=S,i=i.slice(0,-1))}t===i?i="":new RegExp(`^${A(t)}[a-z]+$`).test(i)&&(k=i.slice(t.length)+k,i="");for(let S of[w,x])S===i?(t=S,i=""):new RegExp(`^${A(S)}[a-z]+$`).test(i)&&(t=S,k=i.slice(S.length)+k,i="");(i&&t.includes(":")&&r.includes(u)||t.startsWith("file:")||t.startsWith("category:"))&&(t=t.charAt(0).toUpperCase()+t.slice(1)),t=`${l?":":""}${t}`,t=t.padStart(b.length,"\0");let y=`[[${t}${i?`|${i}`:""}]]${k}`;m.push([s,y])}for(let s of c)e=s(e,1);for(let s=0;s<2;s++)for(let[o,b]of m)s===0&&o.isNested||s===1&&!o.isNested||(e=e.slice(0,o.start)+b.padEnd(o.end-o.start,"\0")+e.slice(o.end));for(let s of c)e=s(e,2);return e.replaceAll("\0","")}function F(e,c){let g="\x7F",p="\x9F";return c===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",g),e=e.replaceAll("\xA0",p)):(e=e.replaceAll(g,"..."),e=e.replaceAll(p,"&nbsp;")),e}function M(e,c){return c===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(g,p,n)=>`${p}\u2013${n}`.padEnd(g.length,"\0"))),e}function O(e){let c=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let g of c)for(;g.test(e);)e=e.replace(g,"");return e}function v(e,c=!1){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),c||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`

$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),c||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim(),e}function P(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>.*?<\/ref>|<ref(?!erences).*?\/>)+)([!,.;?])?/g,(r,s,o)=>(o??"")+s);let c=[],g=!1,p=!1,n=0;function f(r){let s=e.slice(n,n+r.length)===r;return s&&(n+=r.length),s}function a(r){for(;n<e.length&&!f(r);)n++}for(;n<e.length;)if(f("<nowiki>"))g=!0;else if(f("</nowiki>"))g=!1;else if(f("<!--"))p=!0;else if(f("-->"))p=!1;else if(!g&&!p)if(!f("<references")&&f("<ref")){let r=n-4;a(">");let s=e.slice(r,n-1).trim().endsWith("/");c.push(s?{start:r,end:n,isSelfClosing:s}:{start:r,end:-1})}else f("</ref>")?c.at(-1).end=n:n++;else n++;let d=new DOMParser,m=[];for(let r of c){let s=e.slice(r.start,r.end),o=/<ref(?!erences).*?>/is.exec(s)[0],T=d.parseFromString(r.isSelfClosing?o.replace(/ *\/ *>/," />"):o+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),t=s.slice(o.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();T=r.isSelfClosing||t.length===0?T.replace(/>\s*<\/ref>/," />"):`${T.slice(0,-6)}${t}</ref>`,s!==T&&m.push([s,T])}for(let[r,s]of m)e=e.replace(r,s);return e}async function D(e){let c;(w=>(w[w.Expanded=0]="Expanded",w[w.ExpandedAligned=1]="ExpandedAligned",w[w.Minimized=2]="Minimized",w[w.MinimizedSpaced=3]="MinimizedSpaced"))(c||={});let g;(l=>(l[l.User=2]="User",l[l.Template=10]="Template",l[l.Draft=118]="Draft"))(g||={});let p=JSON.parse((await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/article-cleaner.json"})).query.pages[0]?.revisions?.[0]?.slots?.main?.content||"[]"),n=Object.fromEntries(p.flatMap(t=>t.from.map(i=>[i.charAt(0).toLowerCase()+i.slice(1),t.to])));class f{location;isNested=!1;fullText;fullTextEscaped;rawName;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];templateAliases=n;defaultTemplateStyles={1:["album rating","album reviews","american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","chembox","cricket uniform","election box","episode list","external music video","extra album cover","field hockey kit","football box","football kit","footballbox","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","judo bracket","judo repechage","listen","location map","medical resources","motorsport season","multiple image","music ratings","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","repechage","rugbybox","sidebar","single ratings","singles","song ratings","speciesbox","starbox","succession box","taxobox","team bracket","track listing","tweet","virusbox","volleyball kit","nteambracket","2nteam-nteambracket","2teambracket","3teambracket","3teamrr","4teambracket","4teamrr","5teambracket","5teamrr","6teambracket","6teamrr","7teambracket","7teamrr","8teambracket","8teamroundrobin","8teamrr","9teambracket","10teambracket","11teambracket","12teambracket","13teambracket","14teambracket","15teambracket","16teambracket","18teambracket","20teambracket","24teambracket","27teambracket","32teambracket","40teambracket","48teambracket","64teambracket","128teambracket"],2:["birth date","coord","death date","end date","lang","start date"],3:["infobox mapframe"]};namespaceSpecificTemplates={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};templatesToKeepContent=["draft categories"];templatesToSubst=["articlepagename","articlespace","basepagename","fullpagename","namespace","namespacenumber","pagename","rootpagename","subjectpagename","subjectspace","subpagename","talkpagename","talkspace","pagenamebase"];constructor(i){this.location={start:i}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let u of this.subTemplates)u.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(u.fullText,this.placeholderStrings[0]);let i=this.fullTextEscaped.slice(2,-2).trim();for(let u of this.pipeEscapeRegexes)for(;u.test(i);)i=i.replaceAll(u,`$1${this.placeholderStrings[1]}$2`);let h=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];for(let u of h)i=i.replaceAll(u,(k,y,S)=>k.replace(S,S.replaceAll("=",this.placeholderStrings[2])));let l=i.split("|").map(u=>u.replaceAll(this.placeholderStrings[1],"|").trim());this.rawName=l.shift(),this.name=this.rawName.replaceAll("_"," "),this.name.toLowerCase().startsWith("template:")&&(this.name=this.name.slice(9));let w=this.name.charAt(0).toLowerCase()+this.name.slice(1);this.name=w in this.templateAliases?this.templateAliases[w]:this.name;let x=l.map(u=>{let k=u.indexOf("=");if(k===-1)return{key:null,value:u.replaceAll(this.placeholderStrings[2],"=").trim()};let y=u.slice(k+1).replaceAll(this.placeholderStrings[2],"=");return{key:u.slice(0,k).trim(),value:`${y.startsWith(`
`)?`
`:""}${y.trim()}`}});this.parameters=x}shouldBeRemoved(){for(let[i,h]of Object.entries(this.namespaceSpecificTemplates))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(i)&&h.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let i=0,h;for(let[l,w]of Object.entries(this.defaultTemplateStyles))for(let x of w)this.name.toLowerCase().startsWith(x)&&x.length>=i&&(i=x.length,h=Number.parseInt(l));return h}cleanupParameters(){let i=new Set(["cover","image_flag","image","logo","map_image"]);for(let h=1;h<=10;h++)i.add(`image${h}`);this.parameters=this.parameters.map(({key:h,value:l})=>(h&&i.has(h)&&(l=l.trim(),l.startsWith("[[")&&l.endsWith("]]")&&(l=/\[\[(.*?)]]/g.exec(l)[1].split("|")[0]),l=l.replace(/^(File|Image):/,"").replaceAll("_"," ")),{key:h,value:l}))}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.templatesToKeepContent.includes(this.name.toLowerCase())?this.parameters[0].value:"";let i=mw.config.get("wgNamespaceNumber")!==10&&this.templatesToSubst.some(x=>x===this.name.toLowerCase()||this.name.toLowerCase().startsWith(`${x}:`)),h=this.getStyle();if(h===void 0){let x=this.name;this.name.toLowerCase().startsWith("template:")&&(x=this.name.slice(9)),i&&(x=`subst:${x}`),x!==this.rawName&&(this.fullTextEscaped=this.fullTextEscaped.replace(this.rawName,x));for(let u of this.subTemplates)this.fullTextEscaped=this.fullTextEscaped.replace(this.placeholderStrings[0],u.format());return this.fullTextEscaped}let l=[`{{${i?"subst:":""}${this.name}`];if(this.cleanupParameters(),h===0||h===1){let x=0;h===1&&(x=Math.max(...this.parameters.map(u=>u.key?.length??0)));for(let[u,k]of this.parameters.entries())!k.key&&!k.value&&this.parameters.slice(u+1).every(y=>y.key??!y.value)||l.push(`| ${k.key?`${k.key.padEnd(x)} = `:""}${k.value}`)}else for(let[x,u]of this.parameters.entries())!u.value&&(u.key||this.parameters.slice(x+1).every(k=>k.key??!k.value))||l.push(`|${u.key?`${u.key}=`:""}${u.value}`);l.push("}}"),l.length===2?(l[0]+="}}",l.pop()):h===3&&(l[l.length-2]+="}}",l.pop());let w=l.join(h===0||h===1?`
`:h===3?" ":"");for(let x of this.subTemplates)w=w.replace(this.placeholderStrings[0],x.format());return w}}let a=[],d=[],m=!1,r=!1,s=!1,o=0;function b(t){let i=e.slice(o,o+t.length)===t;return i&&(o+=t.length),i}for(;o<e.length;)if(b("<nowiki>"))r=!0;else if(b("</nowiki>"))r=!1;else if(b("<!--"))s=!0;else if(b("-->"))s=!1;else if(!r&&!s)if(b("[["))m=!0;else if(m&&b("]]"))m=!1;else if(b("{{")){let t=new f(o-2);d.length>0&&(t.isNested=!0,d.at(-1)?.subTemplates.push(t)),d.push(t)}else if(b("}}")){let t=d.pop();if(!t)continue;t.location.end=o,a.push(t)}else o++;else o++;let T=e;for(let t of a)t.isNested||(t.parse(),T=T.replace(t.fullText,t.format()));return T}function U(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let c=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let g of c)e=e.replaceAll(new RegExp(` *<!-- ?${A(g)}.*?--> *
?`,"gs"),"");return e}function W(e){let c=[...e.matchAll(/\[\[Category:/g)].length;return e=e.replaceAll(/\n*{{(uncategorized|improve categories)(\|.+?)?}}\n*/gi,""),c===0&&!/{{uncategorized/i.test(e)?e+=`

{{Uncategorized|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`:c===1&&!/{{improve categories/i.test(e)&&(e+=`

{{Improve categories|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`),e}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
