// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),d=!1,u="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(d){let p=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");p.value.includes(u.slice(1))||(p.value&&!p.value.startsWith("/* ")&&!p.value.endsWith(" */ ")?p.value+=`; ${u.charAt(0).toLowerCase()+u.slice(1)}`:p.value=`${p.value}${u}`),d=!1}}),e.addEventListener("click",p=>{p.preventDefault();let r=$("#wpTextbox1");if(r.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let f=r.textSelection("getContents"),a=f;if(a=E(a),a=v(a),a=I(a),a=L(a),a=N(a,[F,M]),a=R(a),a=A(a),a=D(a),a=O(a),a=P(a),a=A(a,!0),f===a)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let o=ve.init.target.getSurface().getModel();o.getLinearFragment(o.getRangeFromSourceOffsets(0,f.length)).insertContent(a),o.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else r.textSelection("setContents",a),r.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let h=document.querySelector("#wpSummary");h?h.value.includes(u.slice(1))||(h.value?h.value+=`; ${u.charAt(0).toLowerCase()+u.slice(1)}`:h.value=u):d=!0}})});function k(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function E(e){let d={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},u=["and","birth","career","death","education","life","of","or"],p=Object.fromEntries(Object.entries(d).flatMap(([o,i])=>[[o.toLowerCase(),o],...i.map(s=>[s,o])])),f=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(o=>{let{name:i}=o.groups,{startMarkup:s,endMarkup:g}=o.groups;i=i.replaceAll(/'{3}/g,"");let c=i.matchAll(/\[\[(.+?)]]/g).toArray();for(let t of c)i=i.replace(t[0],t[1].split("|").at(-1));let l=Math.max(s.length,g.length,2);return{name:i,depth:l,original:o[0]}}),a=new Set(f.map(o=>o.name)),h=f.length>0&&/^\n*=+ | =+\n+$/.test(f[0].original)?" ":"";for(let o of f){let i=o.name.toLowerCase(),g=i in p&&!a.has(p[i])?p[i]:o.name;for(let l of u)g=g.replaceAll(new RegExp(`\\b${l}\\b`,"gi"),l);g=g.charAt(0).toUpperCase()+g.slice(1);let c=`${"=".repeat(o.depth)}${h}${g}${h}${"=".repeat(o.depth)}`;o.original!==c&&(e=e.replace(o.original,`

${c}
`))}return e}function v(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function I(e){let u=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(r=>{let[f,a,h]=r;return{type:a.toUpperCase(),value:h,original:f}}),p=mw.Title.newFromText(mw.config.get("wgPageName"));for(let r of u){let f=new RegExp(`${k(r.original)}
*`,"g"),a=mw.Title.makeTitle(p.getNamespaceId(),mw.Title.newFromText(r.value).getMainText());if(!a)continue;let h=r.type==="DISPLAYTITLE"?p.toText():p.getMainText(),o=r.type==="DISPLAYTITLE"?a.toText():a.getMainText();if(h===o){e=e.replace(f,"");continue}let i=`{{${r.type}:${o}}}
`;e=e.replace(f,i)}return e}function L(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function N(e,d){let u=[],p=[],r=!1,f=!1,a=0;function h(s,g=!0){let c=e.slice(a,a+s.length)===s;return c&&g&&(a+=s.length),c}for(;a<e.length;)if(h("<nowiki>"))r=!0;else if(h("</nowiki>"))r=!1;else if(h("<!--"))f=!0;else if(h("-->"))f=!1;else if(!r&&!f)if(h("[["))p.push({start:a-2,end:-1,isNested:p.length>0});else if(h("]]")){let s=p.pop();if(!s)continue;s.end=a,u.push(s)}else a++;else a++;let o=[],i=Object.values(mw.config.get("wgFormattedNamespaces"));for(let s of u){let g=e.slice(s.start+2,s.end-2),[c,...l]=g.split("|");e=e.slice(0,s.start+2)+"\0".repeat(c.length)+e.slice(s.start+2+c.length);let t=c.replaceAll("_"," ").trim(),n=l.join("|");n=n===" "?" ":n.trim();let b=t.startsWith(":");b&&(t=t.slice(1));let m=!1,x=t.charAt(0).toUpperCase()+t.slice(1),T=t.charAt(0).toLowerCase()+t.slice(1),w=t.split(":")[0];w=w.charAt(0).toUpperCase()+w.slice(1),t.includes(":")&&(x.startsWith("Image:")&&(t=`${t.startsWith("Image:")?"F":"f"}ile:${t.slice(6)}`),b&&(["Image","File","Category"].includes(x.split(":")[0])||!i.includes(w))&&(m=!0));let y="";t===n?n="":new RegExp(`^${k(t)}[a-z]+$`).test(n)&&(y=n.slice(t.length),n="");for(let S of[x,T])S===n?(t=S,n=""):new RegExp(`^${k(S)}[a-z]+$`).test(n)&&(t=S,y=n.slice(S.length),n="");(n&&t.includes(":")&&i.includes(w)||t.startsWith("file:")||t.startsWith("category:"))&&(t=t.charAt(0).toUpperCase()+t.slice(1)),t=`${m?":":""}${t}`,t=t.padStart(c.length,"\0");let C=`[[${t}${n?`|${n}`:""}]]${y}`;o.push([s,C])}for(let s of d)e=s(e,1);for(let s=0;s<2;s++)for(let[g,c]of o)s===0&&g.isNested||s===1&&!g.isNested||(e=e.slice(0,g.start)+c.padEnd(g.end-g.start,"\0")+e.slice(g.end));for(let s of d)e=s(e,2);return e.replaceAll("\0","")}function F(e,d){let u="\x7F",p="\x9F";return d===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",u),e=e.replaceAll("\xA0",p)):(e=e.replaceAll(u,"..."),e=e.replaceAll(p,"&nbsp;")),e}function M(e,d){return d===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(u,p,r)=>`${p}\u2013${r}`.padEnd(u.length,"\0"))),e}function R(e){let d=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let u of d)for(;u.test(e);)e=e.replace(u,"");return e}function A(e,d=!1){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),d||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),d||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim(),e}function D(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>(?:.(?!<\/ref))*?<\/ref>|<ref(?!erences)(?:.(?!<\/ref))*?\/>)+)([!,.;?])/g,"$2$1");let d=[],u=!1,p=!1,r=0;function f(i){let s=e.slice(r,r+i.length)===i;return s&&(r+=i.length),s}function a(i){for(;r<e.length&&!f(i);)r++}for(;r<e.length;)if(f("<nowiki>"))u=!0;else if(f("</nowiki>"))u=!1;else if(f("<!--"))p=!0;else if(f("-->"))p=!1;else if(!u&&!p)if(!f("<references")&&f("<ref")){let i=r-4;a(">");let s=e.slice(i,r-1).trim().endsWith("/");d.push(s?{start:i,end:r,isSelfClosing:s}:{start:i,end:-1})}else f("</ref>")?d.at(-1).end=r:r++;else r++;let h=new DOMParser,o=[];for(let i of d){let s=e.slice(i.start,i.end),g=/<ref(?!erences).*?>/is.exec(s)[0],l=h.parseFromString(i.isSelfClosing?g.replace(/ *\/ *>/," />"):g+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),t=s.slice(g.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();l=i.isSelfClosing||t.length===0?l.replace(/>\s*<\/ref>/," />"):`${l.slice(0,-6)}${t}</ref>`,s!==l&&o.push([s,l])}for(let[i,s]of o)e=e.replace(i,s);return e}function O(e){let d;(b=>(b[b.Expanded=0]="Expanded",b[b.ExpandedAligned=1]="ExpandedAligned",b[b.Minimized=2]="Minimized",b[b.MinimizedSpaced=3]="MinimizedSpaced"))(d||={});let u;(t=>(t[t.User=2]="User",t[t.Draft=118]="Draft"))(u||={});class p{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","cricket uniform","field hockey kit","football kit","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","listen","location map many","motorsport season","multiple image","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","sidebar","speciesbox","starbox","succession box","taxobox","virusbox","volleyball kit"],2:["coord","end date","lang","langx","start date"],3:["infobox mapframe"]};namespaceSpecificTemplates={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};templatesToKeepContent=["draft categories"];constructor(l){this.location={start:l}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let m of this.subTemplates)m.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(m.fullText,this.placeholderStrings[0]);let l=this.fullTextEscaped.slice(2,-2).trim();for(let m of this.pipeEscapeRegexes)for(;m.test(l);)l=l.replaceAll(m,`$1${this.placeholderStrings[1]}$2`);let t=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];for(let m of t)l=l.replaceAll(m,(x,T,w)=>x.replace(w,w.replaceAll("=",this.placeholderStrings[2])));let n=l.split("|").map(m=>m.replaceAll(this.placeholderStrings[1],"|").trim());this.name=n.shift()?.replaceAll("_"," ");let b=n.map(m=>{let x=m.indexOf("=");if(x===-1)return{key:null,value:m.replaceAll(this.placeholderStrings[2],"=").trim()};let T=m.slice(x+1).replaceAll(this.placeholderStrings[2],"=");return{key:m.slice(0,x).trim(),value:`${T.startsWith(`
`)?`
`:""}${T.trim()}`}});this.parameters=b}shouldBeRemoved(){for(let[l,t]of Object.entries(this.namespaceSpecificTemplates))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(l)&&t.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let l=0,t;for(let[n,b]of Object.entries(this.defaultTemplateStyles))for(let m of b)this.name.toLowerCase().startsWith(m)&&m.length>=l&&(l=m.length,t=Number.parseInt(n));return t}cleanupParameters(){let l=new Set(["image","logo","cover"]);for(let t=1;t<=10;t++)l.add(`image${t}`);this.parameters=this.parameters.map(({key:t,value:n})=>(t&&l.has(t)&&(n=n.trim(),n.startsWith("[[")&&n.endsWith("]]")&&(n=/\[\[(.*?)]]/g.exec(n)[1].split("|")[0]),n=n.replace(/^(File|Image):/,"").replaceAll("_"," ")),{key:t,value:n}))}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.templatesToKeepContent.includes(this.name.toLowerCase())?this.parameters[0].value:"";let l=this.getStyle();if(l===void 0)return this.fullText;let t=[`{{${this.name}`];if(this.cleanupParameters(),l===0||l===1){let b=0;l===1&&(b=Math.max(...this.parameters.map(m=>m.key?.length??0)));for(let m of this.parameters)t.push(`| ${m.key?`${m.key.padEnd(b)} = `:""}${m.value}`)}else for(let b of this.parameters)b.value&&t.push(`|${b.key?`${b.key}=`:""}${b.value}`);t.push("}}"),t.length===2?(t[0]+="}}",t.pop()):l===3&&(t[t.length-2]+="}}",t.pop());let n=t.join(l===0||l===1?`
`:l===3?" ":"");for(let b of this.subTemplates)n=n.replace(this.placeholderStrings[0],b.format());return n}}let r=[],f=[],a=!1,h=!1,o=!1,i=0;function s(c){let l=e.slice(i,i+c.length)===c;return l&&(i+=c.length),l}for(;i<e.length;)if(s("<nowiki>"))h=!0;else if(s("</nowiki>"))h=!1;else if(s("<!--"))o=!0;else if(s("-->"))o=!1;else if(!h&&!o)if(s("[["))a=!0;else if(a&&s("]]"))a=!1;else if(s("{{")){let c=new p(i-2);f.length>0&&(c.isNested=!0,f.at(-1)?.subTemplates.push(c)),f.push(c)}else if(s("}}")){let c=f.pop();if(!c)continue;c.location.end=i,r.push(c)}else i++;else i++;let g=e;for(let c of r)c.isNested||(c.parse(),g=g.replace(c.fullText,c.format()));return g}function P(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let d=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let u of d)e=e.replaceAll(new RegExp(` *<!-- ?${k(u)}.*?--> *
?`,"gs"),"");return e}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
