// <pre>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{var N=new mw.Api;async function C(e){return(await N.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:e})).query.pages[0].revisions?.[0].slots.main.content.trim()}(()=>{if(mw.config.get("wgNamespaceNumber")<0||!mw.config.get("wgIsProbablyEditable"))return;let e=["mediawiki.util","jquery.textSelection"];mw.config.get("skin")!=="minerva"&&e.push("mobile.editor.overlay"),mw.loader.using(e,()=>{let u=!1,g="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";function h(l){l.value.includes(g.slice(1))||(l.value&&!l.value.startsWith("/* ")&&!l.value.endsWith(" */ ")?l.value+=`; ${g.charAt(0).toLowerCase()+g.slice(1)}`:l.value=`${l.value}${g}`),u=!1}async function o(l){l.preventDefault();let p=$(mw.config.get("skin")==="minerva"?"#wikitext-editor":"#wpTextbox1");if(p.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let d=p.textSelection("getContents"),t=d;if(t=I(t),t=M(t),t=P(t),t=F(t),t=O(t),t=D(t,[_,H]),t=U(t),t=L(t),t=W(t),t=await j(t),t=G(t),t=L(t,!0),t=z(t),d===t)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let s=ve.init.target.getSurface().getModel();s.getLinearFragment(s.getRangeFromSourceOffsets(0,d.length)).insertContent(t),s.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else p.textSelection("setContents",t),p.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let r=document.querySelector("#wpSummary");r?h(r):u=!0}}mw.config.get("skin")==="minerva"?(mw.hook("mobileFrontend.editorOpened").add(()=>{let l=document.querySelector(".overlay-header .switcher-container"),d=new OO.ui.ButtonWidget({icon:"articleCheck",framed:!1}).$element[0];d.addEventListener("click",o),l.before(d)}),mw.hook("wikipage.content").add(l=>{if(l[0]?.classList.contains("preview")&&u){let p=document.querySelector(".summary-input textarea");h(p)}})):(mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner").addEventListener("click",o),mw.hook("ve.saveDialog.stateChanged").add(()=>{if(u){let p=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");h(p)}}))})})();function y(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function I(e){let u=/[\u0000-\u0009\u000B\u000C\u000E-\u001F\u007F\u00AD\u200B-\u200F\u202A-\u202E\u2060\u2063\uFEFF]/g;return u.test(e)&&(e=e.replaceAll(u,"")),e}function M(e){let u={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},g=["and","birth","career","death","education","life","of","or"],h=Object.fromEntries(Object.entries(u).flatMap(([t,r])=>[[t.toLowerCase(),t],...r.map(s=>[s,t])])),l=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(t=>{let{name:r}=t.groups,{startMarkup:s,endMarkup:c}=t.groups;r=r.replaceAll(/'{3}/g,"");let w=r.matchAll(/\[\[(.+?)]]/g).toArray();for(let a of w)r=r.replace(a[0],a[1].split("|").at(-1));let f=Math.max(s.length,c.length,2);return{name:r,depth:f,original:t[0]}}),p=new Set(l.map(t=>t.name)),d=l.length>0&&/^\n*=+ | =+\n+$/.test(l[0].original)?" ":"";for(let t of l){let r=t.name.toLowerCase(),c=r in h&&!p.has(h[r])?h[r]:t.name;for(let f of g)c=c.replaceAll(new RegExp(`\\b${f}\\b`,"gi"),f);c=c.charAt(0).toUpperCase()+c.slice(1);let w=`${"=".repeat(t.depth)}${d}${c}${d}${"=".repeat(t.depth)}`;t.original!==w&&(e=e.replace(t.original,`

${w}
`))}return e}function P(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function F(e){let g=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(o=>{let[l,p,d]=o;return{type:p.toUpperCase(),value:d,original:l}}),h=mw.Title.newFromText(mw.config.get("wgPageName"));for(let o of g){let l=new RegExp(`${y(o.original)}
*`,"g"),p=mw.Title.newFromText(o.value);if(!p)continue;let d=mw.Title.makeTitle(h.getNamespaceId(),p.getMainText());if(!d)continue;let t=o.type==="DISPLAYTITLE"?h.toText():h.getMainText(),r=o.type==="DISPLAYTITLE"?d.toText():d.getMainText();if(t===r){e=e.replace(l,"");continue}let s=`{{${o.type}:${r}}}
`;e=e.replace(l,s)}return e}function O(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function D(e,u){let g=[],h=[],o=!1,l=!1,p=0;function d(s,c=!0){let w=e.slice(p,p+s.length)===s;return w&&c&&(p+=s.length),w}for(;p<e.length;)if(d("<nowiki>"))o=!0;else if(d("</nowiki>"))o=!1;else if(d("<!--"))l=!0;else if(d("-->"))l=!1;else if(!o&&!l)if(d("[["))h.push({start:p-2,end:-1,isNested:h.length>0});else if(d("]]")){let s=h.pop();if(!s)continue;s.end=p,g.push(s)}else p++;else p++;let t=[],r=Object.values(mw.config.get("wgFormattedNamespaces"));for(let s of g){let c=e.slice(s.start+2,s.end-2),[w,...f]=c.split("|");e=e.slice(0,s.start+2)+"\0".repeat(w.length)+e.slice(s.start+2+w.length);let a=w.replaceAll("_"," ").trim(),i=f.join("|");i=i===" "?" ":i.trim();let m=a.startsWith(":");m&&(a=a.slice(1));let T=!1,n=a.charAt(0).toUpperCase()+a.slice(1),b=a.charAt(0).toLowerCase()+a.slice(1),E=a.split(":")[0];E=E.charAt(0).toUpperCase()+E.slice(1),a.includes(":")&&(n.startsWith("Image:")&&(a=`${a.startsWith("Image:")?"F":"f"}ile:${a.slice(6)}`),m&&(["Image","File","Category"].includes(n.split(":")[0])||!r.includes(E))&&(T=!0));let S="",x="",A=/^('{2,3})([^']+)\1$/.exec(i);if(A&&(S=A[1],i=A[2].trim(),x=A[1]),/[!,.:;?]$/.test(i)&&!["Image","File","Category"].includes(n.split(":")[0])){let k=i.slice(-1);a.endsWith(k)||(x+=k,i=i.slice(0,-1))}a===i?i="":new RegExp(`^${y(a)}[a-z]+$`).test(i)&&(x=i.slice(a.length)+x,i="");for(let k of[n,b])k===i?(a=k,i=""):new RegExp(`^${y(k)}[a-z]+$`).test(i)&&(a=k,x=i.slice(k.length)+x,i="");(i&&a.includes(":")&&r.includes(E)||a.startsWith("file:")||a.startsWith("category:"))&&(a=a.charAt(0).toUpperCase()+a.slice(1)),a=`${T?":":""}${a}`,a=a.padStart(w.length,"\0");let R=`${S}[[${a}${i?`|${i}`:""}]]${x}`;t.push([s,R])}for(let s of u)e=s(e,1);for(let s=0;s<2;s++)for(let[c,w]of t)s===0&&c.isNested||s===1&&!c.isNested||(e=e.slice(0,c.start)+w.padEnd(c.end-c.start,"\0")+e.slice(c.end));for(let s of u)e=s(e,2);return e.replaceAll("\0","")}function _(e,u){let g="\x7F",h="\x9F";return u===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",g),e=e.replaceAll("\xA0",h)):(e=e.replaceAll(g,"..."),e=e.replaceAll(h,"&nbsp;")),e}function H(e,u){return u===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(g,h,o)=>`${h}\u2013${o}`.padEnd(g.length,"\0"))),e}function U(e){let u=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let g of u)for(;g.test(e);)e=e.replace(g,"");return e}function L(e,u=!1){let g="\u{F0000}",h=["templatedata","poem","pre"],o=[];e=e.replaceAll(new RegExp(`(<(${h.join("|")})(?: [^<>]*?)?>)(.*?)(</\\2>)`,"gs"),(l,p,d,t,r)=>(t=t.replaceAll(/ +$/gm,"").trim(),o.push(`${p}
${t}
${r}`),g)),e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),u||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`

$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),u||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim();for(let l of o)e=e.replace(g,l);return e}function W(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>.*?<\/ref>|<ref(?!erences).*?\/>)+)([!,.;?])?/g,(r,s,c)=>(c??"")+s);let u=[],g=!1,h=!1,o=0;function l(r){let s=e.slice(o,o+r.length)===r;return s&&(o+=r.length),s}function p(r){for(;o<e.length&&!l(r);)o++}for(;o<e.length;)if(l("<nowiki>"))g=!0;else if(l("</nowiki>"))g=!1;else if(l("<!--"))h=!0;else if(l("-->"))h=!1;else if(!g&&!h)if(!l("<references")&&l("<ref")){let r=o-4;p(">");let s=e.slice(r,o-1).trim().endsWith("/");u.push(s?{start:r,end:o,isSelfClosing:s}:{start:r,end:-1})}else l("</ref>")?u.at(-1).end=o:o++;else o++;let d=new DOMParser,t=[];for(let r of u){let s=e.slice(r.start,r.end),c=/<ref(?!erences).*?>/is.exec(s)[0],f=d.parseFromString(r.isSelfClosing?c.replace(/ *\/ *>/," />"):c+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),a=s.slice(c.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();f=r.isSelfClosing||a.length===0?f.replace(/>\s*<\/ref>/," />"):`${f.slice(0,-6)}${a}</ref>`,s!==f&&t.push([s,f])}for(let[r,s]of t)e=e.replace(r,s);return e}var v;async function j(e){let u;(T=>(T[T.Expanded=0]="Expanded",T[T.ExpandedAligned=1]="ExpandedAligned",T[T.Minimized=2]="Minimized",T[T.MinimizedSpaced=3]="MinimizedSpaced"))(u||={});let g;(m=>(m[m.User=2]="User",m[m.Template=10]="Template",m[m.Draft=118]="Draft"))(g||={}),v??=JSON.parse(await C("User:Eejit43/scripts/article-cleaner.json")??"[]");let h=Object.fromEntries(v.flatMap(f=>f.from.map(a=>[a.charAt(0).toLowerCase()+a.slice(1),f.to])));class o{location;isNested=!1;fullText;fullTextEscaped;rawName;name;parameters=[];subTemplates=[];PLACEHOLDER_STRINGS=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];PIPE_ESCAPE_REGEXES=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];TAG_EQUALS_ESCAPE_REGEXES=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];templateAliases=h;defaultTemplateStyles={1:["album rating","album reviews","american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","chembox","cricket uniform","election box","episode list","external music video","extra album cover","field hockey kit","football box","football kit","footballbox","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","judo bracket","judo repechage","listen","location map","medical resources","motorsport season","multiple image","music ratings","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","repechage","rugbybox","sidebar","single ratings","singles","song ratings","speciesbox","starbox","succession box","taxobox","team bracket","track listing","tweet","virusbox","volleyball kit","nteambracket","2nteam-nteambracket","2teambracket","3teambracket","3teamrr","4teambracket","4teamrr","5teambracket","5teamrr","6teambracket","6teamrr","7teambracket","7teamrr","8teambracket","8teamroundrobin","8teamrr","9teambracket","10teambracket","11teambracket","12teambracket","13teambracket","14teambracket","15teambracket","16teambracket","18teambracket","20teambracket","24teambracket","27teambracket","32teambracket","40teambracket","48teambracket","64teambracket","128teambracket"],2:["birth date","coord","death date","end date","lang","start date"],3:["infobox mapframe"]};namespaceSpecificTemplates={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};templatesToKeepContent=["draft categories"];templatesToSubst=["articlepagename","articlespace","basepagename","fullpagename","namespace","namespacenumber","pagename","rootpagename","subjectpagename","subjectspace","subpagename","talkpagename","talkspace","pagenamebase"];constructor(a){this.location={start:a}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let n of this.subTemplates)n.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(n.fullText,this.PLACEHOLDER_STRINGS[0]);let a=this.fullTextEscaped.slice(2,-2).trim();for(let n of this.PIPE_ESCAPE_REGEXES)for(;n.test(a);)a=a.replaceAll(n,`$1${this.PLACEHOLDER_STRINGS[1]}$2`);for(let n of this.TAG_EQUALS_ESCAPE_REGEXES)a=a.replaceAll(n,(b,E,S)=>b.replace(S,S.replaceAll("=",this.PLACEHOLDER_STRINGS[2])));let i=a.split("|").map(n=>n.replaceAll(this.PLACEHOLDER_STRINGS[1],"|").trim());this.rawName=i.shift(),this.name=this.rawName.replaceAll("_"," "),this.name.toLowerCase().startsWith("template:")&&(this.name=this.name.slice(9));let m=this.name.charAt(0).toLowerCase()+this.name.slice(1);if(m in this.templateAliases){let n=this.name.startsWith(this.name.charAt(0).toLowerCase()),b=this.templateAliases[m];this.name=n?b.charAt(0).toLowerCase()+b.slice(1):b}let T=i.map(n=>{let b=n.indexOf("=");if(b===-1)return{key:null,value:n.replaceAll(this.PLACEHOLDER_STRINGS[2],"=").trim()};let E=n.slice(b+1).replaceAll(this.PLACEHOLDER_STRINGS[2],"=");return{key:n.slice(0,b).trim(),value:`${E.startsWith(`
`)?`
`:""}${E.trim()}`}});this.parameters=T}shouldBeRemoved(){for(let[a,i]of Object.entries(this.namespaceSpecificTemplates))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(a)&&i.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let a=0,i;for(let[m,T]of Object.entries(this.defaultTemplateStyles))for(let n of T)this.name.toLowerCase().startsWith(n)&&n.length>=a&&(a=n.length,i=Number.parseInt(m));return i}cleanupParameters(){let a=new Set(["cover","image_flag","image","logo","map_image"]);for(let i=1;i<=10;i++)a.add(`image${i}`);this.parameters=this.parameters.map(({key:i,value:m})=>(i&&a.has(i)&&(m=m.trim(),m.startsWith("[[")&&m.endsWith("]]")&&(m=/\[\[(.*?)]]/g.exec(m)[1].split("|")[0]),m=m.replace(/^(File|Image):/,"").replaceAll("_"," ")),{key:i,value:m}))}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.templatesToKeepContent.includes(this.name.toLowerCase())?this.parameters[0].value:"";let a=mw.config.get("wgNamespaceNumber")!==10&&this.templatesToSubst.some(n=>n===this.name.toLowerCase()||this.name.toLowerCase().startsWith(`${n}:`)),i=this.getStyle();if(i===void 0){let n=this.name;this.name.toLowerCase().startsWith("template:")&&(n=this.name.slice(9)),a&&(n=`subst:${n}`),n!==this.rawName&&(this.fullTextEscaped=this.fullTextEscaped.replace(this.rawName,n));for(let b of this.subTemplates)this.fullTextEscaped=this.fullTextEscaped.replace(this.PLACEHOLDER_STRINGS[0],b.format());return this.fullTextEscaped}let m=[`{{${a?"subst:":""}${this.name}`];if(this.cleanupParameters(),i===0||i===1){let n=0;i===1&&(n=Math.max(...this.parameters.map(b=>b.key?.length??0)));for(let[b,E]of this.parameters.entries())!E.key&&!E.value&&this.parameters.slice(b+1).every(S=>S.key??!S.value)||m.push(`| ${E.key?`${E.key.padEnd(n)} = `:""}${E.value}`)}else for(let[n,b]of this.parameters.entries())!b.value&&(b.key||this.parameters.slice(n+1).every(E=>E.key??!E.value))||m.push(`|${b.key?`${b.key}=`:""}${b.value}`);m.push("}}"),m.length===2?(m[0]+="}}",m.pop()):i===3&&(m[m.length-2]+="}}",m.pop());let T=m.join(i===0||i===1?`
`:i===3?" ":"");for(let n of this.subTemplates)T=T.replace(this.PLACEHOLDER_STRINGS[0],n.format());return T}}let l=[],p=[],d=!1,t=!1,r=!1,s=0;function c(f){let a=e.slice(s,s+f.length)===f;return a&&(s+=f.length),a}for(;s<e.length;)if(c("<nowiki>"))t=!0;else if(c("</nowiki>"))t=!1;else if(c("<!--"))r=!0;else if(c("-->"))r=!1;else if(!t&&!r)if(c("[["))d=!0;else if(d&&c("]]"))d=!1;else if(c("{{")){let f=new o(s-2);p.length>0&&(f.isNested=!0,p.at(-1)?.subTemplates.push(f)),p.push(f)}else if(c("}}")){let f=p.pop();if(!f)continue;f.location.end=s,l.push(f)}else s++;else s++;let w=e;for(let f of l)f.isNested||(f.parse(),w=w.replace(f.fullText,f.format()));return w}function G(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let u=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let g of u)e=e.replaceAll(new RegExp(` *<!-- ?${y(g)}.*?--> *
?`,"gs"),"");return e}function z(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let u=[...e.matchAll(/\[\[Category:/g)].length;return e=e.replaceAll(/\n*{{(uncategorized|improve categories)(\|.+?)?}}({{|\n+|$)/gi,""),u===0&&!/{{uncategorized/i.test(e)?e+=`

{{Uncategorized|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`:u===1&&!/{{improve categories/i.test(e)&&(e+=`

{{Improve categories|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`),e}})();

// </pre>
//# sourceMappingURL=data:application/json;base64,
