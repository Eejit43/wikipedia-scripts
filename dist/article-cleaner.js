// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner").addEventListener("click",d=>{d.preventDefault();let p=$("#wpTextbox1");if(p.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let s=p.textSelection("getContents");if(!s)return mw.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});s=T(s),s=k(s),s=b(s),s=w(s),s=S(s),s=y(s),s=E(s),p.textSelection("setContents",s),p.textSelection("setSelection",{start:0}),mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"})})});function T(t){let d;(i=>(i[i.Expanded=0]="Expanded",i[i.ExpandedAligned=1]="ExpandedAligned",i[i.Minimized=2]="Minimized",i[i.MinimizedSpaced=3]="MinimizedSpaced"))(d||={});class p{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"],2:["coord","start date","end date"]};constructor(o){this.location={start:o}}parse(){this.fullText=t.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let i of this.subTemplates)i.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(i.fullText,this.placeholderStrings[0]);let o=this.fullTextEscaped.slice(2,-2).trim();for(let i of this.pipeEscapeRegexes)for(;i.test(o);)o=o.replaceAll(i,`$1${this.placeholderStrings[1]}$2`);let c=o.split("|").map(i=>i.replaceAll(this.placeholderStrings[1],"|").trim());this.name=c.shift();let g=c.map(i=>{let h=i.indexOf("=");return h===-1?{key:null,value:i.trim()}:{key:i.slice(0,h).trim(),value:i.slice(h+1).trim()}});this.parameters=g}getStyle(){for(let[o,c]of Object.entries(this.defaultTemplateStyles))for(let g of c)if(this.name.toLowerCase().startsWith(g))return Number.parseInt(o)}format(){this.fullText||this.parse();let o=this.getStyle();if(o===void 0)return this.fullText;let c=[`{{${this.name}`];if(o===0||o===1){let i=0;o===1&&(i=Math.max(...this.parameters.map(h=>h.key?.length??0)));for(let h of this.parameters)c.push(`| ${h.key?`${h.key.padEnd(i)} = `:""}${h.value}`)}else for(let i of this.parameters)i.value&&c.push(`|${i.key?`${i.key}=`:""}${i.value}`);c.push("}}"),c.length===2?(c[0]+="}}",c.pop()):o===3&&(c[c.length-2]+="}}",c.pop());let g=c.join(o===0||o===1?`
`:o===3?" ":"");for(let i of this.subTemplates)g=g.replace(this.placeholderStrings[0],i.format());return g}}let s=[],u=[],m=!1,e=!1,r=!1,l=0;function f(a,o=!0){let c=t.slice(l,l+a.length)===a;return c&&o&&(l+=a.length),c}for(;l<t.length;)if(f("<nowiki>"))e=!0;else if(f("</nowiki>"))e=!1;else if(f("<!--"))r=!0;else if(f("-->"))r=!1;else if(!e&&!r)if(f("[["))m=!0;else if(m&&f("]]"))m=!1;else if(f("{{")){let a=new p(l-2);u.length>0&&(a.isNested=!0,u.at(-1)?.subTemplates.push(a)),u.push(a)}else if(f("}}")){let a=u.pop();if(!a)continue;a.location.end=l,s.push(a)}else l++;else l++;let n=t;for(let a of s)a.isNested||(a.parse(),n=n.replace(a.fullText,a.format()));return n}function k(t){let d={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},p=["life","career"],s=Object.fromEntries(Object.entries(d).flatMap(([e,r])=>r.map(l=>[l,e]))),m=[...t.matchAll(/(?<=\n)(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(?=\n)/g)].map(e=>{let{startMarkup:r,name:l,endMarkup:f}=e.groups,n=l.replaceAll(/'{3}| {2,}/g,""),a=Math.max(r.length,f.length,2);return{name:n,depth:a,original:e[0]}});for(let e of m){let l=e.name.toLowerCase()in s?s[e.name.toLowerCase()]:e.name;for(let n of p)l=l.replaceAll(new RegExp(`\\b${n}\\b`,"gi"),n);l=l.charAt(0).toUpperCase()+l.slice(1);let f=`${"=".repeat(e.depth)} ${l} ${"=".repeat(e.depth)}`;e.original!==f&&(t=t.replace(e.original,f))}return t}function b(t){return t.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function w(t){let p=[...t.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(u=>{let[m,e,r]=u;return{type:e.toUpperCase(),value:r,original:m}}),s=mw.Title.newFromText(mw.config.get("wgPageName"));for(let u of p){let m=new RegExp(`${u.original.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}
*`,"g"),e=mw.Title.makeTitle(s.getNamespaceId(),u.value.includes(":")?u.value.split(":")[1]:u.value);if(s.toText()===e.toText()){t=t.replace(m,"");continue}let r=`{{${u.type}:${e.toText()}}}
`;t=t.replace(m,r)}return t}function S(t){return t.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,"[[Category:$2]]")}function y(t){let d=[],p=[],s=0;function u(e,r=!0){let l=t.slice(s,s+e.length)===e;return l&&r&&(s+=e.length),l}for(;s<t.length;)if(u("[["))p.push({start:s-2,end:-1,isNested:p.length>0});else if(u("]]")){let e=p.pop();if(!e)continue;e.end=s,d.push(e)}else s++;let m=[];for(let e of d){let r=t.slice(e.start+2,e.end-2),[l,...f]=r.split("|"),n=l.replaceAll("_"," ").trim(),a=f.join("|").trim(),o=n.startsWith(":");o&&(n=n.slice(1));let c=!1,g=n.charAt(0).toUpperCase()+n.slice(1),i=n.charAt(0).toLowerCase()+n.slice(1);n.includes(":")&&(g.startsWith("Image:")&&(n=`${n.startsWith("Image:")?"F":"f"}ile:${n.slice(6)}`),o&&["Image","File","Category"].includes(g.split(":")[0])&&(c=!0)),n===a&&(a="");for(let x of[g,i])x===a&&(a="",n=x);(a&&n.includes(":")||n.startsWith("file:")||n.startsWith("category:"))&&(n=n.charAt(0).toUpperCase()+n.slice(1));let h=`[[${c?":":""}${n}${a?`|${a}`:""}]]`;m.push([e,h])}for(let e=0;e<2;e++)for(let[r,l]of m)e===0&&r.isNested||e===1&&!r.isNested||(t=t.slice(0,r.start)+l.padStart(r.end-r.start,"\0")+t.slice(r.end));return t.replaceAll("\0","")}function E(t){let d=[/'+(Bold|Italic)( text)?'+\s*/g,/(<big>)+Big( text)?(<\/big>)+\s*/g,/(<small>)+Small( text)?(<\/small>)+\s*/g,/(<sup>)+Superscript( text)?(<\/sup>)+\s*/g,/(<sub>)+Subscript( text)?(<\/sub>)+\s*/g,/(<s>)+Strikethrough(<\/s>)+\s*/g,/(<u>)+Underline(<\/u>)+\s*/g,/(<code>)+Computer code(<\/code>)+\s*/g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+\s*/g,/=+ Heading text =+\s*/g,/\* Bulleted list item\s*/g,/# Numbered list item\s*/g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery>\s*/g,/#REDIRECT \[\[Target page name]]\s*/g,/<!-- Invisible comment -->\s*/g,/<noinclude>\s*<\/noinclude>\s*/g];for(let p of d)for(;p.test(t);)t=t.replace(p,"");return t}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
