// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let t=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),m=!1,c="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(m){let r=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");r.value.includes(c.slice(1))||(r.value?r.value+=`; ${c.charAt(0).toLowerCase()+c.slice(1)}`:r.value=c),m=!1}}),t.addEventListener("click",r=>{r.preventDefault();let p=$("#wpTextbox1");if(p.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let g=p.textSelection("getContents"),e=g;if(e=S(e),e=w(e),e=b(e),e=k(e),e=y(e),e=E(e),e=v(e),e=C(e),g===e)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let n=ve.init.target.getSurface().getModel();n.getLinearFragment(n.getRangeFromSourceOffsets(0,g.length)).insertContent(e),n.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else p.textSelection("setContents",e),p.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let l=document.querySelector("#wpSummary");l?l.value.includes(c.slice(1))||(l.value?l.value+=`; ${c.charAt(0).toLowerCase()+c.slice(1)}`:l.value=c):m=!0}})});function S(t){let m={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},c=["life","career"],r=Object.fromEntries(Object.entries(m).flatMap(([e,l])=>l.map(n=>[n,e]))),g=[...t.matchAll(/(?<=\n)(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(?=\n)/g)].map(e=>{let{startMarkup:l,name:n,endMarkup:f}=e.groups,s=n.replaceAll(/'{3}/g,""),i=Math.max(l.length,f.length,2);return{name:s,depth:i,original:e[0]}});for(let e of g){let n=e.name.toLowerCase()in r?r[e.name.toLowerCase()]:e.name;for(let s of c)n=n.replaceAll(new RegExp(`\\b${s}\\b`,"gi"),s);n=n.charAt(0).toUpperCase()+n.slice(1);let f=`${"=".repeat(e.depth)} ${n} ${"=".repeat(e.depth)}`;e.original!==f&&(t=t.replace(e.original,f))}return t}function w(t){return t.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function b(t){let c=[...t.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(p=>{let[g,e,l]=p;return{type:e.toUpperCase(),value:l,original:g}}),r=mw.Title.newFromText(mw.config.get("wgPageName"));for(let p of c){let g=new RegExp(`${p.original.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}
*`,"g"),e=mw.Title.makeTitle(r.getNamespaceId(),p.value.includes(":")?p.value.split(":")[1]:p.value);if(r.toText()===e.toText()){t=t.replace(g,"");continue}let l=`{{${p.type}:${e.toText()}}}
`;t=t.replace(g,l)}return t}function k(t){return t.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,"[[Category:$2]]")}function y(t){let m=[],c=[],r=0;function p(e,l=!0){let n=t.slice(r,r+e.length)===e;return n&&l&&(r+=e.length),n}for(;r<t.length;)if(p("[["))c.push({start:r-2,end:-1,isNested:c.length>0});else if(p("]]")){let e=c.pop();if(!e)continue;e.end=r,m.push(e)}else r++;let g=[];for(let e of m){let l=t.slice(e.start+2,e.end-2),[n,...f]=l.split("|"),s=n.replaceAll("_"," ").trim(),i=f.join("|").trim(),o=s.startsWith(":");o&&(s=s.slice(1));let u=!1,h=s.charAt(0).toUpperCase()+s.slice(1),a=s.charAt(0).toLowerCase()+s.slice(1);s.includes(":")&&(h.startsWith("Image:")&&(s=`${s.startsWith("Image:")?"F":"f"}ile:${s.slice(6)}`),o&&["Image","File","Category"].includes(h.split(":")[0])&&(u=!0));let d="";s===i?i="":new RegExp(`^${s.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}[a-z]+$`).test(i)&&(d=i.slice(s.length),i="");for(let x of[h,a])x===i?(s=x,i=""):new RegExp(`^${x.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}[a-z]+$`).test(i)&&(s=x,d=i.slice(x.length),i="");(i&&s.includes(":")||s.startsWith("file:")||s.startsWith("category:"))&&(s=s.charAt(0).toUpperCase()+s.slice(1));let T=`[[${u?":":""}${s}${i?`|${i}`:""}]]${d}`;g.push([e,T])}for(let e=0;e<2;e++)for(let[l,n]of g)e===0&&l.isNested||e===1&&!l.isNested||(t=t.slice(0,l.start)+n.padStart(l.end-l.start,"\0")+t.slice(l.end));return t.replaceAll("\0","")}function E(t){let m=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<noinclude>\s*<\/noinclude> */g];for(let c of m)for(;c.test(t);)t=t.replace(c,"");return t}function v(t){return t=t.replaceAll(/(\b) {2,}(\b)/g,"$1 $2"),t=t.replaceAll(/(\n|^) +| +(\n|$)/g,"$1$2"),t=t.replaceAll(/\n{3,}/g,`

`),t=t.replace(/\s*({{[^}]*stub}})/i,`


$1`),t=t.replaceAll(/\s+$/g,""),t}function C(t){let m;(a=>(a[a.Expanded=0]="Expanded",a[a.ExpandedAligned=1]="ExpandedAligned",a[a.Minimized=2]="Minimized",a[a.MinimizedSpaced=3]="MinimizedSpaced"))(m||={});class c{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"],2:["coord","start date","end date"]};constructor(o){this.location={start:o}}parse(){this.fullText=t.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let a of this.subTemplates)a.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(a.fullText,this.placeholderStrings[0]);let o=this.fullTextEscaped.slice(2,-2).trim();for(let a of this.pipeEscapeRegexes)for(;a.test(o);)o=o.replaceAll(a,`$1${this.placeholderStrings[1]}$2`);let u=o.split("|").map(a=>a.replaceAll(this.placeholderStrings[1],"|").trim());this.name=u.shift();let h=u.map(a=>{let d=a.indexOf("=");return d===-1?{key:null,value:a.trim()}:{key:a.slice(0,d).trim(),value:a.slice(d+1).trim()}});this.parameters=h}getStyle(){for(let[o,u]of Object.entries(this.defaultTemplateStyles))for(let h of u)if(this.name.toLowerCase().startsWith(h))return Number.parseInt(o)}format(){this.fullText||this.parse();let o=this.getStyle();if(o===void 0)return this.fullText;let u=[`{{${this.name}`];if(o===0||o===1){let a=0;o===1&&(a=Math.max(...this.parameters.map(d=>d.key?.length??0)));for(let d of this.parameters)u.push(`| ${d.key?`${d.key.padEnd(a)} = `:""}${d.value}`)}else for(let a of this.parameters)a.value&&u.push(`|${a.key?`${a.key}=`:""}${a.value}`);u.push("}}"),u.length===2?(u[0]+="}}",u.pop()):o===3&&(u[u.length-2]+="}}",u.pop());let h=u.join(o===0||o===1?`
`:o===3?" ":"");for(let a of this.subTemplates)h=h.replace(this.placeholderStrings[0],a.format());return h}}let r=[],p=[],g=!1,e=!1,l=!1,n=0;function f(i,o=!0){let u=t.slice(n,n+i.length)===i;return u&&o&&(n+=i.length),u}for(;n<t.length;)if(f("<nowiki>"))e=!0;else if(f("</nowiki>"))e=!1;else if(f("<!--"))l=!0;else if(f("-->"))l=!1;else if(!e&&!l)if(f("[["))g=!0;else if(g&&f("]]"))g=!1;else if(f("{{")){let i=new c(n-2);p.length>0&&(i.isNested=!0,p.at(-1)?.subTemplates.push(i)),p.push(i)}else if(f("}}")){let i=p.pop();if(!i)continue;i.location.end=n,r.push(i)}else n++;else n++;let s=t;for(let i of r)i.isNested||(i.parse(),s=s.replace(i.fullText,i.format()));return s}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
