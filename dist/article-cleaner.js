// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),d=!1,p="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(d){let f=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");f.value.includes(p.slice(1))||(f.value?f.value+=`; ${p.charAt(0).toLowerCase()+p.slice(1)}`:f.value=p),d=!1}}),e.addEventListener("click",f=>{f.preventDefault();let l=$("#wpTextbox1");if(l.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let u=l.textSelection("getContents"),s=u;if(s=E(s),s=L(s),s=v(s),s=I(s),s=N(s,[F,M]),s=R(s),s=k(s),s=D(s),s=O(s),s=P(s),s=k(s,!0),u===s)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let o=ve.init.target.getSurface().getModel();o.getLinearFragment(o.getRangeFromSourceOffsets(0,u.length)).insertContent(s),o.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else l.textSelection("setContents",s),l.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let h=document.querySelector("#wpSummary");h?h.value.includes(p.slice(1))||(h.value?h.value+=`; ${p.charAt(0).toLowerCase()+p.slice(1)}`:h.value=p):d=!0}})});function y(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function E(e){let d={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},p=["and","birth","career","death","education","life","of","or"],f=Object.fromEntries(Object.entries(d).flatMap(([o,a])=>[[o.toLowerCase(),o],...a.map(i=>[i,o])])),u=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(o=>{let{name:a}=o.groups,{startMarkup:i,endMarkup:g}=o.groups;a=a.replaceAll(/'{3}/g,"");let c=a.matchAll(/\[\[(.+?)]]/g).toArray();for(let t of c)a=a.replace(t[0],t[1].split("|").at(-1));let r=Math.max(i.length,g.length,2);return{name:a,depth:r,original:o[0]}}),s=new Set(u.map(o=>o.name)),h=u.length>0&&/^\n*=+ | =+\n+$/.test(u[0].original)?" ":"";for(let o of u){let a=o.name.toLowerCase(),g=a in f&&!s.has(f[a])?f[a]:o.name;for(let r of p)g=g.replaceAll(new RegExp(`\\b${r}\\b`,"gi"),r);g=g.charAt(0).toUpperCase()+g.slice(1);let c=`${"=".repeat(o.depth)}${h}${g}${h}${"=".repeat(o.depth)}`;o.original!==c&&(e=e.replace(o.original,`

${c}
`))}return e}function L(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function v(e){let p=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(l=>{let[u,s,h]=l;return{type:s.toUpperCase(),value:h,original:u}}),f=mw.Title.newFromText(mw.config.get("wgPageName"));for(let l of p){let u=new RegExp(`${y(l.original)}
*`,"g"),s=mw.Title.makeTitle(f.getNamespaceId(),mw.Title.newFromText(l.value).getMainText());if(!s)continue;let h=l.type==="DISPLAYTITLE"?f.toText():f.getMainText(),o=l.type==="DISPLAYTITLE"?s.toText():s.getMainText();if(console.log(s,o),h===o){e=e.replace(u,"");continue}let a=`{{${l.type}:${o}}}
`;e=e.replace(u,a)}return e}function I(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function N(e,d){let p=[],f=[],l=!1,u=!1,s=0;function h(i,g=!0){let c=e.slice(s,s+i.length)===i;return c&&g&&(s+=i.length),c}for(;s<e.length;)if(h("<nowiki>"))l=!0;else if(h("</nowiki>"))l=!1;else if(h("<!--"))u=!0;else if(h("-->"))u=!1;else if(!l&&!u)if(h("[["))f.push({start:s-2,end:-1,isNested:f.length>0});else if(h("]]")){let i=f.pop();if(!i)continue;i.end=s,p.push(i)}else s++;else s++;let o=[],a=Object.values(mw.config.get("wgFormattedNamespaces"));for(let i of p){let g=e.slice(i.start+2,i.end-2),[c,...r]=g.split("|");e=e.slice(0,i.start+2)+"\0".repeat(c.length)+e.slice(i.start+2+c.length);let t=c.replaceAll("_"," ").trim(),n=r.join("|");n=n===" "?" ":n.trim();let x=t.startsWith(":");x&&(t=t.slice(1));let m=!1,b=t.charAt(0).toUpperCase()+t.slice(1),T=t.charAt(0).toLowerCase()+t.slice(1),w=t.split(":")[0];w=w.charAt(0).toUpperCase()+w.slice(1),t.includes(":")&&(b.startsWith("Image:")&&(t=`${t.startsWith("Image:")?"F":"f"}ile:${t.slice(6)}`),x&&(["Image","File","Category"].includes(b.split(":")[0])||!a.includes(w))&&(m=!0));let A="";t===n?n="":new RegExp(`^${y(t)}[a-z]+$`).test(n)&&(A=n.slice(t.length),n="");for(let S of[b,T])S===n?(t=S,n=""):new RegExp(`^${y(S)}[a-z]+$`).test(n)&&(t=S,A=n.slice(S.length),n="");(n&&t.includes(":")&&a.includes(w)||t.startsWith("file:")||t.startsWith("category:"))&&(t=t.charAt(0).toUpperCase()+t.slice(1)),t=`${m?":":""}${t}`,t=t.padStart(c.length,"\0");let C=`[[${t}${n?`|${n}`:""}]]${A}`;o.push([i,C])}for(let i of d)e=i(e,1);for(let i=0;i<2;i++)for(let[g,c]of o)i===0&&g.isNested||i===1&&!g.isNested||(e=e.slice(0,g.start)+c.padEnd(g.end-g.start,"\0")+e.slice(g.end));for(let i of d)e=i(e,2);return e.replaceAll("\0","")}function F(e,d){let p="\x7F",f="\x9F";return d===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",p),e=e.replaceAll("\xA0",f)):(e=e.replaceAll(p,"..."),e=e.replaceAll(f,"&nbsp;")),e}function M(e,d){return d===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(p,f,l)=>`${f}\u2013${l}`.padEnd(p.length,"\0"))),e}function R(e){let d=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let p of d)for(;p.test(e);)e=e.replace(p,"");return e}function k(e,d=!1){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),d||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),d||(e=e.replaceAll(/\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim(),e}function D(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>(?:.(?!<\/ref))*?<\/ref>|<ref(?!erences)(?:.(?!<\/ref))*?\/>)+)([!,.;?])/g,"$2$1");let d=[],p=!1,f=!1,l=0;function u(a){let i=e.slice(l,l+a.length)===a;return i&&(l+=a.length),i}function s(a){for(;l<e.length&&!u(a);)l++}for(;l<e.length;)if(u("<nowiki>"))p=!0;else if(u("</nowiki>"))p=!1;else if(u("<!--"))f=!0;else if(u("-->"))f=!1;else if(!p&&!f)if(!u("<references")&&u("<ref")){let a=l-4;s(">");let i=e.slice(a,l-1).trim().endsWith("/");d.push(i?{start:a,end:l,isSelfClosing:i}:{start:a,end:-1})}else u("</ref>")?d.at(-1).end=l:l++;else l++;let h=new DOMParser,o=[];for(let a of d){let i=e.slice(a.start,a.end),g=/<ref(?!erences).*?>/is.exec(i)[0],r=h.parseFromString(a.isSelfClosing?g.replace(/ *\/ *>/," />"):g+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),t=i.slice(g.length,-6).trim().replaceAll(/^\[ *([^\]]*) *]$/gm,"$1").trim();r=a.isSelfClosing||t.length===0?r.replace(/>\s*<\/ref>/," />"):`${r.slice(0,-6)}${t}</ref>`,i!==r&&o.push([i,r])}for(let[a,i]of o)e=e.replace(a,i);return e}function O(e){let d;(x=>(x[x.Expanded=0]="Expanded",x[x.ExpandedAligned=1]="ExpandedAligned",x[x.Minimized=2]="Minimized",x[x.MinimizedSpaced=3]="MinimizedSpaced"))(d||={});let p;(t=>(t[t.User=2]="User",t[t.Draft=118]="Draft"))(p||={});class f{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["automatic taxobox","blockquote","hybridbox","ichnobox","infobox","infraspeciesbox","listen","location map many","motorsport season","multiple image","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","sidebar","speciesbox","starbox","succession box","taxobox","virusbox"],2:["coord","end date","lang","langx","start date"],3:["infobox mapframe"]};namespaceSpecificTemplates={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};templatesToKeepContent=["draft categories"];constructor(r){this.location={start:r}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let m of this.subTemplates)m.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(m.fullText,this.placeholderStrings[0]);let r=this.fullTextEscaped.slice(2,-2).trim();for(let m of this.pipeEscapeRegexes)for(;m.test(r);)r=r.replaceAll(m,`$1${this.placeholderStrings[1]}$2`);let t=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];for(let m of t)r=r.replaceAll(m,(b,T,w)=>b.replace(w,w.replaceAll("=",this.placeholderStrings[2])));let n=r.split("|").map(m=>m.replaceAll(this.placeholderStrings[1],"|").trim());this.name=n.shift()?.replaceAll("_"," ");let x=n.map(m=>{let b=m.indexOf("=");if(b===-1)return{key:null,value:m.replaceAll(this.placeholderStrings[2],"=").trim()};let T=m.slice(b+1).replaceAll(this.placeholderStrings[2],"=");return{key:m.slice(0,b).trim(),value:`${T.startsWith(`
`)?`
`:""}${T.trim()}`}});this.parameters=x}shouldBeRemoved(){for(let[r,t]of Object.entries(this.namespaceSpecificTemplates))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(r)&&t.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let r=0,t;for(let[n,x]of Object.entries(this.defaultTemplateStyles))for(let m of x)this.name.toLowerCase().startsWith(m)&&m.length>=r&&(r=m.length,t=Number.parseInt(n));return t}cleanupParameters(){let r=new Set(["image","logo","cover"]);for(let t=1;t<=10;t++)r.add(`image${t}`);this.parameters=this.parameters.map(({key:t,value:n})=>(t&&r.has(t)&&(n=n.trim(),n.startsWith("[[")&&n.endsWith("]]")&&(n=/\[\[(.*?)]]/g.exec(n)[1].split("|")[0]),n=n.replace(/^(File|Image):/,"").replaceAll("_"," ")),{key:t,value:n}))}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.templatesToKeepContent.includes(this.name.toLowerCase())?this.parameters[0].value:"";let r=this.getStyle();if(r===void 0)return this.fullText;let t=[`{{${this.name}`];if(this.cleanupParameters(),r===0||r===1){let x=0;r===1&&(x=Math.max(...this.parameters.map(m=>m.key?.length??0)));for(let m of this.parameters)t.push(`| ${m.key?`${m.key.padEnd(x)} = `:""}${m.value}`)}else for(let x of this.parameters)x.value&&t.push(`|${x.key?`${x.key}=`:""}${x.value}`);t.push("}}"),t.length===2?(t[0]+="}}",t.pop()):r===3&&(t[t.length-2]+="}}",t.pop());let n=t.join(r===0||r===1?`
`:r===3?" ":"");for(let x of this.subTemplates)n=n.replace(this.placeholderStrings[0],x.format());return n}}let l=[],u=[],s=!1,h=!1,o=!1,a=0;function i(c){let r=e.slice(a,a+c.length)===c;return r&&(a+=c.length),r}for(;a<e.length;)if(i("<nowiki>"))h=!0;else if(i("</nowiki>"))h=!1;else if(i("<!--"))o=!0;else if(i("-->"))o=!1;else if(!h&&!o)if(i("[["))s=!0;else if(s&&i("]]"))s=!1;else if(i("{{")){let c=new f(a-2);u.length>0&&(c.isNested=!0,u.at(-1)?.subTemplates.push(c)),u.push(c)}else if(i("}}")){let c=u.pop();if(!c)continue;c.location.end=a,l.push(c)}else a++;else a++;let g=e;for(let c of l)c.isNested||(c.parse(),g=g.replace(c.fullText,c.format()));return g}function P(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let d=["EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created.","Inline citations added to your article will automatically display here.","Note: The following pages were redirects to "];for(let p of d)e=e.replaceAll(new RegExp(`<!-- ?${y(p)}.*?-->
?`,"gs"),"");return e}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
