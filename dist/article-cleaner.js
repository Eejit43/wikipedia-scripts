// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner").addEventListener("click",d=>{d.preventDefault();let c=$("#wpTextbox1");if(c.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let s=c.textSelection("getContents");if(!s)return mw.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});s=k(s),s=b(s),s=w(s),s=S(s),s=E(s),s=y(s),s=C(s),s=A(s),c.textSelection("setContents",s),c.textSelection("setSelection",{start:0}),mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"})})});function k(e){return e=e.replaceAll(/(\b) {2,}(\b)/g,"$1 $2"),e=e.replaceAll(/(\n|^) +| +(\n|$)/g,"$1"),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e}function b(e){let d;(l=>(l[l.Expanded=0]="Expanded",l[l.ExpandedAligned=1]="ExpandedAligned",l[l.Minimized=2]="Minimized",l[l.MinimizedSpaced=3]="MinimizedSpaced"))(d||={});class c{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"],2:["coord","start date","end date"]};constructor(o){this.location={start:o}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let l of this.subTemplates)l.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(l.fullText,this.placeholderStrings[0]);let o=this.fullTextEscaped.slice(2,-2).trim();for(let l of this.pipeEscapeRegexes)for(;l.test(o);)o=o.replaceAll(l,`$1${this.placeholderStrings[1]}$2`);let p=o.split("|").map(l=>l.replaceAll(this.placeholderStrings[1],"|").trim());this.name=p.shift();let h=p.map(l=>{let m=l.indexOf("=");return m===-1?{key:null,value:l.trim()}:{key:l.slice(0,m).trim(),value:l.slice(m+1).trim()}});this.parameters=h}getStyle(){for(let[o,p]of Object.entries(this.defaultTemplateStyles))for(let h of p)if(this.name.toLowerCase().startsWith(h))return Number.parseInt(o)}format(){this.fullText||this.parse();let o=this.getStyle();if(o===void 0)return this.fullText;let p=[`{{${this.name}`];if(o===0||o===1){let l=0;o===1&&(l=Math.max(...this.parameters.map(m=>m.key?.length??0)));for(let m of this.parameters)p.push(`| ${m.key?`${m.key.padEnd(l)} = `:""}${m.value}`)}else for(let l of this.parameters)l.value&&p.push(`|${l.key?`${l.key}=`:""}${l.value}`);p.push("}}"),p.length===2?(p[0]+="}}",p.pop()):o===3&&(p[p.length-2]+="}}",p.pop());let h=p.join(o===0||o===1?`
`:o===3?" ":"");for(let l of this.subTemplates)h=h.replace(this.placeholderStrings[0],l.format());return h}}let s=[],u=[],g=!1,t=!1,r=!1,n=0;function f(i,o=!0){let p=e.slice(n,n+i.length)===i;return p&&o&&(n+=i.length),p}for(;n<e.length;)if(f("<nowiki>"))t=!0;else if(f("</nowiki>"))t=!1;else if(f("<!--"))r=!0;else if(f("-->"))r=!1;else if(!t&&!r)if(f("[["))g=!0;else if(g&&f("]]"))g=!1;else if(f("{{")){let i=new c(n-2);u.length>0&&(i.isNested=!0,u.at(-1)?.subTemplates.push(i)),u.push(i)}else if(f("}}")){let i=u.pop();if(!i)continue;i.location.end=n,s.push(i)}else n++;else n++;let a=e;for(let i of s)i.isNested||(i.parse(),a=a.replace(i.fullText,i.format()));return a}function w(e){let d={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},c=["life","career"],s=Object.fromEntries(Object.entries(d).flatMap(([t,r])=>r.map(n=>[n,t]))),g=[...e.matchAll(/(?<=\n)(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(?=\n)/g)].map(t=>{let{startMarkup:r,name:n,endMarkup:f}=t.groups,a=n.replaceAll(/'{3}/g,""),i=Math.max(r.length,f.length,2);return{name:a,depth:i,original:t[0]}});for(let t of g){let n=t.name.toLowerCase()in s?s[t.name.toLowerCase()]:t.name;for(let a of c)n=n.replaceAll(new RegExp(`\\b${a}\\b`,"gi"),a);n=n.charAt(0).toUpperCase()+n.slice(1);let f=`${"=".repeat(t.depth)} ${n} ${"=".repeat(t.depth)}`;t.original!==f&&(e=e.replace(t.original,f))}return e}function S(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function E(e){let c=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(u=>{let[g,t,r]=u;return{type:t.toUpperCase(),value:r,original:g}}),s=mw.Title.newFromText(mw.config.get("wgPageName"));for(let u of c){let g=new RegExp(`${u.original.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}
*`,"g"),t=mw.Title.makeTitle(s.getNamespaceId(),u.value.includes(":")?u.value.split(":")[1]:u.value);if(s.toText()===t.toText()){e=e.replace(g,"");continue}let r=`{{${u.type}:${t.toText()}}}
`;e=e.replace(g,r)}return e}function y(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,"[[Category:$2]]")}function C(e){let d=[],c=[],s=0;function u(t,r=!0){let n=e.slice(s,s+t.length)===t;return n&&r&&(s+=t.length),n}for(;s<e.length;)if(u("[["))c.push({start:s-2,end:-1,isNested:c.length>0});else if(u("]]")){let t=c.pop();if(!t)continue;t.end=s,d.push(t)}else s++;let g=[];for(let t of d){let r=e.slice(t.start+2,t.end-2),[n,...f]=r.split("|"),a=n.replaceAll("_"," ").trim(),i=f.join("|").trim(),o=a.startsWith(":");o&&(a=a.slice(1));let p=!1,h=a.charAt(0).toUpperCase()+a.slice(1),l=a.charAt(0).toLowerCase()+a.slice(1);a.includes(":")&&(h.startsWith("Image:")&&(a=`${a.startsWith("Image:")?"F":"f"}ile:${a.slice(6)}`),o&&["Image","File","Category"].includes(h.split(":")[0])&&(p=!0));let m="";a===i?i="":new RegExp(`^${a.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}[a-z]+$`).test(i)&&(m=i.slice(a.length),i="");for(let x of[h,l])x===i?(a=x,i=""):new RegExp(`^${x.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}[a-z]+$`).test(i)&&(a=x,m=i.slice(x.length),i="");(i&&a.includes(":")||a.startsWith("file:")||a.startsWith("category:"))&&(a=a.charAt(0).toUpperCase()+a.slice(1));let T=`[[${p?":":""}${a}${i?`|${i}`:""}]]${m}`;g.push([t,T])}for(let t=0;t<2;t++)for(let[r,n]of g)t===0&&r.isNested||t===1&&!r.isNested||(e=e.slice(0,r.start)+n.padStart(r.end-r.start,"\0")+e.slice(r.end));return e.replaceAll("\0","")}function A(e){let d=[/'+(Bold|Italic)( text)?'+\s*/g,/(<big>)+Big( text)?(<\/big>)+\s*/g,/(<small>)+Small( text)?(<\/small>)+\s*/g,/(<sup>)+Superscript( text)?(<\/sup>)+\s*/g,/(<sub>)+Subscript( text)?(<\/sub>)+\s*/g,/(<s>)+Strikethrough(<\/s>)+\s*/g,/(<u>)+Underline(<\/u>)+\s*/g,/(<code>)+Computer code(<\/code>)+\s*/g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+\s*/g,/=+ Heading text =+\s*/g,/\* Bulleted list item\s*/g,/# Numbered list item\s*/g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery>\s*/g,/#REDIRECT \[\[Target page name]]\s*/g,/<!-- Invisible comment -->\s*/g,/<noinclude>\s*<\/noinclude>\s*/g];for(let c of d)for(;c.test(e);)e=e.replace(c,"");return e}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
