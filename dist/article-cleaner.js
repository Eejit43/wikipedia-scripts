// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner").addEventListener("click",f=>{f.preventDefault();let p=$("#wpTextbox1");if(p.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let n=p.textSelection("getContents");if(!n)return mw.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});n=g(n),console.log(n),p.textSelection("setContents",n),p.textSelection("setSelection",{start:0}),mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"})})});function g(c){let f;(e=>(e[e.Expanded=0]="Expanded",e[e.ExpandedAligned=1]="ExpandedAligned",e[e.Minimized=2]="Minimized",e[e.MinimizedSpaced=3]="MinimizedSpaced"))(f||={});class p{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"],2:["coord","start date","end date"]};constructor(t){this.location={start:t}}parse(){this.fullText=c.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let e of this.subTemplates)e.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(e.fullText,"");let t=this.fullTextEscaped.slice(2,-2).trim();for(let e of this.pipeEscapeRegexes)for(;e.test(t);)t=t.replaceAll(e,"$1$2");let i=t.split("|").map(e=>e.replaceAll("","|").trim());this.name=i.shift();let r=i.map(e=>{let l=e.indexOf("=");return l===-1?{key:null,value:e.trim()}:{key:e.slice(0,l).trim(),value:e.slice(l+1).trim()}});this.parameters=r}getStyle(){for(let[t,i]of Object.entries(this.defaultTemplateStyles))for(let r of i)if(this.name.toLowerCase().startsWith(r))return Number.parseInt(t)}format(){this.fullText||this.parse();let t=this.getStyle();if(t===void 0)return this.fullText;let i=[`{{${this.name}`];if(t===0||t===1){let e=0;t===1&&(e=Math.max(...this.parameters.map(l=>l.key?.length??0)));for(let l of this.parameters)i.push(`| ${l.key?`${l.key.padEnd(e)} = `:""}${l.value}`)}else for(let e of this.parameters)e.value&&i.push(`|${e.key?`${e.key}=`:""}${e.value}`);i.push("}}"),i.length===2?(i[0]+="}}",i.pop()):t===3&&(i[i.length-2]+="}}",i.pop());let r=i.join(t===0||t===1?`
`:t===3?" ":"");for(let e of this.subTemplates)console.log(r,e.format()),r=r.replace("",e.format());return r}}let n=[],u=[],m=!1,d=!1,h=!1,a=0;function o(s,t=!0){let i=c.slice(a,a+s.length)===s;return i&&t&&(a+=s.length),i}for(;a<c.length;)if(o("<nowiki>"))d=!0;else if(o("</nowiki>"))d=!1;else if(o("<!--"))h=!0;else if(o("-->"))h=!1;else if(!d&&!h)if(o("[["))m=!0;else if(m&&o("]]"))m=!1;else if(o("{{")){let s=new p(a-2);u.length>0&&(s.isNested=!0,u.at(-1)?.subTemplates.push(s)),u.push(s)}else if(o("}}")){let s=u.pop();if(!s)continue;s.location.end=a,n.push(s)}else a++;else a++;let x=c;for(let s of n)s.isNested||(s.parse(),x=x.replace(s.fullText,s.format()));return x}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
