// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),f=!1,a="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(f){let u=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");u.value.includes(a.slice(1))||(u.value?u.value+=`; ${a.charAt(0).toLowerCase()+a.slice(1)}`:u.value=a),f=!1}}),e.addEventListener("click",u=>{u.preventDefault();let p=$("#wpTextbox1");if(p.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let g=p.textSelection("getContents"),i=g;if(i=C(i),i=A(i),i=y(i),i=v(i),i=E(i,[L]),i=I(i),i=N(i),i=M(i),i=R(i),g===i)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let t=ve.init.target.getSurface().getModel();t.getLinearFragment(t.getRangeFromSourceOffsets(0,g.length)).insertContent(i),t.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else p.textSelection("setContents",i),p.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let l=document.querySelector("#wpSummary");l?l.value.includes(a.slice(1))||(l.value?l.value+=`; ${a.charAt(0).toLowerCase()+a.slice(1)}`:l.value=a):f=!0}})});function b(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function C(e){let f={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},a=["life","career"],u=Object.fromEntries(Object.entries(f).flatMap(([l,t])=>t.map(r=>[r,l]))),g=[...e.matchAll(/\n+(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)\n+/g)].map(l=>{let{name:t}=l.groups,{startMarkup:r,endMarkup:m}=l.groups;t=t.replaceAll(/'{3}/g,"");let c=t.matchAll(/\[\[(.+?)]]/g).toArray();for(let n of c)t=t.replace(n[0],n[1].split("|").at(-1));let s=Math.max(r.length,m.length,2);return{name:t,depth:s,original:l[0]}}),i=/^\n+=+ | =+\n+$/.test(g[0].original)?" ":"";for(let l of g){let r=l.name.toLowerCase()in u?u[l.name.toLowerCase()]:l.name;for(let c of a)r=r.replaceAll(new RegExp(`\\b${c}\\b`,"gi"),c);r=r.charAt(0).toUpperCase()+r.slice(1);let m=`${"=".repeat(l.depth)}${i}${r}${i}${"=".repeat(l.depth)}`;l.original!==m&&(e=e.replace(l.original,`

${m}
`))}return e}function A(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function y(e){let a=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(p=>{let[g,i,l]=p;return{type:i.toUpperCase(),value:l,original:g}}),u=mw.Title.newFromText(mw.config.get("wgPageName"));for(let p of a){let g=new RegExp(`${b(p.original)}
*`,"g"),i=mw.Title.makeTitle(u.getNamespaceId(),p.value.includes(":")?p.value.split(":")[1]:p.value);if(u.toText()===i.toText()){e=e.replace(g,"");continue}let l=`{{${p.type}:${i.toText()}}}
`;e=e.replace(g,l)}return e}function v(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function E(e,f){let a=[],u=[],p=0;function g(t,r=!0){let m=e.slice(p,p+t.length)===t;return m&&r&&(p+=t.length),m}for(;p<e.length;)if(g("[["))u.push({start:p-2,end:-1,isNested:u.length>0});else if(g("]]")){let t=u.pop();if(!t)continue;t.end=p,a.push(t)}else p++;let i=[],l=Object.values(mw.config.get("wgFormattedNamespaces"));for(let t of a){let r=e.slice(t.start+2,t.end-2),[m,...c]=r.split("|");e=e.slice(0,t.start+2)+"\0".repeat(m.length)+e.slice(t.start+2+m.length);let s=m.replaceAll("_"," ").trim(),n=c.join("|");n=n===" "?" ":n.trim();let h=s.startsWith(":");h&&(s=s.slice(1));let o=!1,d=s.charAt(0).toUpperCase()+s.slice(1),T=s.charAt(0).toLowerCase()+s.slice(1);s.includes(":")&&(d.startsWith("Image:")&&(s=`${s.startsWith("Image:")?"F":"f"}ile:${s.slice(6)}`),h&&["Image","File","Category"].includes(d.split(":")[0])&&(o=!0));let w="";s===n?n="":new RegExp(`^${b(s)}[a-z]+$`).test(n)&&(w=n.slice(s.length),n="");for(let x of[d,T])x===n?(s=x,n=""):new RegExp(`^${b(x)}[a-z]+$`).test(n)&&(s=x,w=n.slice(x.length),n="");let S=s.split(":")[0];S=S.charAt(0).toUpperCase()+S.slice(1),(n&&s.includes(":")&&l.includes(S)||s.startsWith("file:")||s.startsWith("category:"))&&(s=s.charAt(0).toUpperCase()+s.slice(1));let k=`[[${o?":":""}${s}${n?`|${n}`:""}]]${w}`;i.push([t,k])}for(let t of f)e=t(e,1);for(let t=0;t<2;t++)for(let[r,m]of i)t===0&&r.isNested||t===1&&!r.isNested||(e=e.slice(0,r.start)+m.padStart(r.end-r.start,"\0")+e.slice(r.end));for(let t of f)e=t(e,2);return e.replaceAll("\0","")}function L(e,f){let a="\x7F",u="\x9F";return f===1?(e=e.replaceAll(/[“”]/g,'"'),e=e.replaceAll(/[‘’]/g,"'"),e=e.replaceAll("\u2026",a),e=e.replaceAll("\xA0",u)):(e=e.replaceAll(a,"..."),e=e.replaceAll(u,"&nbsp;")),e}function I(e){let f=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<noinclude>\s*<\/noinclude> */g];for(let a of f)for(;a.test(e);)e=e.replace(a,"");return e}function N(e){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}) {2,}(\b|\[\[|\{\{)/gu,"$1 $2"),e=e.replaceAll(/^ +| +$/gm,""),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]) */gm,"$1 "),e=e.replaceAll(/^(\* .*)\n+(?=\* )/gm,`$1
`),e=e.replaceAll(/\s+(?=<ref)/g,""),e}function M(e){e=e.replaceAll(/((?:<ref.*?>.*?<\/ref>)+)([!,.?])/g,"$2$1");let f=[],a=0;function u(l){let t=e.slice(a,a+l.length)===l;return t&&(a+=l.length),t}function p(l){for(;a<e.length&&!u(l);)a++}for(;a<e.length;)if(u("<ref")){let l=a-4;p(">");let t=e.slice(l,a-1).trim().endsWith("/");f.push(t?{start:l,end:a,isSelfClosing:t}:{start:l,end:-1})}else u("</ref>")?f.at(-1).end=a:a++;let g=new DOMParser,i=[];for(let l of f){let t=e.slice(l.start,l.end),r=/<ref.*?>/i.exec(t)[0],c=g.parseFromString(l.isSelfClosing?r.replace(/ *\/ *>/," />"):r+"</ref>","text/html").body.firstChild.outerHTML,s=t.slice(r.length,-6).trim();c=l.isSelfClosing||s.length===0?c.replace(/>\s*<\/ref>/," />"):`${c.slice(0,-6)}${s}</ref>`,t!==c&&i.push([t,c])}for(let[l,t]of i)e=e.replace(l,t);return e}function R(e){let f;(o=>(o[o.Expanded=0]="Expanded",o[o.ExpandedAligned=1]="ExpandedAligned",o[o.Minimized=2]="Minimized",o[o.MinimizedSpaced=3]="MinimizedSpaced"))(f||={});class a{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season","blockquote","quote box"],2:["coord","start date","end date","lang","langx"]};constructor(s){this.location={start:s}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let o of this.subTemplates)o.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(o.fullText,this.placeholderStrings[0]);let s=this.fullTextEscaped.slice(2,-2).trim();for(let o of this.pipeEscapeRegexes)for(;o.test(s);)s=s.replaceAll(o,`$1${this.placeholderStrings[1]}$2`);let n=s.split("|").map(o=>o.replaceAll(this.placeholderStrings[1],"|").trim());this.name=n.shift();let h=n.map(o=>{let d=o.indexOf("=");if(d===-1)return{key:null,value:o.trim()};let T=o.slice(d+1);return{key:o.slice(0,d).trim(),value:`${T.startsWith(`
`)?`
`:""}${T.trim()}`}});this.parameters=h}getStyle(){for(let[s,n]of Object.entries(this.defaultTemplateStyles))for(let h of n)if(this.name.toLowerCase().startsWith(h))return Number.parseInt(s)}format(){this.fullText||this.parse();let s=this.getStyle();if(s===void 0)return this.fullText;let n=[`{{${this.name}`];if(s===0||s===1){let o=0;s===1&&(o=Math.max(...this.parameters.map(d=>d.key?.length??0)));for(let d of this.parameters)n.push(`| ${d.key?`${d.key.padEnd(o)} = `:""}${d.value}`)}else for(let o of this.parameters)o.value&&n.push(`|${o.key?`${o.key}=`:""}${o.value}`);n.push("}}"),n.length===2?(n[0]+="}}",n.pop()):s===3&&(n[n.length-2]+="}}",n.pop());let h=n.join(s===0||s===1?`
`:s===3?" ":"");for(let o of this.subTemplates)h=h.replace(this.placeholderStrings[0],o.format());return h}}let u=[],p=[],g=!1,i=!1,l=!1,t=0;function r(c){let s=e.slice(t,t+c.length)===c;return s&&(t+=c.length),s}for(;t<e.length;)if(r("<nowiki>"))i=!0;else if(r("</nowiki>"))i=!1;else if(r("<!--"))l=!0;else if(r("-->"))l=!1;else if(!i&&!l)if(r("[["))g=!0;else if(g&&r("]]"))g=!1;else if(r("{{")){let c=new a(t-2);p.length>0&&(c.isNested=!0,p.at(-1)?.subTemplates.push(c)),p.push(c)}else if(r("}}")){let c=p.pop();if(!c)continue;c.location.end=t,u.push(c)}else t++;else t++;let m=e;for(let c of u)c.isNested||(c.parse(),m=m.replace(c.fullText,c.format()));return m}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
