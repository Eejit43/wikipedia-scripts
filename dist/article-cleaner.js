// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner").addEventListener("click",g=>{g.preventDefault();let o=$("#wpTextbox1");if(o.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let s=o.textSelection("getContents");if(!s)return mw.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});s=x(s),s=T(s),s=b(s),s=w(s),s=E(s),s=y(s),o.textSelection("setContents",s),o.textSelection("setSelection",{start:0}),mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"})})});function x(t){let g;(e=>(e[e.Expanded=0]="Expanded",e[e.ExpandedAligned=1]="ExpandedAligned",e[e.Minimized=2]="Minimized",e[e.MinimizedSpaced=3]="MinimizedSpaced"))(g||={});class o{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"],2:["coord","start date","end date"]};constructor(l){this.location={start:l}}parse(){this.fullText=t.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let e of this.subTemplates)e.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(e.fullText,this.placeholderStrings[0]);let l=this.fullTextEscaped.slice(2,-2).trim();for(let e of this.pipeEscapeRegexes)for(;e.test(l);)l=l.replaceAll(e,`$1${this.placeholderStrings[1]}$2`);let n=l.split("|").map(e=>e.replaceAll(this.placeholderStrings[1],"|").trim());this.name=n.shift();let h=n.map(e=>{let d=e.indexOf("=");return d===-1?{key:null,value:e.trim()}:{key:e.slice(0,d).trim(),value:e.slice(d+1).trim()}});this.parameters=h}getStyle(){for(let[l,n]of Object.entries(this.defaultTemplateStyles))for(let h of n)if(this.name.toLowerCase().startsWith(h))return Number.parseInt(l)}format(){this.fullText||this.parse();let l=this.getStyle();if(l===void 0)return this.fullText;let n=[`{{${this.name}`];if(l===0||l===1){let e=0;l===1&&(e=Math.max(...this.parameters.map(d=>d.key?.length??0)));for(let d of this.parameters)n.push(`| ${d.key?`${d.key.padEnd(e)} = `:""}${d.value}`)}else for(let e of this.parameters)e.value&&n.push(`|${e.key?`${e.key}=`:""}${e.value}`);n.push("}}"),n.length===2?(n[0]+="}}",n.pop()):l===3&&(n[n.length-2]+="}}",n.pop());let h=n.join(l===0||l===1?`
`:l===3?" ":"");for(let e of this.subTemplates)h=h.replace(this.placeholderStrings[0],e.format());return h}}let s=[],p=[],m=!1,i=!1,u=!1,a=0;function c(r,l=!0){let n=t.slice(a,a+r.length)===r;return n&&l&&(a+=r.length),n}for(;a<t.length;)if(c("<nowiki>"))i=!0;else if(c("</nowiki>"))i=!1;else if(c("<!--"))u=!0;else if(c("-->"))u=!1;else if(!i&&!u)if(c("[["))m=!0;else if(m&&c("]]"))m=!1;else if(c("{{")){let r=new o(a-2);p.length>0&&(r.isNested=!0,p.at(-1)?.subTemplates.push(r)),p.push(r)}else if(c("}}")){let r=p.pop();if(!r)continue;r.location.end=a,s.push(r)}else a++;else a++;let f=t;for(let r of s)r.isNested||(r.parse(),f=f.replace(r.fullText,r.format()));return f}function T(t){let g={References:["reference","source","sources"],"External links":["external link","weblink","weblinks"],"See also":["also see"]},o=["life","career"],s=Object.fromEntries(Object.entries(g).flatMap(([i,u])=>u.map(a=>[a,i]))),m=[...t.matchAll(/(?<=\n)(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(?=\n)/g)].map(i=>{let{startMarkup:u,name:a,endMarkup:c}=i.groups,f=Math.max(u.length,c.length,2);return{name:a,depth:f,original:i[0]}});for(let i of m){let a=i.name.toLowerCase()in s?s[i.name.toLowerCase()]:i.name;for(let f of o)a=a.replaceAll(new RegExp(`\\b${f}\\b`,"gi"),f);a=a.charAt(0).toUpperCase()+a.slice(1);let c=`${"=".repeat(i.depth)} ${a} ${"=".repeat(i.depth)}`;i.original!==c&&(t=t.replace(i.original,c))}return t}function b(t){return t.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function w(t){let o=[...t.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(p=>{let[m,i,u]=p;return{type:i.toUpperCase(),value:u,original:m}}),s=mw.Title.newFromText(mw.config.get("wgPageName"));for(let p of o){let m=new RegExp(`${p.original.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}
*`,"g"),i=mw.Title.makeTitle(s.getNamespaceId(),p.value.includes(":")?p.value.split(":")[1]:p.value);if(s.toText()===i.toText()){t=t.replace(m,"");continue}let u=`{{${p.type}:${i.toText()}}}
`;t=t.replace(m,u)}return t}function E(t){return t.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,"[[Category:$2]]")}function y(t){let g=[/'+(Bold|Italic)( text)?'+\s*/g,/(<big>)+Big( text)?(<\/big>)+\s*/g,/(<small>)+Small( text)?(<\/small>)+\s*/g,/(<sup>)+Superscript( text)?(<\/sup>)+\s*/g,/(<sub>)+Subscript( text)?(<\/sub>)+\s*/g,/(<s>)+Strikethrough(<\/s>)+\s*/g,/(<u>)+Underline(<\/u>)+\s*/g,/(<code>)+Computer code(<\/code>)+\s*/g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+\s*/g,/=+ Heading text =+\s*/g,/\* Bulleted list item\s*/g,/# Numbered list item\s*/g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery>\s*/g,/#REDIRECT \[\[Target page name]]\s*/g,/<!-- Invisible comment -->\s*/g,/<noinclude>\s*<\/noinclude>\s*/g];for(let o of g)for(;o.test(t);)t=t.replace(o,"");return t}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
