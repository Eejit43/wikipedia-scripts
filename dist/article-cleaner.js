// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),d=!1,g="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(d){let f=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");f.value.includes(g.slice(1))||(f.value?f.value+=`; ${g.charAt(0).toLowerCase()+g.slice(1)}`:f.value=g),d=!1}}),e.addEventListener("click",f=>{f.preventDefault();let o=$("#wpTextbox1");if(o.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let p=o.textSelection("getContents"),s=p;if(s=y(s),s=v(s),s=E(s),s=L(s),s=I(s,[N]),s=M(s),s=R(s),s=F(s),s=O(s),p===s)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let u=ve.init.target.getSurface().getModel();u.getLinearFragment(u.getRangeFromSourceOffsets(0,p.length)).insertContent(s),u.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else o.textSelection("setContents",s),o.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let n=document.querySelector("#wpSummary");n?n.value.includes(g.slice(1))||(n.value?n.value+=`; ${g.charAt(0).toLowerCase()+g.slice(1)}`:n.value=g):d=!0}})});function b(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function y(e){let d={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},g=["life","career"],f=Object.fromEntries(Object.entries(d).flatMap(([n,u])=>u.map(i=>[i,n]))),p=[...e.matchAll(/\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)\n+/g)].map(n=>{let{name:u}=n.groups,{startMarkup:i,endMarkup:l}=n.groups;u=u.replaceAll(/'{3}/g,"");let r=u.matchAll(/\[\[(.+?)]]/g).toArray();for(let m of r)u=u.replace(m[0],m[1].split("|").at(-1));let c=Math.max(i.length,l.length,2);return{name:u,depth:c,original:n[0]}}),s=p.length>0&&/^\n*=+ | =+\n+$/.test(p[0].original)?" ":"";for(let n of p){let i=n.name.toLowerCase()in f?f[n.name.toLowerCase()]:n.name;for(let r of g)i=i.replaceAll(new RegExp(`\\b${r}\\b`,"gi"),r);i=i.charAt(0).toUpperCase()+i.slice(1);let l=`${"=".repeat(n.depth)}${s}${i}${s}${"=".repeat(n.depth)}`;n.original!==l&&(e=e.replace(n.original,`

${l}
`))}return e}function v(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function E(e){let g=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(o=>{let[p,s,n]=o;return{type:s.toUpperCase(),value:n,original:p}}),f=mw.Title.newFromText(mw.config.get("wgPageName"));for(let o of g){let p=new RegExp(`${b(o.original)}
*`,"g"),s=mw.Title.makeTitle(f.getNamespaceId(),o.value.includes(":")?o.value.split(":")[1]:o.value);if(f.toText()===s.toText()){e=e.replace(p,"");continue}let n=`{{${o.type}:${s.toText()}}}
`;e=e.replace(p,n)}return e}function L(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function I(e,d){let g=[],f=[],o=!1,p=!1,s=0;function n(l,r=!0){let c=e.slice(s,s+l.length)===l;return c&&r&&(s+=l.length),c}for(;s<e.length;)if(n("<nowiki>"))o=!0;else if(n("</nowiki>"))o=!1;else if(n("<!--"))p=!0;else if(n("-->"))p=!1;else if(!o&&!p)if(n("[["))f.push({start:s-2,end:-1,isNested:f.length>0});else if(n("]]")){let l=f.pop();if(!l)continue;l.end=s,g.push(l)}else s++;else s++;let u=[],i=Object.values(mw.config.get("wgFormattedNamespaces"));for(let l of g){let r=e.slice(l.start+2,l.end-2),[c,...m]=r.split("|");e=e.slice(0,l.start+2)+"\0".repeat(c.length)+e.slice(l.start+2+c.length);let a=c.replaceAll("_"," ").trim(),t=m.join("|");t=t===" "?" ":t.trim();let h=a.startsWith(":");h&&(a=a.slice(1));let T=!1,S=a.charAt(0).toUpperCase()+a.slice(1),C=a.charAt(0).toLowerCase()+a.slice(1),w=a.split(":")[0];w=w.charAt(0).toUpperCase()+w.slice(1),a.includes(":")&&(S.startsWith("Image:")&&(a=`${a.startsWith("Image:")?"F":"f"}ile:${a.slice(6)}`),h&&(["Image","File","Category"].includes(S.split(":")[0])||!i.includes(w))&&(T=!0));let k="";a===t?t="":new RegExp(`^${b(a)}[a-z]+$`).test(t)&&(k=t.slice(a.length),t="");for(let x of[S,C])x===t?(a=x,t=""):new RegExp(`^${b(x)}[a-z]+$`).test(t)&&(a=x,k=t.slice(x.length),t="");(t&&a.includes(":")&&i.includes(w)||a.startsWith("file:")||a.startsWith("category:"))&&(a=a.charAt(0).toUpperCase()+a.slice(1)),a=`${T?":":""}${a}`,a=a.padStart(c.length,"\0");let A=`[[${a}${t?`|${t}`:""}]]${k}`;u.push([l,A])}for(let l of d)e=l(e,1);for(let l=0;l<2;l++)for(let[r,c]of u)l===0&&r.isNested||l===1&&!r.isNested||(e=e.slice(0,r.start)+c.padEnd(r.end-r.start,"\0")+e.slice(r.end));for(let l of d)e=l(e,2);return e.replaceAll("\0","")}function N(e,d){let g="\x7F",f="\x9F";return d===1?(e=e.replaceAll(/[“”]/g,'"'),e=e.replaceAll(/[‘’]/g,"'"),e=e.replaceAll("\u2026",g),e=e.replaceAll("\xA0",f)):(e=e.replaceAll(g,"..."),e=e.replaceAll(f,"&nbsp;")),e}function M(e){let d=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<noinclude>\s*<\/noinclude> */g];for(let g of d)for(;g.test(e);)e=e.replace(g,"");return e}function R(e){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}) {2,}(\b|\p{Punctuation}|\[\[|\{\{)/gu,"$1 $2"),e=e.replaceAll(/^ +| +$/gm,""),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*] .*)\n+(?=[#*] )/gm,`$1
`),e=e.replaceAll(/\s+(?=<ref)/g,""),e=e.replaceAll(/^(=+.*?=+)$\n{2,}^(=+.*?=+)$/gm,`$1
$2`),e=e.trim(),e}function F(e){e=e.replaceAll(/((?:<ref.*?>.*?<\/ref>)+)([!,.?])/g,"$2$1");let d=[],g=!1,f=!1,o=0;function p(i){let l=e.slice(o,o+i.length)===i;return l&&(o+=i.length),l}function s(i){for(;o<e.length&&!p(i);)o++}for(;o<e.length;)if(p("<nowiki>"))g=!0;else if(p("</nowiki>"))g=!1;else if(p("<!--"))f=!0;else if(p("-->"))f=!1;else if(!g&&!f)if(p("<ref")){let i=o-4;s(">");let l=e.slice(i,o-1).trim().endsWith("/");d.push(l?{start:i,end:o,isSelfClosing:l}:{start:i,end:-1})}else p("</ref>")?d.at(-1).end=o:o++;else o++;let n=new DOMParser,u=[];for(let i of d){let l=e.slice(i.start,i.end),r=/<ref.*?>/i.exec(l)[0],m=n.parseFromString(i.isSelfClosing?r.replace(/ *\/ *>/," />"):r+"</ref>","text/html").body.firstChild.outerHTML,a=l.slice(r.length,-6).trim();m=i.isSelfClosing||a.length===0?m.replace(/>\s*<\/ref>/," />"):`${m.slice(0,-6)}${a}</ref>`,l!==m&&u.push([l,m])}for(let[i,l]of u)e=e.replace(i,l);return e}function O(e){let d;(t=>(t[t.Expanded=0]="Expanded",t[t.ExpandedAligned=1]="ExpandedAligned",t[t.Minimized=2]="Minimized",t[t.MinimizedSpaced=3]="MinimizedSpaced"))(d||={});class g{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season","blockquote","quote box","multiple image"],2:["coord","start date","end date","lang","langx"]};constructor(c){this.location={start:c}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let t of this.subTemplates)t.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(t.fullText,this.placeholderStrings[0]);let c=this.fullTextEscaped.slice(2,-2).trim();for(let t of this.pipeEscapeRegexes)for(;t.test(c);)c=c.replaceAll(t,`$1${this.placeholderStrings[1]}$2`);let m=c.split("|").map(t=>t.replaceAll(this.placeholderStrings[1],"|").trim());this.name=m.shift();let a=m.map(t=>{let h=t.indexOf("=");if(h===-1)return{key:null,value:t.trim()};let T=t.slice(h+1);return{key:t.slice(0,h).trim(),value:`${T.startsWith(`
`)?`
`:""}${T.trim()}`}});this.parameters=a}getStyle(){for(let[c,m]of Object.entries(this.defaultTemplateStyles))for(let a of m)if(this.name.toLowerCase().startsWith(a))return Number.parseInt(c)}format(){this.fullText||this.parse();let c=this.getStyle();if(c===void 0)return this.fullText;let m=[`{{${this.name}`];if(c===0||c===1){let t=0;c===1&&(t=Math.max(...this.parameters.map(h=>h.key?.length??0)));for(let h of this.parameters)m.push(`| ${h.key?`${h.key.padEnd(t)} = `:""}${h.value}`)}else for(let t of this.parameters)t.value&&m.push(`|${t.key?`${t.key}=`:""}${t.value}`);m.push("}}"),m.length===2?(m[0]+="}}",m.pop()):c===3&&(m[m.length-2]+="}}",m.pop());let a=m.join(c===0||c===1?`
`:c===3?" ":"");for(let t of this.subTemplates)a=a.replace(this.placeholderStrings[0],t.format());return a}}let f=[],o=[],p=!1,s=!1,n=!1,u=0;function i(r){let c=e.slice(u,u+r.length)===r;return c&&(u+=r.length),c}for(;u<e.length;)if(i("<nowiki>"))s=!0;else if(i("</nowiki>"))s=!1;else if(i("<!--"))n=!0;else if(i("-->"))n=!1;else if(!s&&!n)if(i("[["))p=!0;else if(p&&i("]]"))p=!1;else if(i("{{")){let r=new g(u-2);o.length>0&&(r.isNested=!0,o.at(-1)?.subTemplates.push(r)),o.push(r)}else if(i("}}")){let r=o.pop();if(!r)continue;r.location.end=u,f.push(r)}else u++;else u++;let l=e;for(let r of f)r.isNested||(r.parse(),l=l.replace(r.fullText,r.format()));return l}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc2NyaXB0cy9hcnRpY2xlLWNsZWFuZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImRlY2xhcmUgZ2xvYmFsIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbiAgICBjbGFzcyBWZVJhbmdlIHtcbiAgICAgICAgY29uc3RydWN0b3Ioc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpO1xuICAgIH1cblxuICAgIGNsYXNzIFZlRnJhZ21lbnQge1xuICAgICAgICBpbnNlcnRDb250ZW50KGNvbnRlbnQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgfVxuXG4gICAgY2xhc3MgVmVTdXJmYWNlTW9kZWwge1xuICAgICAgICBnZXRMaW5lYXJGcmFnbWVudChyYW5nZTogVmVSYW5nZSk6IFZlRnJhZ21lbnQ7XG4gICAgICAgIGdldFJhbmdlRnJvbVNvdXJjZU9mZnNldHMoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBWZVJhbmdlO1xuICAgICAgICBzZXRTZWxlY3Rpb24oc2VsZWN0aW9uOiBWZUxpbmVhclNlbGVjdGlvbik6IHZvaWQ7XG4gICAgfVxuXG4gICAgY2xhc3MgVmVUYXJnZXQge1xuICAgICAgICBnZXRTdXJmYWNlKCk6IHsgZ2V0TW9kZWwoKTogVmVTdXJmYWNlTW9kZWwgfTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbiAgICBjbGFzcyBWZUxpbmVhclNlbGVjdGlvbiB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHJhbmdlOiBWZVJhbmdlKTtcbiAgICB9XG5cbiAgICBjb25zdCB2ZToge1xuICAgICAgICBSYW5nZTogdHlwZW9mIFZlUmFuZ2U7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgICAgIGRtOiB7IExpbmVhclNlbGVjdGlvbjogdHlwZW9mIFZlTGluZWFyU2VsZWN0aW9uIH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgICAgIGluaXQ/OiB7IHRhcmdldDogVmVUYXJnZXQgfTtcbiAgICB9O1xufVxuXG5leHBvcnQge307XG5cbigoKSA9PiB7XG4gICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPCAwKSByZXR1cm47IC8vIERvbid0IHJ1biBpbiB2aXJ0dWFsIG5hbWVzcGFjZXNcbiAgICBpZiAoIW13LmNvbmZpZy5nZXQoJ3dnSXNQcm9iYWJseUVkaXRhYmxlJykpIHJldHVybjsgLy8gRG9uJ3QgcnVuIGlmIHVzZXIgY2FuJ3QgZWRpdCBwYWdlXG5cbiAgICBtdy5sb2FkZXIudXNpbmcoWydtZWRpYXdpa2kudXRpbCcsICdqcXVlcnkudGV4dFNlbGVjdGlvbiddLCAoKSA9PiB7XG4gICAgICAgIG13LnV0aWwuYWRkQ1NTKGBcbiNhcnRpY2xlLWNsZWFuZXIge1xuICAgIGRpc3BsYXk6IG5vbmU7XG59XG5cbiNjb250ZW50Omhhcygjd3BUZXh0Ym94MSkgI2FydGljbGUtY2xlYW5lciB7XG4gICAgZGlzcGxheTogdW5zZXQ7XG59YCk7XG5cbiAgICAgICAgY29uc3QgbGluayA9IG13LnV0aWwuYWRkUG9ydGxldExpbmsoXG4gICAgICAgICAgICBtdy5jb25maWcuZ2V0KCdza2luJykgPT09ICdtaW5lcnZhJyA/ICdwLW5hdmlnYXRpb24nIDogJ3AtY2FjdGlvbnMnLFxuICAgICAgICAgICAgJyMnLFxuICAgICAgICAgICAgJ1BlcmZvcm0gYXJ0aWNsZSBjbGVhbnVwJyxcbiAgICAgICAgICAgICdhcnRpY2xlLWNsZWFuZXInLFxuICAgICAgICApITtcblxuICAgICAgICBsZXQgc2hvdWxkQWRkU2NyaXB0TWVzc2FnZSA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IHNjcmlwdE1lc3NhZ2UgPSAnQ2xlYW5lZCB1cCBhcnRpY2xlIGNvbnRlbnQgKHZpYSBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL2FydGljbGUtY2xlYW5lcnxhcnRpY2xlLWNsZWFuZXJdXSknO1xuXG4gICAgICAgIG13Lmhvb2soJ3ZlLnNhdmVEaWFsb2cuc3RhdGVDaGFuZ2VkJykuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChzaG91bGRBZGRTY3JpcHRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VtbWFyeUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MVGV4dEFyZWFFbGVtZW50PignLnZlLXVpLW13U2F2ZURpYWxvZy1zdW1tYXJ5IHRleHRhcmVhJykhO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFzdW1tYXJ5SW5wdXQudmFsdWUuaW5jbHVkZXMoc2NyaXB0TWVzc2FnZS5zbGljZSgxKSkpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdW1tYXJ5SW5wdXQudmFsdWUpIHN1bW1hcnlJbnB1dC52YWx1ZSArPSBgOyAke3NjcmlwdE1lc3NhZ2UuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzY3JpcHRNZXNzYWdlLnNsaWNlKDEpfWA7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Ugc3VtbWFyeUlucHV0LnZhbHVlID0gc2NyaXB0TWVzc2FnZTtcblxuICAgICAgICAgICAgICAgIHNob3VsZEFkZFNjcmlwdE1lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgY29uc3QgZWRpdEJveCA9ICQoJyN3cFRleHRib3gxJyk7XG4gICAgICAgICAgICBpZiAoZWRpdEJveC5sZW5ndGggPT09IDApIHJldHVybiBtdy5ub3RpZnkoJ0VkaXQgYm94IG5vdCBmb3VuZCEnLCB7IHR5cGU6ICdlcnJvcicsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcblxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxUZXh0ID0gZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdnZXRDb250ZW50cycpO1xuXG4gICAgICAgICAgICBsZXQgZmluYWxUZXh0ID0gb3JpZ2luYWxUZXh0O1xuXG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwU2VjdGlvbkhlYWRlcnMoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBNYWdpY1dvcmRzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwRGlzcGxheXRpdGxlc0FuZERlZmF1bHRzb3J0cyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cENhdGVnb3JpZXMoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBMaW5rcyhmaW5hbFRleHQsIFtjbGVhbnVwSW1wcm9wZXJDaGFyYWN0ZXJzXSk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwU3RyYXlNYXJrdXAoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBTcGFjaW5nKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwUmVmZXJlbmNlcyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gZm9ybWF0VGVtcGxhdGVzKGZpbmFsVGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChvcmlnaW5hbFRleHQgPT09IGZpbmFsVGV4dCkgbXcubm90aWZ5KCdObyBjaGFuZ2VzIHRvIGJlIG1hZGUgdG8gdGhlIGFydGljbGUhJywgeyB0eXBlOiAnd2FybicsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh2ZS5pbml0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1cmZhY2VNb2RlbCA9IHZlLmluaXQudGFyZ2V0LmdldFN1cmZhY2UoKS5nZXRNb2RlbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IHN1cmZhY2VNb2RlbC5nZXRMaW5lYXJGcmFnbWVudChzdXJmYWNlTW9kZWwuZ2V0UmFuZ2VGcm9tU291cmNlT2Zmc2V0cygwLCBvcmlnaW5hbFRleHQubGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50Lmluc2VydENvbnRlbnQoZmluYWxUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgc3VyZmFjZU1vZGVsLnNldFNlbGVjdGlvbihuZXcgdmUuZG0uTGluZWFyU2VsZWN0aW9uKG5ldyB2ZS5SYW5nZSgwLCAwKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRCb3gudGV4dFNlbGVjdGlvbignc2V0Q29udGVudHMnLCBmaW5hbFRleHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGVkaXRCb3gudGV4dFNlbGVjdGlvbignc2V0U2VsZWN0aW9uJywgeyBzdGFydDogMCB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtdy5ub3RpZnkoJ0FydGljbGUgY2xlYW51cCBjb21wbGV0ZSEnLCB7IHR5cGU6ICdzdWNjZXNzJywgYXV0b0hpZGVTZWNvbmRzOiAnc2hvcnQnIH0pO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VtbWFyeUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MSW5wdXRFbGVtZW50PignI3dwU3VtbWFyeScpO1xuICAgICAgICAgICAgICAgIGlmIChzdW1tYXJ5SW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdW1tYXJ5SW5wdXQudmFsdWUuaW5jbHVkZXMoc2NyaXB0TWVzc2FnZS5zbGljZSgxKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VtbWFyeUlucHV0LnZhbHVlKSBzdW1tYXJ5SW5wdXQudmFsdWUgKz0gYDsgJHtzY3JpcHRNZXNzYWdlLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc2NyaXB0TWVzc2FnZS5zbGljZSgxKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBzdW1tYXJ5SW5wdXQudmFsdWUgPSBzY3JpcHRNZXNzYWdlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBzaG91bGRBZGRTY3JpcHRNZXNzYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpO1xuXG4vKipcbiAqIEVzY2FwZXMgcmVnZXggY2hhcmFjdGVycyBpbiBhIHN0cmluZy5cbiAqIEBwYXJhbSBzdHJpbmcgVGhlIHN0cmluZyB0byBlc2NhcGUgcmVnZXggY2hhcmFjdGVycyBpbi5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlUmVnZXhDaGFyYWN0ZXJzKHN0cmluZzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlQWxsKC9bJCgpKisuP1tcXFxcXFxdXnt8fV0vZywgJ1xcXFwkJicpO1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBzZWN0aW9uIGhlYWRlcnMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwU2VjdGlvbkhlYWRlcnMoY29udGVudDogc3RyaW5nKSB7XG4gICAgY29uc3QgY29tbW9uUmVwbGFjZW1lbnRzID0ge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgICAgICAgJ1NlZSBhbHNvJzogWydhbHNvIHNlZSddLFxuICAgICAgICAnUmVmZXJlbmNlcyc6IFsncmVmZXJlbmNlJywgJ3NvdXJjZScsICdzb3VyY2VzJywgJ2NpdGF0aW9uJywgJ2NpdGF0aW9ucyddLFxuICAgICAgICAnRnVydGhlciByZWFkaW5nJzogWydmdXJ0aGVyIHJlYWRpbmcnXSxcbiAgICAgICAgJ0V4dGVybmFsIGxpbmtzJzogWydleHRlcm5hbCBsaW5rJywgJ3dlYmxpbmsnLCAnd2VibGlua3MnXSxcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgICB9O1xuXG4gICAgY29uc3QgY29tbW9uTWlzY2FwaXRhbGl6ZWRXb3JkcyA9IFsnbGlmZScsICdjYXJlZXInXTtcblxuICAgIGNvbnN0IHJldmVyc2VDb21tb25SZXBsYWNlbWVudHMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGNvbW1vblJlcGxhY2VtZW50cykuZmxhdE1hcCgoW2tleSwgdmFsdWVzXSkgPT4gdmFsdWVzLm1hcCgodmFsdWUpID0+IFt2YWx1ZSwga2V5XSkpLFxuICAgICk7XG5cbiAgICBjb25zdCBoZWFkZXJzID0gY29udGVudC5tYXRjaEFsbCgvXFxuKig/PHN0YXJ0TWFya3VwPj0rKSAqKD88bmFtZT4uKj8pICooPzxlbmRNYXJrdXA+PSspXFxuKy9nKTtcblxuICAgIGNvbnN0IHBhcnNlZEhlYWRlcnMgPSBbLi4uaGVhZGVyc10ubWFwKChoZWFkZXIpID0+IHtcbiAgICAgICAgbGV0IHsgbmFtZSB9ID0gaGVhZGVyLmdyb3VwcyE7XG4gICAgICAgIGNvbnN0IHsgc3RhcnRNYXJrdXAsIGVuZE1hcmt1cCB9ID0gaGVhZGVyLmdyb3VwcyE7XG5cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZUFsbCgvJ3szfS9nLCAnJyk7XG5cbiAgICAgICAgY29uc3QgbGlua3MgPSBuYW1lLm1hdGNoQWxsKC9cXFtcXFsoLis/KV1dL2cpLnRvQXJyYXkoKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGxpbmsgb2YgbGlua3MpIG5hbWUgPSBuYW1lLnJlcGxhY2UobGlua1swXSwgbGlua1sxXS5zcGxpdCgnfCcpLmF0KC0xKSEpO1xuXG4gICAgICAgIGNvbnN0IGRlcHRoID0gTWF0aC5tYXgoc3RhcnRNYXJrdXAubGVuZ3RoLCBlbmRNYXJrdXAubGVuZ3RoLCAyKTtcblxuICAgICAgICByZXR1cm4geyBuYW1lLCBkZXB0aCwgb3JpZ2luYWw6IGhlYWRlclswXSB9O1xuICAgIH0pO1xuXG4gICAgY29uc3QgdGl0bGVTcGFjZXIgPSBwYXJzZWRIZWFkZXJzLmxlbmd0aCA+IDAgPyAoL15cXG4qPSsgfCA9K1xcbiskLy50ZXN0KHBhcnNlZEhlYWRlcnNbMF0ub3JpZ2luYWwpID8gJyAnIDogJycpIDogJyc7XG5cbiAgICBmb3IgKGNvbnN0IGhlYWRlciBvZiBwYXJzZWRIZWFkZXJzKSB7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VkTmFtZSA9XG4gICAgICAgICAgICBoZWFkZXIubmFtZS50b0xvd2VyQ2FzZSgpIGluIHJldmVyc2VDb21tb25SZXBsYWNlbWVudHMgPyByZXZlcnNlQ29tbW9uUmVwbGFjZW1lbnRzW2hlYWRlci5uYW1lLnRvTG93ZXJDYXNlKCldIDogaGVhZGVyLm5hbWU7XG5cbiAgICAgICAgbGV0IGNhcGl0YWxpemVkTmFtZSA9IHJlcGxhY2VkTmFtZTtcblxuICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2YgY29tbW9uTWlzY2FwaXRhbGl6ZWRXb3JkcykgY2FwaXRhbGl6ZWROYW1lID0gY2FwaXRhbGl6ZWROYW1lLnJlcGxhY2VBbGwobmV3IFJlZ0V4cChgXFxcXGIke3dvcmR9XFxcXGJgLCAnZ2knKSwgd29yZCk7XG5cbiAgICAgICAgY2FwaXRhbGl6ZWROYW1lID0gY2FwaXRhbGl6ZWROYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY2FwaXRhbGl6ZWROYW1lLnNsaWNlKDEpO1xuXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGAkeyc9Jy5yZXBlYXQoaGVhZGVyLmRlcHRoKX0ke3RpdGxlU3BhY2VyfSR7Y2FwaXRhbGl6ZWROYW1lfSR7dGl0bGVTcGFjZXJ9JHsnPScucmVwZWF0KGhlYWRlci5kZXB0aCl9YDtcblxuICAgICAgICBpZiAoaGVhZGVyLm9yaWdpbmFsICE9PSBvdXRwdXQpIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoaGVhZGVyLm9yaWdpbmFsLCBgXFxuXFxuJHtvdXRwdXR9XFxuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogUmVtb3ZlcyB1bm5lY2Vzc2FyeSBtYWdpYyB3b3JkcyBmcm9tIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cE1hZ2ljV29yZHMoY29udGVudDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZUFsbCgvX18oSU5ERVh8Tk9JTkRFWHxORVdTRUNUSU9OTElOS3xOT05FV1NFQ1RJT05MSU5LfE5PRURJVFNFQ1RJT058RElTQU1CSUd8U1RBVElDUkVESVJFQ1R8Rk9SQ0VUT0MpX19cXG4qL2csICcnKTtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgRElTUExBWVRJVExFcyBhbmQgREVGQVVMVFNPUlRzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cERpc3BsYXl0aXRsZXNBbmREZWZhdWx0c29ydHMoY29udGVudDogc3RyaW5nKSB7XG4gICAgY29uc3QgdGFncyA9IGNvbnRlbnQubWF0Y2hBbGwoL3t7KGRpc3BsYXl0aXRsZXxkZWZhdWx0c29ydClbOnxdKC4qPyl9fS9naSk7XG5cbiAgICBjb25zdCBwYXJzZWRUYWdzID0gWy4uLnRhZ3NdLm1hcCgodGFnKSA9PiB7XG4gICAgICAgIGNvbnN0IFtmdWxsVGFnLCB0eXBlLCB2YWx1ZV0gPSB0YWc7XG5cbiAgICAgICAgcmV0dXJuIHsgdHlwZTogdHlwZS50b1VwcGVyQ2FzZSgpLCB2YWx1ZSwgb3JpZ2luYWw6IGZ1bGxUYWcgfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGN1cnJlbnRUaXRsZSA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSkhO1xuXG4gICAgZm9yIChjb25zdCB0YWcgb2YgcGFyc2VkVGFncykge1xuICAgICAgICBjb25zdCBvcmlnaW5hbFRhZ1JlZ2V4ID0gbmV3IFJlZ0V4cChgJHtlc2NhcGVSZWdleENoYXJhY3RlcnModGFnLm9yaWdpbmFsKX1cXG4qYCwgJ2cnKTtcblxuICAgICAgICBjb25zdCB0aXRsZSA9IG13LlRpdGxlLm1ha2VUaXRsZShjdXJyZW50VGl0bGUuZ2V0TmFtZXNwYWNlSWQoKSwgdGFnLnZhbHVlLmluY2x1ZGVzKCc6JykgPyB0YWcudmFsdWUuc3BsaXQoJzonKVsxXSA6IHRhZy52YWx1ZSkhO1xuXG4gICAgICAgIGlmIChjdXJyZW50VGl0bGUudG9UZXh0KCkgPT09IHRpdGxlLnRvVGV4dCgpKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG9yaWdpbmFsVGFnUmVnZXgsICcnKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3VGV4dCA9IGB7eyR7dGFnLnR5cGV9OiR7dGl0bGUudG9UZXh0KCl9fX1cXG5gO1xuXG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2Uob3JpZ2luYWxUYWdSZWdleCwgbmV3VGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIGNhdGVnb3JpZXMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwQ2F0ZWdvcmllcyhjb250ZW50OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY29udGVudC5yZXBsYWNlQWxsKFxuICAgICAgICAvKFxcW1xcW3x9fSk6P2NhdGVnb3J5OiguKj8pKF1dfH19KS9naSxcbiAgICAgICAgYFtbJHttdy5jb25maWcuZ2V0KCd3Z0Nhbm9uaWNhbE5hbWVzcGFjZScpID09PSAnRHJhZnQnID8gJzonIDogJyd9Q2F0ZWdvcnk6JDJdXWAsXG4gICAgKTtcbn1cblxuaW50ZXJmYWNlIExpbmtJbmZvcm1hdGlvbiB7XG4gICAgc3RhcnQ6IG51bWJlcjtcbiAgICBlbmQ6IG51bWJlcjtcbiAgICBpc05lc3RlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgbGlua3MgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICogQHBhcmFtIGZ1bmN0aW9uc0NhbGxlZFdoaWxlRXNjYXBlZCBUaGUgZnVuY3Rpb25zIGNhbGxlZCB3aGlsZSB0aGUgbGlua3MgYXJlIGVzY2FwZWQuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBMaW5rcyhjb250ZW50OiBzdHJpbmcsIGZ1bmN0aW9uc0NhbGxlZFdoaWxlRXNjYXBlZDogKChjb250ZW50OiBzdHJpbmcsIHJ1bjogMSB8IDIpID0+IHN0cmluZylbXSkge1xuICAgIGNvbnN0IGNsb3NlZExpbmtzOiBMaW5rSW5mb3JtYXRpb25bXSA9IFtdO1xuICAgIGNvbnN0IGxpbmtzOiBMaW5rSW5mb3JtYXRpb25bXSA9IFtdO1xuXG4gICAgbGV0IGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgbGV0IGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuXG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbnRlbnQgZm9sbG93aW5nIHRoZSBjdXJyZW50IGxvY2F0aW9uIG1hdGNoZXMgdGhlIGRlc2lyZWQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0gc2hvdWxkSW5jcmVtZW50IFdoZXRoZXIgdG8gaW5jcmVtZW50IHRoZSBjdXJyZW50IGxvY2F0aW9uIGlmIHRoZSBzdHJpbmcgaXMgZm91bmQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBdFN0cmluZyhkZXNpcmVkU3RyaW5nOiBzdHJpbmcsIHNob3VsZEluY3JlbWVudCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgaXNBdFN0cmluZyA9IGNvbnRlbnQuc2xpY2UoY3VycmVudExvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24gKyBkZXNpcmVkU3RyaW5nLmxlbmd0aCkgPT09IGRlc2lyZWRTdHJpbmc7XG5cbiAgICAgICAgaWYgKGlzQXRTdHJpbmcgJiYgc2hvdWxkSW5jcmVtZW50KSBjdXJyZW50TG9jYXRpb24gKz0gZGVzaXJlZFN0cmluZy5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGlzQXRTdHJpbmc7XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRMb2NhdGlvbiA8IGNvbnRlbnQubGVuZ3RoKVxuICAgICAgICBpZiAoaXNBdFN0cmluZygnPG5vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCc8L25vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPCEtLScpKSBpc0luc2lkZUNvbW1lbnQgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCctLT4nKSkgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKCFpc0luc2lkZU5vd2lraSAmJiAhaXNJbnNpZGVDb21tZW50KVxuICAgICAgICAgICAgaWYgKGlzQXRTdHJpbmcoJ1tbJykpIGxpbmtzLnB1c2goeyBzdGFydDogY3VycmVudExvY2F0aW9uIC0gMiwgZW5kOiAtMSwgaXNOZXN0ZWQ6IGxpbmtzLmxlbmd0aCA+IDAgfSk7XG4gICAgICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCddXScpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdExpbmsgPSBsaW5rcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWxhc3RMaW5rKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGxhc3RMaW5rLmVuZCA9IGN1cnJlbnRMb2NhdGlvbjtcblxuICAgICAgICAgICAgICAgIGNsb3NlZExpbmtzLnB1c2gobGFzdExpbmspO1xuICAgICAgICAgICAgfSBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuXG4gICAgY29uc3QgbmV3TGlua0NvbnRlbnQ6IFtMaW5rSW5mb3JtYXRpb24sIHN0cmluZ11bXSA9IFtdO1xuXG4gICAgY29uc3QgbmFtZXNwYWNlTmFtZXMgPSBPYmplY3QudmFsdWVzKG13LmNvbmZpZy5nZXQoJ3dnRm9ybWF0dGVkTmFtZXNwYWNlcycpKTtcblxuICAgIGZvciAoY29uc3QgbGlua0xvY2F0aW9uIG9mIGNsb3NlZExpbmtzKSB7XG4gICAgICAgIGNvbnN0IGlubmVyTGluayA9IGNvbnRlbnQuc2xpY2UobGlua0xvY2F0aW9uLnN0YXJ0ICsgMiwgbGlua0xvY2F0aW9uLmVuZCAtIDIpO1xuXG4gICAgICAgIGNvbnN0IFt1bnBhcnNlZExpbmssIC4uLnBhcmFtZXRlcnNdID0gaW5uZXJMaW5rLnNwbGl0KCd8Jyk7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBsaW5rIG5hbWVzIHNvIHRoZXNlIHdvbid0IGJlIGFmZmVjdGVkIGJ5IGZ1bmN0aW9ucyBjYWxsZWQgd2hpbGUgZXNjYXBlZFxuICAgICAgICBjb250ZW50ID1cbiAgICAgICAgICAgIGNvbnRlbnQuc2xpY2UoMCwgbGlua0xvY2F0aW9uLnN0YXJ0ICsgMikgK1xuICAgICAgICAgICAgJ1xcMCcucmVwZWF0KHVucGFyc2VkTGluay5sZW5ndGgpICtcbiAgICAgICAgICAgIGNvbnRlbnQuc2xpY2UobGlua0xvY2F0aW9uLnN0YXJ0ICsgMiArIHVucGFyc2VkTGluay5sZW5ndGgpO1xuXG4gICAgICAgIGxldCBsaW5rID0gdW5wYXJzZWRMaW5rLnJlcGxhY2VBbGwoJ18nLCAnICcpLnRyaW0oKTtcbiAgICAgICAgbGV0IGFsdFRleHQgPSBwYXJhbWV0ZXJzLmpvaW4oJ3wnKTtcbiAgICAgICAgYWx0VGV4dCA9IGFsdFRleHQgPT09ICcgJyA/ICcgJyA6IGFsdFRleHQudHJpbSgpO1xuXG4gICAgICAgIGNvbnN0IGlzRmlyc3RDaGFyYWN0ZXJDb2xvbiA9IGxpbmsuc3RhcnRzV2l0aCgnOicpO1xuICAgICAgICBpZiAoaXNGaXJzdENoYXJhY3RlckNvbG9uKSBsaW5rID0gbGluay5zbGljZSgxKTtcblxuICAgICAgICBsZXQgc2hvdWxkRmlyc3RDaGFyYWN0ZXJCZUNvbG9uID0gZmFsc2U7XG5cbiAgICAgICAgY29uc3QgbGlua1VwcGVyY2FzZVN0YXJ0ID0gbGluay5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGxpbmsuc2xpY2UoMSk7XG4gICAgICAgIGNvbnN0IGxpbmtMb3dlcmNhc2VTdGFydCA9IGxpbmsuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBsaW5rLnNsaWNlKDEpO1xuXG4gICAgICAgIGxldCBuYW1lc3BhY2UgPSBsaW5rLnNwbGl0KCc6JylbMF07XG4gICAgICAgIG5hbWVzcGFjZSA9IG5hbWVzcGFjZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWVzcGFjZS5zbGljZSgxKTtcblxuICAgICAgICBpZiAobGluay5pbmNsdWRlcygnOicpKSB7XG4gICAgICAgICAgICBpZiAobGlua1VwcGVyY2FzZVN0YXJ0LnN0YXJ0c1dpdGgoJ0ltYWdlOicpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkU3RhcnRVcHBlcmNhc2UgPSBsaW5rLnN0YXJ0c1dpdGgoJ0ltYWdlOicpO1xuXG4gICAgICAgICAgICAgICAgbGluayA9IGAke3Nob3VsZFN0YXJ0VXBwZXJjYXNlID8gJ0YnIDogJ2YnfWlsZToke2xpbmsuc2xpY2UoNil9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGlzRmlyc3RDaGFyYWN0ZXJDb2xvbiAmJlxuICAgICAgICAgICAgICAgIChbJ0ltYWdlJywgJ0ZpbGUnLCAnQ2F0ZWdvcnknXS5pbmNsdWRlcyhsaW5rVXBwZXJjYXNlU3RhcnQuc3BsaXQoJzonKVswXSkgfHwgIW5hbWVzcGFjZU5hbWVzLmluY2x1ZGVzKG5hbWVzcGFjZSkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgc2hvdWxkRmlyc3RDaGFyYWN0ZXJCZUNvbG9uID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhZnRlckxpbmtUZXh0ID0gJyc7XG5cbiAgICAgICAgaWYgKGxpbmsgPT09IGFsdFRleHQpIGFsdFRleHQgPSAnJztcbiAgICAgICAgZWxzZSBpZiAobmV3IFJlZ0V4cChgXiR7ZXNjYXBlUmVnZXhDaGFyYWN0ZXJzKGxpbmspfVthLXpdKyRgKS50ZXN0KGFsdFRleHQpKSB7XG4gICAgICAgICAgICBhZnRlckxpbmtUZXh0ID0gYWx0VGV4dC5zbGljZShsaW5rLmxlbmd0aCk7XG4gICAgICAgICAgICBhbHRUZXh0ID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IG5ld0xpbmsgb2YgW2xpbmtVcHBlcmNhc2VTdGFydCwgbGlua0xvd2VyY2FzZVN0YXJ0XSlcbiAgICAgICAgICAgIGlmIChuZXdMaW5rID09PSBhbHRUZXh0KSB7XG4gICAgICAgICAgICAgICAgbGluayA9IG5ld0xpbms7XG4gICAgICAgICAgICAgICAgYWx0VGV4dCA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXcgUmVnRXhwKGBeJHtlc2NhcGVSZWdleENoYXJhY3RlcnMobmV3TGluayl9W2Etel0rJGApLnRlc3QoYWx0VGV4dCkpIHtcbiAgICAgICAgICAgICAgICBsaW5rID0gbmV3TGluaztcbiAgICAgICAgICAgICAgICBhZnRlckxpbmtUZXh0ID0gYWx0VGV4dC5zbGljZShuZXdMaW5rLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYWx0VGV4dCA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIChhbHRUZXh0ICYmIGxpbmsuaW5jbHVkZXMoJzonKSAmJiBuYW1lc3BhY2VOYW1lcy5pbmNsdWRlcyhuYW1lc3BhY2UpKSB8fFxuICAgICAgICAgICAgbGluay5zdGFydHNXaXRoKCdmaWxlOicpIHx8XG4gICAgICAgICAgICBsaW5rLnN0YXJ0c1dpdGgoJ2NhdGVnb3J5OicpXG4gICAgICAgIClcbiAgICAgICAgICAgIGxpbmsgPSBsaW5rLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGluay5zbGljZSgxKTtcblxuICAgICAgICBsaW5rID0gYCR7c2hvdWxkRmlyc3RDaGFyYWN0ZXJCZUNvbG9uID8gJzonIDogJyd9JHtsaW5rfWA7XG5cbiAgICAgICAgbGluayA9IGxpbmsucGFkU3RhcnQodW5wYXJzZWRMaW5rLmxlbmd0aCwgJ1xcMCcpO1xuXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGBbWyR7bGlua30ke2FsdFRleHQgPyBgfCR7YWx0VGV4dH1gIDogJyd9XV0ke2FmdGVyTGlua1RleHR9YDtcblxuICAgICAgICBuZXdMaW5rQ29udGVudC5wdXNoKFtsaW5rTG9jYXRpb24sIG91dHB1dF0pO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgZnVuY3Rpb25Ub0NhbGwgb2YgZnVuY3Rpb25zQ2FsbGVkV2hpbGVFc2NhcGVkKSBjb250ZW50ID0gZnVuY3Rpb25Ub0NhbGwoY29udGVudCwgMSk7XG5cbiAgICBmb3IgKGxldCBsb29wQ291bnRlciA9IDA7IGxvb3BDb3VudGVyIDwgMjsgbG9vcENvdW50ZXIrKylcbiAgICAgICAgZm9yIChjb25zdCBbbGlua0RhdGEsIGxpbmtDb250ZW50XSBvZiBuZXdMaW5rQ29udGVudCkge1xuICAgICAgICAgICAgaWYgKGxvb3BDb3VudGVyID09PSAwICYmIGxpbmtEYXRhLmlzTmVzdGVkKSBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGxvb3BDb3VudGVyID09PSAxICYmICFsaW5rRGF0YS5pc05lc3RlZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPVxuICAgICAgICAgICAgICAgIGNvbnRlbnQuc2xpY2UoMCwgbGlua0RhdGEuc3RhcnQpICsgbGlua0NvbnRlbnQucGFkRW5kKGxpbmtEYXRhLmVuZCAtIGxpbmtEYXRhLnN0YXJ0LCAnXFwwJykgKyBjb250ZW50LnNsaWNlKGxpbmtEYXRhLmVuZCk7XG4gICAgICAgIH1cblxuICAgIGZvciAoY29uc3QgZnVuY3Rpb25Ub0NhbGwgb2YgZnVuY3Rpb25zQ2FsbGVkV2hpbGVFc2NhcGVkKSBjb250ZW50ID0gZnVuY3Rpb25Ub0NhbGwoY29udGVudCwgMik7XG5cbiAgICByZXR1cm4gY29udGVudC5yZXBsYWNlQWxsKCdcXDAnLCAnJyk7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIGltcHJvcGVyIGNoYXJhY3RlcnMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICogQHBhcmFtIHJ1biBUaGUgcnVuIG51bWJlciBvZiB0aGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBJbXByb3BlckNoYXJhY3RlcnMoY29udGVudDogc3RyaW5nLCBydW46IDEgfCAyKSB7XG4gICAgY29uc3QgZWxpcHNpc1BsYWNlaG9sZGVyID0gJ1xcdTAwN0YnO1xuICAgIGNvbnN0IG5ic3BQbGFjZWhvbGRlciA9ICdcXHUwMDlGJztcblxuICAgIGlmIChydW4gPT09IDEpIHtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvW1x1MjAxQ1x1MjAxRF0vZywgJ1wiJyk7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL1tcdTIwMThcdTIwMTldL2csIFwiJ1wiKTtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgnXHUyMDI2JywgZWxpcHNpc1BsYWNlaG9sZGVyKTtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgnXHUwMEEwJywgbmJzcFBsYWNlaG9sZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKGVsaXBzaXNQbGFjZWhvbGRlciwgJy4uLicpO1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKG5ic3BQbGFjZWhvbGRlciwgJyZuYnNwOycpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgc3RyYXkgbWFya3VwIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cFN0cmF5TWFya3VwKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGNvbnN0IHN0cmF5TWFya3VwUmVnZXhlcyA9IFtcbiAgICAgICAgLycrKEJvbGR8SXRhbGljKSggdGV4dCk/JysgKi9nLFxuICAgICAgICAvKDxiaWc+KStCaWcoIHRleHQpPyg8XFwvYmlnPikrICovZyxcbiAgICAgICAgLyg8c21hbGw+KStTbWFsbCggdGV4dCk/KDxcXC9zbWFsbD4pKyAqL2csXG4gICAgICAgIC8oPHN1cD4pK1N1cGVyc2NyaXB0KCB0ZXh0KT8oPFxcL3N1cD4pKyAqL2csXG4gICAgICAgIC8oPHN1Yj4pK1N1YnNjcmlwdCggdGV4dCk/KDxcXC9zdWI+KSsgKi9nLFxuICAgICAgICAvKDxzPikrU3RyaWtldGhyb3VnaCg8XFwvcz4pKyAqL2csXG4gICAgICAgIC8oPHU+KStVbmRlcmxpbmUoPFxcL3U+KSsgKi9nLFxuICAgICAgICAvKDxjb2RlPikrQ29tcHV0ZXIgY29kZSg8XFwvY29kZT4pKyAqL2csXG4gICAgICAgIC8oPG5vd2lraT4pK0luc2VydCBub24tZm9ybWF0dGVkIHRleHQgaGVyZSg8XFwvbm93aWtpPikrICovZyxcbiAgICAgICAgLz0rIEhlYWRpbmcgdGV4dCA9KyAqL2csXG4gICAgICAgIC9cXCogQnVsbGV0ZWQgbGlzdCBpdGVtICovZyxcbiAgICAgICAgLyMgTnVtYmVyZWQgbGlzdCBpdGVtICovZyxcbiAgICAgICAgLzxnYWxsZXJ5PlxcbkV4YW1wbGUuanBnXFx8Q2FwdGlvbjFcXG5FeGFtcGxlLmpwZ1xcfENhcHRpb24yXFxuPFxcL2dhbGxlcnk+ICovZyxcbiAgICAgICAgLyNSRURJUkVDVCBcXFtcXFtUYXJnZXQgcGFnZSBuYW1lXV0gKi9nLFxuICAgICAgICAvPCEtLSBJbnZpc2libGUgY29tbWVudCAtLT4gKi9nLFxuICAgICAgICAvPG5vaW5jbHVkZT5cXHMqPFxcL25vaW5jbHVkZT4gKi9nLFxuICAgIF07XG5cbiAgICBmb3IgKGNvbnN0IHJlZ2V4IG9mIHN0cmF5TWFya3VwUmVnZXhlcykgd2hpbGUgKHJlZ2V4LnRlc3QoY29udGVudCkpIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UocmVnZXgsICcnKTtcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBzcGFjaW5nIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cFNwYWNpbmcoY29udGVudDogc3RyaW5nKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvKFxcYnxcXHB7UHVuY3R1YXRpb259fFxcXVxcXXxcXH1cXH0pIHsyLH0oXFxifFxccHtQdW5jdHVhdGlvbn18XFxbXFxbfFxce1xceykvZ3UsICckMSAkMicpOyAvLyBSZW1vdmUgZXh0cmEgc3BhY2VzIGJldHdlZW4gd29yZHMgYW5kIHNlbnRlbmNlc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14gK3wgKyQvZ20sICcnKTsgLy8gUmVtb3ZlIGV4dHJhIHNwYWNlcyBhdCB0aGUgc3RhcnQgb3IgZW5kIG9mIGxpbmVzXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvXFxuezMsfS9nLCAnXFxuXFxuJyk7IC8vIFJlbW92ZSBleHRyYSBuZXdsaW5lc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1xccyooe3tbXn1dKnN0dWJ9fSkvaSwgJ1xcblxcblxcbiQxJyk7IC8vIEVuc3VyZSB0aGVyZSBhcmUgdGhyZWUgbmV3bGluZXMgYmVmb3JlIHRoZSBmaXJzdCBzdHViIHRlbXBsYXRlXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvXFxzKyQvZywgJycpOyAvLyBSZW1vdmUgdHJhaWxpbmcgc3BhY2VzXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvXihbIypdKykgKi9nbSwgJyQxICcpOyAvLyBFbnN1cmUgdGhlcmUgaXMgYSBzcGFjZSBhZnRlciBhIGJ1bGxldCBvciBoYXNoIGluIGEgbGlzdCBpdGVtXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvXihbIypdIC4qKVxcbisoPz1bIypdICkvZ20sICckMVxcbicpOyAvLyBSZW1vdmUgbmV3bGluZXMgYmV0d2VlbiBsaXN0IGl0ZW1zXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvXFxzKyg/PTxyZWYpL2csICcnKTsgLy8gUmVtb3ZlIHNwYWNlcyBiZWZvcmUgcmVmZXJlbmNlc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oPSsuKj89KykkXFxuezIsfV4oPSsuKj89KykkL2dtLCAnJDFcXG4kMicpOyAvLyBSZW1vdmUgZXh0cmEgbmV3bGluZXMgYmV0d2VlbiBlbXB0eSBzZWN0aW9uIGFuZCBmb2xsb3dpbmcgc2VjdGlvblxuICAgIGNvbnRlbnQgPSBjb250ZW50LnRyaW0oKTsgLy8gUmVtb3ZlIGV4dHJhIG5ld2xpbmVzIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgdGhlIGNvbnRlbnRcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIENsZWFucyB1cCByZWZlcmVuY2VzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cFJlZmVyZW5jZXMoY29udGVudDogc3RyaW5nKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvKCg/OjxyZWYuKj8+Lio/PFxcL3JlZj4pKykoWyEsLj9dKS9nLCAnJDIkMScpOyAvLyBGaXggcHVuY3R1YXRpb24gZm9sbG93aW5nIHJlZmVyZW5jZXNcblxuICAgIGNvbnN0IHJlZmVyZW5jZXM6IHsgc3RhcnQ6IG51bWJlcjsgZW5kOiBudW1iZXI7IGlzU2VsZkNsb3Npbmc/OiB0cnVlIH1bXSA9IFtdO1xuXG4gICAgbGV0IGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgbGV0IGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuXG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbnRlbnQgZm9sbG93aW5nIHRoZSBjdXJyZW50IGxvY2F0aW9uIG1hdGNoZXMgdGhlIGRlc2lyZWQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0F0U3RyaW5nKGRlc2lyZWRTdHJpbmc6IHN0cmluZykge1xuICAgICAgICBjb25zdCBpc0F0U3RyaW5nID0gY29udGVudC5zbGljZShjdXJyZW50TG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbiArIGRlc2lyZWRTdHJpbmcubGVuZ3RoKSA9PT0gZGVzaXJlZFN0cmluZztcblxuICAgICAgICBpZiAoaXNBdFN0cmluZykgY3VycmVudExvY2F0aW9uICs9IGRlc2lyZWRTdHJpbmcubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBpc0F0U3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2NlZWRzIHRocm91Z2ggdGhlIGNvbnRlbnQgdW50aWwgdGhlIGRlc2lyZWQgc3RyaW5nIGlzIGZvdW5kLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9jZWVkVW50aWxTdHJpbmcoZGVzaXJlZFN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIHdoaWxlIChjdXJyZW50TG9jYXRpb24gPCBjb250ZW50Lmxlbmd0aCAmJiAhaXNBdFN0cmluZyhkZXNpcmVkU3RyaW5nKSkgY3VycmVudExvY2F0aW9uKys7XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRMb2NhdGlvbiA8IGNvbnRlbnQubGVuZ3RoKVxuICAgICAgICBpZiAoaXNBdFN0cmluZygnPG5vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCc8L25vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPCEtLScpKSBpc0luc2lkZUNvbW1lbnQgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCctLT4nKSkgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKCFpc0luc2lkZU5vd2lraSAmJiAhaXNJbnNpZGVDb21tZW50KVxuICAgICAgICAgICAgaWYgKGlzQXRTdHJpbmcoJzxyZWYnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gY3VycmVudExvY2F0aW9uIC0gNDtcblxuICAgICAgICAgICAgICAgIHByb2NlZWRVbnRpbFN0cmluZygnPicpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaXNTZWxmQ2xvc2luZyA9IGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKHN0YXJ0LCBjdXJyZW50TG9jYXRpb24gLSAxKVxuICAgICAgICAgICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgIC5lbmRzV2l0aCgnLycpO1xuXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlcy5wdXNoKGlzU2VsZkNsb3NpbmcgPyB7IHN0YXJ0LCBlbmQ6IGN1cnJlbnRMb2NhdGlvbiwgaXNTZWxmQ2xvc2luZyB9IDogeyBzdGFydCwgZW5kOiAtMSB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBdFN0cmluZygnPC9yZWY+JykpIHJlZmVyZW5jZXMuYXQoLTEpIS5lbmQgPSBjdXJyZW50TG9jYXRpb247XG4gICAgICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuXG4gICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgY29uc3QgcmVwbGFjZW1lbnRzOiBbc3RyaW5nLCBzdHJpbmddW10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgcmVmZXJlbmNlIG9mIHJlZmVyZW5jZXMpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxUZXh0ID0gY29udGVudC5zbGljZShyZWZlcmVuY2Uuc3RhcnQsIHJlZmVyZW5jZS5lbmQpO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0VGFnID0gLzxyZWYuKj8+L2kuZXhlYyhvcmlnaW5hbFRleHQpIVswXTtcblxuICAgICAgICBjb25zdCBwYXJzZWRUYWcgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKFxuICAgICAgICAgICAgcmVmZXJlbmNlLmlzU2VsZkNsb3NpbmcgPyBzdGFydFRhZy5yZXBsYWNlKC8gKlxcLyAqPi8sICcgLz4nKSA6IHN0YXJ0VGFnICsgJzwvcmVmPicsXG4gICAgICAgICAgICAndGV4dC9odG1sJyxcbiAgICAgICAgKS5ib2R5LmZpcnN0Q2hpbGQgYXMgSFRNTFVua25vd25FbGVtZW50O1xuXG4gICAgICAgIGxldCBvdXRwdXQgPSBwYXJzZWRUYWcub3V0ZXJIVE1MO1xuXG4gICAgICAgIGNvbnN0IHRhZ0NvbnRlbnQgPSBvcmlnaW5hbFRleHQuc2xpY2Uoc3RhcnRUYWcubGVuZ3RoLCAtNikudHJpbSgpO1xuXG4gICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICByZWZlcmVuY2UuaXNTZWxmQ2xvc2luZyB8fCB0YWdDb250ZW50Lmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgID8gb3V0cHV0LnJlcGxhY2UoLz5cXHMqPFxcL3JlZj4vLCAnIC8+JylcbiAgICAgICAgICAgICAgICA6IGAke291dHB1dC5zbGljZSgwLCAtNil9JHt0YWdDb250ZW50fTwvcmVmPmA7XG5cbiAgICAgICAgaWYgKG9yaWdpbmFsVGV4dCAhPT0gb3V0cHV0KSByZXBsYWNlbWVudHMucHVzaChbb3JpZ2luYWxUZXh0LCBvdXRwdXRdKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IFtvcmlnaW5hbFRleHQsIG91dHB1dF0gb2YgcmVwbGFjZW1lbnRzKSBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG9yaWdpbmFsVGV4dCwgb3V0cHV0KTtcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEZvcm1hdHMgdGVtcGxhdGUgc3BhY2luZyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gZm9ybWF0LlxuICovXG5mdW5jdGlvbiBmb3JtYXRUZW1wbGF0ZXMoY29udGVudDogc3RyaW5nKSB7XG4gICAgZW51bSBGb3JtYXRTdHlsZSB7XG4gICAgICAgIEV4cGFuZGVkLFxuICAgICAgICBFeHBhbmRlZEFsaWduZWQsXG4gICAgICAgIE1pbmltaXplZCxcbiAgICAgICAgTWluaW1pemVkU3BhY2VkLFxuICAgIH1cblxuICAgIGNsYXNzIFRlbXBsYXRlIHtcbiAgICAgICAgcHVibGljIGxvY2F0aW9uOiB7IHN0YXJ0OiBudW1iZXI7IGVuZD86IG51bWJlciB9O1xuICAgICAgICBwdWJsaWMgaXNOZXN0ZWQgPSBmYWxzZTtcblxuICAgICAgICBwdWJsaWMgZnVsbFRleHQ/OiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgZnVsbFRleHRFc2NhcGVkPzogc3RyaW5nO1xuICAgICAgICBwcml2YXRlIG5hbWU/OiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgcGFyYW1ldGVyczogeyBrZXk6IHN0cmluZyB8IG51bGw7IHZhbHVlOiBzdHJpbmcgfVtdID0gW107XG4gICAgICAgIHB1YmxpYyBzdWJUZW1wbGF0ZXM6IFRlbXBsYXRlW10gPSBbXTtcblxuICAgICAgICBwcml2YXRlIHBsYWNlaG9sZGVyU3RyaW5ncyA9IFsnXFx1e0YwMDAwfScsICdcXHV7MTBGRkZGfSddO1xuXG4gICAgICAgIHByaXZhdGUgcGlwZUVzY2FwZVJlZ2V4ZXMgPSBbLyhcXFtcXFtbXlxcXV0qPylcXHwoLio/XV0pL2csIC8oPCEtLS4qPylcXHwoLio/LS0+KS9nLCAvKDxub3dpa2k+Lio/KVxcfCguKj88XFwvbm93aWtpPikvZ107XG5cbiAgICAgICAgcHJpdmF0ZSBkZWZhdWx0VGVtcGxhdGVTdHlsZXMgPSB7XG4gICAgICAgICAgICBbRm9ybWF0U3R5bGUuRXhwYW5kZWRBbGlnbmVkXTogW1xuICAgICAgICAgICAgICAgICdpbmZvYm94JyxcbiAgICAgICAgICAgICAgICAnc3BlY2llc2JveCcsXG4gICAgICAgICAgICAgICAgJ3RheG9ib3gnLFxuICAgICAgICAgICAgICAgICdhdXRvbWF0aWMgdGF4b2JveCcsXG4gICAgICAgICAgICAgICAgJ29zbSBsb2NhdGlvbiBtYXAnLFxuICAgICAgICAgICAgICAgICdtb3RvcnNwb3J0IHNlYXNvbicsXG4gICAgICAgICAgICAgICAgJ2Jsb2NrcXVvdGUnLFxuICAgICAgICAgICAgICAgICdxdW90ZSBib3gnLFxuICAgICAgICAgICAgICAgICdtdWx0aXBsZSBpbWFnZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW0Zvcm1hdFN0eWxlLk1pbmltaXplZF06IFsnY29vcmQnLCAnc3RhcnQgZGF0ZScsICdlbmQgZGF0ZScsICdsYW5nJywgJ2xhbmd4J10sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3RydWN0b3Ioc3RhcnRMb2NhdGlvbjogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uID0geyBzdGFydDogc3RhcnRMb2NhdGlvbiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHBhcnNlKCkge1xuICAgICAgICAgICAgdGhpcy5mdWxsVGV4dCA9IGNvbnRlbnQuc2xpY2UodGhpcy5sb2NhdGlvbi5zdGFydCwgdGhpcy5sb2NhdGlvbi5lbmQpO1xuICAgICAgICAgICAgdGhpcy5mdWxsVGV4dEVzY2FwZWQgPSB0aGlzLmZ1bGxUZXh0O1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN1YlRlbXBsYXRlIG9mIHRoaXMuc3ViVGVtcGxhdGVzKSB7XG4gICAgICAgICAgICAgICAgc3ViVGVtcGxhdGUucGFyc2UoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZnVsbFRleHRFc2NhcGVkID0gdGhpcy5mdWxsVGV4dEVzY2FwZWQucmVwbGFjZShzdWJUZW1wbGF0ZS5mdWxsVGV4dCEsIHRoaXMucGxhY2Vob2xkZXJTdHJpbmdzWzBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHRyaW1tZWRJbm5lclRleHQgPSB0aGlzLmZ1bGxUZXh0RXNjYXBlZC5zbGljZSgyLCAtMikudHJpbSgpO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBpcGVFc2NhcGVSZWdleCBvZiB0aGlzLnBpcGVFc2NhcGVSZWdleGVzKVxuICAgICAgICAgICAgICAgIHdoaWxlIChwaXBlRXNjYXBlUmVnZXgudGVzdCh0cmltbWVkSW5uZXJUZXh0KSlcbiAgICAgICAgICAgICAgICAgICAgdHJpbW1lZElubmVyVGV4dCA9IHRyaW1tZWRJbm5lclRleHQucmVwbGFjZUFsbChwaXBlRXNjYXBlUmVnZXgsIGAkMSR7dGhpcy5wbGFjZWhvbGRlclN0cmluZ3NbMV19JDJgKTtcblxuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHRyaW1tZWRJbm5lclRleHQuc3BsaXQoJ3wnKS5tYXAoKHBhcmFtZXRlcikgPT4gcGFyYW1ldGVyLnJlcGxhY2VBbGwodGhpcy5wbGFjZWhvbGRlclN0cmluZ3NbMV0sICd8JykudHJpbSgpKTtcblxuICAgICAgICAgICAgdGhpcy5uYW1lID0gcGFyYW1ldGVycy5zaGlmdCgpO1xuXG4gICAgICAgICAgICBjb25zdCBzcGxpdFBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzLm1hcCgocGFyYW1ldGVycykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVxdWFsc0xvY2F0aW9uID0gcGFyYW1ldGVycy5pbmRleE9mKCc9Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXF1YWxzTG9jYXRpb24gPT09IC0xKSByZXR1cm4geyBrZXk6IG51bGwsIHZhbHVlOiBwYXJhbWV0ZXJzLnRyaW0oKSB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbWV0ZXJzLnNsaWNlKGVxdWFsc0xvY2F0aW9uICsgMSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IHBhcmFtZXRlcnMuc2xpY2UoMCwgZXF1YWxzTG9jYXRpb24pLnRyaW0oKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGAke3ZhbHVlLnN0YXJ0c1dpdGgoJ1xcbicpID8gJ1xcbicgOiAnJ30ke3ZhbHVlLnRyaW0oKX1gLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gc3BsaXRQYXJhbWV0ZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBnZXRTdHlsZSgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2Zvcm1hdFN0eWxlLCB0ZW1wbGF0ZVByZWZpeGVzXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmRlZmF1bHRUZW1wbGF0ZVN0eWxlcykpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZW1wbGF0ZVByZWZpeCBvZiB0ZW1wbGF0ZVByZWZpeGVzKVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lIS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgodGVtcGxhdGVQcmVmaXgpKSByZXR1cm4gTnVtYmVyLnBhcnNlSW50KGZvcm1hdFN0eWxlKSBhcyBGb3JtYXRTdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmb3JtYXQoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZnVsbFRleHQpIHRoaXMucGFyc2UoKTtcblxuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSB0aGlzLmdldFN0eWxlKCk7XG4gICAgICAgICAgICBpZiAoc3R5bGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuZnVsbFRleHQhO1xuXG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBbYHt7JHt0aGlzLm5hbWV9YF07XG5cbiAgICAgICAgICAgIGlmIChzdHlsZSA9PT0gRm9ybWF0U3R5bGUuRXhwYW5kZWQgfHwgc3R5bGUgPT09IEZvcm1hdFN0eWxlLkV4cGFuZGVkQWxpZ25lZCkge1xuICAgICAgICAgICAgICAgIGxldCByZXF1aXJlZEtleUxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUgPT09IEZvcm1hdFN0eWxlLkV4cGFuZGVkQWxpZ25lZClcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRLZXlMZW5ndGggPSBNYXRoLm1heCguLi50aGlzLnBhcmFtZXRlcnMubWFwKChwYXJhbWV0ZXIpID0+IHBhcmFtZXRlci5rZXk/Lmxlbmd0aCA/PyAwKSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiB0aGlzLnBhcmFtZXRlcnMpXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGB8ICR7cGFyYW1ldGVyLmtleSA/IGAke3BhcmFtZXRlci5rZXkucGFkRW5kKHJlcXVpcmVkS2V5TGVuZ3RoKX0gPSBgIDogJyd9JHtwYXJhbWV0ZXIudmFsdWV9YCk7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiB0aGlzLnBhcmFtZXRlcnMpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXIudmFsdWUpIG91dHB1dC5wdXNoKGB8JHtwYXJhbWV0ZXIua2V5ID8gYCR7cGFyYW1ldGVyLmtleX09YCA6ICcnfSR7cGFyYW1ldGVyLnZhbHVlfWApO1xuXG4gICAgICAgICAgICBvdXRwdXQucHVzaCgnfX0nKTtcblxuICAgICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbMF0gKz0gJ319JztcblxuICAgICAgICAgICAgICAgIG91dHB1dC5wb3AoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3R5bGUgPT09IEZvcm1hdFN0eWxlLk1pbmltaXplZFNwYWNlZCkge1xuICAgICAgICAgICAgICAgIG91dHB1dFtvdXRwdXQubGVuZ3RoIC0gMl0gKz0gJ319JztcblxuICAgICAgICAgICAgICAgIG91dHB1dC5wb3AoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGpvaW5lZE91dHB1dCA9IG91dHB1dC5qb2luKFxuICAgICAgICAgICAgICAgIHN0eWxlID09PSBGb3JtYXRTdHlsZS5FeHBhbmRlZCB8fCBzdHlsZSA9PT0gRm9ybWF0U3R5bGUuRXhwYW5kZWRBbGlnbmVkXG4gICAgICAgICAgICAgICAgICAgID8gJ1xcbidcbiAgICAgICAgICAgICAgICAgICAgOiBzdHlsZSA9PT0gRm9ybWF0U3R5bGUuTWluaW1pemVkU3BhY2VkXG4gICAgICAgICAgICAgICAgICAgICAgPyAnICdcbiAgICAgICAgICAgICAgICAgICAgICA6ICcnLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBzdWJUZW1wbGF0ZSBvZiB0aGlzLnN1YlRlbXBsYXRlcylcbiAgICAgICAgICAgICAgICBqb2luZWRPdXRwdXQgPSBqb2luZWRPdXRwdXQucmVwbGFjZSh0aGlzLnBsYWNlaG9sZGVyU3RyaW5nc1swXSwgc3ViVGVtcGxhdGUuZm9ybWF0KCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gam9pbmVkT3V0cHV0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYWxsVGVtcGxhdGVzOiBUZW1wbGF0ZVtdID0gW107XG5cbiAgICBjb25zdCBpbnNpZGVUZW1wbGF0ZXM6IFRlbXBsYXRlW10gPSBbXTtcbiAgICBsZXQgaXNJbnNpZGVMaW5rID0gZmFsc2U7XG4gICAgbGV0IGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgbGV0IGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuXG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbnRlbnQgZm9sbG93aW5nIHRoZSBjdXJyZW50IGxvY2F0aW9uIG1hdGNoZXMgdGhlIGRlc2lyZWQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0F0U3RyaW5nKGRlc2lyZWRTdHJpbmc6IHN0cmluZykge1xuICAgICAgICBjb25zdCBpc0F0U3RyaW5nID0gY29udGVudC5zbGljZShjdXJyZW50TG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbiArIGRlc2lyZWRTdHJpbmcubGVuZ3RoKSA9PT0gZGVzaXJlZFN0cmluZztcblxuICAgICAgICBpZiAoaXNBdFN0cmluZykgY3VycmVudExvY2F0aW9uICs9IGRlc2lyZWRTdHJpbmcubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBpc0F0U3RyaW5nO1xuICAgIH1cblxuICAgIHdoaWxlIChjdXJyZW50TG9jYXRpb24gPCBjb250ZW50Lmxlbmd0aClcbiAgICAgICAgaWYgKGlzQXRTdHJpbmcoJzxub3dpa2k+JykpIGlzSW5zaWRlTm93aWtpID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPC9ub3dpa2k+JykpIGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKGlzQXRTdHJpbmcoJzwhLS0nKSkgaXNJbnNpZGVDb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnLS0+JykpIGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuICAgICAgICBlbHNlIGlmICghaXNJbnNpZGVOb3dpa2kgJiYgIWlzSW5zaWRlQ29tbWVudClcbiAgICAgICAgICAgIGlmIChpc0F0U3RyaW5nKCdbWycpKSBpc0luc2lkZUxpbmsgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNJbnNpZGVMaW5rICYmIGlzQXRTdHJpbmcoJ11dJykpIGlzSW5zaWRlTGluayA9IGZhbHNlO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygne3snKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKGN1cnJlbnRMb2NhdGlvbiAtIDIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluc2lkZVRlbXBsYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLmlzTmVzdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5zaWRlVGVtcGxhdGVzLmF0KC0xKT8uc3ViVGVtcGxhdGVzLnB1c2godGVtcGxhdGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGluc2lkZVRlbXBsYXRlcy5wdXNoKHRlbXBsYXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBdFN0cmluZygnfX0nKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RUZW1wbGF0ZSA9IGluc2lkZVRlbXBsYXRlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWxhc3RUZW1wbGF0ZSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBsYXN0VGVtcGxhdGUubG9jYXRpb24uZW5kID0gY3VycmVudExvY2F0aW9uO1xuXG4gICAgICAgICAgICAgICAgYWxsVGVtcGxhdGVzLnB1c2gobGFzdFRlbXBsYXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSBjdXJyZW50TG9jYXRpb24rKztcbiAgICAgICAgZWxzZSBjdXJyZW50TG9jYXRpb24rKztcblxuICAgIGxldCBuZXdDb250ZW50ID0gY29udGVudDtcblxuICAgIGZvciAoY29uc3QgdGVtcGxhdGUgb2YgYWxsVGVtcGxhdGVzKVxuICAgICAgICBpZiAoIXRlbXBsYXRlLmlzTmVzdGVkKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5wYXJzZSgpO1xuXG4gICAgICAgICAgICBuZXdDb250ZW50ID0gbmV3Q29udGVudC5yZXBsYWNlKHRlbXBsYXRlLmZ1bGxUZXh0ISwgdGVtcGxhdGUuZm9ybWF0KCkpO1xuICAgICAgICB9XG5cbiAgICByZXR1cm4gbmV3Q29udGVudDtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7OzttQkFtQ1EsR0FBRyxPQUFPLElBQUksbUJBQW1CLEVBQUksR0FDcEMsR0FBRyxPQUFPLElBQUksc0JBQXNCLEdBRXpDLEdBQUcsT0FBTyxNQUFNLENBQUMsaUJBQWtCLHNCQUFzQixFQUFHLElBQU0sQ0FDOUQsR0FBRyxLQUFLLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9yQixFQUVNLElBQU1BLEVBQU8sR0FBRyxLQUFLLGVBQ2pCLEdBQUcsT0FBTyxJQUFJLE1BQU0sSUFBTSxVQUFZLGVBQWlCLGFBQ3ZELElBQ0EsMEJBQ0EsaUJBQ0osRUFF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RW5CQSxFQUFhLFNBQVMsSUFBTXhELEVBRTVCb0QsRUFBYSxLQUFLSSxDQUFZLENBQ2xDLE1BQU94RCxTQUNOQSxJQUVULElBQUl5RCxFQUFhdkYsRUFFakIsUUFBV3FGLEtBQVlILEVBQ2RHLEVBQVMsV0FDVkEsRUFBUyxNQUFNLEVBRWZFLEVBQWFBLEVBQVcsUUFBUUYsRUFBUyxTQUFXQSxFQUFTLE9BQU8sQ0FBQyxHQUc3RSxPQUFPRSxDQUNYIiwKICAibmFtZXMiOiBbImxpbmsiLCAic2hvdWxkQWRkU2NyaXB0TWVzc2FnZSIsICJzY3JpcHRNZXNzYWdlIiwgInN1bW1hcnlJbnB1dCIsICJldmVudCIsICJlZGl0Qm94IiwgIm9yaWdpbmFsVGV4dCIsICJmaW5hbFRleHQiLCAiY2xlYW51cFNlY3Rpb25IZWFkZXJzIiwgImNsZWFudXBNYWdpY1dvcmRzIiwgImNsZWFudXBEaXNwbGF5dGl0bGVzQW5kRGVmYXVsdHNvcnRzIiwgImNsZWFudXBDYXRlZ29yaWVzIiwgImNsZWFudXBMaW5rcyIsICJjbGVhbnVwSW1wcm9wZXJDaGFyYWN0ZXJzIiwgImNsZWFudXBTdHJheU1hcmt1cCIsICJjbGVhbnVwU3BhY2luZyIsICJjbGVhbnVwUmVmZXJlbmNlcyIsICJmb3JtYXRUZW1wbGF0ZXMiLCAic3VyZmFjZU1vZGVsIiwgImVzY2FwZVJlZ2V4Q2hhcmFjdGVycyIsICJzdHJpbmciLCAiY29udGVudCIsICJjb21tb25SZXBsYWNlbWVudHMiLCAiY29tbW9uTWlzY2FwaXRhbGl6ZWRXb3JkcyIsICJyZXZlcnNlQ29tbW9uUmVwbGFjZW1lbnRzIiwgImtleSIsICJ2YWx1ZXMiLCAidmFsdWUiLCAicGFyc2VkSGVhZGVycyIsICJoZWFkZXIiLCAibmFtZSIsICJzdGFydE1hcmt1cCIsICJlbmRNYXJrdXAiLCAibGlua3MiLCAiZGVwdGgiLCAidGl0bGVTcGFjZXIiLCAiY2FwaXRhbGl6ZWROYW1lIiwgIndvcmQiLCAib3V0cHV0IiwgInBhcnNlZFRhZ3MiLCAidGFnIiwgImZ1bGxUYWciLCAidHlwZSIsICJjdXJyZW50VGl0bGUiLCAib3JpZ2luYWxUYWdSZWdleCIsICJ0aXRsZSIsICJuZXdUZXh0IiwgImZ1bmN0aW9uc0NhbGxlZFdoaWxlRXNjYXBlZCIsICJjbG9zZWRMaW5rcyIsICJpc0luc2lkZU5vd2lraSIsICJpc0luc2lkZUNvbW1lbnQiLCAiY3VycmVudExvY2F0aW9uIiwgImlzQXRTdHJpbmciLCAiZGVzaXJlZFN0cmluZyIsICJzaG91bGRJbmNyZW1lbnQiLCAibGFzdExpbmsiLCAibmV3TGlua0NvbnRlbnQiLCAibmFtZXNwYWNlTmFtZXMiLCAibGlua0xvY2F0aW9uIiwgImlubmVyTGluayIsICJ1bnBhcnNlZExpbmsiLCAicGFyYW1ldGVycyIsICJhbHRUZXh0IiwgImlzRmlyc3RDaGFyYWN0ZXJDb2xvbiIsICJzaG91bGRGaXJzdENoYXJhY3RlckJlQ29sb24iLCAibGlua1VwcGVyY2FzZVN0YXJ0IiwgImxpbmtMb3dlcmNhc2VTdGFydCIsICJuYW1lc3BhY2UiLCAiYWZ0ZXJMaW5rVGV4dCIsICJuZXdMaW5rIiwgImZ1bmN0aW9uVG9DYWxsIiwgImxvb3BDb3VudGVyIiwgImxpbmtEYXRhIiwgImxpbmtDb250ZW50IiwgInJ1biIsICJlbGlwc2lzUGxhY2Vob2xkZXIiLCAibmJzcFBsYWNlaG9sZGVyIiwgInN0cmF5TWFya3VwUmVnZXhlcyIsICJyZWdleCIsICJyZWZlcmVuY2VzIiwgInByb2NlZWRVbnRpbFN0cmluZyIsICJzdGFydCIsICJpc1NlbGZDbG9zaW5nIiwgInBhcnNlciIsICJyZXBsYWNlbWVudHMiLCAicmVmZXJlbmNlIiwgInN0YXJ0VGFnIiwgInRhZ0NvbnRlbnQiLCAiRm9ybWF0U3R5bGUiLCAiVGVtcGxhdGUiLCAic3RhcnRMb2NhdGlvbiIsICJzdWJUZW1wbGF0ZSIsICJ0cmltbWVkSW5uZXJUZXh0IiwgInBpcGVFc2NhcGVSZWdleCIsICJwYXJhbWV0ZXIiLCAic3BsaXRQYXJhbWV0ZXJzIiwgImVxdWFsc0xvY2F0aW9uIiwgImZvcm1hdFN0eWxlIiwgInRlbXBsYXRlUHJlZml4ZXMiLCAidGVtcGxhdGVQcmVmaXgiLCAic3R5bGUiLCAicmVxdWlyZWRLZXlMZW5ndGgiLCAiam9pbmVkT3V0cHV0IiwgImFsbFRlbXBsYXRlcyIsICJpbnNpZGVUZW1wbGF0ZXMiLCAiaXNJbnNpZGVMaW5rIiwgInRlbXBsYXRlIiwgImxhc3RUZW1wbGF0ZSIsICJuZXdDb250ZW50Il0KfQo=
