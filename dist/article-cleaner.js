// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{var v=new mw.Api;async function C(e){return(await v.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:e})).query.pages[0].revisions?.[0].slots.main.content.trim()}mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),p=!1,f="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(p){let m=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");m.value.includes(f.slice(1))||(m.value&&!m.value.startsWith("/* ")&&!m.value.endsWith(" */ ")?m.value+=`; ${f.charAt(0).toLowerCase()+f.slice(1)}`:m.value=`${m.value}${f}`),p=!1}}),e.addEventListener("click",async m=>{m.preventDefault();let o=$("#wpTextbox1");if(o.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let g=o.textSelection("getContents"),a=g;if(a=L(a),a=R(a),a=N(a),a=I(a),a=P(a),a=F(a,[M,O]),a=D(a),a=y(a),a=_(a),a=await U(a),a=H(a),a=y(a,!0),a=W(a),g===a)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let u=ve.init.target.getSurface().getModel();u.getLinearFragment(u.getRangeFromSourceOffsets(0,g.length)).insertContent(a),u.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else o.textSelection("setContents",a),o.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let d=document.querySelector("#wpSummary");d?d.value.includes(f.slice(1))||(d.value?d.value+=`; ${f.charAt(0).toLowerCase()+f.slice(1)}`:d.value=f):p=!0}})});function A(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function L(e){let p=/[\u0000-\u0009\u000B\u000C\u000E-\u001F\u007F\u00AD\u200B-\u200F\u202A-\u202E\u2060\u2063\uFEFF]/g;return p.test(e)&&(e=e.replaceAll(p,"")),e}function R(e){let p={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},f=["and","birth","career","death","education","life","of","or"],m=Object.fromEntries(Object.entries(p).flatMap(([u,r])=>[[u.toLowerCase(),u],...r.map(s=>[s,u])])),g=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(u=>{let{name:r}=u.groups,{startMarkup:s,endMarkup:c}=u.groups;r=r.replaceAll(/'{3}/g,"");let b=r.matchAll(/\[\[(.+?)]]/g).toArray();for(let t of b)r=r.replace(t[0],t[1].split("|").at(-1));let w=Math.max(s.length,c.length,2);return{name:r,depth:w,original:u[0]}}),a=new Set(g.map(u=>u.name)),d=g.length>0&&/^\n*=+ | =+\n+$/.test(g[0].original)?" ":"";for(let u of g){let r=u.name.toLowerCase(),c=r in m&&!a.has(m[r])?m[r]:u.name;for(let w of f)c=c.replaceAll(new RegExp(`\\b${w}\\b`,"gi"),w);c=c.charAt(0).toUpperCase()+c.slice(1);let b=`${"=".repeat(u.depth)}${d}${c}${d}${"=".repeat(u.depth)}`;u.original!==b&&(e=e.replace(u.original,`

${b}
`))}return e}function N(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function I(e){let f=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(o=>{let[g,a,d]=o;return{type:a.toUpperCase(),value:d,original:g}}),m=mw.Title.newFromText(mw.config.get("wgPageName"));for(let o of f){let g=new RegExp(`${A(o.original)}
*`,"g"),a=mw.Title.newFromText(o.value);if(!a)continue;let d=mw.Title.makeTitle(m.getNamespaceId(),a.getMainText());if(!d)continue;let u=o.type==="DISPLAYTITLE"?m.toText():m.getMainText(),r=o.type==="DISPLAYTITLE"?d.toText():d.getMainText();if(u===r){e=e.replace(g,"");continue}let s=`{{${o.type}:${r}}}
`;e=e.replace(g,s)}return e}function P(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function F(e,p){let f=[],m=[],o=!1,g=!1,a=0;function d(s,c=!0){let b=e.slice(a,a+s.length)===s;return b&&c&&(a+=s.length),b}for(;a<e.length;)if(d("<nowiki>"))o=!0;else if(d("</nowiki>"))o=!1;else if(d("<!--"))g=!0;else if(d("-->"))g=!1;else if(!o&&!g)if(d("[["))m.push({start:a-2,end:-1,isNested:m.length>0});else if(d("]]")){let s=m.pop();if(!s)continue;s.end=a,f.push(s)}else a++;else a++;let u=[],r=Object.values(mw.config.get("wgFormattedNamespaces"));for(let s of f){let c=e.slice(s.start+2,s.end-2),[b,...w]=c.split("|");e=e.slice(0,s.start+2)+"\0".repeat(b.length)+e.slice(s.start+2+b.length);let t=b.replaceAll("_"," ").trim(),i=w.join("|");i=i===" "?" ":i.trim();let h=t.startsWith(":");h&&(t=t.slice(1));let n=!1,x=t.charAt(0).toUpperCase()+t.slice(1),l=t.charAt(0).toLowerCase()+t.slice(1),T=t.split(":")[0];T=T.charAt(0).toUpperCase()+T.slice(1),t.includes(":")&&(x.startsWith("Image:")&&(t=`${t.startsWith("Image:")?"F":"f"}ile:${t.slice(6)}`),h&&(["Image","File","Category"].includes(x.split(":")[0])||!r.includes(T))&&(n=!0));let S="";if(/[!',.:;?]$/.test(i)){let E=i.slice(-1);t.endsWith(E)||(S=E,i=i.slice(0,-1))}t===i?i="":new RegExp(`^${A(t)}[a-z]+$`).test(i)&&(S=i.slice(t.length)+S,i="");for(let E of[x,l])E===i?(t=E,i=""):new RegExp(`^${A(E)}[a-z]+$`).test(i)&&(t=E,S=i.slice(E.length)+S,i="");(i&&t.includes(":")&&r.includes(T)||t.startsWith("file:")||t.startsWith("category:"))&&(t=t.charAt(0).toUpperCase()+t.slice(1)),t=`${n?":":""}${t}`,t=t.padStart(b.length,"\0");let k=`[[${t}${i?`|${i}`:""}]]${S}`;u.push([s,k])}for(let s of p)e=s(e,1);for(let s=0;s<2;s++)for(let[c,b]of u)s===0&&c.isNested||s===1&&!c.isNested||(e=e.slice(0,c.start)+b.padEnd(c.end-c.start,"\0")+e.slice(c.end));for(let s of p)e=s(e,2);return e.replaceAll("\0","")}function M(e,p){let f="\x7F",m="\x9F";return p===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",f),e=e.replaceAll("\xA0",m)):(e=e.replaceAll(f,"..."),e=e.replaceAll(m,"&nbsp;")),e}function O(e,p){return p===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(f,m,o)=>`${m}\u2013${o}`.padEnd(f.length,"\0"))),e}function D(e){let p=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let f of p)for(;f.test(e);)e=e.replace(f,"");return e}function y(e,p=!1){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),p||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`

$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),p||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim(),e}function _(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>.*?<\/ref>|<ref(?!erences).*?\/>)+)([!,.;?])?/g,(r,s,c)=>(c??"")+s);let p=[],f=!1,m=!1,o=0;function g(r){let s=e.slice(o,o+r.length)===r;return s&&(o+=r.length),s}function a(r){for(;o<e.length&&!g(r);)o++}for(;o<e.length;)if(g("<nowiki>"))f=!0;else if(g("</nowiki>"))f=!1;else if(g("<!--"))m=!0;else if(g("-->"))m=!1;else if(!f&&!m)if(!g("<references")&&g("<ref")){let r=o-4;a(">");let s=e.slice(r,o-1).trim().endsWith("/");p.push(s?{start:r,end:o,isSelfClosing:s}:{start:r,end:-1})}else g("</ref>")?p.at(-1).end=o:o++;else o++;let d=new DOMParser,u=[];for(let r of p){let s=e.slice(r.start,r.end),c=/<ref(?!erences).*?>/is.exec(s)[0],w=d.parseFromString(r.isSelfClosing?c.replace(/ *\/ *>/," />"):c+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),t=s.slice(c.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();w=r.isSelfClosing||t.length===0?w.replace(/>\s*<\/ref>/," />"):`${w.slice(0,-6)}${t}</ref>`,s!==w&&u.push([s,w])}for(let[r,s]of u)e=e.replace(r,s);return e}async function U(e){let p;(x=>(x[x.Expanded=0]="Expanded",x[x.ExpandedAligned=1]="ExpandedAligned",x[x.Minimized=2]="Minimized",x[x.MinimizedSpaced=3]="MinimizedSpaced"))(p||={});let f;(n=>(n[n.User=2]="User",n[n.Template=10]="Template",n[n.Draft=118]="Draft"))(f||={});let m=JSON.parse(await C("User:Eejit43/scripts/article-cleaner.json")??"[]"),o=Object.fromEntries(m.flatMap(t=>t.from.map(i=>[i.charAt(0).toLowerCase()+i.slice(1),t.to])));class g{location;isNested=!1;fullText;fullTextEscaped;rawName;name;parameters=[];subTemplates=[];PLACEHOLDER_STRINGS=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];PIPE_ESCAPE_REGEXES=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];TAG_EQUALS_ESCAPE_REGEXES=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];templateAliases=o;defaultTemplateStyles={1:["album rating","album reviews","american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","chembox","cricket uniform","election box","episode list","external music video","extra album cover","field hockey kit","football box","football kit","footballbox","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","judo bracket","judo repechage","listen","location map","medical resources","motorsport season","multiple image","music ratings","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","repechage","rugbybox","sidebar","single ratings","singles","song ratings","speciesbox","starbox","succession box","taxobox","team bracket","track listing","tweet","virusbox","volleyball kit","nteambracket","2nteam-nteambracket","2teambracket","3teambracket","3teamrr","4teambracket","4teamrr","5teambracket","5teamrr","6teambracket","6teamrr","7teambracket","7teamrr","8teambracket","8teamroundrobin","8teamrr","9teambracket","10teambracket","11teambracket","12teambracket","13teambracket","14teambracket","15teambracket","16teambracket","18teambracket","20teambracket","24teambracket","27teambracket","32teambracket","40teambracket","48teambracket","64teambracket","128teambracket"],2:["birth date","coord","death date","end date","lang","start date"],3:["infobox mapframe"]};namespaceSpecificTemplates={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};templatesToKeepContent=["draft categories"];templatesToSubst=["articlepagename","articlespace","basepagename","fullpagename","namespace","namespacenumber","pagename","rootpagename","subjectpagename","subjectspace","subpagename","talkpagename","talkspace","pagenamebase"];constructor(i){this.location={start:i}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let l of this.subTemplates)l.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(l.fullText,this.PLACEHOLDER_STRINGS[0]);let i=this.fullTextEscaped.slice(2,-2).trim();for(let l of this.PIPE_ESCAPE_REGEXES)for(;l.test(i);)i=i.replaceAll(l,`$1${this.PLACEHOLDER_STRINGS[1]}$2`);for(let l of this.TAG_EQUALS_ESCAPE_REGEXES)i=i.replaceAll(l,(T,S,k)=>T.replace(k,k.replaceAll("=",this.PLACEHOLDER_STRINGS[2])));let h=i.split("|").map(l=>l.replaceAll(this.PLACEHOLDER_STRINGS[1],"|").trim());this.rawName=h.shift(),this.name=this.rawName.replaceAll("_"," "),this.name.toLowerCase().startsWith("template:")&&(this.name=this.name.slice(9));let n=this.name.charAt(0).toLowerCase()+this.name.slice(1);this.name=n in this.templateAliases?this.templateAliases[n]:this.name;let x=h.map(l=>{let T=l.indexOf("=");if(T===-1)return{key:null,value:l.replaceAll(this.PLACEHOLDER_STRINGS[2],"=").trim()};let S=l.slice(T+1).replaceAll(this.PLACEHOLDER_STRINGS[2],"=");return{key:l.slice(0,T).trim(),value:`${S.startsWith(`
`)?`
`:""}${S.trim()}`}});this.parameters=x}shouldBeRemoved(){for(let[i,h]of Object.entries(this.namespaceSpecificTemplates))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(i)&&h.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let i=0,h;for(let[n,x]of Object.entries(this.defaultTemplateStyles))for(let l of x)this.name.toLowerCase().startsWith(l)&&l.length>=i&&(i=l.length,h=Number.parseInt(n));return h}cleanupParameters(){let i=new Set(["cover","image_flag","image","logo","map_image"]);for(let h=1;h<=10;h++)i.add(`image${h}`);this.parameters=this.parameters.map(({key:h,value:n})=>(h&&i.has(h)&&(n=n.trim(),n.startsWith("[[")&&n.endsWith("]]")&&(n=/\[\[(.*?)]]/g.exec(n)[1].split("|")[0]),n=n.replace(/^(File|Image):/,"").replaceAll("_"," ")),{key:h,value:n}))}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.templatesToKeepContent.includes(this.name.toLowerCase())?this.parameters[0].value:"";let i=mw.config.get("wgNamespaceNumber")!==10&&this.templatesToSubst.some(l=>l===this.name.toLowerCase()||this.name.toLowerCase().startsWith(`${l}:`)),h=this.getStyle();if(h===void 0){let l=this.name;this.name.toLowerCase().startsWith("template:")&&(l=this.name.slice(9)),i&&(l=`subst:${l}`),l!==this.rawName&&(this.fullTextEscaped=this.fullTextEscaped.replace(this.rawName,l));for(let T of this.subTemplates)this.fullTextEscaped=this.fullTextEscaped.replace(this.PLACEHOLDER_STRINGS[0],T.format());return this.fullTextEscaped}let n=[`{{${i?"subst:":""}${this.name}`];if(this.cleanupParameters(),h===0||h===1){let l=0;h===1&&(l=Math.max(...this.parameters.map(T=>T.key?.length??0)));for(let[T,S]of this.parameters.entries())!S.key&&!S.value&&this.parameters.slice(T+1).every(k=>k.key??!k.value)||n.push(`| ${S.key?`${S.key.padEnd(l)} = `:""}${S.value}`)}else for(let[l,T]of this.parameters.entries())!T.value&&(T.key||this.parameters.slice(l+1).every(S=>S.key??!S.value))||n.push(`|${T.key?`${T.key}=`:""}${T.value}`);n.push("}}"),n.length===2?(n[0]+="}}",n.pop()):h===3&&(n[n.length-2]+="}}",n.pop());let x=n.join(h===0||h===1?`
`:h===3?" ":"");for(let l of this.subTemplates)x=x.replace(this.PLACEHOLDER_STRINGS[0],l.format());return x}}let a=[],d=[],u=!1,r=!1,s=!1,c=0;function b(t){let i=e.slice(c,c+t.length)===t;return i&&(c+=t.length),i}for(;c<e.length;)if(b("<nowiki>"))r=!0;else if(b("</nowiki>"))r=!1;else if(b("<!--"))s=!0;else if(b("-->"))s=!1;else if(!r&&!s)if(b("[["))u=!0;else if(u&&b("]]"))u=!1;else if(b("{{")){let t=new g(c-2);d.length>0&&(t.isNested=!0,d.at(-1)?.subTemplates.push(t)),d.push(t)}else if(b("}}")){let t=d.pop();if(!t)continue;t.location.end=c,a.push(t)}else c++;else c++;let w=e;for(let t of a)t.isNested||(t.parse(),w=w.replace(t.fullText,t.format()));return w}function H(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let p=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let f of p)e=e.replaceAll(new RegExp(` *<!-- ?${A(f)}.*?--> *
?`,"gs"),"");return e}function W(e){let p=[...e.matchAll(/\[\[Category:/g)].length;return e=e.replaceAll(/\n*{{(uncategorized|improve categories)(\|.+?)?}}\n*/gi,""),p===0&&!/{{uncategorized/i.test(e)?e+=`

{{Uncategorized|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`:p===1&&!/{{improve categories/i.test(e)&&(e+=`

{{Improve categories|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`),e}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vdXRpbGl0eS50cyIsICIuLi9zY3JpcHRzL2FydGljbGUtY2xlYW5lci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHR5cGUgeyBBcGlRdWVyeVJldmlzaW9uc1BhcmFtcyB9IGZyb20gJ3R5cGVzLW1lZGlhd2lraS9hcGlfcGFyYW1zJztcbmltcG9ydCB0eXBlIHsgUGFnZVJldmlzaW9uc1Jlc3VsdCB9IGZyb20gJy4vZ2xvYmFsLXR5cGVzJztcblxuZXhwb3J0IGNvbnN0IGFwaSA9IG5ldyBtdy5BcGkoKTtcblxuLyoqXG4gKiBGZXRjaGVzIHRoZSBjb250ZW50IG9mIGEgZ2l2ZW4gcGFnZS5cbiAqIEBwYXJhbSB0aXRsZSBUaGUgdGl0bGUgdG8gZmV0Y2guXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQYWdlQ29udGVudCh0aXRsZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgKGF3YWl0IGFwaS5nZXQoe1xuICAgICAgICAgICAgYWN0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogJzInLFxuICAgICAgICAgICAgcHJvcDogJ3JldmlzaW9ucycsXG4gICAgICAgICAgICBydnByb3A6ICdjb250ZW50JyxcbiAgICAgICAgICAgIHJ2c2xvdHM6ICdtYWluJyxcbiAgICAgICAgICAgIHRpdGxlczogdGl0bGUsXG4gICAgICAgIH0gc2F0aXNmaWVzIEFwaVF1ZXJ5UmV2aXNpb25zUGFyYW1zKSkgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdFxuICAgICkucXVlcnkucGFnZXNbMF0ucmV2aXNpb25zPy5bMF0uc2xvdHMubWFpbi5jb250ZW50LnRyaW0oKTtcbn1cbiIsICJpbXBvcnQgeyBnZXRQYWdlQ29udGVudCB9IGZyb20gJy4uL3V0aWxpdHknO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHRyYW5lb3VzLWNsYXNzXG4gICAgY2xhc3MgVmVSYW5nZSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTtcbiAgICB9XG5cbiAgICBjbGFzcyBWZUZyYWdtZW50IHtcbiAgICAgICAgaW5zZXJ0Q29udGVudChjb250ZW50OiBzdHJpbmcpOiB2b2lkO1xuICAgIH1cblxuICAgIGNsYXNzIFZlU3VyZmFjZU1vZGVsIHtcbiAgICAgICAgZ2V0TGluZWFyRnJhZ21lbnQocmFuZ2U6IFZlUmFuZ2UpOiBWZUZyYWdtZW50O1xuICAgICAgICBnZXRSYW5nZUZyb21Tb3VyY2VPZmZzZXRzKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogVmVSYW5nZTtcbiAgICAgICAgc2V0U2VsZWN0aW9uKHNlbGVjdGlvbjogVmVMaW5lYXJTZWxlY3Rpb24pOiB2b2lkO1xuICAgIH1cblxuICAgIGNsYXNzIFZlVGFyZ2V0IHtcbiAgICAgICAgZ2V0U3VyZmFjZSgpOiB7IGdldE1vZGVsKCk6IFZlU3VyZmFjZU1vZGVsIH07XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHRyYW5lb3VzLWNsYXNzXG4gICAgY2xhc3MgVmVMaW5lYXJTZWxlY3Rpb24ge1xuICAgICAgICBjb25zdHJ1Y3RvcihyYW5nZTogVmVSYW5nZSk7XG4gICAgfVxuXG4gICAgY29uc3QgdmU6IHtcbiAgICAgICAgUmFuZ2U6IHR5cGVvZiBWZVJhbmdlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgICAgICBkbTogeyBMaW5lYXJTZWxlY3Rpb246IHR5cGVvZiBWZUxpbmVhclNlbGVjdGlvbiB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgICAgICBpbml0PzogeyB0YXJnZXQ6IFZlVGFyZ2V0IH07XG4gICAgfTtcbn1cblxuZXhwb3J0IHt9O1xuXG4oKCkgPT4ge1xuICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpIDwgMCkgcmV0dXJuOyAvLyBEb24ndCBydW4gaW4gdmlydHVhbCBuYW1lc3BhY2VzXG4gICAgaWYgKCFtdy5jb25maWcuZ2V0KCd3Z0lzUHJvYmFibHlFZGl0YWJsZScpKSByZXR1cm47IC8vIERvbid0IHJ1biBpZiB1c2VyIGNhbid0IGVkaXQgcGFnZVxuXG4gICAgbXcubG9hZGVyLnVzaW5nKFsnbWVkaWF3aWtpLnV0aWwnLCAnanF1ZXJ5LnRleHRTZWxlY3Rpb24nXSwgKCkgPT4ge1xuICAgICAgICBtdy51dGlsLmFkZENTUyhgXG4jYXJ0aWNsZS1jbGVhbmVyIHtcbiAgICBkaXNwbGF5OiBub25lO1xufVxuXG4jY29udGVudDpoYXMoI3dwVGV4dGJveDEpICNhcnRpY2xlLWNsZWFuZXIge1xuICAgIGRpc3BsYXk6IHVuc2V0O1xufWApO1xuXG4gICAgICAgIGNvbnN0IGxpbmsgPSBtdy51dGlsLmFkZFBvcnRsZXRMaW5rKFxuICAgICAgICAgICAgbXcuY29uZmlnLmdldCgnc2tpbicpID09PSAnbWluZXJ2YScgPyAncC1uYXZpZ2F0aW9uJyA6ICdwLWNhY3Rpb25zJyxcbiAgICAgICAgICAgICcjJyxcbiAgICAgICAgICAgICdQZXJmb3JtIGFydGljbGUgY2xlYW51cCcsXG4gICAgICAgICAgICAnYXJ0aWNsZS1jbGVhbmVyJyxcbiAgICAgICAgKSE7XG5cbiAgICAgICAgbGV0IHNob3VsZEFkZFNjcmlwdE1lc3NhZ2UgPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBTQ1JJUFRfTUVTU0FHRSA9ICdDbGVhbmVkIHVwIGFydGljbGUgY29udGVudCAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvYXJ0aWNsZS1jbGVhbmVyfGFydGljbGUtY2xlYW5lcl1dKSc7XG5cbiAgICAgICAgbXcuaG9vaygndmUuc2F2ZURpYWxvZy5zdGF0ZUNoYW5nZWQnKS5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNob3VsZEFkZFNjcmlwdE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdW1tYXJ5SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxUZXh0QXJlYUVsZW1lbnQ+KCcudmUtdWktbXdTYXZlRGlhbG9nLXN1bW1hcnkgdGV4dGFyZWEnKSE7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXN1bW1hcnlJbnB1dC52YWx1ZS5pbmNsdWRlcyhTQ1JJUFRfTUVTU0FHRS5zbGljZSgxKSkpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdW1tYXJ5SW5wdXQudmFsdWUgJiYgIXN1bW1hcnlJbnB1dC52YWx1ZS5zdGFydHNXaXRoKCcvKiAnKSAmJiAhc3VtbWFyeUlucHV0LnZhbHVlLmVuZHNXaXRoKCcgKi8gJykpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5SW5wdXQudmFsdWUgKz0gYDsgJHtTQ1JJUFRfTUVTU0FHRS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIFNDUklQVF9NRVNTQUdFLnNsaWNlKDEpfWA7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Ugc3VtbWFyeUlucHV0LnZhbHVlID0gYCR7c3VtbWFyeUlucHV0LnZhbHVlfSR7U0NSSVBUX01FU1NBR0V9YDtcblxuICAgICAgICAgICAgICAgIHNob3VsZEFkZFNjcmlwdE1lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgY29uc3QgZWRpdEJveCA9ICQoJyN3cFRleHRib3gxJyk7XG4gICAgICAgICAgICBpZiAoZWRpdEJveC5sZW5ndGggPT09IDApIHJldHVybiBtdy5ub3RpZnkoJ0VkaXQgYm94IG5vdCBmb3VuZCEnLCB7IHR5cGU6ICdlcnJvcicsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcblxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxUZXh0ID0gZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdnZXRDb250ZW50cycpO1xuXG4gICAgICAgICAgICBsZXQgZmluYWxUZXh0ID0gb3JpZ2luYWxUZXh0O1xuXG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwU3RyYXlVbmljb2RlQ2hhcmFjdGVycyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cFNlY3Rpb25IZWFkZXJzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwTWFnaWNXb3JkcyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cERpc3BsYXl0aXRsZXNBbmREZWZhdWx0c29ydHMoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBDYXRlZ29yaWVzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwTGlua3MoZmluYWxUZXh0LCBbY2xlYW51cEltcHJvcGVyQ2hhcmFjdGVycywgY2xlYW51cFllYXJSYW5nZXNdKTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBTdHJheU1hcmt1cChmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cFNwYWNpbmcoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBSZWZlcmVuY2VzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBhd2FpdCBmb3JtYXRUZW1wbGF0ZXMoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IHJlbW92ZUNvbW1lbnRzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwU3BhY2luZyhmaW5hbFRleHQsIHRydWUpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gYXV0b1RhZ1BhZ2UoZmluYWxUZXh0KTtcblxuICAgICAgICAgICAgaWYgKG9yaWdpbmFsVGV4dCA9PT0gZmluYWxUZXh0KSBtdy5ub3RpZnkoJ05vIGNoYW5nZXMgdG8gYmUgbWFkZSB0byB0aGUgYXJ0aWNsZSEnLCB7IHR5cGU6ICd3YXJuJywgYXV0b0hpZGVTZWNvbmRzOiAnc2hvcnQnIH0pO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHZlLmluaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VyZmFjZU1vZGVsID0gdmUuaW5pdC50YXJnZXQuZ2V0U3VyZmFjZSgpLmdldE1vZGVsKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gc3VyZmFjZU1vZGVsLmdldExpbmVhckZyYWdtZW50KHN1cmZhY2VNb2RlbC5nZXRSYW5nZUZyb21Tb3VyY2VPZmZzZXRzKDAsIG9yaWdpbmFsVGV4dC5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuaW5zZXJ0Q29udGVudChmaW5hbFRleHQpO1xuICAgICAgICAgICAgICAgICAgICBzdXJmYWNlTW9kZWwuc2V0U2VsZWN0aW9uKG5ldyB2ZS5kbS5MaW5lYXJTZWxlY3Rpb24obmV3IHZlLlJhbmdlKDAsIDApKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdzZXRDb250ZW50cycsIGZpbmFsVGV4dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdzZXRTZWxlY3Rpb24nLCB7IHN0YXJ0OiAwIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG13Lm5vdGlmeSgnQXJ0aWNsZSBjbGVhbnVwIGNvbXBsZXRlIScsIHsgdHlwZTogJ3N1Y2Nlc3MnLCBhdXRvSGlkZVNlY29uZHM6ICdzaG9ydCcgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzdW1tYXJ5SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxJbnB1dEVsZW1lbnQ+KCcjd3BTdW1tYXJ5Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHN1bW1hcnlJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXN1bW1hcnlJbnB1dC52YWx1ZS5pbmNsdWRlcyhTQ1JJUFRfTUVTU0FHRS5zbGljZSgxKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VtbWFyeUlucHV0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bW1hcnlJbnB1dC52YWx1ZSArPSBgOyAke1NDUklQVF9NRVNTQUdFLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgU0NSSVBUX01FU1NBR0Uuc2xpY2UoMSl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugc3VtbWFyeUlucHV0LnZhbHVlID0gU0NSSVBUX01FU1NBR0U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHNob3VsZEFkZFNjcmlwdE1lc3NhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pKCk7XG5cbi8qKlxuICogRXNjYXBlcyByZWdleCBjaGFyYWN0ZXJzIGluIGEgc3RyaW5nLlxuICogQHBhcmFtIHN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZSByZWdleCBjaGFyYWN0ZXJzIGluLlxuICovXG5mdW5jdGlvbiBlc2NhcGVSZWdleENoYXJhY3RlcnMoc3RyaW5nOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2VBbGwoL1skKCkqKy4/W1xcXFxcXF1ee3x9XS9nLCAnXFxcXCQmJyk7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIHN0cmF5IFVuaWNvZGUgY2hhcmFjdGVycyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBTdHJheVVuaWNvZGVDaGFyYWN0ZXJzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIC8vIFRoaXMgcmVnZXggcmVtb3ZlczpcbiAgICAvLyAgIC0gQVNDSUkgY29udHJvbCBjaGFyYWN0ZXJzIChcXHUwMDAwLVxcdTAwMDksIFxcdTAwMEItXFx1MDAwQywgXFx1MDAwRS1cXHUwMDFGKVxuICAgIC8vICAgLSBERUwgKFxcdTAwN0YpXG4gICAgLy8gICAtIFNvZnQgaHlwaGVuIChcXHUwMEFEKVxuICAgIC8vICAgLSBaZXJvLXdpZHRoIGNoYXJhY3RlcnMgYW5kIGRpcmVjdGlvbmFsaXR5IG1hcmtzIChcXHUyMDBCLVxcdTIwMEYpXG4gICAgLy8gICAtIEJpZGkgb3ZlcnJpZGUgYW5kIGZvcm1hdHRpbmcgY2hhcmFjdGVycyAoXFx1MjAyQS1cXHUyMDJFKVxuICAgIC8vICAgLSBXb3JkIGpvaW5lciBhbmQgaW52aXNpYmxlIHNlcGFyYXRvciAoXFx1MjA2MCwgXFx1MjA2MylcbiAgICAvLyAgIC0gQnl0ZSBvcmRlciBtYXJrIChCT00pIChcXHVGRUZGKVxuICAgIGNvbnN0IHN0cmF5VW5pY29kZVJlZ2V4ID0gL1tcXHUwMDAwLVxcdTAwMDlcXHUwMDBCXFx1MDAwQ1xcdTAwMEUtXFx1MDAxRlxcdTAwN0ZcXHUwMEFEXFx1MjAwQi1cXHUyMDBGXFx1MjAyQS1cXHUyMDJFXFx1MjA2MFxcdTIwNjNcXHVGRUZGXS9nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnRyb2wtcmVnZXhcblxuICAgIGlmIChzdHJheVVuaWNvZGVSZWdleC50ZXN0KGNvbnRlbnQpKSBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKHN0cmF5VW5pY29kZVJlZ2V4LCAnJyk7XG5cbiAgICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgc2VjdGlvbiBoZWFkZXJzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cFNlY3Rpb25IZWFkZXJzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGNvbnN0IGNvbW1vblJlcGxhY2VtZW50cyA9IHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4gICAgICAgICdTZWUgYWxzbyc6IFsnYWxzbyBzZWUnXSxcbiAgICAgICAgJ1JlZmVyZW5jZXMnOiBbJ3JlZmVyZW5jZScsICdzb3VyY2UnLCAnc291cmNlcycsICdjaXRhdGlvbicsICdjaXRhdGlvbnMnXSxcbiAgICAgICAgJ0Z1cnRoZXIgcmVhZGluZyc6IFsnZnVydGhlciByZWFkaW5nJ10sXG4gICAgICAgICdFeHRlcm5hbCBsaW5rcyc6IFsnZXh0ZXJuYWwgbGluaycsICd3ZWJsaW5rJywgJ3dlYmxpbmtzJ10sXG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4gICAgfTtcblxuICAgIGNvbnN0IGNvbW1vbk1pc2NhcGl0YWxpemVkV29yZHMgPSBbJ2FuZCcsICdiaXJ0aCcsICdjYXJlZXInLCAnZGVhdGgnLCAnZWR1Y2F0aW9uJywgJ2xpZmUnLCAnb2YnLCAnb3InXTtcblxuICAgIGNvbnN0IHJldmVyc2VDb21tb25SZXBsYWNlbWVudHMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGNvbW1vblJlcGxhY2VtZW50cykuZmxhdE1hcCgoW2tleSwgdmFsdWVzXSkgPT4gW1xuICAgICAgICAgICAgW2tleS50b0xvd2VyQ2FzZSgpLCBrZXldLFxuICAgICAgICAgICAgLi4uKHZhbHVlcy5tYXAoKHZhbHVlKSA9PiBbdmFsdWUsIGtleV0pIGFzIFtzdHJpbmcsIHN0cmluZ11bXSksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LXR5cGUtYXNzZXJ0aW9uXG4gICAgICAgIF0pLFxuICAgICk7XG5cbiAgICBjb25zdCBoZWFkZXJzID0gY29udGVudC5tYXRjaEFsbCgvKD88PV58XFxuKVxcbiooPzxzdGFydE1hcmt1cD49KykgKig/PG5hbWU+Lio/KSAqKD88ZW5kTWFya3VwPj0rKShcXG4rfCQpL2cpO1xuXG4gICAgY29uc3QgcGFyc2VkSGVhZGVycyA9IFsuLi5oZWFkZXJzXS5tYXAoKGhlYWRlcikgPT4ge1xuICAgICAgICBsZXQgeyBuYW1lIH0gPSBoZWFkZXIuZ3JvdXBzITtcbiAgICAgICAgY29uc3QgeyBzdGFydE1hcmt1cCwgZW5kTWFya3VwIH0gPSBoZWFkZXIuZ3JvdXBzITtcblxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlQWxsKC8nezN9L2csICcnKTtcblxuICAgICAgICBjb25zdCBsaW5rcyA9IG5hbWUubWF0Y2hBbGwoL1xcW1xcWyguKz8pXV0vZykudG9BcnJheSgpO1xuXG4gICAgICAgIGZvciAoY29uc3QgbGluayBvZiBsaW5rcykgbmFtZSA9IG5hbWUucmVwbGFjZShsaW5rWzBdLCBsaW5rWzFdLnNwbGl0KCd8JykuYXQoLTEpISk7XG5cbiAgICAgICAgY29uc3QgZGVwdGggPSBNYXRoLm1heChzdGFydE1hcmt1cC5sZW5ndGgsIGVuZE1hcmt1cC5sZW5ndGgsIDIpO1xuXG4gICAgICAgIHJldHVybiB7IG5hbWUsIGRlcHRoLCBvcmlnaW5hbDogaGVhZGVyWzBdIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBoZWFkZXJzU2V0ID0gbmV3IFNldChwYXJzZWRIZWFkZXJzLm1hcCgoaGVhZGVyKSA9PiBoZWFkZXIubmFtZSkpO1xuXG4gICAgY29uc3QgdGl0bGVTcGFjZXIgPSBwYXJzZWRIZWFkZXJzLmxlbmd0aCA+IDAgPyAoL15cXG4qPSsgfCA9K1xcbiskLy50ZXN0KHBhcnNlZEhlYWRlcnNbMF0ub3JpZ2luYWwpID8gJyAnIDogJycpIDogJyc7XG5cbiAgICBmb3IgKGNvbnN0IGhlYWRlciBvZiBwYXJzZWRIZWFkZXJzKSB7XG4gICAgICAgIGNvbnN0IGxvd2VyY2FzZU5hbWUgPSBoZWFkZXIubmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGNvbnN0IHJlcGxhY2VkTmFtZSA9XG4gICAgICAgICAgICBsb3dlcmNhc2VOYW1lIGluIHJldmVyc2VDb21tb25SZXBsYWNlbWVudHMgJiYgIWhlYWRlcnNTZXQuaGFzKHJldmVyc2VDb21tb25SZXBsYWNlbWVudHNbbG93ZXJjYXNlTmFtZV0pXG4gICAgICAgICAgICAgICAgPyByZXZlcnNlQ29tbW9uUmVwbGFjZW1lbnRzW2xvd2VyY2FzZU5hbWVdXG4gICAgICAgICAgICAgICAgOiBoZWFkZXIubmFtZTtcblxuICAgICAgICBsZXQgY2FwaXRhbGl6ZWROYW1lID0gcmVwbGFjZWROYW1lO1xuXG4gICAgICAgIGZvciAoY29uc3Qgd29yZCBvZiBjb21tb25NaXNjYXBpdGFsaXplZFdvcmRzKSBjYXBpdGFsaXplZE5hbWUgPSBjYXBpdGFsaXplZE5hbWUucmVwbGFjZUFsbChuZXcgUmVnRXhwKGBcXFxcYiR7d29yZH1cXFxcYmAsICdnaScpLCB3b3JkKTtcblxuICAgICAgICBjYXBpdGFsaXplZE5hbWUgPSBjYXBpdGFsaXplZE5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBjYXBpdGFsaXplZE5hbWUuc2xpY2UoMSk7XG5cbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gYCR7Jz0nLnJlcGVhdChoZWFkZXIuZGVwdGgpfSR7dGl0bGVTcGFjZXJ9JHtjYXBpdGFsaXplZE5hbWV9JHt0aXRsZVNwYWNlcn0keyc9Jy5yZXBlYXQoaGVhZGVyLmRlcHRoKX1gO1xuXG4gICAgICAgIGlmIChoZWFkZXIub3JpZ2luYWwgIT09IG91dHB1dCkgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShoZWFkZXIub3JpZ2luYWwsIGBcXG5cXG4ke291dHB1dH1cXG5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHVubmVjZXNzYXJ5IG1hZ2ljIHdvcmRzIGZyb20gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwTWFnaWNXb3Jkcyhjb250ZW50OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY29udGVudC5yZXBsYWNlQWxsKC9fXyhJTkRFWHxOT0lOREVYfE5FV1NFQ1RJT05MSU5LfE5PTkVXU0VDVElPTkxJTkt8Tk9FRElUU0VDVElPTnxESVNBTUJJR3xTVEFUSUNSRURJUkVDVHxGT1JDRVRPQylfX1xcbiovZywgJycpO1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBESVNQTEFZVElUTEVzIGFuZCBERUZBVUxUU09SVHMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwRGlzcGxheXRpdGxlc0FuZERlZmF1bHRzb3J0cyhjb250ZW50OiBzdHJpbmcpIHtcbiAgICBjb25zdCB0YWdzID0gY29udGVudC5tYXRjaEFsbCgve3soZGlzcGxheXRpdGxlfGRlZmF1bHRzb3J0KVs6fF0oLio/KX19L2dpKTtcblxuICAgIGNvbnN0IHBhcnNlZFRhZ3MgPSBbLi4udGFnc10ubWFwKCh0YWcpID0+IHtcbiAgICAgICAgY29uc3QgW2Z1bGxUYWcsIHR5cGUsIHZhbHVlXSA9IHRhZztcblxuICAgICAgICByZXR1cm4geyB0eXBlOiB0eXBlLnRvVXBwZXJDYXNlKCksIHZhbHVlLCBvcmlnaW5hbDogZnVsbFRhZyB9O1xuICAgIH0pO1xuXG4gICAgY29uc3QgY3VycmVudFRpdGxlID0gbXcuVGl0bGUubmV3RnJvbVRleHQobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpKSE7XG5cbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBwYXJzZWRUYWdzKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsVGFnUmVnZXggPSBuZXcgUmVnRXhwKGAke2VzY2FwZVJlZ2V4Q2hhcmFjdGVycyh0YWcub3JpZ2luYWwpfVxcbipgLCAnZycpO1xuXG4gICAgICAgIGNvbnN0IHVucHJlZml4ZWRUaXRsZSA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KHRhZy52YWx1ZSk7XG5cbiAgICAgICAgaWYgKCF1bnByZWZpeGVkVGl0bGUpIGNvbnRpbnVlO1xuXG4gICAgICAgIGNvbnN0IHRpdGxlID0gbXcuVGl0bGUubWFrZVRpdGxlKGN1cnJlbnRUaXRsZS5nZXROYW1lc3BhY2VJZCgpLCB1bnByZWZpeGVkVGl0bGUuZ2V0TWFpblRleHQoKSk7XG5cbiAgICAgICAgaWYgKCF0aXRsZSkgY29udGludWU7XG5cbiAgICAgICAgY29uc3QgZGVmYXVsdEtleSA9IHRhZy50eXBlID09PSAnRElTUExBWVRJVExFJyA/IGN1cnJlbnRUaXRsZS50b1RleHQoKSA6IGN1cnJlbnRUaXRsZS5nZXRNYWluVGV4dCgpO1xuXG4gICAgICAgIGNvbnN0IGN1c3RvbUtleSA9IHRhZy50eXBlID09PSAnRElTUExBWVRJVExFJyA/IHRpdGxlLnRvVGV4dCgpIDogdGl0bGUuZ2V0TWFpblRleHQoKTtcblxuICAgICAgICBpZiAoZGVmYXVsdEtleSA9PT0gY3VzdG9tS2V5KSB7XG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG9yaWdpbmFsVGFnUmVnZXgsICcnKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3VGV4dCA9IGB7eyR7dGFnLnR5cGV9OiR7Y3VzdG9tS2V5fX19XFxuYDtcblxuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG9yaWdpbmFsVGFnUmVnZXgsIG5ld1RleHQpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBjYXRlZ29yaWVzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cENhdGVnb3JpZXMoY29udGVudDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZUFsbChcbiAgICAgICAgLyhcXFtcXFt8fX0pOj9jYXRlZ29yeTooLio/KShdXXx9fSkvZ2ksXG4gICAgICAgIGBbWyR7bXcuY29uZmlnLmdldCgnd2dDYW5vbmljYWxOYW1lc3BhY2UnKSA9PT0gJ0RyYWZ0JyA/ICc6JyA6ICcnfUNhdGVnb3J5OiQyXV1gLFxuICAgICk7XG59XG5cbmludGVyZmFjZSBMaW5rSW5mb3JtYXRpb24ge1xuICAgIHN0YXJ0OiBudW1iZXI7XG4gICAgZW5kOiBudW1iZXI7XG4gICAgaXNOZXN0ZWQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIGxpbmtzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqIEBwYXJhbSBmdW5jdGlvbnNDYWxsZWRXaGlsZUVzY2FwZWQgVGhlIGZ1bmN0aW9ucyBjYWxsZWQgd2hpbGUgdGhlIGxpbmtzIGFyZSBlc2NhcGVkLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwTGlua3MoY29udGVudDogc3RyaW5nLCBmdW5jdGlvbnNDYWxsZWRXaGlsZUVzY2FwZWQ6ICgoY29udGVudDogc3RyaW5nLCBydW46IDEgfCAyKSA9PiBzdHJpbmcpW10pIHtcbiAgICBjb25zdCBjbG9zZWRMaW5rczogTGlua0luZm9ybWF0aW9uW10gPSBbXTtcbiAgICBjb25zdCBsaW5rczogTGlua0luZm9ybWF0aW9uW10gPSBbXTtcblxuICAgIGxldCBpc0luc2lkZU5vd2lraSA9IGZhbHNlO1xuICAgIGxldCBpc0luc2lkZUNvbW1lbnQgPSBmYWxzZTtcblxuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSAwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBjb250ZW50IGZvbGxvd2luZyB0aGUgY3VycmVudCBsb2NhdGlvbiBtYXRjaGVzIHRoZSBkZXNpcmVkIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gZGVzaXJlZFN0cmluZyBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHNob3VsZEluY3JlbWVudCBXaGV0aGVyIHRvIGluY3JlbWVudCB0aGUgY3VycmVudCBsb2NhdGlvbiBpZiB0aGUgc3RyaW5nIGlzIGZvdW5kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXRTdHJpbmcoZGVzaXJlZFN0cmluZzogc3RyaW5nLCBzaG91bGRJbmNyZW1lbnQgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGlzQXRTdHJpbmcgPSBjb250ZW50LnNsaWNlKGN1cnJlbnRMb2NhdGlvbiwgY3VycmVudExvY2F0aW9uICsgZGVzaXJlZFN0cmluZy5sZW5ndGgpID09PSBkZXNpcmVkU3RyaW5nO1xuXG4gICAgICAgIGlmIChpc0F0U3RyaW5nICYmIHNob3VsZEluY3JlbWVudCkgY3VycmVudExvY2F0aW9uICs9IGRlc2lyZWRTdHJpbmcubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBpc0F0U3RyaW5nO1xuICAgIH1cblxuICAgIHdoaWxlIChjdXJyZW50TG9jYXRpb24gPCBjb250ZW50Lmxlbmd0aClcbiAgICAgICAgaWYgKGlzQXRTdHJpbmcoJzxub3dpa2k+JykpIGlzSW5zaWRlTm93aWtpID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPC9ub3dpa2k+JykpIGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKGlzQXRTdHJpbmcoJzwhLS0nKSkgaXNJbnNpZGVDb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnLS0+JykpIGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuICAgICAgICBlbHNlIGlmICghaXNJbnNpZGVOb3dpa2kgJiYgIWlzSW5zaWRlQ29tbWVudClcbiAgICAgICAgICAgIGlmIChpc0F0U3RyaW5nKCdbWycpKSBsaW5rcy5wdXNoKHsgc3RhcnQ6IGN1cnJlbnRMb2NhdGlvbiAtIDIsIGVuZDogLTEsIGlzTmVzdGVkOiBsaW5rcy5sZW5ndGggPiAwIH0pO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnXV0nKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RMaW5rID0gbGlua3MucG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFsYXN0TGluaykgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBsYXN0TGluay5lbmQgPSBjdXJyZW50TG9jYXRpb247XG5cbiAgICAgICAgICAgICAgICBjbG9zZWRMaW5rcy5wdXNoKGxhc3RMaW5rKTtcbiAgICAgICAgICAgIH0gZWxzZSBjdXJyZW50TG9jYXRpb24rKztcbiAgICAgICAgZWxzZSBjdXJyZW50TG9jYXRpb24rKztcblxuICAgIGNvbnN0IG5ld0xpbmtDb250ZW50OiBbTGlua0luZm9ybWF0aW9uLCBzdHJpbmddW10gPSBbXTtcblxuICAgIGNvbnN0IG5hbWVzcGFjZU5hbWVzID0gT2JqZWN0LnZhbHVlcyhtdy5jb25maWcuZ2V0KCd3Z0Zvcm1hdHRlZE5hbWVzcGFjZXMnKSk7XG5cbiAgICBmb3IgKGNvbnN0IGxpbmtMb2NhdGlvbiBvZiBjbG9zZWRMaW5rcykge1xuICAgICAgICBjb25zdCBpbm5lckxpbmsgPSBjb250ZW50LnNsaWNlKGxpbmtMb2NhdGlvbi5zdGFydCArIDIsIGxpbmtMb2NhdGlvbi5lbmQgLSAyKTtcblxuICAgICAgICBjb25zdCBbdW5wYXJzZWRMaW5rLCAuLi5wYXJhbWV0ZXJzXSA9IGlubmVyTGluay5zcGxpdCgnfCcpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgbGluayBuYW1lcyBzbyB0aGVzZSB3b24ndCBiZSBhZmZlY3RlZCBieSBmdW5jdGlvbnMgY2FsbGVkIHdoaWxlIGVzY2FwZWRcbiAgICAgICAgY29udGVudCA9XG4gICAgICAgICAgICBjb250ZW50LnNsaWNlKDAsIGxpbmtMb2NhdGlvbi5zdGFydCArIDIpICtcbiAgICAgICAgICAgICdcXDAnLnJlcGVhdCh1bnBhcnNlZExpbmsubGVuZ3RoKSArXG4gICAgICAgICAgICBjb250ZW50LnNsaWNlKGxpbmtMb2NhdGlvbi5zdGFydCArIDIgKyB1bnBhcnNlZExpbmsubGVuZ3RoKTtcblxuICAgICAgICBsZXQgbGluayA9IHVucGFyc2VkTGluay5yZXBsYWNlQWxsKCdfJywgJyAnKS50cmltKCk7XG4gICAgICAgIGxldCBhbHRUZXh0ID0gcGFyYW1ldGVycy5qb2luKCd8Jyk7XG4gICAgICAgIGFsdFRleHQgPSBhbHRUZXh0ID09PSAnICcgPyAnICcgOiBhbHRUZXh0LnRyaW0oKTtcblxuICAgICAgICBjb25zdCBpc0ZpcnN0Q2hhcmFjdGVyQ29sb24gPSBsaW5rLnN0YXJ0c1dpdGgoJzonKTtcbiAgICAgICAgaWYgKGlzRmlyc3RDaGFyYWN0ZXJDb2xvbikgbGluayA9IGxpbmsuc2xpY2UoMSk7XG5cbiAgICAgICAgbGV0IHNob3VsZEZpcnN0Q2hhcmFjdGVyQmVDb2xvbiA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IGxpbmtVcHBlcmNhc2VTdGFydCA9IGxpbmsuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBsaW5rLnNsaWNlKDEpO1xuICAgICAgICBjb25zdCBsaW5rTG93ZXJjYXNlU3RhcnQgPSBsaW5rLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgbGluay5zbGljZSgxKTtcblxuICAgICAgICBsZXQgbmFtZXNwYWNlID0gbGluay5zcGxpdCgnOicpWzBdO1xuICAgICAgICBuYW1lc3BhY2UgPSBuYW1lc3BhY2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lc3BhY2Uuc2xpY2UoMSk7XG5cbiAgICAgICAgaWYgKGxpbmsuaW5jbHVkZXMoJzonKSkge1xuICAgICAgICAgICAgaWYgKGxpbmtVcHBlcmNhc2VTdGFydC5zdGFydHNXaXRoKCdJbWFnZTonKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZFN0YXJ0VXBwZXJjYXNlID0gbGluay5zdGFydHNXaXRoKCdJbWFnZTonKTtcblxuICAgICAgICAgICAgICAgIGxpbmsgPSBgJHtzaG91bGRTdGFydFVwcGVyY2FzZSA/ICdGJyA6ICdmJ31pbGU6JHtsaW5rLnNsaWNlKDYpfWA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBpc0ZpcnN0Q2hhcmFjdGVyQ29sb24gJiZcbiAgICAgICAgICAgICAgICAoWydJbWFnZScsICdGaWxlJywgJ0NhdGVnb3J5J10uaW5jbHVkZXMobGlua1VwcGVyY2FzZVN0YXJ0LnNwbGl0KCc6JylbMF0pIHx8ICFuYW1lc3BhY2VOYW1lcy5pbmNsdWRlcyhuYW1lc3BhY2UpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHNob3VsZEZpcnN0Q2hhcmFjdGVyQmVDb2xvbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYWZ0ZXJMaW5rVGV4dCA9ICcnO1xuXG4gICAgICAgIGlmICgvWyEnLC46Oz9dJC8udGVzdChhbHRUZXh0KSkge1xuICAgICAgICAgICAgY29uc3QgYWRkZWRQdW5jdHVhdGlvbiA9IGFsdFRleHQuc2xpY2UoLTEpO1xuXG4gICAgICAgICAgICBpZiAoIWxpbmsuZW5kc1dpdGgoYWRkZWRQdW5jdHVhdGlvbikpIHtcbiAgICAgICAgICAgICAgICBhZnRlckxpbmtUZXh0ID0gYWRkZWRQdW5jdHVhdGlvbjtcbiAgICAgICAgICAgICAgICBhbHRUZXh0ID0gYWx0VGV4dC5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGluayA9PT0gYWx0VGV4dCkgYWx0VGV4dCA9ICcnO1xuICAgICAgICBlbHNlIGlmIChuZXcgUmVnRXhwKGBeJHtlc2NhcGVSZWdleENoYXJhY3RlcnMobGluayl9W2Etel0rJGApLnRlc3QoYWx0VGV4dCkpIHtcbiAgICAgICAgICAgIGFmdGVyTGlua1RleHQgPSBhbHRUZXh0LnNsaWNlKGxpbmsubGVuZ3RoKSArIGFmdGVyTGlua1RleHQ7XG4gICAgICAgICAgICBhbHRUZXh0ID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IG5ld0xpbmsgb2YgW2xpbmtVcHBlcmNhc2VTdGFydCwgbGlua0xvd2VyY2FzZVN0YXJ0XSlcbiAgICAgICAgICAgIGlmIChuZXdMaW5rID09PSBhbHRUZXh0KSB7XG4gICAgICAgICAgICAgICAgbGluayA9IG5ld0xpbms7XG4gICAgICAgICAgICAgICAgYWx0VGV4dCA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXcgUmVnRXhwKGBeJHtlc2NhcGVSZWdleENoYXJhY3RlcnMobmV3TGluayl9W2Etel0rJGApLnRlc3QoYWx0VGV4dCkpIHtcbiAgICAgICAgICAgICAgICBsaW5rID0gbmV3TGluaztcbiAgICAgICAgICAgICAgICBhZnRlckxpbmtUZXh0ID0gYWx0VGV4dC5zbGljZShuZXdMaW5rLmxlbmd0aCkgKyBhZnRlckxpbmtUZXh0O1xuICAgICAgICAgICAgICAgIGFsdFRleHQgPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoYWx0VGV4dCAmJiBsaW5rLmluY2x1ZGVzKCc6JykgJiYgbmFtZXNwYWNlTmFtZXMuaW5jbHVkZXMobmFtZXNwYWNlKSkgfHxcbiAgICAgICAgICAgIGxpbmsuc3RhcnRzV2l0aCgnZmlsZTonKSB8fFxuICAgICAgICAgICAgbGluay5zdGFydHNXaXRoKCdjYXRlZ29yeTonKVxuICAgICAgICApXG4gICAgICAgICAgICBsaW5rID0gbGluay5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGxpbmsuc2xpY2UoMSk7XG5cbiAgICAgICAgbGluayA9IGAke3Nob3VsZEZpcnN0Q2hhcmFjdGVyQmVDb2xvbiA/ICc6JyA6ICcnfSR7bGlua31gO1xuXG4gICAgICAgIGxpbmsgPSBsaW5rLnBhZFN0YXJ0KHVucGFyc2VkTGluay5sZW5ndGgsICdcXDAnKTtcblxuICAgICAgICBjb25zdCBvdXRwdXQgPSBgW1ske2xpbmt9JHthbHRUZXh0ID8gYHwke2FsdFRleHR9YCA6ICcnfV1dJHthZnRlckxpbmtUZXh0fWA7XG5cbiAgICAgICAgbmV3TGlua0NvbnRlbnQucHVzaChbbGlua0xvY2F0aW9uLCBvdXRwdXRdKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGZ1bmN0aW9uVG9DYWxsIG9mIGZ1bmN0aW9uc0NhbGxlZFdoaWxlRXNjYXBlZCkgY29udGVudCA9IGZ1bmN0aW9uVG9DYWxsKGNvbnRlbnQsIDEpO1xuXG4gICAgZm9yIChsZXQgbG9vcENvdW50ZXIgPSAwOyBsb29wQ291bnRlciA8IDI7IGxvb3BDb3VudGVyKyspXG4gICAgICAgIGZvciAoY29uc3QgW2xpbmtEYXRhLCBsaW5rQ29udGVudF0gb2YgbmV3TGlua0NvbnRlbnQpIHtcbiAgICAgICAgICAgIGlmIChsb29wQ291bnRlciA9PT0gMCAmJiBsaW5rRGF0YS5pc05lc3RlZCkgY29udGludWU7XG4gICAgICAgICAgICBlbHNlIGlmIChsb29wQ291bnRlciA9PT0gMSAmJiAhbGlua0RhdGEuaXNOZXN0ZWQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb250ZW50ID1cbiAgICAgICAgICAgICAgICBjb250ZW50LnNsaWNlKDAsIGxpbmtEYXRhLnN0YXJ0KSArIGxpbmtDb250ZW50LnBhZEVuZChsaW5rRGF0YS5lbmQgLSBsaW5rRGF0YS5zdGFydCwgJ1xcMCcpICsgY29udGVudC5zbGljZShsaW5rRGF0YS5lbmQpO1xuICAgICAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGZ1bmN0aW9uVG9DYWxsIG9mIGZ1bmN0aW9uc0NhbGxlZFdoaWxlRXNjYXBlZCkgY29udGVudCA9IGZ1bmN0aW9uVG9DYWxsKGNvbnRlbnQsIDIpO1xuXG4gICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZUFsbCgnXFwwJywgJycpO1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBpbXByb3BlciBjaGFyYWN0ZXJzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqIEBwYXJhbSBydW4gVGhlIHJ1biBudW1iZXIgb2YgdGhlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwSW1wcm9wZXJDaGFyYWN0ZXJzKGNvbnRlbnQ6IHN0cmluZywgcnVuOiAxIHwgMikge1xuICAgIGNvbnN0IGVsaXBzaXNQbGFjZWhvbGRlciA9ICdcXHUwMDdGJztcbiAgICBjb25zdCBuYnNwUGxhY2Vob2xkZXIgPSAnXFx1MDA5Ric7XG5cbiAgICBpZiAocnVuID09PSAxKSB7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL1tcdTIwMUNcdTIwMURcdTIwMUVcdTIwMUZdL2csICdcIicpO1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKC9bXHUyMDE4XHUyMDE5XHUyMDFBXHUyMDFCXS9nLCBcIidcIik7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoJ1x1MjAyNicsIGVsaXBzaXNQbGFjZWhvbGRlcik7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoJ1x1MDBBMCcsIG5ic3BQbGFjZWhvbGRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbChlbGlwc2lzUGxhY2Vob2xkZXIsICcuLi4nKTtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbChuYnNwUGxhY2Vob2xkZXIsICcmbmJzcDsnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgeWVhciByYW5nZXMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICogQHBhcmFtIHJ1biBUaGUgcnVuIG51bWJlciBvZiB0aGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBZZWFyUmFuZ2VzKGNvbnRlbnQ6IHN0cmluZywgcnVuOiAxIHwgMikge1xuICAgIGlmIChydW4gPT09IDEpXG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoLyhcXChcXGR7Myw0fSkgP1tcdTIwMTJcdTIwMTNcdTIyMTItXSA/KFxcZHszLDR9XFwpKS9nLCAob3JpZ2luYWwsIHN0YXJ0LCBlbmQpID0+XG4gICAgICAgICAgICBgJHtzdGFydH1cdTIwMTMke2VuZH1gLnBhZEVuZChvcmlnaW5hbC5sZW5ndGgsICdcXDAnKSxcbiAgICAgICAgKTtcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgc3RyYXkgbWFya3VwIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cFN0cmF5TWFya3VwKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGNvbnN0IHN0cmF5TWFya3VwUmVnZXhlcyA9IFtcbiAgICAgICAgLycrKEJvbGR8SXRhbGljKSggdGV4dCk/JysgKi9nLFxuICAgICAgICAvKDxiaWc+KStCaWcoIHRleHQpPyg8XFwvYmlnPikrICovZyxcbiAgICAgICAgLyg8c21hbGw+KStTbWFsbCggdGV4dCk/KDxcXC9zbWFsbD4pKyAqL2csXG4gICAgICAgIC8oPHN1cD4pK1N1cGVyc2NyaXB0KCB0ZXh0KT8oPFxcL3N1cD4pKyAqL2csXG4gICAgICAgIC8oPHN1Yj4pK1N1YnNjcmlwdCggdGV4dCk/KDxcXC9zdWI+KSsgKi9nLFxuICAgICAgICAvKDxzPikrU3RyaWtldGhyb3VnaCg8XFwvcz4pKyAqL2csXG4gICAgICAgIC8oPHU+KStVbmRlcmxpbmUoPFxcL3U+KSsgKi9nLFxuICAgICAgICAvKDxjb2RlPikrQ29tcHV0ZXIgY29kZSg8XFwvY29kZT4pKyAqL2csXG4gICAgICAgIC8oPG5vd2lraT4pK0luc2VydCBub24tZm9ybWF0dGVkIHRleHQgaGVyZSg8XFwvbm93aWtpPikrICovZyxcbiAgICAgICAgLz0rIEhlYWRpbmcgdGV4dCA9KyAqL2csXG4gICAgICAgIC9cXCogQnVsbGV0ZWQgbGlzdCBpdGVtICovZyxcbiAgICAgICAgLyMgTnVtYmVyZWQgbGlzdCBpdGVtICovZyxcbiAgICAgICAgLzxnYWxsZXJ5PlxcbkV4YW1wbGUuanBnXFx8Q2FwdGlvbjFcXG5FeGFtcGxlLmpwZ1xcfENhcHRpb24yXFxuPFxcL2dhbGxlcnk+ICovZyxcbiAgICAgICAgLyNSRURJUkVDVCBcXFtcXFtUYXJnZXQgcGFnZSBuYW1lXV0gKi9nLFxuICAgICAgICAvPCEtLSBJbnZpc2libGUgY29tbWVudCAtLT4gKi9nLFxuICAgICAgICAvPFxccyooYmlnfHNtYWxsfHN1cHxzdWJ8c3x1fGNvZGV8bm93aWtpfG5vaW5jbHVkZXxvbmx5aW5jbHVkZXxpbmNsdWRlb25seXxjZW50ZXJ8YmxvY2txdW90ZXxnYWxsZXJ5KVxccyooXFxzK1tePD5dKik/Plxccyo8XFxzKlxcL1xccypcXDFcXHMqPi9naSxcbiAgICBdO1xuXG4gICAgZm9yIChjb25zdCByZWdleCBvZiBzdHJheU1hcmt1cFJlZ2V4ZXMpIHdoaWxlIChyZWdleC50ZXN0KGNvbnRlbnQpKSBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKHJlZ2V4LCAnJyk7XG5cbiAgICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgc3BhY2luZyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKiBAcGFyYW0gc2Vjb25kUnVuIFdoZXRoZXIgdGhlIGZ1bmN0aW9uIGlzIGJlaW5nIHJ1biBmb3IgdGhlIHNlY29uZCB0aW1lLCBhZnRlciBvdGhlciBwcm9jZXNzaW5nLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwU3BhY2luZyhjb250ZW50OiBzdHJpbmcsIHNlY29uZFJ1biA9IGZhbHNlKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvKFxcYnxcXHB7UHVuY3R1YXRpb259fFxcXVxcXXxcXH1cXH18XFx3PikgezIsfShcXGJ8XFxwe1B1bmN0dWF0aW9ufXxcXFtcXFt8XFx7XFx7fDxcXHcpL2d1LCAnJDEgJDInKTsgLy8gUmVtb3ZlIGV4dHJhIHNwYWNlcyBiZXR3ZWVuIHdvcmRzIGFuZCBzZW50ZW5jZXNcbiAgICBpZiAoIXNlY29uZFJ1bikgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvXiArfCArJC9nbSwgJycpOyAvLyBSZW1vdmUgZXh0cmEgc3BhY2VzIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgbGluZXNcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKC9cXG57Myx9L2csICdcXG5cXG4nKTsgLy8gUmVtb3ZlIGV4dHJhIG5ld2xpbmVzXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXFxzKih7e1tefV0qc3R1Yn19KS9pLCAnXFxuXFxuJDEnKTsgLy8gRW5zdXJlIHRoZXJlIGlzIG9uZSBibGFuayBsaW5lIGJlZm9yZSB0aGUgZmlyc3Qgc3R1YiB0ZW1wbGF0ZVxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL1xccyskL2csICcnKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIHNwYWNlc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oWyMqXSspICovZ20sICckMSAnKTsgLy8gRW5zdXJlIHRoZXJlIGlzIGEgc3BhY2UgYWZ0ZXIgYSBidWxsZXQgb3IgaGFzaCBpbiBhIGxpc3QgaXRlbVxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oWyMqXSsgLiopXFxuKyg/PVsjKl0rICkvZ20sICckMVxcbicpOyAvLyBSZW1vdmUgbmV3bGluZXMgYmV0d2VlbiBsaXN0IGl0ZW1zXG4gICAgaWYgKCFzZWNvbmRSdW4pIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoLyg/PCFcXHwpXFxzKyg/PTxyZWYoPyFlcmVuY2VzKSkvZywgJycpOyAvLyBSZW1vdmUgc3BhY2VzIGJlZm9yZSByZWZlcmVuY2VzXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvPFxcLyhbQS1aYS16XSspICs+L2csICc8LyQxPicpOyAvLyBSZW1vdmUgZXhjZXNzIHNwYWNlIGluIGNsb3NpbmcgdGFnc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oPSsuKj89KykkXFxuezIsfSg/PV49Ky4qPz0rJCkvZ20sICckMVxcbicpOyAvLyBSZW1vdmUgZXh0cmEgbmV3bGluZXMgYmV0d2VlbiBlbXB0eSBzZWN0aW9uIGFuZCBmb2xsb3dpbmcgc2VjdGlvblxuICAgIGNvbnRlbnQgPSBjb250ZW50LnRyaW0oKTsgLy8gUmVtb3ZlIHdoaXRlc3BhY2UgYXQgdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgY29udGVudFxuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIHJlZmVyZW5jZXMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwUmVmZXJlbmNlcyhjb250ZW50OiBzdHJpbmcpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKFxuICAgICAgICAvKCg/OjxyZWYoPyFlcmVuY2VzKVteL10qPz4uKj88XFwvcmVmPnw8cmVmKD8hZXJlbmNlcykuKj9cXC8+KSspKFshLC47P10pPy9nLFxuICAgICAgICAoZnVsbE1hdGNoLCByZWZlcmVuY2VUYWc6IHN0cmluZywgcHVuY3R1YXRpb246IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4gKHB1bmN0dWF0aW9uID8/ICcnKSArIHJlZmVyZW5jZVRhZyxcbiAgICApOyAvLyBGaXggcHVuY3R1YXRpb24gZm9sbG93aW5nIHJlZmVyZW5jZXNcblxuICAgIGNvbnN0IHJlZmVyZW5jZXM6IHsgc3RhcnQ6IG51bWJlcjsgZW5kOiBudW1iZXI7IGlzU2VsZkNsb3Npbmc/OiB0cnVlIH1bXSA9IFtdO1xuXG4gICAgbGV0IGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgbGV0IGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuXG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbnRlbnQgZm9sbG93aW5nIHRoZSBjdXJyZW50IGxvY2F0aW9uIG1hdGNoZXMgdGhlIGRlc2lyZWQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0F0U3RyaW5nKGRlc2lyZWRTdHJpbmc6IHN0cmluZykge1xuICAgICAgICBjb25zdCBpc0F0U3RyaW5nID0gY29udGVudC5zbGljZShjdXJyZW50TG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbiArIGRlc2lyZWRTdHJpbmcubGVuZ3RoKSA9PT0gZGVzaXJlZFN0cmluZztcblxuICAgICAgICBpZiAoaXNBdFN0cmluZykgY3VycmVudExvY2F0aW9uICs9IGRlc2lyZWRTdHJpbmcubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBpc0F0U3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2NlZWRzIHRocm91Z2ggdGhlIGNvbnRlbnQgdW50aWwgdGhlIGRlc2lyZWQgc3RyaW5nIGlzIGZvdW5kLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9jZWVkVW50aWxTdHJpbmcoZGVzaXJlZFN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIHdoaWxlIChjdXJyZW50TG9jYXRpb24gPCBjb250ZW50Lmxlbmd0aCAmJiAhaXNBdFN0cmluZyhkZXNpcmVkU3RyaW5nKSkgY3VycmVudExvY2F0aW9uKys7XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRMb2NhdGlvbiA8IGNvbnRlbnQubGVuZ3RoKVxuICAgICAgICBpZiAoaXNBdFN0cmluZygnPG5vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCc8L25vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPCEtLScpKSBpc0luc2lkZUNvbW1lbnQgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCctLT4nKSkgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKCFpc0luc2lkZU5vd2lraSAmJiAhaXNJbnNpZGVDb21tZW50KVxuICAgICAgICAgICAgaWYgKCFpc0F0U3RyaW5nKCc8cmVmZXJlbmNlcycpICYmIGlzQXRTdHJpbmcoJzxyZWYnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gY3VycmVudExvY2F0aW9uIC0gNDtcblxuICAgICAgICAgICAgICAgIHByb2NlZWRVbnRpbFN0cmluZygnPicpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaXNTZWxmQ2xvc2luZyA9IGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKHN0YXJ0LCBjdXJyZW50TG9jYXRpb24gLSAxKVxuICAgICAgICAgICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgIC5lbmRzV2l0aCgnLycpO1xuXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlcy5wdXNoKGlzU2VsZkNsb3NpbmcgPyB7IHN0YXJ0LCBlbmQ6IGN1cnJlbnRMb2NhdGlvbiwgaXNTZWxmQ2xvc2luZyB9IDogeyBzdGFydCwgZW5kOiAtMSB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBdFN0cmluZygnPC9yZWY+JykpIHJlZmVyZW5jZXMuYXQoLTEpIS5lbmQgPSBjdXJyZW50TG9jYXRpb247XG4gICAgICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuXG4gICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgY29uc3QgcmVwbGFjZW1lbnRzOiBbc3RyaW5nLCBzdHJpbmddW10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgcmVmZXJlbmNlIG9mIHJlZmVyZW5jZXMpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxUZXh0ID0gY29udGVudC5zbGljZShyZWZlcmVuY2Uuc3RhcnQsIHJlZmVyZW5jZS5lbmQpO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0VGFnID0gLzxyZWYoPyFlcmVuY2VzKS4qPz4vaXMuZXhlYyhvcmlnaW5hbFRleHQpIVswXTtcblxuICAgICAgICBjb25zdCBwYXJzZWRUYWcgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKFxuICAgICAgICAgICAgcmVmZXJlbmNlLmlzU2VsZkNsb3NpbmcgPyBzdGFydFRhZy5yZXBsYWNlKC8gKlxcLyAqPi8sICcgLz4nKSA6IHN0YXJ0VGFnICsgJzwvcmVmPicsXG4gICAgICAgICAgICAndGV4dC9odG1sJyxcbiAgICAgICAgKS5ib2R5LmZpcnN0Q2hpbGQgYXMgSFRNTFVua25vd25FbGVtZW50O1xuXG4gICAgICAgIGxldCBvdXRwdXQgPSBwYXJzZWRUYWcub3V0ZXJIVE1MLnJlcGxhY2VBbGwoJyZhbXA7JywgJyYnKTtcblxuICAgICAgICBjb25zdCB0YWdDb250ZW50ID0gb3JpZ2luYWxUZXh0XG4gICAgICAgICAgICAuc2xpY2Uoc3RhcnRUYWcubGVuZ3RoLCAtNilcbiAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAgIC5yZXBsYWNlQWxsKC9eXFxbICooW14gXFxdXSopICpdJC9nbSwgJyQxJylcbiAgICAgICAgICAgIC50cmltKCk7XG5cbiAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgIHJlZmVyZW5jZS5pc1NlbGZDbG9zaW5nIHx8IHRhZ0NvbnRlbnQubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgPyBvdXRwdXQucmVwbGFjZSgvPlxccyo8XFwvcmVmPi8sICcgLz4nKVxuICAgICAgICAgICAgICAgIDogYCR7b3V0cHV0LnNsaWNlKDAsIC02KX0ke3RhZ0NvbnRlbnR9PC9yZWY+YDtcblxuICAgICAgICBpZiAob3JpZ2luYWxUZXh0ICE9PSBvdXRwdXQpIHJlcGxhY2VtZW50cy5wdXNoKFtvcmlnaW5hbFRleHQsIG91dHB1dF0pO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgW29yaWdpbmFsVGV4dCwgb3V0cHV0XSBvZiByZXBsYWNlbWVudHMpIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2Uob3JpZ2luYWxUZXh0LCBvdXRwdXQpO1xuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbmludGVyZmFjZSBUZW1wbGF0ZVJlZGlyZWN0IHtcbiAgICBmcm9tOiBzdHJpbmdbXTtcbiAgICB0bzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEZvcm1hdHMgdGVtcGxhdGUgc3BhY2luZyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gZm9ybWF0LlxuICovXG5hc3luYyBmdW5jdGlvbiBmb3JtYXRUZW1wbGF0ZXMoY29udGVudDogc3RyaW5nKSB7XG4gICAgZW51bSBGb3JtYXRTdHlsZSB7XG4gICAgICAgIEV4cGFuZGVkLFxuICAgICAgICBFeHBhbmRlZEFsaWduZWQsXG4gICAgICAgIE1pbmltaXplZCxcbiAgICAgICAgTWluaW1pemVkU3BhY2VkLFxuICAgIH1cblxuICAgIGVudW0gTmFtZXNwYWNlIHtcbiAgICAgICAgVXNlciA9IDIsXG4gICAgICAgIFRlbXBsYXRlID0gMTAsXG4gICAgICAgIERyYWZ0ID0gMTE4LFxuICAgIH1cblxuICAgIGNvbnN0IHRlbXBsYXRlQWxpYXNlcyA9IEpTT04ucGFyc2UoKGF3YWl0IGdldFBhZ2VDb250ZW50KCdVc2VyOkVlaml0NDMvc2NyaXB0cy9hcnRpY2xlLWNsZWFuZXIuanNvbicpKSA/PyAnW10nKSBhcyBUZW1wbGF0ZVJlZGlyZWN0W107XG5cbiAgICBjb25zdCBtYXBwZWRUZW1wbGF0ZUFsaWFzZXMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIHRlbXBsYXRlQWxpYXNlcy5mbGF0TWFwKChhbGlhcykgPT4gYWxpYXMuZnJvbS5tYXAoKGZyb20pID0+IFtmcm9tLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgZnJvbS5zbGljZSgxKSwgYWxpYXMudG9dKSksXG4gICAgKTtcblxuICAgIGNsYXNzIFRlbXBsYXRlIHtcbiAgICAgICAgcHVibGljIGxvY2F0aW9uOiB7IHN0YXJ0OiBudW1iZXI7IGVuZD86IG51bWJlciB9O1xuICAgICAgICBwdWJsaWMgaXNOZXN0ZWQgPSBmYWxzZTtcblxuICAgICAgICBwdWJsaWMgZnVsbFRleHQ/OiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgZnVsbFRleHRFc2NhcGVkPzogc3RyaW5nO1xuICAgICAgICBwcml2YXRlIHJhd05hbWU/OiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgbmFtZT86IHN0cmluZztcbiAgICAgICAgcHJpdmF0ZSBwYXJhbWV0ZXJzOiB7IGtleTogc3RyaW5nIHwgbnVsbDsgdmFsdWU6IHN0cmluZyB9W10gPSBbXTtcbiAgICAgICAgcHVibGljIHN1YlRlbXBsYXRlczogVGVtcGxhdGVbXSA9IFtdO1xuXG4gICAgICAgIHByaXZhdGUgUExBQ0VIT0xERVJfU1RSSU5HUyA9IFsnXFx1e0YwMDAwfScsICdcXHV7MTBGRkZGfScsICdcXHV7RkZGRkV9J107XG5cbiAgICAgICAgcHJpdmF0ZSBQSVBFX0VTQ0FQRV9SRUdFWEVTID0gWy8oXFxbXFxbW15cXF1dKj8pXFx8KC4qP11dKS9nLCAvKDwhLS0uKj8pXFx8KC4qPy0tPikvZywgLyg8bm93aWtpPi4qPylcXHwoLio/PFxcL25vd2lraT4pL2ddO1xuXG4gICAgICAgIHByaXZhdGUgVEFHX0VRVUFMU19FU0NBUEVfUkVHRVhFUyA9IFsvPChcXHcrKSggW148Pl0rPykoPzwhXFwvKT4uKj88XFwvXFwxPi9nLCAvPChcXHcrKSggW148Pl0rPylcXC8+L2ddO1xuXG4gICAgICAgIHByaXZhdGUgdGVtcGxhdGVBbGlhc2VzID0gbWFwcGVkVGVtcGxhdGVBbGlhc2VzO1xuXG4gICAgICAgIHByaXZhdGUgZGVmYXVsdFRlbXBsYXRlU3R5bGVzID0ge1xuICAgICAgICAgICAgW0Zvcm1hdFN0eWxlLkV4cGFuZGVkQWxpZ25lZF06IFtcbiAgICAgICAgICAgICAgICAnYWxidW0gcmF0aW5nJyxcbiAgICAgICAgICAgICAgICAnYWxidW0gcmV2aWV3cycsXG4gICAgICAgICAgICAgICAgJ2FtZXJpY2FuIGZvb3RiYWxsIHVuaWZvcm0nLFxuICAgICAgICAgICAgICAgICdhdXN0cmFsaWFuIHJ1bGVzIGZvb3RiYWxsIGtpdCcsXG4gICAgICAgICAgICAgICAgJ2F1dG9tYXRpYyB0YXhvYm94JyxcbiAgICAgICAgICAgICAgICAnYmFzZWJhbGwgdW5pZm9ybScsXG4gICAgICAgICAgICAgICAgJ2Jhc2tldGJhbGwga2l0JyxcbiAgICAgICAgICAgICAgICAnYmVhY2hoYW5kYmFsbCBraXQnLFxuICAgICAgICAgICAgICAgICdibG9ja3F1b3RlJyxcbiAgICAgICAgICAgICAgICAnY2hlbWJveCcsXG4gICAgICAgICAgICAgICAgJ2NyaWNrZXQgdW5pZm9ybScsXG4gICAgICAgICAgICAgICAgJ2VsZWN0aW9uIGJveCcsXG4gICAgICAgICAgICAgICAgJ2VwaXNvZGUgbGlzdCcsXG4gICAgICAgICAgICAgICAgJ2V4dGVybmFsIG11c2ljIHZpZGVvJyxcbiAgICAgICAgICAgICAgICAnZXh0cmEgYWxidW0gY292ZXInLFxuICAgICAgICAgICAgICAgICdmaWVsZCBob2NrZXkga2l0JyxcbiAgICAgICAgICAgICAgICAnZm9vdGJhbGwgYm94JyxcbiAgICAgICAgICAgICAgICAnZm9vdGJhbGwga2l0JyxcbiAgICAgICAgICAgICAgICAnZm9vdGJhbGxib3gnLFxuICAgICAgICAgICAgICAgICdoYW5kYmFsbCBraXQnLFxuICAgICAgICAgICAgICAgICdoeWJyaWRib3gnLFxuICAgICAgICAgICAgICAgICdpY2Vob2NrZXkga2l0JyxcbiAgICAgICAgICAgICAgICAnaWNobm9ib3gnLFxuICAgICAgICAgICAgICAgICdpbmZvYm94JyxcbiAgICAgICAgICAgICAgICAnaW5mcmFzcGVjaWVzYm94JyxcbiAgICAgICAgICAgICAgICAnanVkbyBicmFja2V0JyxcbiAgICAgICAgICAgICAgICAnanVkbyByZXBlY2hhZ2UnLFxuICAgICAgICAgICAgICAgICdsaXN0ZW4nLFxuICAgICAgICAgICAgICAgICdsb2NhdGlvbiBtYXAnLFxuICAgICAgICAgICAgICAgICdtZWRpY2FsIHJlc291cmNlcycsXG4gICAgICAgICAgICAgICAgJ21vdG9yc3BvcnQgc2Vhc29uJyxcbiAgICAgICAgICAgICAgICAnbXVsdGlwbGUgaW1hZ2UnLFxuICAgICAgICAgICAgICAgICdtdXNpYyByYXRpbmdzJyxcbiAgICAgICAgICAgICAgICAnbXljb21vcnBoYm94JyxcbiAgICAgICAgICAgICAgICAnbmF2Ym94JyxcbiAgICAgICAgICAgICAgICAnb29ib3gnLFxuICAgICAgICAgICAgICAgICdvcmJpdGJveCcsXG4gICAgICAgICAgICAgICAgJ29zbSBsb2NhdGlvbiBtYXAnLFxuICAgICAgICAgICAgICAgICdxdW90ZSBib3gnLFxuICAgICAgICAgICAgICAgICdyZXBlY2hhZ2UnLFxuICAgICAgICAgICAgICAgICdydWdieWJveCcsXG4gICAgICAgICAgICAgICAgJ3NpZGViYXInLFxuICAgICAgICAgICAgICAgICdzaW5nbGUgcmF0aW5ncycsXG4gICAgICAgICAgICAgICAgJ3NpbmdsZXMnLFxuICAgICAgICAgICAgICAgICdzb25nIHJhdGluZ3MnLFxuICAgICAgICAgICAgICAgICdzcGVjaWVzYm94JyxcbiAgICAgICAgICAgICAgICAnc3RhcmJveCcsXG4gICAgICAgICAgICAgICAgJ3N1Y2Nlc3Npb24gYm94JyxcbiAgICAgICAgICAgICAgICAndGF4b2JveCcsXG4gICAgICAgICAgICAgICAgJ3RlYW0gYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJ3RyYWNrIGxpc3RpbmcnLFxuICAgICAgICAgICAgICAgICd0d2VldCcsXG4gICAgICAgICAgICAgICAgJ3ZpcnVzYm94JyxcbiAgICAgICAgICAgICAgICAndm9sbGV5YmFsbCBraXQnLFxuXG4gICAgICAgICAgICAgICAgLy8gTnVtYmVyZWQgYnJhY2tldHNcbiAgICAgICAgICAgICAgICAnbnRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMm50ZWFtLW50ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzJ0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzN0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzN0ZWFtcnInLFxuICAgICAgICAgICAgICAgICc0dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICc0dGVhbXJyJyxcbiAgICAgICAgICAgICAgICAnNXRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnNXRlYW1ycicsXG4gICAgICAgICAgICAgICAgJzZ0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzZ0ZWFtcnInLFxuICAgICAgICAgICAgICAgICc3dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICc3dGVhbXJyJyxcbiAgICAgICAgICAgICAgICAnOHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnOHRlYW1yb3VuZHJvYmluJyxcbiAgICAgICAgICAgICAgICAnOHRlYW1ycicsXG4gICAgICAgICAgICAgICAgJzl0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzEwdGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcxMXRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMTJ0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzEzdGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcxNHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMTV0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzE2dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcxOHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMjB0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzI0dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcyN3RlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMzJ0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzQwdGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICc0OHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnNjR0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzEyOHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbRm9ybWF0U3R5bGUuTWluaW1pemVkXTogWydiaXJ0aCBkYXRlJywgJ2Nvb3JkJywgJ2RlYXRoIGRhdGUnLCAnZW5kIGRhdGUnLCAnbGFuZycsICdzdGFydCBkYXRlJ10sXG4gICAgICAgICAgICBbRm9ybWF0U3R5bGUuTWluaW1pemVkU3BhY2VkXTogWydpbmZvYm94IG1hcGZyYW1lJ10sXG4gICAgICAgIH07XG5cbiAgICAgICAgcHJpdmF0ZSBuYW1lc3BhY2VTcGVjaWZpY1RlbXBsYXRlcyA9IHtcbiAgICAgICAgICAgIFtOYW1lc3BhY2UuRHJhZnRdOiBbXG4gICAgICAgICAgICAgICAgJ2FmYyBjb21tZW50JyxcbiAgICAgICAgICAgICAgICAnYWZjIHN1Ym1pc3Npb24nLFxuICAgICAgICAgICAgICAgICdhZmMgc3VibWlzc2lvbi9kcmFmdCcsXG4gICAgICAgICAgICAgICAgJ2FmYyB0b3BpYycsXG4gICAgICAgICAgICAgICAgJ2RyYWZ0IGFydGljbGUnLFxuICAgICAgICAgICAgICAgICdkcmFmdCBjYXRlZ29yaWVzJyxcbiAgICAgICAgICAgICAgICAnZHJhZnQgdG9waWNzJyxcbiAgICAgICAgICAgICAgICAnZHJhZnQnLFxuICAgICAgICAgICAgICAgICdkcmFmdHMgbW92ZWQgZnJvbSBtYWluc3BhY2UnLFxuICAgICAgICAgICAgICAgICdwcmVsb2FkZHJhZnQgc3VibWl0JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbTmFtZXNwYWNlLlVzZXJdOiBbJ2Rhc2hib2FyZC53aWtpZWR1Lm9yZyBzYW5kYm94JywgJ3VzZXIgc2FuZGJveCcsICd1c2Vyc3BhY2UgZHJhZnQnXSxcbiAgICAgICAgfTtcblxuICAgICAgICBwcml2YXRlIHRlbXBsYXRlc1RvS2VlcENvbnRlbnQgPSBbJ2RyYWZ0IGNhdGVnb3JpZXMnXTtcblxuICAgICAgICBwcml2YXRlIHRlbXBsYXRlc1RvU3Vic3QgPSBbXG4gICAgICAgICAgICAvLyBNYWdpYyB3b3Jkc1xuICAgICAgICAgICAgJ2FydGljbGVwYWdlbmFtZScsXG4gICAgICAgICAgICAnYXJ0aWNsZXNwYWNlJyxcbiAgICAgICAgICAgICdiYXNlcGFnZW5hbWUnLFxuICAgICAgICAgICAgJ2Z1bGxwYWdlbmFtZScsXG4gICAgICAgICAgICAnbmFtZXNwYWNlJyxcbiAgICAgICAgICAgICduYW1lc3BhY2VudW1iZXInLFxuICAgICAgICAgICAgJ3BhZ2VuYW1lJyxcbiAgICAgICAgICAgICdyb290cGFnZW5hbWUnLFxuICAgICAgICAgICAgJ3N1YmplY3RwYWdlbmFtZScsXG4gICAgICAgICAgICAnc3ViamVjdHNwYWNlJyxcbiAgICAgICAgICAgICdzdWJwYWdlbmFtZScsXG4gICAgICAgICAgICAndGFsa3BhZ2VuYW1lJyxcbiAgICAgICAgICAgICd0YWxrc3BhY2UnLFxuXG4gICAgICAgICAgICAvLyBUZW1wbGF0ZXNcbiAgICAgICAgICAgICdwYWdlbmFtZWJhc2UnLFxuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHN0YXJ0TG9jYXRpb246IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5sb2NhdGlvbiA9IHsgc3RhcnQ6IHN0YXJ0TG9jYXRpb24gfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBwYXJzZSgpIHtcbiAgICAgICAgICAgIHRoaXMuZnVsbFRleHQgPSBjb250ZW50LnNsaWNlKHRoaXMubG9jYXRpb24uc3RhcnQsIHRoaXMubG9jYXRpb24uZW5kKTtcbiAgICAgICAgICAgIHRoaXMuZnVsbFRleHRFc2NhcGVkID0gdGhpcy5mdWxsVGV4dDtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBzdWJUZW1wbGF0ZSBvZiB0aGlzLnN1YlRlbXBsYXRlcykge1xuICAgICAgICAgICAgICAgIHN1YlRlbXBsYXRlLnBhcnNlKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZ1bGxUZXh0RXNjYXBlZCA9IHRoaXMuZnVsbFRleHRFc2NhcGVkLnJlcGxhY2Uoc3ViVGVtcGxhdGUuZnVsbFRleHQhLCB0aGlzLlBMQUNFSE9MREVSX1NUUklOR1NbMF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdHJpbW1lZElubmVyVGV4dCA9IHRoaXMuZnVsbFRleHRFc2NhcGVkLnNsaWNlKDIsIC0yKS50cmltKCk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgcGlwZUVzY2FwZVJlZ2V4IG9mIHRoaXMuUElQRV9FU0NBUEVfUkVHRVhFUylcbiAgICAgICAgICAgICAgICB3aGlsZSAocGlwZUVzY2FwZVJlZ2V4LnRlc3QodHJpbW1lZElubmVyVGV4dCkpXG4gICAgICAgICAgICAgICAgICAgIHRyaW1tZWRJbm5lclRleHQgPSB0cmltbWVkSW5uZXJUZXh0LnJlcGxhY2VBbGwocGlwZUVzY2FwZVJlZ2V4LCBgJDEke3RoaXMuUExBQ0VIT0xERVJfU1RSSU5HU1sxXX0kMmApO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlZ2V4IG9mIHRoaXMuVEFHX0VRVUFMU19FU0NBUEVfUkVHRVhFUylcbiAgICAgICAgICAgICAgICB0cmltbWVkSW5uZXJUZXh0ID0gdHJpbW1lZElubmVyVGV4dC5yZXBsYWNlQWxsKHJlZ2V4LCAoZnVsbFRleHQsIHRhZ05hbWU6IHN0cmluZywgYXR0cmlidXRlczogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdWxsVGV4dC5yZXBsYWNlKGF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMucmVwbGFjZUFsbCgnPScsIHRoaXMuUExBQ0VIT0xERVJfU1RSSU5HU1syXSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gdHJpbW1lZElubmVyVGV4dFxuICAgICAgICAgICAgICAgIC5zcGxpdCgnfCcpXG4gICAgICAgICAgICAgICAgLm1hcCgocGFyYW1ldGVyKSA9PiBwYXJhbWV0ZXIucmVwbGFjZUFsbCh0aGlzLlBMQUNFSE9MREVSX1NUUklOR1NbMV0sICd8JykudHJpbSgpKTtcblxuICAgICAgICAgICAgdGhpcy5yYXdOYW1lID0gcGFyYW1ldGVycy5zaGlmdCgpITtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMucmF3TmFtZS5yZXBsYWNlQWxsKCdfJywgJyAnKTtcblxuICAgICAgICAgICAgLy8gU3RyaXAgbmFtZXNwYWNlIHByZWZpeCBmcm9tIG5hbWVcbiAgICAgICAgICAgIGlmICh0aGlzLm5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKCd0ZW1wbGF0ZTonKSkgdGhpcy5uYW1lID0gdGhpcy5uYW1lLnNsaWNlKDkpO1xuXG4gICAgICAgICAgICBjb25zdCBuYW1lTG93ZXJjYXNlRmlyc3QgPSB0aGlzLm5hbWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyB0aGlzLm5hbWUuc2xpY2UoMSk7XG5cbiAgICAgICAgICAgIC8vIFJlc29sdmUgdGVtcGxhdGUgYWxpYXMgaW4gbmFtZVxuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZUxvd2VyY2FzZUZpcnN0IGluIHRoaXMudGVtcGxhdGVBbGlhc2VzID8gdGhpcy50ZW1wbGF0ZUFsaWFzZXNbbmFtZUxvd2VyY2FzZUZpcnN0XSA6IHRoaXMubmFtZTtcblxuICAgICAgICAgICAgY29uc3Qgc3BsaXRQYXJhbWV0ZXJzID0gcGFyYW1ldGVycy5tYXAoKHBhcmFtZXRlcnMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcXVhbHNMb2NhdGlvbiA9IHBhcmFtZXRlcnMuaW5kZXhPZignPScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVxdWFsc0xvY2F0aW9uID09PSAtMSkgcmV0dXJuIHsga2V5OiBudWxsLCB2YWx1ZTogcGFyYW1ldGVycy5yZXBsYWNlQWxsKHRoaXMuUExBQ0VIT0xERVJfU1RSSU5HU1syXSwgJz0nKS50cmltKCkgfTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1ldGVycy5zbGljZShlcXVhbHNMb2NhdGlvbiArIDEpLnJlcGxhY2VBbGwodGhpcy5QTEFDRUhPTERFUl9TVFJJTkdTWzJdLCAnPScpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBwYXJhbWV0ZXJzLnNsaWNlKDAsIGVxdWFsc0xvY2F0aW9uKS50cmltKCksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBgJHt2YWx1ZS5zdGFydHNXaXRoKCdcXG4nKSA/ICdcXG4nIDogJyd9JHt2YWx1ZS50cmltKCl9YCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHNwbGl0UGFyYW1ldGVycztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgc2hvdWxkQmVSZW1vdmVkKCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZXNwYWNlLCB0ZW1wbGF0ZXNdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMubmFtZXNwYWNlU3BlY2lmaWNUZW1wbGF0ZXMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IE51bWJlci5wYXJzZUludChuYW1lc3BhY2UpKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZXMuaW5jbHVkZXModGhpcy5uYW1lIS50b0xvd2VyQ2FzZSgpKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgZ2V0U3R5bGUoKSB7XG4gICAgICAgICAgICBsZXQgbW9zdFNwZWNpZmljRGVmYXVsdFN0eWxlUHJlZml4TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGxldCBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVGb3JtYXRTdHlsZTogRm9ybWF0U3R5bGUgfCB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgW2Zvcm1hdFN0eWxlLCB0ZW1wbGF0ZVByZWZpeGVzXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmRlZmF1bHRUZW1wbGF0ZVN0eWxlcykpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZW1wbGF0ZVByZWZpeCBvZiB0ZW1wbGF0ZVByZWZpeGVzKVxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUhLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh0ZW1wbGF0ZVByZWZpeCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUHJlZml4Lmxlbmd0aCA+PSBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVQcmVmaXhMZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVQcmVmaXhMZW5ndGggPSB0ZW1wbGF0ZVByZWZpeC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVGb3JtYXRTdHlsZSA9IE51bWJlci5wYXJzZUludChmb3JtYXRTdHlsZSkgYXMgRm9ybWF0U3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1vc3RTcGVjaWZpY0RlZmF1bHRTdHlsZUZvcm1hdFN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBjbGVhbnVwUGFyYW1ldGVycygpIHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlUGFyYW1ldGVycyA9IG5ldyBTZXQoWydjb3ZlcicsICdpbWFnZV9mbGFnJywgJ2ltYWdlJywgJ2xvZ28nLCAnbWFwX2ltYWdlJ10pO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBudW1iZXIgPSAxOyBudW1iZXIgPD0gMTA7IG51bWJlcisrKSBpbWFnZVBhcmFtZXRlcnMuYWRkKGBpbWFnZSR7bnVtYmVyfWApO1xuXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnMubWFwKCh7IGtleSwgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgJiYgaW1hZ2VQYXJhbWV0ZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5zdGFydHNXaXRoKCdbWycpICYmIHZhbHVlLmVuZHNXaXRoKCddXScpKSB2YWx1ZSA9IC9cXFtcXFsoLio/KV1dL2cuZXhlYyh2YWx1ZSkhWzFdLnNwbGl0KCd8JylbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKEZpbGV8SW1hZ2UpOi8sICcnKS5yZXBsYWNlQWxsKCdfJywgJyAnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBrZXksIHZhbHVlIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmb3JtYXQoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZnVsbFRleHQpIHRoaXMucGFyc2UoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkQmVSZW1vdmVkKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzVG9LZWVwQ29udGVudC5pbmNsdWRlcyh0aGlzLm5hbWUhLnRvTG93ZXJDYXNlKCkpID8gdGhpcy5wYXJhbWV0ZXJzWzBdLnZhbHVlIDogJyc7XG5cbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFN1YnN0ID1cbiAgICAgICAgICAgICAgICBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpICE9PSAoTmFtZXNwYWNlLlRlbXBsYXRlIGFzIG51bWJlcikgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlc1RvU3Vic3Quc29tZSgobmFtZSkgPT4gbmFtZSA9PT0gdGhpcy5uYW1lIS50b0xvd2VyQ2FzZSgpIHx8IHRoaXMubmFtZSEudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGAke25hbWV9OmApKTtcblxuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSB0aGlzLmdldFN0eWxlKCk7XG4gICAgICAgICAgICBpZiAoc3R5bGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxldCBuZXdOYW1lID0gdGhpcy5uYW1lITtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lIS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJ3RlbXBsYXRlOicpKSBuZXdOYW1lID0gdGhpcy5uYW1lIS5zbGljZSg5KTtcblxuICAgICAgICAgICAgICAgIGlmIChzaG91bGRTdWJzdCkgbmV3TmFtZSA9IGBzdWJzdDoke25ld05hbWV9YDtcblxuICAgICAgICAgICAgICAgIGlmIChuZXdOYW1lICE9PSB0aGlzLnJhd05hbWUhKSB0aGlzLmZ1bGxUZXh0RXNjYXBlZCA9IHRoaXMuZnVsbFRleHRFc2NhcGVkIS5yZXBsYWNlKHRoaXMucmF3TmFtZSEsIG5ld05hbWUpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdWJUZW1wbGF0ZSBvZiB0aGlzLnN1YlRlbXBsYXRlcylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mdWxsVGV4dEVzY2FwZWQgPSB0aGlzLmZ1bGxUZXh0RXNjYXBlZCEucmVwbGFjZSh0aGlzLlBMQUNFSE9MREVSX1NUUklOR1NbMF0sIHN1YlRlbXBsYXRlLmZvcm1hdCgpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZ1bGxUZXh0RXNjYXBlZCE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG91dHB1dCA9IFtge3ske3Nob3VsZFN1YnN0ID8gJ3N1YnN0OicgOiAnJ30ke3RoaXMubmFtZSF9YF07XG5cbiAgICAgICAgICAgIHRoaXMuY2xlYW51cFBhcmFtZXRlcnMoKTtcblxuICAgICAgICAgICAgaWYgKHN0eWxlID09PSBGb3JtYXRTdHlsZS5FeHBhbmRlZCB8fCBzdHlsZSA9PT0gRm9ybWF0U3R5bGUuRXhwYW5kZWRBbGlnbmVkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcXVpcmVkS2V5TGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgIGlmIChzdHlsZSA9PT0gRm9ybWF0U3R5bGUuRXhwYW5kZWRBbGlnbmVkKVxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZEtleUxlbmd0aCA9IE1hdGgubWF4KC4uLnRoaXMucGFyYW1ldGVycy5tYXAoKHBhcmFtZXRlcikgPT4gcGFyYW1ldGVyLmtleT8ubGVuZ3RoID8/IDApKTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2luZGV4LCBwYXJhbWV0ZXJdIG9mIHRoaXMucGFyYW1ldGVycy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgIXBhcmFtZXRlci5rZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFwYXJhbWV0ZXIudmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5zbGljZShpbmRleCArIDEpLmV2ZXJ5KChwYXJhbWV0ZXIpID0+IHBhcmFtZXRlci5rZXkgPz8gIXBhcmFtZXRlci52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goYHwgJHtwYXJhbWV0ZXIua2V5ID8gYCR7cGFyYW1ldGVyLmtleS5wYWRFbmQocmVxdWlyZWRLZXlMZW5ndGgpfSA9IGAgOiAnJ30ke3BhcmFtZXRlci52YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtpbmRleCwgcGFyYW1ldGVyXSBvZiB0aGlzLnBhcmFtZXRlcnMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICFwYXJhbWV0ZXIudmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChwYXJhbWV0ZXIua2V5IHx8IHRoaXMucGFyYW1ldGVycy5zbGljZShpbmRleCArIDEpLmV2ZXJ5KChwYXJhbWV0ZXIpID0+IHBhcmFtZXRlci5rZXkgPz8gIXBhcmFtZXRlci52YWx1ZSkpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGB8JHtwYXJhbWV0ZXIua2V5ID8gYCR7cGFyYW1ldGVyLmtleX09YCA6ICcnfSR7cGFyYW1ldGVyLnZhbHVlfWApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3V0cHV0LnB1c2goJ319Jyk7XG5cbiAgICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0WzBdICs9ICd9fSc7XG5cbiAgICAgICAgICAgICAgICBvdXRwdXQucG9wKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0eWxlID09PSBGb3JtYXRTdHlsZS5NaW5pbWl6ZWRTcGFjZWQpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbb3V0cHV0Lmxlbmd0aCAtIDJdICs9ICd9fSc7XG5cbiAgICAgICAgICAgICAgICBvdXRwdXQucG9wKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBqb2luZWRPdXRwdXQgPSBvdXRwdXQuam9pbihcbiAgICAgICAgICAgICAgICBzdHlsZSA9PT0gRm9ybWF0U3R5bGUuRXhwYW5kZWQgfHwgc3R5bGUgPT09IEZvcm1hdFN0eWxlLkV4cGFuZGVkQWxpZ25lZFxuICAgICAgICAgICAgICAgICAgICA/ICdcXG4nXG4gICAgICAgICAgICAgICAgICAgIDogc3R5bGUgPT09IEZvcm1hdFN0eWxlLk1pbmltaXplZFNwYWNlZFxuICAgICAgICAgICAgICAgICAgICAgID8gJyAnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnJyxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViVGVtcGxhdGUgb2YgdGhpcy5zdWJUZW1wbGF0ZXMpXG4gICAgICAgICAgICAgICAgam9pbmVkT3V0cHV0ID0gam9pbmVkT3V0cHV0LnJlcGxhY2UodGhpcy5QTEFDRUhPTERFUl9TVFJJTkdTWzBdLCBzdWJUZW1wbGF0ZS5mb3JtYXQoKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBqb2luZWRPdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhbGxUZW1wbGF0ZXM6IFRlbXBsYXRlW10gPSBbXTtcblxuICAgIGNvbnN0IGluc2lkZVRlbXBsYXRlczogVGVtcGxhdGVbXSA9IFtdO1xuICAgIGxldCBpc0luc2lkZUxpbmsgPSBmYWxzZTtcbiAgICBsZXQgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICBsZXQgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG5cbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gMDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29udGVudCBmb2xsb3dpbmcgdGhlIGN1cnJlbnQgbG9jYXRpb24gbWF0Y2hlcyB0aGUgZGVzaXJlZCBzdHJpbmcuXG4gICAgICogQHBhcmFtIGRlc2lyZWRTdHJpbmcgVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXRTdHJpbmcoZGVzaXJlZFN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGlzQXRTdHJpbmcgPSBjb250ZW50LnNsaWNlKGN1cnJlbnRMb2NhdGlvbiwgY3VycmVudExvY2F0aW9uICsgZGVzaXJlZFN0cmluZy5sZW5ndGgpID09PSBkZXNpcmVkU3RyaW5nO1xuXG4gICAgICAgIGlmIChpc0F0U3RyaW5nKSBjdXJyZW50TG9jYXRpb24gKz0gZGVzaXJlZFN0cmluZy5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGlzQXRTdHJpbmc7XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRMb2NhdGlvbiA8IGNvbnRlbnQubGVuZ3RoKVxuICAgICAgICBpZiAoaXNBdFN0cmluZygnPG5vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCc8L25vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPCEtLScpKSBpc0luc2lkZUNvbW1lbnQgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCctLT4nKSkgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKCFpc0luc2lkZU5vd2lraSAmJiAhaXNJbnNpZGVDb21tZW50KVxuICAgICAgICAgICAgaWYgKGlzQXRTdHJpbmcoJ1tbJykpIGlzSW5zaWRlTGluayA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChpc0luc2lkZUxpbmsgJiYgaXNBdFN0cmluZygnXV0nKSkgaXNJbnNpZGVMaW5rID0gZmFsc2U7XG4gICAgICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCd7eycpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoY3VycmVudExvY2F0aW9uIC0gMik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5zaWRlVGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuaXNOZXN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpbnNpZGVUZW1wbGF0ZXMuYXQoLTEpPy5zdWJUZW1wbGF0ZXMucHVzaCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW5zaWRlVGVtcGxhdGVzLnB1c2godGVtcGxhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0F0U3RyaW5nKCd9fScpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdFRlbXBsYXRlID0gaW5zaWRlVGVtcGxhdGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghbGFzdFRlbXBsYXRlKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGxhc3RUZW1wbGF0ZS5sb2NhdGlvbi5lbmQgPSBjdXJyZW50TG9jYXRpb247XG5cbiAgICAgICAgICAgICAgICBhbGxUZW1wbGF0ZXMucHVzaChsYXN0VGVtcGxhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuXG4gICAgbGV0IG5ld0NvbnRlbnQgPSBjb250ZW50O1xuXG4gICAgZm9yIChjb25zdCB0ZW1wbGF0ZSBvZiBhbGxUZW1wbGF0ZXMpXG4gICAgICAgIGlmICghdGVtcGxhdGUuaXNOZXN0ZWQpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlLnBhcnNlKCk7XG5cbiAgICAgICAgICAgIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LnJlcGxhY2UodGVtcGxhdGUuZnVsbFRleHQhLCB0ZW1wbGF0ZS5mb3JtYXQoKSk7XG4gICAgICAgIH1cblxuICAgIHJldHVybiBuZXdDb250ZW50O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgdW5uZWNlc3NhcnkgY29tbWVudHMgZnJvbSBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNvbW1lbnRzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpICE9PSAwKSByZXR1cm4gY29udGVudDtcblxuICAgIGNvbnN0IGNvbW1lbnRzID0gW1xuICAgICAgICAnRG8gbm90IHJlbW92ZSB0aGlzIGxpbmUnLFxuICAgICAgICAnRURJVCBCRUxPVyBUSElTIExJTkUnLFxuICAgICAgICAnSW1wb3J0YW50LCBkbyBub3QgcmVtb3ZlIGFueXRoaW5nIGFib3ZlIHRoaXMgbGluZSBiZWZvcmUgYXJ0aWNsZSBoYXMgYmVlbiBjcmVhdGVkJyxcbiAgICAgICAgJ0ltcG9ydGFudCwgZG8gbm90IHJlbW92ZSB0aGlzIGxpbmUgYmVmb3JlIGFydGljbGUgaGFzIGJlZW4gY3JlYXRlZCcsXG4gICAgICAgICdJbmxpbmUgY2l0YXRpb25zIGFkZGVkIHRvIHlvdXIgYXJ0aWNsZSB3aWxsIGF1dG9tYXRpY2FsbHkgZGlzcGxheSBoZXJlJyxcbiAgICAgICAgJ05vdGU6IFRoZSBmb2xsb3dpbmcgcGFnZXMgd2VyZSByZWRpcmVjdHMgdG8gJyxcbiAgICBdO1xuXG4gICAgZm9yIChjb25zdCBjb21tZW50IG9mIGNvbW1lbnRzKVxuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKG5ldyBSZWdFeHAoYCAqPCEtLSA/JHtlc2NhcGVSZWdleENoYXJhY3RlcnMoY29tbWVudCl9Lio/LS0+ICpcXG4/YCwgJ2dzJyksICcnKTtcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEFkZHMgcmVsZXZhbnQgdGFncyB0byBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gYWRkIHRhZ3MgdG8uXG4gKi9cbmZ1bmN0aW9uIGF1dG9UYWdQYWdlKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGNvbnN0IG51bWJlck9mQ2F0ZWdvcmllcyA9IFsuLi5jb250ZW50Lm1hdGNoQWxsKC9cXFtcXFtDYXRlZ29yeTovZyldLmxlbmd0aDtcblxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL1xcbip7eyh1bmNhdGVnb3JpemVkfGltcHJvdmUgY2F0ZWdvcmllcykoXFx8Lis/KT99fVxcbiovZ2ksICcnKTtcblxuICAgIGlmIChudW1iZXJPZkNhdGVnb3JpZXMgPT09IDAgJiYgIS97e3VuY2F0ZWdvcml6ZWQvaS50ZXN0KGNvbnRlbnQpKVxuICAgICAgICBjb250ZW50ICs9ICdcXG5cXG57e1VuY2F0ZWdvcml6ZWR8e3tzdWJzdDpDVVJSRU5UTU9OVEhOQU1FfX0ge3tzdWJzdDpDVVJSRU5UWUVBUn19fX0nO1xuICAgIGVsc2UgaWYgKG51bWJlck9mQ2F0ZWdvcmllcyA9PT0gMSAmJiAhL3t7aW1wcm92ZSBjYXRlZ29yaWVzL2kudGVzdChjb250ZW50KSlcbiAgICAgICAgY29udGVudCArPSAnXFxuXFxue3tJbXByb3ZlIGNhdGVnb3JpZXN8e3tzdWJzdDpDVVJSRU5UTU9OVEhOQU1FfX0ge3tzdWJzdDpDVVJSRU5UWUVBUn19fX0nO1xuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7bUJBR08sSUFBTUEsRUFBTSxJQUFJLEdBQUcsSUFNMUIsZUFBc0JDLEVBQWVDLEVBQWUsQ0FDaEQsT0FDSyxNQUFNRixFQUFJLElBQUksQ0FDWCxPQUFRLFFBQ1IsY0FBZSxJQUNmLEtBQU0sWUFDTixPQUFRLFVBQ1IsUUFBUyxPQUNULE9BQVFFLENBQ1osQ0FBbUMsR0FDckMsTUFBTSxNQUFNLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxNQUFNLEtBQUssUUFBUSxLQUFLLENBQzVELENDaUJRLEdBQUcsT0FBTyxJQUFJLG1CQUFtQixFQUFJLEdBQ3BDLEdBQUcsT0FBTyxJQUFJLHNCQUFzQixHQUV6QyxHQUFHLE9BQU8sTUFBTSxDQUFDLGlCQUFrQixzQkFBc0IsRUFBRyxJQUFNLENBQzlELEdBQUcsS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPckIsRUFFTSxJQUFNQyxFQUFPLEdBQUcsS0FBSyxlQUNqQixHQUFHLE9BQU8sSUFBSSxNQUFNLElBQU0sVUFBWSxlQUFpQixhQUN2RCxJQUNBLDBCQUNBLGlCQUNKLEVBRUlDLEVBQXlCLEdBRXZCQyxFQUFpQiw0RkFFdkIsR0FBRyxLQUFLLDRCQUE0QixFQUFFLElBQUksSUFBTSxDQUM1QyxHQUFJRCxFQUF3QixDQUN4QixJQUFNRSxFQUFlLFNBQVMsY0FBbUMsc0NBQXNDLEVBRWxHQSxFQUFhLE1BQU0sU0FBU0QsRUFBZSxNQUFNLENBQUMsQ0FBQyxJQUNoREMsRUFBYSxPQUFTLENBQUNBLEVBQWEsTUFBTSxXQUFXLEtBQUssR0FBSyxDQUFDQSxFQUFhLE1BQU0sU0FBUyxNQUFNLEVBQ2xHQSxFQUFhLE9BQVMsS0FBS0QsRUFBZSxPQUFPLENBQUMsRUFBRSxZQUFZLEVBQUlBLEVBQWUsTUFBTSxDQUFDLENBQUMsR0FDMUZDLEVBQWEsTUFBUSxHQUFH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QUFBO0FBQUEsb0VBQ055SCxJQUF1QixHQUFLLENBQUMsd0JBQXdCLEtBQUt6SCxDQUFPLElBQ3RFQSxHQUFXO0FBQUE7QUFBQSwwRUFFUkEsQ0FDWCIsCiAgIm5hbWVzIjogWyJhcGkiLCAiZ2V0UGFnZUNvbnRlbnQiLCAidGl0bGUiLCAibGluayIsICJzaG91bGRBZGRTY3JpcHRNZXNzYWdlIiwgIlNDUklQVF9NRVNTQUdFIiwgInN1bW1hcnlJbnB1dCIsICJldmVudCIsICJlZGl0Qm94IiwgIm9yaWdpbmFsVGV4dCIsICJmaW5hbFRleHQiLCAiY2xlYW51cFN0cmF5VW5pY29kZUNoYXJhY3RlcnMiLCAiY2xlYW51cFNlY3Rpb25IZWFkZXJzIiwgImNsZWFudXBNYWdpY1dvcmRzIiwgImNsZWFudXBEaXNwbGF5dGl0bGVzQW5kRGVmYXVsdHNvcnRzIiwgImNsZWFudXBDYXRlZ29yaWVzIiwgImNsZWFudXBMaW5rcyIsICJjbGVhbnVwSW1wcm9wZXJDaGFyYWN0ZXJzIiwgImNsZWFudXBZZWFyUmFuZ2VzIiwgImNsZWFudXBTdHJheU1hcmt1cCIsICJjbGVhbnVwU3BhY2luZyIsICJjbGVhbnVwUmVmZXJlbmNlcyIsICJmb3JtYXRUZW1wbGF0ZXMiLCAicmVtb3ZlQ29tbWVudHMiLCAiYXV0b1RhZ1BhZ2UiLCAic3VyZmFjZU1vZGVsIiwgImVzY2FwZVJlZ2V4Q2hhcmFjdGVycyIsICJzdHJpbmciLCAiY29udGVudCIsICJzdHJheVVuaWNvZGVSZWdleCIsICJjb21tb25SZXBsYWNlbWVudHMiLCAiY29tbW9uTWlzY2FwaXRhbGl6ZWRXb3JkcyIsICJyZXZlcnNlQ29tbW9uUmVwbGFjZW1lbnRzIiwgImtleSIsICJ2YWx1ZXMiLCAidmFsdWUiLCAicGFyc2VkSGVhZGVycyIsICJoZWFkZXIiLCAibmFtZSIsICJzdGFydE1hcmt1cCIsICJlbmRNYXJrdXAiLCAibGlua3MiLCAiZGVwdGgiLCAiaGVhZGVyc1NldCIsICJ0aXRsZVNwYWNlciIsICJsb3dlcmNhc2VOYW1lIiwgImNhcGl0YWxpemVkTmFtZSIsICJ3b3JkIiwgIm91dHB1dCIsICJwYXJzZWRUYWdzIiwgInRhZyIsICJmdWxsVGFnIiwgInR5cGUiLCAiY3VycmVudFRpdGxlIiwgIm9yaWdpbmFsVGFnUmVnZXgiLCAidW5wcmVmaXhlZFRpdGxlIiwgInRpdGxlIiwgImRlZmF1bHRLZXkiLCAiY3VzdG9tS2V5IiwgIm5ld1RleHQiLCAiZnVuY3Rpb25zQ2FsbGVkV2hpbGVFc2NhcGVkIiwgImNsb3NlZExpbmtzIiwgImlzSW5zaWRlTm93aWtpIiwgImlzSW5zaWRlQ29tbWVudCIsICJjdXJyZW50TG9jYXRpb24iLCAiaXNBdFN0cmluZyIsICJkZXNpcmVkU3RyaW5nIiwgInNob3VsZEluY3JlbWVudCIsICJsYXN0TGluayIsICJuZXdMaW5rQ29udGVudCIsICJuYW1lc3BhY2VOYW1lcyIsICJsaW5rTG9jYXRpb24iLCAiaW5uZXJMaW5rIiwgInVucGFyc2VkTGluayIsICJwYXJhbWV0ZXJzIiwgImFsdFRleHQiLCAiaXNGaXJzdENoYXJhY3RlckNvbG9uIiwgInNob3VsZEZpcnN0Q2hhcmFjdGVyQmVDb2xvbiIsICJsaW5rVXBwZXJjYXNlU3RhcnQiLCAibGlua0xvd2VyY2FzZVN0YXJ0IiwgIm5hbWVzcGFjZSIsICJhZnRlckxpbmtUZXh0IiwgImFkZGVkUHVuY3R1YXRpb24iLCAibmV3TGluayIsICJmdW5jdGlvblRvQ2FsbCIsICJsb29wQ291bnRlciIsICJsaW5rRGF0YSIsICJsaW5rQ29udGVudCIsICJydW4iLCAiZWxpcHNpc1BsYWNlaG9sZGVyIiwgIm5ic3BQbGFjZWhvbGRlciIsICJvcmlnaW5hbCIsICJzdGFydCIsICJlbmQiLCAic3RyYXlNYXJrdXBSZWdleGVzIiwgInJlZ2V4IiwgInNlY29uZFJ1biIsICJmdWxsTWF0Y2giLCAicmVmZXJlbmNlVGFnIiwgInB1bmN0dWF0aW9uIiwgInJlZmVyZW5jZXMiLCAicHJvY2VlZFVudGlsU3RyaW5nIiwgImlzU2VsZkNsb3NpbmciLCAicGFyc2VyIiwgInJlcGxhY2VtZW50cyIsICJyZWZlcmVuY2UiLCAic3RhcnRUYWciLCAidGFnQ29udGVudCIsICJGb3JtYXRTdHlsZSIsICJOYW1lc3BhY2UiLCAidGVtcGxhdGVBbGlhc2VzIiwgImdldFBhZ2VDb250ZW50IiwgIm1hcHBlZFRlbXBsYXRlQWxpYXNlcyIsICJhbGlhcyIsICJmcm9tIiwgIlRlbXBsYXRlIiwgInN0YXJ0TG9jYXRpb24iLCAic3ViVGVtcGxhdGUiLCAidHJpbW1lZElubmVyVGV4dCIsICJwaXBlRXNjYXBlUmVnZXgiLCAiZnVsbFRleHQiLCAidGFnTmFtZSIsICJhdHRyaWJ1dGVzIiwgInBhcmFtZXRlciIsICJuYW1lTG93ZXJjYXNlRmlyc3QiLCAic3BsaXRQYXJhbWV0ZXJzIiwgImVxdWFsc0xvY2F0aW9uIiwgInRlbXBsYXRlcyIsICJtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVQcmVmaXhMZW5ndGgiLCAibW9zdFNwZWNpZmljRGVmYXVsdFN0eWxlRm9ybWF0U3R5bGUiLCAiZm9ybWF0U3R5bGUiLCAidGVtcGxhdGVQcmVmaXhlcyIsICJ0ZW1wbGF0ZVByZWZpeCIsICJpbWFnZVBhcmFtZXRlcnMiLCAibnVtYmVyIiwgInNob3VsZFN1YnN0IiwgInN0eWxlIiwgIm5ld05hbWUiLCAicmVxdWlyZWRLZXlMZW5ndGgiLCAiaW5kZXgiLCAiam9pbmVkT3V0cHV0IiwgImFsbFRlbXBsYXRlcyIsICJpbnNpZGVUZW1wbGF0ZXMiLCAiaXNJbnNpZGVMaW5rIiwgInRlbXBsYXRlIiwgImxhc3RUZW1wbGF0ZSIsICJuZXdDb250ZW50IiwgImNvbW1lbnRzIiwgImNvbW1lbnQiLCAibnVtYmVyT2ZDYXRlZ29yaWVzIl0KfQo=
