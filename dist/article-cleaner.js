// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),g=!1,m="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(g){let p=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");p.value.includes(m.slice(1))||(p.value&&!p.value.startsWith("/* ")&&!p.value.endsWith(" */ ")?p.value+=`; ${m.charAt(0).toLowerCase()+m.slice(1)}`:p.value=`${p.value}${m}`),g=!1}}),e.addEventListener("click",p=>{p.preventDefault();let n=$("#wpTextbox1");if(n.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let f=n.textSelection("getContents"),s=f;if(s=E(s),s=C(s),s=L(s),s=I(s),s=N(s),s=F(s,[M,R]),s=D(s),s=A(s),s=O(s),s=P(s),s=W(s),s=A(s,!0),f===s)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let u=ve.init.target.getSurface().getModel();u.getLinearFragment(u.getRangeFromSourceOffsets(0,f.length)).insertContent(s),u.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else n.textSelection("setContents",s),n.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let h=document.querySelector("#wpSummary");h?h.value.includes(m.slice(1))||(h.value?h.value+=`; ${m.charAt(0).toLowerCase()+m.slice(1)}`:h.value=m):g=!0}})});function S(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function E(e){let g=/[\u0000-\u0009\u000B\u000C\u000E-\u001F\u007F\u00AD\u200B-\u200F\u202A-\u202E\u2060\u2063\uFEFF]/g;return g.test(e)&&(e=e.replaceAll(g,"")),e}function C(e){let g={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},m=["and","birth","career","death","education","life","of","or"],p=Object.fromEntries(Object.entries(g).flatMap(([u,r])=>[[u.toLowerCase(),u],...r.map(a=>[a,u])])),f=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(u=>{let{name:r}=u.groups,{startMarkup:a,endMarkup:d}=u.groups;r=r.replaceAll(/'{3}/g,"");let c=r.matchAll(/\[\[(.+?)]]/g).toArray();for(let t of c)r=r.replace(t[0],t[1].split("|").at(-1));let o=Math.max(a.length,d.length,2);return{name:r,depth:o,original:u[0]}}),s=new Set(f.map(u=>u.name)),h=f.length>0&&/^\n*=+ | =+\n+$/.test(f[0].original)?" ":"";for(let u of f){let r=u.name.toLowerCase(),d=r in p&&!s.has(p[r])?p[r]:u.name;for(let o of m)d=d.replaceAll(new RegExp(`\\b${o}\\b`,"gi"),o);d=d.charAt(0).toUpperCase()+d.slice(1);let c=`${"=".repeat(u.depth)}${h}${d}${h}${"=".repeat(u.depth)}`;u.original!==c&&(e=e.replace(u.original,`

${c}
`))}return e}function L(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function I(e){let m=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(n=>{let[f,s,h]=n;return{type:s.toUpperCase(),value:h,original:f}}),p=mw.Title.newFromText(mw.config.get("wgPageName"));for(let n of m){let f=new RegExp(`${S(n.original)}
*`,"g"),s=mw.Title.newFromText(n.value);if(!s)continue;let h=mw.Title.makeTitle(p.getNamespaceId(),s.getMainText());if(!h)continue;let u=n.type==="DISPLAYTITLE"?p.toText():p.getMainText(),r=n.type==="DISPLAYTITLE"?h.toText():h.getMainText();if(u===r){e=e.replace(f,"");continue}let a=`{{${n.type}:${r}}}
`;e=e.replace(f,a)}return e}function N(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function F(e,g){let m=[],p=[],n=!1,f=!1,s=0;function h(a,d=!0){let c=e.slice(s,s+a.length)===a;return c&&d&&(s+=a.length),c}for(;s<e.length;)if(h("<nowiki>"))n=!0;else if(h("</nowiki>"))n=!1;else if(h("<!--"))f=!0;else if(h("-->"))f=!1;else if(!n&&!f)if(h("[["))p.push({start:s-2,end:-1,isNested:p.length>0});else if(h("]]")){let a=p.pop();if(!a)continue;a.end=s,m.push(a)}else s++;else s++;let u=[],r=Object.values(mw.config.get("wgFormattedNamespaces"));for(let a of m){let d=e.slice(a.start+2,a.end-2),[c,...o]=d.split("|");e=e.slice(0,a.start+2)+"\0".repeat(c.length)+e.slice(a.start+2+c.length);let t=c.replaceAll("_"," ").trim(),i=o.join("|");i=i===" "?" ":i.trim();let x=t.startsWith(":");x&&(t=t.slice(1));let l=!1,b=t.charAt(0).toUpperCase()+t.slice(1),k=t.charAt(0).toLowerCase()+t.slice(1),w=t.split(":")[0];w=w.charAt(0).toUpperCase()+w.slice(1),t.includes(":")&&(b.startsWith("Image:")&&(t=`${t.startsWith("Image:")?"F":"f"}ile:${t.slice(6)}`),x&&(["Image","File","Category"].includes(b.split(":")[0])||!r.includes(w))&&(l=!0));let y="";t===i?i="":new RegExp(`^${S(t)}[a-z]+$`).test(i)&&(y=i.slice(t.length),i="");for(let T of[b,k])T===i?(t=T,i=""):new RegExp(`^${S(T)}[a-z]+$`).test(i)&&(t=T,y=i.slice(T.length),i="");(i&&t.includes(":")&&r.includes(w)||t.startsWith("file:")||t.startsWith("category:"))&&(t=t.charAt(0).toUpperCase()+t.slice(1)),t=`${l?":":""}${t}`,t=t.padStart(c.length,"\0");let v=`[[${t}${i?`|${i}`:""}]]${y}`;u.push([a,v])}for(let a of g)e=a(e,1);for(let a=0;a<2;a++)for(let[d,c]of u)a===0&&d.isNested||a===1&&!d.isNested||(e=e.slice(0,d.start)+c.padEnd(d.end-d.start,"\0")+e.slice(d.end));for(let a of g)e=a(e,2);return e.replaceAll("\0","")}function M(e,g){let m="\x7F",p="\x9F";return g===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",m),e=e.replaceAll("\xA0",p)):(e=e.replaceAll(m,"..."),e=e.replaceAll(p,"&nbsp;")),e}function R(e,g){return g===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(m,p,n)=>`${p}\u2013${n}`.padEnd(m.length,"\0"))),e}function D(e){let g=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let m of g)for(;m.test(e);)e=e.replace(m,"");return e}function A(e,g=!1){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),g||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),g||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim(),e}function O(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>.*?<\/ref>|<ref(?!erences).*?\/>)+)([!,.;?])?/g,(r,a,d)=>(d??"")+a);let g=[],m=!1,p=!1,n=0;function f(r){let a=e.slice(n,n+r.length)===r;return a&&(n+=r.length),a}function s(r){for(;n<e.length&&!f(r);)n++}for(;n<e.length;)if(f("<nowiki>"))m=!0;else if(f("</nowiki>"))m=!1;else if(f("<!--"))p=!0;else if(f("-->"))p=!1;else if(!m&&!p)if(!f("<references")&&f("<ref")){let r=n-4;s(">");let a=e.slice(r,n-1).trim().endsWith("/");g.push(a?{start:r,end:n,isSelfClosing:a}:{start:r,end:-1})}else f("</ref>")?g.at(-1).end=n:n++;else n++;let h=new DOMParser,u=[];for(let r of g){let a=e.slice(r.start,r.end),d=/<ref(?!erences).*?>/is.exec(a)[0],o=h.parseFromString(r.isSelfClosing?d.replace(/ *\/ *>/," />"):d+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),t=a.slice(d.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();o=r.isSelfClosing||t.length===0?o.replace(/>\s*<\/ref>/," />"):`${o.slice(0,-6)}${t}</ref>`,a!==o&&u.push([a,o])}for(let[r,a]of u)e=e.replace(r,a);return e}function P(e){let g;(x=>(x[x.Expanded=0]="Expanded",x[x.ExpandedAligned=1]="ExpandedAligned",x[x.Minimized=2]="Minimized",x[x.MinimizedSpaced=3]="MinimizedSpaced"))(g||={});let m;(i=>(i[i.User=2]="User",i[i.Template=10]="Template",i[i.Draft=118]="Draft"))(m||={});class p{location;isNested=!1;fullText;fullTextEscaped;rawName;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["album rating","album reviews","american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","chembox","cricket uniform","election box","external music video","extra album cover","field hockey kit","football box","football kit","footballbox","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","judo bracket","judo repechage","listen","location map","medical resources","motorsport season","multiple image","music ratings","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","repechage","sidebar","sidebar","single ratings","singles","song ratings","speciesbox","starbox","succession box","taxobox","team bracket","track listing","virusbox","volleyball kit","nteambracket","2nteam-nteambracket","2teambracket","3teambracket","3teamrr","4teambracket","4teamrr","5teambracket","5teamrr","6teambracket","6teamrr","7teambracket","7teamrr","8teambracket","8teamroundrobin","8teamrr","9teambracket","10teambracket","11teambracket","12teambracket","13teambracket","14teambracket","15teambracket","16teambracket","18teambracket","20teambracket","24teambracket","27teambracket","32teambracket","40teambracket","48teambracket","64teambracket","128teambracket"],2:["birth date","coord","death date","end date","lang","start date"],3:["infobox mapframe"]};namespaceSpecificTemplates={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};templatesToKeepContent=["draft categories"];templatesToSubst=["articlepagename","articlespace","basepagename","fullpagename","namespace","namespacenumber","pagename","rootpagename","subjectpagename","subjectspace","subpagename","talkpagename","talkspace","pagenamebase"];constructor(o){this.location={start:o}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let l of this.subTemplates)l.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(l.fullText,this.placeholderStrings[0]);let o=this.fullTextEscaped.slice(2,-2).trim();for(let l of this.pipeEscapeRegexes)for(;l.test(o);)o=o.replaceAll(l,`$1${this.placeholderStrings[1]}$2`);let t=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];for(let l of t)o=o.replaceAll(l,(b,k,w)=>b.replace(w,w.replaceAll("=",this.placeholderStrings[2])));let i=o.split("|").map(l=>l.replaceAll(this.placeholderStrings[1],"|").trim());this.rawName=i.shift(),this.name=this.rawName?.replaceAll("_"," ");let x=i.map(l=>{let b=l.indexOf("=");if(b===-1)return{key:null,value:l.replaceAll(this.placeholderStrings[2],"=").trim()};let k=l.slice(b+1).replaceAll(this.placeholderStrings[2],"=");return{key:l.slice(0,b).trim(),value:`${k.startsWith(`
`)?`
`:""}${k.trim()}`}});this.parameters=x}shouldBeRemoved(){for(let[o,t]of Object.entries(this.namespaceSpecificTemplates))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(o)&&t.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let o=0,t;for(let[i,x]of Object.entries(this.defaultTemplateStyles))for(let l of x)this.name.toLowerCase().startsWith(l)&&l.length>=o&&(o=l.length,t=Number.parseInt(i));return t}cleanupParameters(){let o=new Set(["cover","image_flag","image","logo","map_image"]);for(let t=1;t<=10;t++)o.add(`image${t}`);this.parameters=this.parameters.map(({key:t,value:i})=>(t&&o.has(t)&&(i=i.trim(),i.startsWith("[[")&&i.endsWith("]]")&&(i=/\[\[(.*?)]]/g.exec(i)[1].split("|")[0]),i=i.replace(/^(File|Image):/,"").replaceAll("_"," ")),{key:t,value:i}))}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.templatesToKeepContent.includes(this.name.toLowerCase())?this.parameters[0].value:"";let o=mw.config.get("wgNamespaceNumber")!==10&&this.templatesToSubst.some(l=>l===this.name.toLowerCase()||this.name.toLowerCase().startsWith(`${l}:`)),t=this.getStyle();if(t===void 0){let l=this.name;this.name.toLowerCase().startsWith("template:")&&(l=this.name.slice(9)),o&&(l=`subst:${l}`),l!==this.rawName&&(this.fullTextEscaped=this.fullTextEscaped.replace(this.rawName,l));for(let b of this.subTemplates)this.fullTextEscaped=this.fullTextEscaped.replace(this.placeholderStrings[0],b.format());return this.fullTextEscaped}let i=[`{{${o?"subst:":""}${this.name}`];if(this.cleanupParameters(),t===0||t===1){let l=0;t===1&&(l=Math.max(...this.parameters.map(b=>b.key?.length??0)));for(let[b,k]of this.parameters.entries())!k.key&&!k.value&&this.parameters.slice(b+1).every(w=>w.key??!w.value)||i.push(`| ${k.key?`${k.key.padEnd(l)} = `:""}${k.value}`)}else for(let[l,b]of this.parameters.entries())!b.value&&(b.key||this.parameters.slice(l+1).every(k=>k.key??!k.value))||i.push(`|${b.key?`${b.key}=`:""}${b.value}`);i.push("}}"),i.length===2?(i[0]+="}}",i.pop()):t===3&&(i[i.length-2]+="}}",i.pop());let x=i.join(t===0||t===1?`
`:t===3?" ":"");for(let l of this.subTemplates)x=x.replace(this.placeholderStrings[0],l.format());return x}}let n=[],f=[],s=!1,h=!1,u=!1,r=0;function a(c){let o=e.slice(r,r+c.length)===c;return o&&(r+=c.length),o}for(;r<e.length;)if(a("<nowiki>"))h=!0;else if(a("</nowiki>"))h=!1;else if(a("<!--"))u=!0;else if(a("-->"))u=!1;else if(!h&&!u)if(a("[["))s=!0;else if(s&&a("]]"))s=!1;else if(a("{{")){let c=new p(r-2);f.length>0&&(c.isNested=!0,f.at(-1)?.subTemplates.push(c)),f.push(c)}else if(a("}}")){let c=f.pop();if(!c)continue;c.location.end=r,n.push(c)}else r++;else r++;let d=e;for(let c of n)c.isNested||(c.parse(),d=d.replace(c.fullText,c.format()));return d}function W(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let g=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let m of g)e=e.replaceAll(new RegExp(` *<!-- ?${S(m)}.*?--> *
?`,"gs"),"");return e}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc2NyaXB0cy9hcnRpY2xlLWNsZWFuZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImRlY2xhcmUgZ2xvYmFsIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbiAgICBjbGFzcyBWZVJhbmdlIHtcbiAgICAgICAgY29uc3RydWN0b3Ioc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpO1xuICAgIH1cblxuICAgIGNsYXNzIFZlRnJhZ21lbnQge1xuICAgICAgICBpbnNlcnRDb250ZW50KGNvbnRlbnQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgfVxuXG4gICAgY2xhc3MgVmVTdXJmYWNlTW9kZWwge1xuICAgICAgICBnZXRMaW5lYXJGcmFnbWVudChyYW5nZTogVmVSYW5nZSk6IFZlRnJhZ21lbnQ7XG4gICAgICAgIGdldFJhbmdlRnJvbVNvdXJjZU9mZnNldHMoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBWZVJhbmdlO1xuICAgICAgICBzZXRTZWxlY3Rpb24oc2VsZWN0aW9uOiBWZUxpbmVhclNlbGVjdGlvbik6IHZvaWQ7XG4gICAgfVxuXG4gICAgY2xhc3MgVmVUYXJnZXQge1xuICAgICAgICBnZXRTdXJmYWNlKCk6IHsgZ2V0TW9kZWwoKTogVmVTdXJmYWNlTW9kZWwgfTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbiAgICBjbGFzcyBWZUxpbmVhclNlbGVjdGlvbiB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHJhbmdlOiBWZVJhbmdlKTtcbiAgICB9XG5cbiAgICBjb25zdCB2ZToge1xuICAgICAgICBSYW5nZTogdHlwZW9mIFZlUmFuZ2U7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgICAgIGRtOiB7IExpbmVhclNlbGVjdGlvbjogdHlwZW9mIFZlTGluZWFyU2VsZWN0aW9uIH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgICAgIGluaXQ/OiB7IHRhcmdldDogVmVUYXJnZXQgfTtcbiAgICB9O1xufVxuXG5leHBvcnQge307XG5cbigoKSA9PiB7XG4gICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPCAwKSByZXR1cm47IC8vIERvbid0IHJ1biBpbiB2aXJ0dWFsIG5hbWVzcGFjZXNcbiAgICBpZiAoIW13LmNvbmZpZy5nZXQoJ3dnSXNQcm9iYWJseUVkaXRhYmxlJykpIHJldHVybjsgLy8gRG9uJ3QgcnVuIGlmIHVzZXIgY2FuJ3QgZWRpdCBwYWdlXG5cbiAgICBtdy5sb2FkZXIudXNpbmcoWydtZWRpYXdpa2kudXRpbCcsICdqcXVlcnkudGV4dFNlbGVjdGlvbiddLCAoKSA9PiB7XG4gICAgICAgIG13LnV0aWwuYWRkQ1NTKGBcbiNhcnRpY2xlLWNsZWFuZXIge1xuICAgIGRpc3BsYXk6IG5vbmU7XG59XG5cbiNjb250ZW50Omhhcygjd3BUZXh0Ym94MSkgI2FydGljbGUtY2xlYW5lciB7XG4gICAgZGlzcGxheTogdW5zZXQ7XG59YCk7XG5cbiAgICAgICAgY29uc3QgbGluayA9IG13LnV0aWwuYWRkUG9ydGxldExpbmsoXG4gICAgICAgICAgICBtdy5jb25maWcuZ2V0KCdza2luJykgPT09ICdtaW5lcnZhJyA/ICdwLW5hdmlnYXRpb24nIDogJ3AtY2FjdGlvbnMnLFxuICAgICAgICAgICAgJyMnLFxuICAgICAgICAgICAgJ1BlcmZvcm0gYXJ0aWNsZSBjbGVhbnVwJyxcbiAgICAgICAgICAgICdhcnRpY2xlLWNsZWFuZXInLFxuICAgICAgICApITtcblxuICAgICAgICBsZXQgc2hvdWxkQWRkU2NyaXB0TWVzc2FnZSA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IHNjcmlwdE1lc3NhZ2UgPSAnQ2xlYW5lZCB1cCBhcnRpY2xlIGNvbnRlbnQgKHZpYSBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL2FydGljbGUtY2xlYW5lcnxhcnRpY2xlLWNsZWFuZXJdXSknO1xuXG4gICAgICAgIG13Lmhvb2soJ3ZlLnNhdmVEaWFsb2cuc3RhdGVDaGFuZ2VkJykuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChzaG91bGRBZGRTY3JpcHRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VtbWFyeUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MVGV4dEFyZWFFbGVtZW50PignLnZlLXVpLW13U2F2ZURpYWxvZy1zdW1tYXJ5IHRleHRhcmVhJykhO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFzdW1tYXJ5SW5wdXQudmFsdWUuaW5jbHVkZXMoc2NyaXB0TWVzc2FnZS5zbGljZSgxKSkpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdW1tYXJ5SW5wdXQudmFsdWUgJiYgIXN1bW1hcnlJbnB1dC52YWx1ZS5zdGFydHNXaXRoKCcvKiAnKSAmJiAhc3VtbWFyeUlucHV0LnZhbHVlLmVuZHNXaXRoKCcgKi8gJykpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5SW5wdXQudmFsdWUgKz0gYDsgJHtzY3JpcHRNZXNzYWdlLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc2NyaXB0TWVzc2FnZS5zbGljZSgxKX1gO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHN1bW1hcnlJbnB1dC52YWx1ZSA9IGAke3N1bW1hcnlJbnB1dC52YWx1ZX0ke3NjcmlwdE1lc3NhZ2V9YDtcblxuICAgICAgICAgICAgICAgIHNob3VsZEFkZFNjcmlwdE1lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgY29uc3QgZWRpdEJveCA9ICQoJyN3cFRleHRib3gxJyk7XG4gICAgICAgICAgICBpZiAoZWRpdEJveC5sZW5ndGggPT09IDApIHJldHVybiBtdy5ub3RpZnkoJ0VkaXQgYm94IG5vdCBmb3VuZCEnLCB7IHR5cGU6ICdlcnJvcicsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcblxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxUZXh0ID0gZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdnZXRDb250ZW50cycpO1xuXG4gICAgICAgICAgICBsZXQgZmluYWxUZXh0ID0gb3JpZ2luYWxUZXh0O1xuXG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwU3RyYXlVbmljb2RlQ2hhcmFjdGVycyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cFNlY3Rpb25IZWFkZXJzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwTWFnaWNXb3JkcyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cERpc3BsYXl0aXRsZXNBbmREZWZhdWx0c29ydHMoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBDYXRlZ29yaWVzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwTGlua3MoZmluYWxUZXh0LCBbY2xlYW51cEltcHJvcGVyQ2hhcmFjdGVycywgY2xlYW51cFllYXJSYW5nZXNdKTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBTdHJheU1hcmt1cChmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cFNwYWNpbmcoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBSZWZlcmVuY2VzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBmb3JtYXRUZW1wbGF0ZXMoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IHJlbW92ZUNvbW1lbnRzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwU3BhY2luZyhmaW5hbFRleHQsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAob3JpZ2luYWxUZXh0ID09PSBmaW5hbFRleHQpIG13Lm5vdGlmeSgnTm8gY2hhbmdlcyB0byBiZSBtYWRlIHRvIHRoZSBhcnRpY2xlIScsIHsgdHlwZTogJ3dhcm4nLCBhdXRvSGlkZVNlY29uZHM6ICdzaG9ydCcgfSk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodmUuaW5pdCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdXJmYWNlTW9kZWwgPSB2ZS5pbml0LnRhcmdldC5nZXRTdXJmYWNlKCkuZ2V0TW9kZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBzdXJmYWNlTW9kZWwuZ2V0TGluZWFyRnJhZ21lbnQoc3VyZmFjZU1vZGVsLmdldFJhbmdlRnJvbVNvdXJjZU9mZnNldHMoMCwgb3JpZ2luYWxUZXh0Lmxlbmd0aCkpO1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5pbnNlcnRDb250ZW50KGZpbmFsVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHN1cmZhY2VNb2RlbC5zZXRTZWxlY3Rpb24obmV3IHZlLmRtLkxpbmVhclNlbGVjdGlvbihuZXcgdmUuUmFuZ2UoMCwgMCkpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlZGl0Qm94LnRleHRTZWxlY3Rpb24oJ3NldENvbnRlbnRzJywgZmluYWxUZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICBlZGl0Qm94LnRleHRTZWxlY3Rpb24oJ3NldFNlbGVjdGlvbicsIHsgc3RhcnQ6IDAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbXcubm90aWZ5KCdBcnRpY2xlIGNsZWFudXAgY29tcGxldGUhJywgeyB0eXBlOiAnc3VjY2VzcycsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTElucHV0RWxlbWVudD4oJyN3cFN1bW1hcnknKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VtbWFyeUlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3VtbWFyeUlucHV0LnZhbHVlLmluY2x1ZGVzKHNjcmlwdE1lc3NhZ2Uuc2xpY2UoMSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1bW1hcnlJbnB1dC52YWx1ZSkgc3VtbWFyeUlucHV0LnZhbHVlICs9IGA7ICR7c2NyaXB0TWVzc2FnZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHNjcmlwdE1lc3NhZ2Uuc2xpY2UoMSl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugc3VtbWFyeUlucHV0LnZhbHVlID0gc2NyaXB0TWVzc2FnZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Ugc2hvdWxkQWRkU2NyaXB0TWVzc2FnZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoKTtcblxuLyoqXG4gKiBFc2NhcGVzIHJlZ2V4IGNoYXJhY3RlcnMgaW4gYSBzdHJpbmcuXG4gKiBAcGFyYW0gc3RyaW5nIFRoZSBzdHJpbmcgdG8gZXNjYXBlIHJlZ2V4IGNoYXJhY3RlcnMgaW4uXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVJlZ2V4Q2hhcmFjdGVycyhzdHJpbmc6IHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZUFsbCgvWyQoKSorLj9bXFxcXFxcXV57fH1dL2csICdcXFxcJCYnKTtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgc3RyYXkgVW5pY29kZSBjaGFyYWN0ZXJzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cFN0cmF5VW5pY29kZUNoYXJhY3RlcnMoY29udGVudDogc3RyaW5nKSB7XG4gICAgLy8gVGhpcyByZWdleCByZW1vdmVzOlxuICAgIC8vICAgLSBBU0NJSSBjb250cm9sIGNoYXJhY3RlcnMgKFxcdTAwMDAtXFx1MDAwOSwgXFx1MDAwQi1cXHUwMDBDLCBcXHUwMDBFLVxcdTAwMUYpXG4gICAgLy8gICAtIERFTCAoXFx1MDA3RilcbiAgICAvLyAgIC0gU29mdCBoeXBoZW4gKFxcdTAwQUQpXG4gICAgLy8gICAtIFplcm8td2lkdGggY2hhcmFjdGVycyBhbmQgZGlyZWN0aW9uYWxpdHkgbWFya3MgKFxcdTIwMEItXFx1MjAwRilcbiAgICAvLyAgIC0gQmlkaSBvdmVycmlkZSBhbmQgZm9ybWF0dGluZyBjaGFyYWN0ZXJzIChcXHUyMDJBLVxcdTIwMkUpXG4gICAgLy8gICAtIFdvcmQgam9pbmVyIGFuZCBpbnZpc2libGUgc2VwYXJhdG9yIChcXHUyMDYwLCBcXHUyMDYzKVxuICAgIC8vICAgLSBCeXRlIG9yZGVyIG1hcmsgKEJPTSkgKFxcdUZFRkYpXG4gICAgY29uc3Qgc3RyYXlVbmljb2RlUmVnZXggPSAvW1xcdTAwMDAtXFx1MDAwOVxcdTAwMEJcXHUwMDBDXFx1MDAwRS1cXHUwMDFGXFx1MDA3RlxcdTAwQURcXHUyMDBCLVxcdTIwMEZcXHUyMDJBLVxcdTIwMkVcXHUyMDYwXFx1MjA2M1xcdUZFRkZdL2c7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG4gICAgaWYgKHN0cmF5VW5pY29kZVJlZ2V4LnRlc3QoY29udGVudCkpIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoc3RyYXlVbmljb2RlUmVnZXgsICcnKTtcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBzZWN0aW9uIGhlYWRlcnMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwU2VjdGlvbkhlYWRlcnMoY29udGVudDogc3RyaW5nKSB7XG4gICAgY29uc3QgY29tbW9uUmVwbGFjZW1lbnRzID0ge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgICAgICAgJ1NlZSBhbHNvJzogWydhbHNvIHNlZSddLFxuICAgICAgICAnUmVmZXJlbmNlcyc6IFsncmVmZXJlbmNlJywgJ3NvdXJjZScsICdzb3VyY2VzJywgJ2NpdGF0aW9uJywgJ2NpdGF0aW9ucyddLFxuICAgICAgICAnRnVydGhlciByZWFkaW5nJzogWydmdXJ0aGVyIHJlYWRpbmcnXSxcbiAgICAgICAgJ0V4dGVybmFsIGxpbmtzJzogWydleHRlcm5hbCBsaW5rJywgJ3dlYmxpbmsnLCAnd2VibGlua3MnXSxcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgICB9O1xuXG4gICAgY29uc3QgY29tbW9uTWlzY2FwaXRhbGl6ZWRXb3JkcyA9IFsnYW5kJywgJ2JpcnRoJywgJ2NhcmVlcicsICdkZWF0aCcsICdlZHVjYXRpb24nLCAnbGlmZScsICdvZicsICdvciddO1xuXG4gICAgY29uc3QgcmV2ZXJzZUNvbW1vblJlcGxhY2VtZW50cyA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoY29tbW9uUmVwbGFjZW1lbnRzKS5mbGF0TWFwKChba2V5LCB2YWx1ZXNdKSA9PiBbXG4gICAgICAgICAgICBba2V5LnRvTG93ZXJDYXNlKCksIGtleV0sXG4gICAgICAgICAgICAuLi4odmFsdWVzLm1hcCgodmFsdWUpID0+IFt2YWx1ZSwga2V5XSkgYXMgW3N0cmluZywgc3RyaW5nXVtdKSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktdHlwZS1hc3NlcnRpb25cbiAgICAgICAgXSksXG4gICAgKTtcblxuICAgIGNvbnN0IGhlYWRlcnMgPSBjb250ZW50Lm1hdGNoQWxsKC8oPzw9XnxcXG4pXFxuKig/PHN0YXJ0TWFya3VwPj0rKSAqKD88bmFtZT4uKj8pICooPzxlbmRNYXJrdXA+PSspKFxcbit8JCkvZyk7XG5cbiAgICBjb25zdCBwYXJzZWRIZWFkZXJzID0gWy4uLmhlYWRlcnNdLm1hcCgoaGVhZGVyKSA9PiB7XG4gICAgICAgIGxldCB7IG5hbWUgfSA9IGhlYWRlci5ncm91cHMhO1xuICAgICAgICBjb25zdCB7IHN0YXJ0TWFya3VwLCBlbmRNYXJrdXAgfSA9IGhlYWRlci5ncm91cHMhO1xuXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2VBbGwoLyd7M30vZywgJycpO1xuXG4gICAgICAgIGNvbnN0IGxpbmtzID0gbmFtZS5tYXRjaEFsbCgvXFxbXFxbKC4rPyldXS9nKS50b0FycmF5KCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBsaW5rIG9mIGxpbmtzKSBuYW1lID0gbmFtZS5yZXBsYWNlKGxpbmtbMF0sIGxpbmtbMV0uc3BsaXQoJ3wnKS5hdCgtMSkhKTtcblxuICAgICAgICBjb25zdCBkZXB0aCA9IE1hdGgubWF4KHN0YXJ0TWFya3VwLmxlbmd0aCwgZW5kTWFya3VwLmxlbmd0aCwgMik7XG5cbiAgICAgICAgcmV0dXJuIHsgbmFtZSwgZGVwdGgsIG9yaWdpbmFsOiBoZWFkZXJbMF0gfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGhlYWRlcnNTZXQgPSBuZXcgU2V0KHBhcnNlZEhlYWRlcnMubWFwKChoZWFkZXIpID0+IGhlYWRlci5uYW1lKSk7XG5cbiAgICBjb25zdCB0aXRsZVNwYWNlciA9IHBhcnNlZEhlYWRlcnMubGVuZ3RoID4gMCA/ICgvXlxcbio9KyB8ID0rXFxuKyQvLnRlc3QocGFyc2VkSGVhZGVyc1swXS5vcmlnaW5hbCkgPyAnICcgOiAnJykgOiAnJztcblxuICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIHBhcnNlZEhlYWRlcnMpIHtcbiAgICAgICAgY29uc3QgbG93ZXJjYXNlTmFtZSA9IGhlYWRlci5uYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgY29uc3QgcmVwbGFjZWROYW1lID1cbiAgICAgICAgICAgIGxvd2VyY2FzZU5hbWUgaW4gcmV2ZXJzZUNvbW1vblJlcGxhY2VtZW50cyAmJiAhaGVhZGVyc1NldC5oYXMocmV2ZXJzZUNvbW1vblJlcGxhY2VtZW50c1tsb3dlcmNhc2VOYW1lXSlcbiAgICAgICAgICAgICAgICA/IHJldmVyc2VDb21tb25SZXBsYWNlbWVudHNbbG93ZXJjYXNlTmFtZV1cbiAgICAgICAgICAgICAgICA6IGhlYWRlci5uYW1lO1xuXG4gICAgICAgIGxldCBjYXBpdGFsaXplZE5hbWUgPSByZXBsYWNlZE5hbWU7XG5cbiAgICAgICAgZm9yIChjb25zdCB3b3JkIG9mIGNvbW1vbk1pc2NhcGl0YWxpemVkV29yZHMpIGNhcGl0YWxpemVkTmFtZSA9IGNhcGl0YWxpemVkTmFtZS5yZXBsYWNlQWxsKG5ldyBSZWdFeHAoYFxcXFxiJHt3b3JkfVxcXFxiYCwgJ2dpJyksIHdvcmQpO1xuXG4gICAgICAgIGNhcGl0YWxpemVkTmFtZSA9IGNhcGl0YWxpemVkTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhcGl0YWxpemVkTmFtZS5zbGljZSgxKTtcblxuICAgICAgICBjb25zdCBvdXRwdXQgPSBgJHsnPScucmVwZWF0KGhlYWRlci5kZXB0aCl9JHt0aXRsZVNwYWNlcn0ke2NhcGl0YWxpemVkTmFtZX0ke3RpdGxlU3BhY2VyfSR7Jz0nLnJlcGVhdChoZWFkZXIuZGVwdGgpfWA7XG5cbiAgICAgICAgaWYgKGhlYWRlci5vcmlnaW5hbCAhPT0gb3V0cHV0KSBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKGhlYWRlci5vcmlnaW5hbCwgYFxcblxcbiR7b3V0cHV0fVxcbmApO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgdW5uZWNlc3NhcnkgbWFnaWMgd29yZHMgZnJvbSBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBNYWdpY1dvcmRzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIHJldHVybiBjb250ZW50LnJlcGxhY2VBbGwoL19fKElOREVYfE5PSU5ERVh8TkVXU0VDVElPTkxJTkt8Tk9ORVdTRUNUSU9OTElOS3xOT0VESVRTRUNUSU9OfERJU0FNQklHfFNUQVRJQ1JFRElSRUNUfEZPUkNFVE9DKV9fXFxuKi9nLCAnJyk7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIERJU1BMQVlUSVRMRXMgYW5kIERFRkFVTFRTT1JUcyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBEaXNwbGF5dGl0bGVzQW5kRGVmYXVsdHNvcnRzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGNvbnN0IHRhZ3MgPSBjb250ZW50Lm1hdGNoQWxsKC97eyhkaXNwbGF5dGl0bGV8ZGVmYXVsdHNvcnQpWzp8XSguKj8pfX0vZ2kpO1xuXG4gICAgY29uc3QgcGFyc2VkVGFncyA9IFsuLi50YWdzXS5tYXAoKHRhZykgPT4ge1xuICAgICAgICBjb25zdCBbZnVsbFRhZywgdHlwZSwgdmFsdWVdID0gdGFnO1xuXG4gICAgICAgIHJldHVybiB7IHR5cGU6IHR5cGUudG9VcHBlckNhc2UoKSwgdmFsdWUsIG9yaWdpbmFsOiBmdWxsVGFnIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBjdXJyZW50VGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJykpITtcblxuICAgIGZvciAoY29uc3QgdGFnIG9mIHBhcnNlZFRhZ3MpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxUYWdSZWdleCA9IG5ldyBSZWdFeHAoYCR7ZXNjYXBlUmVnZXhDaGFyYWN0ZXJzKHRhZy5vcmlnaW5hbCl9XFxuKmAsICdnJyk7XG5cbiAgICAgICAgY29uc3QgdW5wcmVmaXhlZFRpdGxlID0gbXcuVGl0bGUubmV3RnJvbVRleHQodGFnLnZhbHVlKTtcblxuICAgICAgICBpZiAoIXVucHJlZml4ZWRUaXRsZSkgY29udGludWU7XG5cbiAgICAgICAgY29uc3QgdGl0bGUgPSBtdy5UaXRsZS5tYWtlVGl0bGUoY3VycmVudFRpdGxlLmdldE5hbWVzcGFjZUlkKCksIHVucHJlZml4ZWRUaXRsZS5nZXRNYWluVGV4dCgpKTtcblxuICAgICAgICBpZiAoIXRpdGxlKSBjb250aW51ZTtcblxuICAgICAgICBjb25zdCBkZWZhdWx0S2V5ID0gdGFnLnR5cGUgPT09ICdESVNQTEFZVElUTEUnID8gY3VycmVudFRpdGxlLnRvVGV4dCgpIDogY3VycmVudFRpdGxlLmdldE1haW5UZXh0KCk7XG5cbiAgICAgICAgY29uc3QgY3VzdG9tS2V5ID0gdGFnLnR5cGUgPT09ICdESVNQTEFZVElUTEUnID8gdGl0bGUudG9UZXh0KCkgOiB0aXRsZS5nZXRNYWluVGV4dCgpO1xuXG4gICAgICAgIGlmIChkZWZhdWx0S2V5ID09PSBjdXN0b21LZXkpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2Uob3JpZ2luYWxUYWdSZWdleCwgJycpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdUZXh0ID0gYHt7JHt0YWcudHlwZX06JHtjdXN0b21LZXl9fX1cXG5gO1xuXG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2Uob3JpZ2luYWxUYWdSZWdleCwgbmV3VGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIGNhdGVnb3JpZXMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwQ2F0ZWdvcmllcyhjb250ZW50OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY29udGVudC5yZXBsYWNlQWxsKFxuICAgICAgICAvKFxcW1xcW3x9fSk6P2NhdGVnb3J5OiguKj8pKF1dfH19KS9naSxcbiAgICAgICAgYFtbJHttdy5jb25maWcuZ2V0KCd3Z0Nhbm9uaWNhbE5hbWVzcGFjZScpID09PSAnRHJhZnQnID8gJzonIDogJyd9Q2F0ZWdvcnk6JDJdXWAsXG4gICAgKTtcbn1cblxuaW50ZXJmYWNlIExpbmtJbmZvcm1hdGlvbiB7XG4gICAgc3RhcnQ6IG51bWJlcjtcbiAgICBlbmQ6IG51bWJlcjtcbiAgICBpc05lc3RlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgbGlua3MgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICogQHBhcmFtIGZ1bmN0aW9uc0NhbGxlZFdoaWxlRXNjYXBlZCBUaGUgZnVuY3Rpb25zIGNhbGxlZCB3aGlsZSB0aGUgbGlua3MgYXJlIGVzY2FwZWQuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBMaW5rcyhjb250ZW50OiBzdHJpbmcsIGZ1bmN0aW9uc0NhbGxlZFdoaWxlRXNjYXBlZDogKChjb250ZW50OiBzdHJpbmcsIHJ1bjogMSB8IDIpID0+IHN0cmluZylbXSkge1xuICAgIGNvbnN0IGNsb3NlZExpbmtzOiBMaW5rSW5mb3JtYXRpb25bXSA9IFtdO1xuICAgIGNvbnN0IGxpbmtzOiBMaW5rSW5mb3JtYXRpb25bXSA9IFtdO1xuXG4gICAgbGV0IGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgbGV0IGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuXG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbnRlbnQgZm9sbG93aW5nIHRoZSBjdXJyZW50IGxvY2F0aW9uIG1hdGNoZXMgdGhlIGRlc2lyZWQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0gc2hvdWxkSW5jcmVtZW50IFdoZXRoZXIgdG8gaW5jcmVtZW50IHRoZSBjdXJyZW50IGxvY2F0aW9uIGlmIHRoZSBzdHJpbmcgaXMgZm91bmQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBdFN0cmluZyhkZXNpcmVkU3RyaW5nOiBzdHJpbmcsIHNob3VsZEluY3JlbWVudCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgaXNBdFN0cmluZyA9IGNvbnRlbnQuc2xpY2UoY3VycmVudExvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24gKyBkZXNpcmVkU3RyaW5nLmxlbmd0aCkgPT09IGRlc2lyZWRTdHJpbmc7XG5cbiAgICAgICAgaWYgKGlzQXRTdHJpbmcgJiYgc2hvdWxkSW5jcmVtZW50KSBjdXJyZW50TG9jYXRpb24gKz0gZGVzaXJlZFN0cmluZy5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGlzQXRTdHJpbmc7XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRMb2NhdGlvbiA8IGNvbnRlbnQubGVuZ3RoKVxuICAgICAgICBpZiAoaXNBdFN0cmluZygnPG5vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCc8L25vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPCEtLScpKSBpc0luc2lkZUNvbW1lbnQgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCctLT4nKSkgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKCFpc0luc2lkZU5vd2lraSAmJiAhaXNJbnNpZGVDb21tZW50KVxuICAgICAgICAgICAgaWYgKGlzQXRTdHJpbmcoJ1tbJykpIGxpbmtzLnB1c2goeyBzdGFydDogY3VycmVudExvY2F0aW9uIC0gMiwgZW5kOiAtMSwgaXNOZXN0ZWQ6IGxpbmtzLmxlbmd0aCA+IDAgfSk7XG4gICAgICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCddXScpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdExpbmsgPSBsaW5rcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWxhc3RMaW5rKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGxhc3RMaW5rLmVuZCA9IGN1cnJlbnRMb2NhdGlvbjtcblxuICAgICAgICAgICAgICAgIGNsb3NlZExpbmtzLnB1c2gobGFzdExpbmspO1xuICAgICAgICAgICAgfSBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuXG4gICAgY29uc3QgbmV3TGlua0NvbnRlbnQ6IFtMaW5rSW5mb3JtYXRpb24sIHN0cmluZ11bXSA9IFtdO1xuXG4gICAgY29uc3QgbmFtZXNwYWNlTmFtZXMgPSBPYmplY3QudmFsdWVzKG13LmNvbmZpZy5nZXQoJ3dnRm9ybWF0dGVkTmFtZXNwYWNlcycpKTtcblxuICAgIGZvciAoY29uc3QgbGlua0xvY2F0aW9uIG9mIGNsb3NlZExpbmtzKSB7XG4gICAgICAgIGNvbnN0IGlubmVyTGluayA9IGNvbnRlbnQuc2xpY2UobGlua0xvY2F0aW9uLnN0YXJ0ICsgMiwgbGlua0xvY2F0aW9uLmVuZCAtIDIpO1xuXG4gICAgICAgIGNvbnN0IFt1bnBhcnNlZExpbmssIC4uLnBhcmFtZXRlcnNdID0gaW5uZXJMaW5rLnNwbGl0KCd8Jyk7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBsaW5rIG5hbWVzIHNvIHRoZXNlIHdvbid0IGJlIGFmZmVjdGVkIGJ5IGZ1bmN0aW9ucyBjYWxsZWQgd2hpbGUgZXNjYXBlZFxuICAgICAgICBjb250ZW50ID1cbiAgICAgICAgICAgIGNvbnRlbnQuc2xpY2UoMCwgbGlua0xvY2F0aW9uLnN0YXJ0ICsgMikgK1xuICAgICAgICAgICAgJ1xcMCcucmVwZWF0KHVucGFyc2VkTGluay5sZW5ndGgpICtcbiAgICAgICAgICAgIGNvbnRlbnQuc2xpY2UobGlua0xvY2F0aW9uLnN0YXJ0ICsgMiArIHVucGFyc2VkTGluay5sZW5ndGgpO1xuXG4gICAgICAgIGxldCBsaW5rID0gdW5wYXJzZWRMaW5rLnJlcGxhY2VBbGwoJ18nLCAnICcpLnRyaW0oKTtcbiAgICAgICAgbGV0IGFsdFRleHQgPSBwYXJhbWV0ZXJzLmpvaW4oJ3wnKTtcbiAgICAgICAgYWx0VGV4dCA9IGFsdFRleHQgPT09ICcgJyA/ICcgJyA6IGFsdFRleHQudHJpbSgpO1xuXG4gICAgICAgIGNvbnN0IGlzRmlyc3RDaGFyYWN0ZXJDb2xvbiA9IGxpbmsuc3RhcnRzV2l0aCgnOicpO1xuICAgICAgICBpZiAoaXNGaXJzdENoYXJhY3RlckNvbG9uKSBsaW5rID0gbGluay5zbGljZSgxKTtcblxuICAgICAgICBsZXQgc2hvdWxkRmlyc3RDaGFyYWN0ZXJCZUNvbG9uID0gZmFsc2U7XG5cbiAgICAgICAgY29uc3QgbGlua1VwcGVyY2FzZVN0YXJ0ID0gbGluay5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGxpbmsuc2xpY2UoMSk7XG4gICAgICAgIGNvbnN0IGxpbmtMb3dlcmNhc2VTdGFydCA9IGxpbmsuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBsaW5rLnNsaWNlKDEpO1xuXG4gICAgICAgIGxldCBuYW1lc3BhY2UgPSBsaW5rLnNwbGl0KCc6JylbMF07XG4gICAgICAgIG5hbWVzcGFjZSA9IG5hbWVzcGFjZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWVzcGFjZS5zbGljZSgxKTtcblxuICAgICAgICBpZiAobGluay5pbmNsdWRlcygnOicpKSB7XG4gICAgICAgICAgICBpZiAobGlua1VwcGVyY2FzZVN0YXJ0LnN0YXJ0c1dpdGgoJ0ltYWdlOicpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkU3RhcnRVcHBlcmNhc2UgPSBsaW5rLnN0YXJ0c1dpdGgoJ0ltYWdlOicpO1xuXG4gICAgICAgICAgICAgICAgbGluayA9IGAke3Nob3VsZFN0YXJ0VXBwZXJjYXNlID8gJ0YnIDogJ2YnfWlsZToke2xpbmsuc2xpY2UoNil9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGlzRmlyc3RDaGFyYWN0ZXJDb2xvbiAmJlxuICAgICAgICAgICAgICAgIChbJ0ltYWdlJywgJ0ZpbGUnLCAnQ2F0ZWdvcnknXS5pbmNsdWRlcyhsaW5rVXBwZXJjYXNlU3RhcnQuc3BsaXQoJzonKVswXSkgfHwgIW5hbWVzcGFjZU5hbWVzLmluY2x1ZGVzKG5hbWVzcGFjZSkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgc2hvdWxkRmlyc3RDaGFyYWN0ZXJCZUNvbG9uID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhZnRlckxpbmtUZXh0ID0gJyc7XG5cbiAgICAgICAgaWYgKGxpbmsgPT09IGFsdFRleHQpIGFsdFRleHQgPSAnJztcbiAgICAgICAgZWxzZSBpZiAobmV3IFJlZ0V4cChgXiR7ZXNjYXBlUmVnZXhDaGFyYWN0ZXJzKGxpbmspfVthLXpdKyRgKS50ZXN0KGFsdFRleHQpKSB7XG4gICAgICAgICAgICBhZnRlckxpbmtUZXh0ID0gYWx0VGV4dC5zbGljZShsaW5rLmxlbmd0aCk7XG4gICAgICAgICAgICBhbHRUZXh0ID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IG5ld0xpbmsgb2YgW2xpbmtVcHBlcmNhc2VTdGFydCwgbGlua0xvd2VyY2FzZVN0YXJ0XSlcbiAgICAgICAgICAgIGlmIChuZXdMaW5rID09PSBhbHRUZXh0KSB7XG4gICAgICAgICAgICAgICAgbGluayA9IG5ld0xpbms7XG4gICAgICAgICAgICAgICAgYWx0VGV4dCA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXcgUmVnRXhwKGBeJHtlc2NhcGVSZWdleENoYXJhY3RlcnMobmV3TGluayl9W2Etel0rJGApLnRlc3QoYWx0VGV4dCkpIHtcbiAgICAgICAgICAgICAgICBsaW5rID0gbmV3TGluaztcbiAgICAgICAgICAgICAgICBhZnRlckxpbmtUZXh0ID0gYWx0VGV4dC5zbGljZShuZXdMaW5rLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYWx0VGV4dCA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIChhbHRUZXh0ICYmIGxpbmsuaW5jbHVkZXMoJzonKSAmJiBuYW1lc3BhY2VOYW1lcy5pbmNsdWRlcyhuYW1lc3BhY2UpKSB8fFxuICAgICAgICAgICAgbGluay5zdGFydHNXaXRoKCdmaWxlOicpIHx8XG4gICAgICAgICAgICBsaW5rLnN0YXJ0c1dpdGgoJ2NhdGVnb3J5OicpXG4gICAgICAgIClcbiAgICAgICAgICAgIGxpbmsgPSBsaW5rLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGluay5zbGljZSgxKTtcblxuICAgICAgICBsaW5rID0gYCR7c2hvdWxkRmlyc3RDaGFyYWN0ZXJCZUNvbG9uID8gJzonIDogJyd9JHtsaW5rfWA7XG5cbiAgICAgICAgbGluayA9IGxpbmsucGFkU3RhcnQodW5wYXJzZWRMaW5rLmxlbmd0aCwgJ1xcMCcpO1xuXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGBbWyR7bGlua30ke2FsdFRleHQgPyBgfCR7YWx0VGV4dH1gIDogJyd9XV0ke2FmdGVyTGlua1RleHR9YDtcblxuICAgICAgICBuZXdMaW5rQ29udGVudC5wdXNoKFtsaW5rTG9jYXRpb24sIG91dHB1dF0pO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgZnVuY3Rpb25Ub0NhbGwgb2YgZnVuY3Rpb25zQ2FsbGVkV2hpbGVFc2NhcGVkKSBjb250ZW50ID0gZnVuY3Rpb25Ub0NhbGwoY29udGVudCwgMSk7XG5cbiAgICBmb3IgKGxldCBsb29wQ291bnRlciA9IDA7IGxvb3BDb3VudGVyIDwgMjsgbG9vcENvdW50ZXIrKylcbiAgICAgICAgZm9yIChjb25zdCBbbGlua0RhdGEsIGxpbmtDb250ZW50XSBvZiBuZXdMaW5rQ29udGVudCkge1xuICAgICAgICAgICAgaWYgKGxvb3BDb3VudGVyID09PSAwICYmIGxpbmtEYXRhLmlzTmVzdGVkKSBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGxvb3BDb3VudGVyID09PSAxICYmICFsaW5rRGF0YS5pc05lc3RlZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPVxuICAgICAgICAgICAgICAgIGNvbnRlbnQuc2xpY2UoMCwgbGlua0RhdGEuc3RhcnQpICsgbGlua0NvbnRlbnQucGFkRW5kKGxpbmtEYXRhLmVuZCAtIGxpbmtEYXRhLnN0YXJ0LCAnXFwwJykgKyBjb250ZW50LnNsaWNlKGxpbmtEYXRhLmVuZCk7XG4gICAgICAgIH1cblxuICAgIGZvciAoY29uc3QgZnVuY3Rpb25Ub0NhbGwgb2YgZnVuY3Rpb25zQ2FsbGVkV2hpbGVFc2NhcGVkKSBjb250ZW50ID0gZnVuY3Rpb25Ub0NhbGwoY29udGVudCwgMik7XG5cbiAgICByZXR1cm4gY29udGVudC5yZXBsYWNlQWxsKCdcXDAnLCAnJyk7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIGltcHJvcGVyIGNoYXJhY3RlcnMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICogQHBhcmFtIHJ1biBUaGUgcnVuIG51bWJlciBvZiB0aGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBJbXByb3BlckNoYXJhY3RlcnMoY29udGVudDogc3RyaW5nLCBydW46IDEgfCAyKSB7XG4gICAgY29uc3QgZWxpcHNpc1BsYWNlaG9sZGVyID0gJ1xcdTAwN0YnO1xuICAgIGNvbnN0IG5ic3BQbGFjZWhvbGRlciA9ICdcXHUwMDlGJztcblxuICAgIGlmIChydW4gPT09IDEpIHtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvW1x1MjAxQ1x1MjAxRFx1MjAxRVx1MjAxRl0vZywgJ1wiJyk7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL1tcdTIwMThcdTIwMTlcdTIwMUFcdTIwMUJdL2csIFwiJ1wiKTtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgnXHUyMDI2JywgZWxpcHNpc1BsYWNlaG9sZGVyKTtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgnXHUwMEEwJywgbmJzcFBsYWNlaG9sZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKGVsaXBzaXNQbGFjZWhvbGRlciwgJy4uLicpO1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKG5ic3BQbGFjZWhvbGRlciwgJyZuYnNwOycpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIENsZWFucyB1cCB5ZWFyIHJhbmdlcyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKiBAcGFyYW0gcnVuIFRoZSBydW4gbnVtYmVyIG9mIHRoZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cFllYXJSYW5nZXMoY29udGVudDogc3RyaW5nLCBydW46IDEgfCAyKSB7XG4gICAgaWYgKHJ1biA9PT0gMSlcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvKFxcKFxcZHszLDR9KSA/W1x1MjAxMlx1MjAxM1x1MjIxMi1dID8oXFxkezMsNH1cXCkpL2csIChvcmlnaW5hbCwgc3RhcnQsIGVuZCkgPT5cbiAgICAgICAgICAgIGAke3N0YXJ0fVx1MjAxMyR7ZW5kfWAucGFkRW5kKG9yaWdpbmFsLmxlbmd0aCwgJ1xcMCcpLFxuICAgICAgICApO1xuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBzdHJheSBtYXJrdXAgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwU3RyYXlNYXJrdXAoY29udGVudDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3RyYXlNYXJrdXBSZWdleGVzID0gW1xuICAgICAgICAvJysoQm9sZHxJdGFsaWMpKCB0ZXh0KT8nKyAqL2csXG4gICAgICAgIC8oPGJpZz4pK0JpZyggdGV4dCk/KDxcXC9iaWc+KSsgKi9nLFxuICAgICAgICAvKDxzbWFsbD4pK1NtYWxsKCB0ZXh0KT8oPFxcL3NtYWxsPikrICovZyxcbiAgICAgICAgLyg8c3VwPikrU3VwZXJzY3JpcHQoIHRleHQpPyg8XFwvc3VwPikrICovZyxcbiAgICAgICAgLyg8c3ViPikrU3Vic2NyaXB0KCB0ZXh0KT8oPFxcL3N1Yj4pKyAqL2csXG4gICAgICAgIC8oPHM+KStTdHJpa2V0aHJvdWdoKDxcXC9zPikrICovZyxcbiAgICAgICAgLyg8dT4pK1VuZGVybGluZSg8XFwvdT4pKyAqL2csXG4gICAgICAgIC8oPGNvZGU+KStDb21wdXRlciBjb2RlKDxcXC9jb2RlPikrICovZyxcbiAgICAgICAgLyg8bm93aWtpPikrSW5zZXJ0IG5vbi1mb3JtYXR0ZWQgdGV4dCBoZXJlKDxcXC9ub3dpa2k+KSsgKi9nLFxuICAgICAgICAvPSsgSGVhZGluZyB0ZXh0ID0rICovZyxcbiAgICAgICAgL1xcKiBCdWxsZXRlZCBsaXN0IGl0ZW0gKi9nLFxuICAgICAgICAvIyBOdW1iZXJlZCBsaXN0IGl0ZW0gKi9nLFxuICAgICAgICAvPGdhbGxlcnk+XFxuRXhhbXBsZS5qcGdcXHxDYXB0aW9uMVxcbkV4YW1wbGUuanBnXFx8Q2FwdGlvbjJcXG48XFwvZ2FsbGVyeT4gKi9nLFxuICAgICAgICAvI1JFRElSRUNUIFxcW1xcW1RhcmdldCBwYWdlIG5hbWVdXSAqL2csXG4gICAgICAgIC88IS0tIEludmlzaWJsZSBjb21tZW50IC0tPiAqL2csXG4gICAgICAgIC88XFxzKihiaWd8c21hbGx8c3VwfHN1YnxzfHV8Y29kZXxub3dpa2l8bm9pbmNsdWRlfG9ubHlpbmNsdWRlfGluY2x1ZGVvbmx5fGNlbnRlcnxibG9ja3F1b3RlfGdhbGxlcnkpXFxzKihcXHMrW148Pl0qKT8+XFxzKjxcXHMqXFwvXFxzKlxcMVxccyo+L2dpLFxuICAgIF07XG5cbiAgICBmb3IgKGNvbnN0IHJlZ2V4IG9mIHN0cmF5TWFya3VwUmVnZXhlcykgd2hpbGUgKHJlZ2V4LnRlc3QoY29udGVudCkpIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UocmVnZXgsICcnKTtcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBzcGFjaW5nIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqIEBwYXJhbSBzZWNvbmRSdW4gV2hldGhlciB0aGUgZnVuY3Rpb24gaXMgYmVpbmcgcnVuIGZvciB0aGUgc2Vjb25kIHRpbWUsIGFmdGVyIG90aGVyIHByb2Nlc3NpbmcuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBTcGFjaW5nKGNvbnRlbnQ6IHN0cmluZywgc2Vjb25kUnVuID0gZmFsc2UpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKC8oXFxifFxccHtQdW5jdHVhdGlvbn18XFxdXFxdfFxcfVxcfXxcXHc+KSB7Mix9KFxcYnxcXHB7UHVuY3R1YXRpb259fFxcW1xcW3xcXHtcXHt8PFxcdykvZ3UsICckMSAkMicpOyAvLyBSZW1vdmUgZXh0cmEgc3BhY2VzIGJldHdlZW4gd29yZHMgYW5kIHNlbnRlbmNlc1xuICAgIGlmICghc2Vjb25kUnVuKSBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKC9eICt8ICskL2dtLCAnJyk7IC8vIFJlbW92ZSBleHRyYSBzcGFjZXMgYXQgdGhlIHN0YXJ0IG9yIGVuZCBvZiBsaW5lc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL1xcbnszLH0vZywgJ1xcblxcbicpOyAvLyBSZW1vdmUgZXh0cmEgbmV3bGluZXNcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9cXHMqKHt7W159XSpzdHVifX0pL2ksICdcXG5cXG5cXG4kMScpOyAvLyBFbnN1cmUgdGhlcmUgYXJlIHRocmVlIG5ld2xpbmVzIGJlZm9yZSB0aGUgZmlyc3Qgc3R1YiB0ZW1wbGF0ZVxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL1xccyskL2csICcnKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIHNwYWNlc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oWyMqXSspICovZ20sICckMSAnKTsgLy8gRW5zdXJlIHRoZXJlIGlzIGEgc3BhY2UgYWZ0ZXIgYSBidWxsZXQgb3IgaGFzaCBpbiBhIGxpc3QgaXRlbVxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oWyMqXSsgLiopXFxuKyg/PVsjKl0rICkvZ20sICckMVxcbicpOyAvLyBSZW1vdmUgbmV3bGluZXMgYmV0d2VlbiBsaXN0IGl0ZW1zXG4gICAgaWYgKCFzZWNvbmRSdW4pIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoLyg/PCFcXHwpXFxzKyg/PTxyZWYoPyFlcmVuY2VzKSkvZywgJycpOyAvLyBSZW1vdmUgc3BhY2VzIGJlZm9yZSByZWZlcmVuY2VzXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvPFxcLyhbQS1aYS16XSspICs+L2csICc8LyQxPicpOyAvLyBSZW1vdmUgZXhjZXNzIHNwYWNlIGluIGNsb3NpbmcgdGFnc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oPSsuKj89KykkXFxuezIsfSg/PV49Ky4qPz0rJCkvZ20sICckMVxcbicpOyAvLyBSZW1vdmUgZXh0cmEgbmV3bGluZXMgYmV0d2VlbiBlbXB0eSBzZWN0aW9uIGFuZCBmb2xsb3dpbmcgc2VjdGlvblxuICAgIGNvbnRlbnQgPSBjb250ZW50LnRyaW0oKTsgLy8gUmVtb3ZlIHdoaXRlc3BhY2UgYXQgdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgY29udGVudFxuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIHJlZmVyZW5jZXMgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwUmVmZXJlbmNlcyhjb250ZW50OiBzdHJpbmcpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKFxuICAgICAgICAvKCg/OjxyZWYoPyFlcmVuY2VzKVteL10qPz4uKj88XFwvcmVmPnw8cmVmKD8hZXJlbmNlcykuKj9cXC8+KSspKFshLC47P10pPy9nLFxuICAgICAgICAoZnVsbE1hdGNoLCByZWZlcmVuY2VUYWc6IHN0cmluZywgcHVuY3R1YXRpb246IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4gKHB1bmN0dWF0aW9uID8/ICcnKSArIHJlZmVyZW5jZVRhZyxcbiAgICApOyAvLyBGaXggcHVuY3R1YXRpb24gZm9sbG93aW5nIHJlZmVyZW5jZXNcblxuICAgIGNvbnN0IHJlZmVyZW5jZXM6IHsgc3RhcnQ6IG51bWJlcjsgZW5kOiBudW1iZXI7IGlzU2VsZkNsb3Npbmc/OiB0cnVlIH1bXSA9IFtdO1xuXG4gICAgbGV0IGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgbGV0IGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuXG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbnRlbnQgZm9sbG93aW5nIHRoZSBjdXJyZW50IGxvY2F0aW9uIG1hdGNoZXMgdGhlIGRlc2lyZWQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0F0U3RyaW5nKGRlc2lyZWRTdHJpbmc6IHN0cmluZykge1xuICAgICAgICBjb25zdCBpc0F0U3RyaW5nID0gY29udGVudC5zbGljZShjdXJyZW50TG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbiArIGRlc2lyZWRTdHJpbmcubGVuZ3RoKSA9PT0gZGVzaXJlZFN0cmluZztcblxuICAgICAgICBpZiAoaXNBdFN0cmluZykgY3VycmVudExvY2F0aW9uICs9IGRlc2lyZWRTdHJpbmcubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBpc0F0U3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2NlZWRzIHRocm91Z2ggdGhlIGNvbnRlbnQgdW50aWwgdGhlIGRlc2lyZWQgc3RyaW5nIGlzIGZvdW5kLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9jZWVkVW50aWxTdHJpbmcoZGVzaXJlZFN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIHdoaWxlIChjdXJyZW50TG9jYXRpb24gPCBjb250ZW50Lmxlbmd0aCAmJiAhaXNBdFN0cmluZyhkZXNpcmVkU3RyaW5nKSkgY3VycmVudExvY2F0aW9uKys7XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRMb2NhdGlvbiA8IGNvbnRlbnQubGVuZ3RoKVxuICAgICAgICBpZiAoaXNBdFN0cmluZygnPG5vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCc8L25vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPCEtLScpKSBpc0luc2lkZUNvbW1lbnQgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCctLT4nKSkgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKCFpc0luc2lkZU5vd2lraSAmJiAhaXNJbnNpZGVDb21tZW50KVxuICAgICAgICAgICAgaWYgKCFpc0F0U3RyaW5nKCc8cmVmZXJlbmNlcycpICYmIGlzQXRTdHJpbmcoJzxyZWYnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gY3VycmVudExvY2F0aW9uIC0gNDtcblxuICAgICAgICAgICAgICAgIHByb2NlZWRVbnRpbFN0cmluZygnPicpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaXNTZWxmQ2xvc2luZyA9IGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKHN0YXJ0LCBjdXJyZW50TG9jYXRpb24gLSAxKVxuICAgICAgICAgICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgIC5lbmRzV2l0aCgnLycpO1xuXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlcy5wdXNoKGlzU2VsZkNsb3NpbmcgPyB7IHN0YXJ0LCBlbmQ6IGN1cnJlbnRMb2NhdGlvbiwgaXNTZWxmQ2xvc2luZyB9IDogeyBzdGFydCwgZW5kOiAtMSB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBdFN0cmluZygnPC9yZWY+JykpIHJlZmVyZW5jZXMuYXQoLTEpIS5lbmQgPSBjdXJyZW50TG9jYXRpb247XG4gICAgICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuXG4gICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgY29uc3QgcmVwbGFjZW1lbnRzOiBbc3RyaW5nLCBzdHJpbmddW10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgcmVmZXJlbmNlIG9mIHJlZmVyZW5jZXMpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxUZXh0ID0gY29udGVudC5zbGljZShyZWZlcmVuY2Uuc3RhcnQsIHJlZmVyZW5jZS5lbmQpO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0VGFnID0gLzxyZWYoPyFlcmVuY2VzKS4qPz4vaXMuZXhlYyhvcmlnaW5hbFRleHQpIVswXTtcblxuICAgICAgICBjb25zdCBwYXJzZWRUYWcgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKFxuICAgICAgICAgICAgcmVmZXJlbmNlLmlzU2VsZkNsb3NpbmcgPyBzdGFydFRhZy5yZXBsYWNlKC8gKlxcLyAqPi8sICcgLz4nKSA6IHN0YXJ0VGFnICsgJzwvcmVmPicsXG4gICAgICAgICAgICAndGV4dC9odG1sJyxcbiAgICAgICAgKS5ib2R5LmZpcnN0Q2hpbGQgYXMgSFRNTFVua25vd25FbGVtZW50O1xuXG4gICAgICAgIGxldCBvdXRwdXQgPSBwYXJzZWRUYWcub3V0ZXJIVE1MLnJlcGxhY2VBbGwoJyZhbXA7JywgJyYnKTtcblxuICAgICAgICBjb25zdCB0YWdDb250ZW50ID0gb3JpZ2luYWxUZXh0XG4gICAgICAgICAgICAuc2xpY2Uoc3RhcnRUYWcubGVuZ3RoLCAtNilcbiAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAgIC5yZXBsYWNlQWxsKC9eXFxbICooW14gXFxdXSopICpdJC9nbSwgJyQxJylcbiAgICAgICAgICAgIC50cmltKCk7XG5cbiAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgIHJlZmVyZW5jZS5pc1NlbGZDbG9zaW5nIHx8IHRhZ0NvbnRlbnQubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgPyBvdXRwdXQucmVwbGFjZSgvPlxccyo8XFwvcmVmPi8sICcgLz4nKVxuICAgICAgICAgICAgICAgIDogYCR7b3V0cHV0LnNsaWNlKDAsIC02KX0ke3RhZ0NvbnRlbnR9PC9yZWY+YDtcblxuICAgICAgICBpZiAob3JpZ2luYWxUZXh0ICE9PSBvdXRwdXQpIHJlcGxhY2VtZW50cy5wdXNoKFtvcmlnaW5hbFRleHQsIG91dHB1dF0pO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgW29yaWdpbmFsVGV4dCwgb3V0cHV0XSBvZiByZXBsYWNlbWVudHMpIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2Uob3JpZ2luYWxUZXh0LCBvdXRwdXQpO1xuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogRm9ybWF0cyB0ZW1wbGF0ZSBzcGFjaW5nIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFRlbXBsYXRlcyhjb250ZW50OiBzdHJpbmcpIHtcbiAgICBlbnVtIEZvcm1hdFN0eWxlIHtcbiAgICAgICAgRXhwYW5kZWQsXG4gICAgICAgIEV4cGFuZGVkQWxpZ25lZCxcbiAgICAgICAgTWluaW1pemVkLFxuICAgICAgICBNaW5pbWl6ZWRTcGFjZWQsXG4gICAgfVxuXG4gICAgZW51bSBOYW1lc3BhY2Uge1xuICAgICAgICBVc2VyID0gMixcbiAgICAgICAgVGVtcGxhdGUgPSAxMCxcbiAgICAgICAgRHJhZnQgPSAxMTgsXG4gICAgfVxuXG4gICAgY2xhc3MgVGVtcGxhdGUge1xuICAgICAgICBwdWJsaWMgbG9jYXRpb246IHsgc3RhcnQ6IG51bWJlcjsgZW5kPzogbnVtYmVyIH07XG4gICAgICAgIHB1YmxpYyBpc05lc3RlZCA9IGZhbHNlO1xuXG4gICAgICAgIHB1YmxpYyBmdWxsVGV4dD86IHN0cmluZztcbiAgICAgICAgcHJpdmF0ZSBmdWxsVGV4dEVzY2FwZWQ/OiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgcmF3TmFtZT86IHN0cmluZztcbiAgICAgICAgcHJpdmF0ZSBuYW1lPzogc3RyaW5nO1xuICAgICAgICBwcml2YXRlIHBhcmFtZXRlcnM6IHsga2V5OiBzdHJpbmcgfCBudWxsOyB2YWx1ZTogc3RyaW5nIH1bXSA9IFtdO1xuICAgICAgICBwdWJsaWMgc3ViVGVtcGxhdGVzOiBUZW1wbGF0ZVtdID0gW107XG5cbiAgICAgICAgcHJpdmF0ZSBwbGFjZWhvbGRlclN0cmluZ3MgPSBbJ1xcdXtGMDAwMH0nLCAnXFx1ezEwRkZGRn0nLCAnXFx1e0ZGRkZFfSddO1xuXG4gICAgICAgIHByaXZhdGUgcGlwZUVzY2FwZVJlZ2V4ZXMgPSBbLyhcXFtcXFtbXlxcXV0qPylcXHwoLio/XV0pL2csIC8oPCEtLS4qPylcXHwoLio/LS0+KS9nLCAvKDxub3dpa2k+Lio/KVxcfCguKj88XFwvbm93aWtpPikvZ107XG5cbiAgICAgICAgcHJpdmF0ZSBkZWZhdWx0VGVtcGxhdGVTdHlsZXMgPSB7XG4gICAgICAgICAgICBbRm9ybWF0U3R5bGUuRXhwYW5kZWRBbGlnbmVkXTogW1xuICAgICAgICAgICAgICAgICdhbGJ1bSByYXRpbmcnLFxuICAgICAgICAgICAgICAgICdhbGJ1bSByZXZpZXdzJyxcbiAgICAgICAgICAgICAgICAnYW1lcmljYW4gZm9vdGJhbGwgdW5pZm9ybScsXG4gICAgICAgICAgICAgICAgJ2F1c3RyYWxpYW4gcnVsZXMgZm9vdGJhbGwga2l0JyxcbiAgICAgICAgICAgICAgICAnYXV0b21hdGljIHRheG9ib3gnLFxuICAgICAgICAgICAgICAgICdiYXNlYmFsbCB1bmlmb3JtJyxcbiAgICAgICAgICAgICAgICAnYmFza2V0YmFsbCBraXQnLFxuICAgICAgICAgICAgICAgICdiZWFjaGhhbmRiYWxsIGtpdCcsXG4gICAgICAgICAgICAgICAgJ2Jsb2NrcXVvdGUnLFxuICAgICAgICAgICAgICAgICdjaGVtYm94JyxcbiAgICAgICAgICAgICAgICAnY3JpY2tldCB1bmlmb3JtJyxcbiAgICAgICAgICAgICAgICAnZWxlY3Rpb24gYm94JyxcbiAgICAgICAgICAgICAgICAnZXh0ZXJuYWwgbXVzaWMgdmlkZW8nLFxuICAgICAgICAgICAgICAgICdleHRyYSBhbGJ1bSBjb3ZlcicsXG4gICAgICAgICAgICAgICAgJ2ZpZWxkIGhvY2tleSBraXQnLFxuICAgICAgICAgICAgICAgICdmb290YmFsbCBib3gnLFxuICAgICAgICAgICAgICAgICdmb290YmFsbCBraXQnLFxuICAgICAgICAgICAgICAgICdmb290YmFsbGJveCcsXG4gICAgICAgICAgICAgICAgJ2hhbmRiYWxsIGtpdCcsXG4gICAgICAgICAgICAgICAgJ2h5YnJpZGJveCcsXG4gICAgICAgICAgICAgICAgJ2ljZWhvY2tleSBraXQnLFxuICAgICAgICAgICAgICAgICdpY2hub2JveCcsXG4gICAgICAgICAgICAgICAgJ2luZm9ib3gnLFxuICAgICAgICAgICAgICAgICdpbmZyYXNwZWNpZXNib3gnLFxuICAgICAgICAgICAgICAgICdqdWRvIGJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICdqdWRvIHJlcGVjaGFnZScsXG4gICAgICAgICAgICAgICAgJ2xpc3RlbicsXG4gICAgICAgICAgICAgICAgJ2xvY2F0aW9uIG1hcCcsXG4gICAgICAgICAgICAgICAgJ21lZGljYWwgcmVzb3VyY2VzJyxcbiAgICAgICAgICAgICAgICAnbW90b3JzcG9ydCBzZWFzb24nLFxuICAgICAgICAgICAgICAgICdtdWx0aXBsZSBpbWFnZScsXG4gICAgICAgICAgICAgICAgJ211c2ljIHJhdGluZ3MnLFxuICAgICAgICAgICAgICAgICdteWNvbW9ycGhib3gnLFxuICAgICAgICAgICAgICAgICduYXZib3gnLFxuICAgICAgICAgICAgICAgICdvb2JveCcsXG4gICAgICAgICAgICAgICAgJ29yYml0Ym94JyxcbiAgICAgICAgICAgICAgICAnb3NtIGxvY2F0aW9uIG1hcCcsXG4gICAgICAgICAgICAgICAgJ3F1b3RlIGJveCcsXG4gICAgICAgICAgICAgICAgJ3JlcGVjaGFnZScsXG4gICAgICAgICAgICAgICAgJ3NpZGViYXInLFxuICAgICAgICAgICAgICAgICdzaWRlYmFyJyxcbiAgICAgICAgICAgICAgICAnc2luZ2xlIHJhdGluZ3MnLFxuICAgICAgICAgICAgICAgICdzaW5nbGVzJyxcbiAgICAgICAgICAgICAgICAnc29uZyByYXRpbmdzJyxcbiAgICAgICAgICAgICAgICAnc3BlY2llc2JveCcsXG4gICAgICAgICAgICAgICAgJ3N0YXJib3gnLFxuICAgICAgICAgICAgICAgICdzdWNjZXNzaW9uIGJveCcsXG4gICAgICAgICAgICAgICAgJ3RheG9ib3gnLFxuICAgICAgICAgICAgICAgICd0ZWFtIGJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICd0cmFjayBsaXN0aW5nJyxcbiAgICAgICAgICAgICAgICAndmlydXNib3gnLFxuICAgICAgICAgICAgICAgICd2b2xsZXliYWxsIGtpdCcsXG5cbiAgICAgICAgICAgICAgICAvLyBOdW1iZXJlZCBicmFja2V0c1xuICAgICAgICAgICAgICAgICdudGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcybnRlYW0tbnRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMnRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnM3RlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnM3RlYW1ycicsXG4gICAgICAgICAgICAgICAgJzR0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzR0ZWFtcnInLFxuICAgICAgICAgICAgICAgICc1dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICc1dGVhbXJyJyxcbiAgICAgICAgICAgICAgICAnNnRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnNnRlYW1ycicsXG4gICAgICAgICAgICAgICAgJzd0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzd0ZWFtcnInLFxuICAgICAgICAgICAgICAgICc4dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICc4dGVhbXJvdW5kcm9iaW4nLFxuICAgICAgICAgICAgICAgICc4dGVhbXJyJyxcbiAgICAgICAgICAgICAgICAnOXRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMTB0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzExdGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcxMnRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMTN0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzE0dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcxNXRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMTZ0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzE4dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcyMHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMjR0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzI3dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICczMnRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnNDB0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzQ4dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICc2NHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMTI4dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtGb3JtYXRTdHlsZS5NaW5pbWl6ZWRdOiBbJ2JpcnRoIGRhdGUnLCAnY29vcmQnLCAnZGVhdGggZGF0ZScsICdlbmQgZGF0ZScsICdsYW5nJywgJ3N0YXJ0IGRhdGUnXSxcbiAgICAgICAgICAgIFtGb3JtYXRTdHlsZS5NaW5pbWl6ZWRTcGFjZWRdOiBbJ2luZm9ib3ggbWFwZnJhbWUnXSxcbiAgICAgICAgfTtcblxuICAgICAgICBwcml2YXRlIG5hbWVzcGFjZVNwZWNpZmljVGVtcGxhdGVzID0ge1xuICAgICAgICAgICAgW05hbWVzcGFjZS5EcmFmdF06IFtcbiAgICAgICAgICAgICAgICAnYWZjIGNvbW1lbnQnLFxuICAgICAgICAgICAgICAgICdhZmMgc3VibWlzc2lvbicsXG4gICAgICAgICAgICAgICAgJ2FmYyBzdWJtaXNzaW9uL2RyYWZ0JyxcbiAgICAgICAgICAgICAgICAnYWZjIHRvcGljJyxcbiAgICAgICAgICAgICAgICAnZHJhZnQgYXJ0aWNsZScsXG4gICAgICAgICAgICAgICAgJ2RyYWZ0IGNhdGVnb3JpZXMnLFxuICAgICAgICAgICAgICAgICdkcmFmdCB0b3BpY3MnLFxuICAgICAgICAgICAgICAgICdkcmFmdCcsXG4gICAgICAgICAgICAgICAgJ2RyYWZ0cyBtb3ZlZCBmcm9tIG1haW5zcGFjZScsXG4gICAgICAgICAgICAgICAgJ3ByZWxvYWRkcmFmdCBzdWJtaXQnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtOYW1lc3BhY2UuVXNlcl06IFsnZGFzaGJvYXJkLndpa2llZHUub3JnIHNhbmRib3gnLCAndXNlciBzYW5kYm94JywgJ3VzZXJzcGFjZSBkcmFmdCddLFxuICAgICAgICB9O1xuXG4gICAgICAgIHByaXZhdGUgdGVtcGxhdGVzVG9LZWVwQ29udGVudCA9IFsnZHJhZnQgY2F0ZWdvcmllcyddO1xuXG4gICAgICAgIHByaXZhdGUgdGVtcGxhdGVzVG9TdWJzdCA9IFtcbiAgICAgICAgICAgIC8vIE1hZ2ljIHdvcmRzXG4gICAgICAgICAgICAnYXJ0aWNsZXBhZ2VuYW1lJyxcbiAgICAgICAgICAgICdhcnRpY2xlc3BhY2UnLFxuICAgICAgICAgICAgJ2Jhc2VwYWdlbmFtZScsXG4gICAgICAgICAgICAnZnVsbHBhZ2VuYW1lJyxcbiAgICAgICAgICAgICduYW1lc3BhY2UnLFxuICAgICAgICAgICAgJ25hbWVzcGFjZW51bWJlcicsXG4gICAgICAgICAgICAncGFnZW5hbWUnLFxuICAgICAgICAgICAgJ3Jvb3RwYWdlbmFtZScsXG4gICAgICAgICAgICAnc3ViamVjdHBhZ2VuYW1lJyxcbiAgICAgICAgICAgICdzdWJqZWN0c3BhY2UnLFxuICAgICAgICAgICAgJ3N1YnBhZ2VuYW1lJyxcbiAgICAgICAgICAgICd0YWxrcGFnZW5hbWUnLFxuICAgICAgICAgICAgJ3RhbGtzcGFjZScsXG5cbiAgICAgICAgICAgIC8vIFRlbXBsYXRlc1xuICAgICAgICAgICAgJ3BhZ2VuYW1lYmFzZScsXG4gICAgICAgIF07XG5cbiAgICAgICAgY29uc3RydWN0b3Ioc3RhcnRMb2NhdGlvbjogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uID0geyBzdGFydDogc3RhcnRMb2NhdGlvbiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHBhcnNlKCkge1xuICAgICAgICAgICAgdGhpcy5mdWxsVGV4dCA9IGNvbnRlbnQuc2xpY2UodGhpcy5sb2NhdGlvbi5zdGFydCwgdGhpcy5sb2NhdGlvbi5lbmQpO1xuICAgICAgICAgICAgdGhpcy5mdWxsVGV4dEVzY2FwZWQgPSB0aGlzLmZ1bGxUZXh0O1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN1YlRlbXBsYXRlIG9mIHRoaXMuc3ViVGVtcGxhdGVzKSB7XG4gICAgICAgICAgICAgICAgc3ViVGVtcGxhdGUucGFyc2UoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZnVsbFRleHRFc2NhcGVkID0gdGhpcy5mdWxsVGV4dEVzY2FwZWQucmVwbGFjZShzdWJUZW1wbGF0ZS5mdWxsVGV4dCEsIHRoaXMucGxhY2Vob2xkZXJTdHJpbmdzWzBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHRyaW1tZWRJbm5lclRleHQgPSB0aGlzLmZ1bGxUZXh0RXNjYXBlZC5zbGljZSgyLCAtMikudHJpbSgpO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBpcGVFc2NhcGVSZWdleCBvZiB0aGlzLnBpcGVFc2NhcGVSZWdleGVzKVxuICAgICAgICAgICAgICAgIHdoaWxlIChwaXBlRXNjYXBlUmVnZXgudGVzdCh0cmltbWVkSW5uZXJUZXh0KSlcbiAgICAgICAgICAgICAgICAgICAgdHJpbW1lZElubmVyVGV4dCA9IHRyaW1tZWRJbm5lclRleHQucmVwbGFjZUFsbChwaXBlRXNjYXBlUmVnZXgsIGAkMSR7dGhpcy5wbGFjZWhvbGRlclN0cmluZ3NbMV19JDJgKTtcblxuICAgICAgICAgICAgY29uc3QgdGFnRXF1YWxzRXNjYXBlUmVnZXhlcyA9IFsvPChcXHcrKSggW148Pl0rPykoPzwhXFwvKT4uKj88XFwvXFwxPi9nLCAvPChcXHcrKSggW148Pl0rPylcXC8+L2ddO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhZ0VxdWFsc0VzY2FwZVJlZ2V4IG9mIHRhZ0VxdWFsc0VzY2FwZVJlZ2V4ZXMpXG4gICAgICAgICAgICAgICAgdHJpbW1lZElubmVyVGV4dCA9IHRyaW1tZWRJbm5lclRleHQucmVwbGFjZUFsbCh0YWdFcXVhbHNFc2NhcGVSZWdleCwgKGZ1bGxUZXh0LCB0YWdOYW1lOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVsbFRleHQucmVwbGFjZShhdHRyaWJ1dGVzLCBhdHRyaWJ1dGVzLnJlcGxhY2VBbGwoJz0nLCB0aGlzLnBsYWNlaG9sZGVyU3RyaW5nc1syXSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gdHJpbW1lZElubmVyVGV4dC5zcGxpdCgnfCcpLm1hcCgocGFyYW1ldGVyKSA9PiBwYXJhbWV0ZXIucmVwbGFjZUFsbCh0aGlzLnBsYWNlaG9sZGVyU3RyaW5nc1sxXSwgJ3wnKS50cmltKCkpO1xuXG4gICAgICAgICAgICB0aGlzLnJhd05hbWUgPSBwYXJhbWV0ZXJzLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLnJhd05hbWU/LnJlcGxhY2VBbGwoJ18nLCAnICcpO1xuXG4gICAgICAgICAgICBjb25zdCBzcGxpdFBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzLm1hcCgocGFyYW1ldGVycykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVxdWFsc0xvY2F0aW9uID0gcGFyYW1ldGVycy5pbmRleE9mKCc9Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXF1YWxzTG9jYXRpb24gPT09IC0xKSByZXR1cm4geyBrZXk6IG51bGwsIHZhbHVlOiBwYXJhbWV0ZXJzLnJlcGxhY2VBbGwodGhpcy5wbGFjZWhvbGRlclN0cmluZ3NbMl0sICc9JykudHJpbSgpIH07XG5cbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtZXRlcnMuc2xpY2UoZXF1YWxzTG9jYXRpb24gKyAxKS5yZXBsYWNlQWxsKHRoaXMucGxhY2Vob2xkZXJTdHJpbmdzWzJdLCAnPScpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBwYXJhbWV0ZXJzLnNsaWNlKDAsIGVxdWFsc0xvY2F0aW9uKS50cmltKCksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBgJHt2YWx1ZS5zdGFydHNXaXRoKCdcXG4nKSA/ICdcXG4nIDogJyd9JHt2YWx1ZS50cmltKCl9YCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHNwbGl0UGFyYW1ldGVycztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgc2hvdWxkQmVSZW1vdmVkKCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZXNwYWNlLCB0ZW1wbGF0ZXNdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMubmFtZXNwYWNlU3BlY2lmaWNUZW1wbGF0ZXMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IE51bWJlci5wYXJzZUludChuYW1lc3BhY2UpKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZXMuaW5jbHVkZXModGhpcy5uYW1lIS50b0xvd2VyQ2FzZSgpKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgZ2V0U3R5bGUoKSB7XG4gICAgICAgICAgICBsZXQgbW9zdFNwZWNpZmljRGVmYXVsdFN0eWxlUHJlZml4TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGxldCBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVGb3JtYXRTdHlsZTogRm9ybWF0U3R5bGUgfCB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgW2Zvcm1hdFN0eWxlLCB0ZW1wbGF0ZVByZWZpeGVzXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmRlZmF1bHRUZW1wbGF0ZVN0eWxlcykpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZW1wbGF0ZVByZWZpeCBvZiB0ZW1wbGF0ZVByZWZpeGVzKVxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUhLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh0ZW1wbGF0ZVByZWZpeCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUHJlZml4Lmxlbmd0aCA+PSBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVQcmVmaXhMZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVQcmVmaXhMZW5ndGggPSB0ZW1wbGF0ZVByZWZpeC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVGb3JtYXRTdHlsZSA9IE51bWJlci5wYXJzZUludChmb3JtYXRTdHlsZSkgYXMgRm9ybWF0U3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1vc3RTcGVjaWZpY0RlZmF1bHRTdHlsZUZvcm1hdFN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBjbGVhbnVwUGFyYW1ldGVycygpIHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlUGFyYW1ldGVycyA9IG5ldyBTZXQoWydjb3ZlcicsICdpbWFnZV9mbGFnJywgJ2ltYWdlJywgJ2xvZ28nLCAnbWFwX2ltYWdlJ10pO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBudW1iZXIgPSAxOyBudW1iZXIgPD0gMTA7IG51bWJlcisrKSBpbWFnZVBhcmFtZXRlcnMuYWRkKGBpbWFnZSR7bnVtYmVyfWApO1xuXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnMubWFwKCh7IGtleSwgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgJiYgaW1hZ2VQYXJhbWV0ZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5zdGFydHNXaXRoKCdbWycpICYmIHZhbHVlLmVuZHNXaXRoKCddXScpKSB2YWx1ZSA9IC9cXFtcXFsoLio/KV1dL2cuZXhlYyh2YWx1ZSkhWzFdLnNwbGl0KCd8JylbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKEZpbGV8SW1hZ2UpOi8sICcnKS5yZXBsYWNlQWxsKCdfJywgJyAnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBrZXksIHZhbHVlIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmb3JtYXQoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZnVsbFRleHQpIHRoaXMucGFyc2UoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkQmVSZW1vdmVkKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzVG9LZWVwQ29udGVudC5pbmNsdWRlcyh0aGlzLm5hbWUhLnRvTG93ZXJDYXNlKCkpID8gdGhpcy5wYXJhbWV0ZXJzWzBdLnZhbHVlIDogJyc7XG5cbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFN1YnN0ID1cbiAgICAgICAgICAgICAgICBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpICE9PSAoTmFtZXNwYWNlLlRlbXBsYXRlIGFzIG51bWJlcikgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlc1RvU3Vic3Quc29tZSgobmFtZSkgPT4gbmFtZSA9PT0gdGhpcy5uYW1lIS50b0xvd2VyQ2FzZSgpIHx8IHRoaXMubmFtZSEudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGAke25hbWV9OmApKTtcblxuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSB0aGlzLmdldFN0eWxlKCk7XG4gICAgICAgICAgICBpZiAoc3R5bGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxldCBuZXdOYW1lID0gdGhpcy5uYW1lITtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lIS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJ3RlbXBsYXRlOicpKSBuZXdOYW1lID0gdGhpcy5uYW1lIS5zbGljZSg5KTtcblxuICAgICAgICAgICAgICAgIGlmIChzaG91bGRTdWJzdCkgbmV3TmFtZSA9IGBzdWJzdDoke25ld05hbWV9YDtcblxuICAgICAgICAgICAgICAgIGlmIChuZXdOYW1lICE9PSB0aGlzLnJhd05hbWUhKSB0aGlzLmZ1bGxUZXh0RXNjYXBlZCA9IHRoaXMuZnVsbFRleHRFc2NhcGVkIS5yZXBsYWNlKHRoaXMucmF3TmFtZSEsIG5ld05hbWUpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdWJUZW1wbGF0ZSBvZiB0aGlzLnN1YlRlbXBsYXRlcylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mdWxsVGV4dEVzY2FwZWQgPSB0aGlzLmZ1bGxUZXh0RXNjYXBlZCEucmVwbGFjZSh0aGlzLnBsYWNlaG9sZGVyU3RyaW5nc1swXSwgc3ViVGVtcGxhdGUuZm9ybWF0KCkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVsbFRleHRFc2NhcGVkITtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gW2B7eyR7c2hvdWxkU3Vic3QgPyAnc3Vic3Q6JyA6ICcnfSR7dGhpcy5uYW1lfWBdO1xuXG4gICAgICAgICAgICB0aGlzLmNsZWFudXBQYXJhbWV0ZXJzKCk7XG5cbiAgICAgICAgICAgIGlmIChzdHlsZSA9PT0gRm9ybWF0U3R5bGUuRXhwYW5kZWQgfHwgc3R5bGUgPT09IEZvcm1hdFN0eWxlLkV4cGFuZGVkQWxpZ25lZCkge1xuICAgICAgICAgICAgICAgIGxldCByZXF1aXJlZEtleUxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUgPT09IEZvcm1hdFN0eWxlLkV4cGFuZGVkQWxpZ25lZClcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRLZXlMZW5ndGggPSBNYXRoLm1heCguLi50aGlzLnBhcmFtZXRlcnMubWFwKChwYXJhbWV0ZXIpID0+IHBhcmFtZXRlci5rZXk/Lmxlbmd0aCA/PyAwKSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtpbmRleCwgcGFyYW1ldGVyXSBvZiB0aGlzLnBhcmFtZXRlcnMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICFwYXJhbWV0ZXIua2V5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhcGFyYW1ldGVyLnZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2xpY2UoaW5kZXggKyAxKS5ldmVyeSgocGFyYW1ldGVyKSA9PiBwYXJhbWV0ZXIua2V5ID8/ICFwYXJhbWV0ZXIudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGB8ICR7cGFyYW1ldGVyLmtleSA/IGAke3BhcmFtZXRlci5rZXkucGFkRW5kKHJlcXVpcmVkS2V5TGVuZ3RoKX0gPSBgIDogJyd9JHtwYXJhbWV0ZXIudmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbaW5kZXgsIHBhcmFtZXRlcl0gb2YgdGhpcy5wYXJhbWV0ZXJzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAhcGFyYW1ldGVyLnZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAocGFyYW1ldGVyLmtleSB8fCB0aGlzLnBhcmFtZXRlcnMuc2xpY2UoaW5kZXggKyAxKS5ldmVyeSgocGFyYW1ldGVyKSA9PiBwYXJhbWV0ZXIua2V5ID8/ICFwYXJhbWV0ZXIudmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChgfCR7cGFyYW1ldGVyLmtleSA/IGAke3BhcmFtZXRlci5rZXl9PWAgOiAnJ30ke3BhcmFtZXRlci52YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG91dHB1dC5wdXNoKCd9fScpO1xuXG4gICAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIG91dHB1dFswXSArPSAnfX0nO1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0LnBvcCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PT0gRm9ybWF0U3R5bGUuTWluaW1pemVkU3BhY2VkKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W291dHB1dC5sZW5ndGggLSAyXSArPSAnfX0nO1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0LnBvcCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgam9pbmVkT3V0cHV0ID0gb3V0cHV0LmpvaW4oXG4gICAgICAgICAgICAgICAgc3R5bGUgPT09IEZvcm1hdFN0eWxlLkV4cGFuZGVkIHx8IHN0eWxlID09PSBGb3JtYXRTdHlsZS5FeHBhbmRlZEFsaWduZWRcbiAgICAgICAgICAgICAgICAgICAgPyAnXFxuJ1xuICAgICAgICAgICAgICAgICAgICA6IHN0eWxlID09PSBGb3JtYXRTdHlsZS5NaW5pbWl6ZWRTcGFjZWRcbiAgICAgICAgICAgICAgICAgICAgICA/ICcgJ1xuICAgICAgICAgICAgICAgICAgICAgIDogJycsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN1YlRlbXBsYXRlIG9mIHRoaXMuc3ViVGVtcGxhdGVzKVxuICAgICAgICAgICAgICAgIGpvaW5lZE91dHB1dCA9IGpvaW5lZE91dHB1dC5yZXBsYWNlKHRoaXMucGxhY2Vob2xkZXJTdHJpbmdzWzBdLCBzdWJUZW1wbGF0ZS5mb3JtYXQoKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBqb2luZWRPdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhbGxUZW1wbGF0ZXM6IFRlbXBsYXRlW10gPSBbXTtcblxuICAgIGNvbnN0IGluc2lkZVRlbXBsYXRlczogVGVtcGxhdGVbXSA9IFtdO1xuICAgIGxldCBpc0luc2lkZUxpbmsgPSBmYWxzZTtcbiAgICBsZXQgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICBsZXQgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG5cbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gMDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29udGVudCBmb2xsb3dpbmcgdGhlIGN1cnJlbnQgbG9jYXRpb24gbWF0Y2hlcyB0aGUgZGVzaXJlZCBzdHJpbmcuXG4gICAgICogQHBhcmFtIGRlc2lyZWRTdHJpbmcgVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXRTdHJpbmcoZGVzaXJlZFN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGlzQXRTdHJpbmcgPSBjb250ZW50LnNsaWNlKGN1cnJlbnRMb2NhdGlvbiwgY3VycmVudExvY2F0aW9uICsgZGVzaXJlZFN0cmluZy5sZW5ndGgpID09PSBkZXNpcmVkU3RyaW5nO1xuXG4gICAgICAgIGlmIChpc0F0U3RyaW5nKSBjdXJyZW50TG9jYXRpb24gKz0gZGVzaXJlZFN0cmluZy5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGlzQXRTdHJpbmc7XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRMb2NhdGlvbiA8IGNvbnRlbnQubGVuZ3RoKVxuICAgICAgICBpZiAoaXNBdFN0cmluZygnPG5vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCc8L25vd2lraT4nKSkgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPCEtLScpKSBpc0luc2lkZUNvbW1lbnQgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCctLT4nKSkgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKCFpc0luc2lkZU5vd2lraSAmJiAhaXNJbnNpZGVDb21tZW50KVxuICAgICAgICAgICAgaWYgKGlzQXRTdHJpbmcoJ1tbJykpIGlzSW5zaWRlTGluayA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChpc0luc2lkZUxpbmsgJiYgaXNBdFN0cmluZygnXV0nKSkgaXNJbnNpZGVMaW5rID0gZmFsc2U7XG4gICAgICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCd7eycpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoY3VycmVudExvY2F0aW9uIC0gMik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5zaWRlVGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuaXNOZXN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpbnNpZGVUZW1wbGF0ZXMuYXQoLTEpPy5zdWJUZW1wbGF0ZXMucHVzaCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW5zaWRlVGVtcGxhdGVzLnB1c2godGVtcGxhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0F0U3RyaW5nKCd9fScpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdFRlbXBsYXRlID0gaW5zaWRlVGVtcGxhdGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghbGFzdFRlbXBsYXRlKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGxhc3RUZW1wbGF0ZS5sb2NhdGlvbi5lbmQgPSBjdXJyZW50TG9jYXRpb247XG5cbiAgICAgICAgICAgICAgICBhbGxUZW1wbGF0ZXMucHVzaChsYXN0VGVtcGxhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuICAgICAgICBlbHNlIGN1cnJlbnRMb2NhdGlvbisrO1xuXG4gICAgbGV0IG5ld0NvbnRlbnQgPSBjb250ZW50O1xuXG4gICAgZm9yIChjb25zdCB0ZW1wbGF0ZSBvZiBhbGxUZW1wbGF0ZXMpXG4gICAgICAgIGlmICghdGVtcGxhdGUuaXNOZXN0ZWQpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlLnBhcnNlKCk7XG5cbiAgICAgICAgICAgIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LnJlcGxhY2UodGVtcGxhdGUuZnVsbFRleHQhLCB0ZW1wbGF0ZS5mb3JtYXQoKSk7XG4gICAgICAgIH1cblxuICAgIHJldHVybiBuZXdDb250ZW50O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgdW5uZWNlc3NhcnkgY29tbWVudHMgZnJvbSBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNvbW1lbnRzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpICE9PSAwKSByZXR1cm4gY29udGVudDtcblxuICAgIGNvbnN0IGNvbW1lbnRzID0gW1xuICAgICAgICAnRG8gbm90IHJlbW92ZSB0aGlzIGxpbmUnLFxuICAgICAgICAnRURJVCBCRUxPVyBUSElTIExJTkUnLFxuICAgICAgICAnSW1wb3J0YW50LCBkbyBub3QgcmVtb3ZlIGFueXRoaW5nIGFib3ZlIHRoaXMgbGluZSBiZWZvcmUgYXJ0aWNsZSBoYXMgYmVlbiBjcmVhdGVkJyxcbiAgICAgICAgJ0ltcG9ydGFudCwgZG8gbm90IHJlbW92ZSB0aGlzIGxpbmUgYmVmb3JlIGFydGljbGUgaGFzIGJlZW4gY3JlYXRlZCcsXG4gICAgICAgICdJbmxpbmUgY2l0YXRpb25zIGFkZGVkIHRvIHlvdXIgYXJ0aWNsZSB3aWxsIGF1dG9tYXRpY2FsbHkgZGlzcGxheSBoZXJlJyxcbiAgICAgICAgJ05vdGU6IFRoZSBmb2xsb3dpbmcgcGFnZXMgd2VyZSByZWRpcmVjdHMgdG8gJyxcbiAgICBdO1xuXG4gICAgZm9yIChjb25zdCBjb21tZW50IG9mIGNvbW1lbnRzKVxuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKG5ldyBSZWdFeHAoYCAqPCEtLSA/JHtlc2NhcGVSZWdleENoYXJhY3RlcnMoY29tbWVudCl9Lio/LS0+ICpcXG4/YCwgJ2dzJyksICcnKTtcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7O21CQW1DUSxHQUFHLE9BQU8sSUFBSSxtQkFBbUIsRUFBSSxHQUNwQyxHQUFHLE9BQU8sSUFBSSxzQkFBc0IsR0FFekMsR0FB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Q3pCRSxFQUFTLFNBQVcsR0FDcEJGLEVBQWdCLEdBQUcsRUFBRSxHQUFHLGFBQWEsS0FBS0UsQ0FBUSxHQUd0REYsRUFBZ0IsS0FBS0UsQ0FBUSxDQUNqQyxTQUFXMUUsRUFBVyxJQUFJLEVBQUcsQ0FDekIsSUFBTTJFLEVBQWVILEVBQWdCLElBQUksRUFDekMsR0FBSSxDQUFDRyxFQUFjLFNBRW5CQSxFQUFhLFNBQVMsSUFBTTVFLEVBRTVCd0UsRUFBYSxLQUFLSSxDQUFZLENBQ2xDLE1BQU81RSxTQUNOQSxJQUVULElBQUk2RSxFQUFhakgsRUFFakIsUUFBVytHLEtBQVlILEVBQ2RHLEVBQVMsV0FDVkEsRUFBUyxNQUFNLEVBRWZFLEVBQWFBLEVBQVcsUUFBUUYsRUFBUyxTQUFXQSxFQUFTLE9BQU8sQ0FBQyxHQUc3RSxPQUFPRSxDQUNYLENBTUEsU0FBU3JILEVBQWVJLEVBQWlCLENBQ3JDLEdBQUksR0FBRyxPQUFPLElBQUksbUJBQW1CLElBQU0sRUFBRyxPQUFPQSxFQUVyRCxJQUFNa0gsRUFBVyxDQUNiLDBCQUNBLHVCQUNBLG9GQUNBLHFFQUNBLHlFQUNBLDhDQUNKLEVBRUEsUUFBV0MsS0FBV0QsRUFDbEJsSCxFQUFVQSxFQUFRLFdBQVcsSUFBSSxPQUFPLFdBQVdGLEVBQXNCcUgsQ0FBTyxDQUFDO0FBQUEsR0FBZSxJQUFJLEVBQUcsRUFBRSxFQUU3RyxPQUFPbkgsQ0FDWCIsCiAgIm5hbWVzIjogWyJsaW5rIiwgInNob3VsZEFkZFNjcmlwdE1lc3NhZ2UiLCAic2NyaXB0TWVzc2FnZSIsICJzdW1tYXJ5SW5wdXQiLCAiZXZlbnQiLCAiZWRpdEJveCIsICJvcmlnaW5hbFRleHQiLCAiZmluYWxUZXh0IiwgImNsZWFudXBTdHJheVVuaWNvZGVDaGFyYWN0ZXJzIiwgImNsZWFudXBTZWN0aW9uSGVhZGVycyIsICJjbGVhbnVwTWFnaWNXb3JkcyIsICJjbGVhbnVwRGlzcGxheXRpdGxlc0FuZERlZmF1bHRzb3J0cyIsICJjbGVhbnVwQ2F0ZWdvcmllcyIsICJjbGVhbnVwTGlua3MiLCAiY2xlYW51cEltcHJvcGVyQ2hhcmFjdGVycyIsICJjbGVhbnVwWWVhclJhbmdlcyIsICJjbGVhbnVwU3RyYXlNYXJrdXAiLCAiY2xlYW51cFNwYWNpbmciLCAiY2xlYW51cFJlZmVyZW5jZXMiLCAiZm9ybWF0VGVtcGxhdGVzIiwgInJlbW92ZUNvbW1lbnRzIiwgInN1cmZhY2VNb2RlbCIsICJlc2NhcGVSZWdleENoYXJhY3RlcnMiLCAic3RyaW5nIiwgImNvbnRlbnQiLCAic3RyYXlVbmljb2RlUmVnZXgiLCAiY29tbW9uUmVwbGFjZW1lbnRzIiwgImNvbW1vbk1pc2NhcGl0YWxpemVkV29yZHMiLCAicmV2ZXJzZUNvbW1vblJlcGxhY2VtZW50cyIsICJrZXkiLCAidmFsdWVzIiwgInZhbHVlIiwgInBhcnNlZEhlYWRlcnMiLCAiaGVhZGVyIiwgIm5hbWUiLCAic3RhcnRNYXJrdXAiLCAiZW5kTWFya3VwIiwgImxpbmtzIiwgImRlcHRoIiwgImhlYWRlcnNTZXQiLCAidGl0bGVTcGFjZXIiLCAibG93ZXJjYXNlTmFtZSIsICJjYXBpdGFsaXplZE5hbWUiLCAid29yZCIsICJvdXRwdXQiLCAicGFyc2VkVGFncyIsICJ0YWciLCAiZnVsbFRhZyIsICJ0eXBlIiwgImN1cnJlbnRUaXRsZSIsICJvcmlnaW5hbFRhZ1JlZ2V4IiwgInVucHJlZml4ZWRUaXRsZSIsICJ0aXRsZSIsICJkZWZhdWx0S2V5IiwgImN1c3RvbUtleSIsICJuZXdUZXh0IiwgImZ1bmN0aW9uc0NhbGxlZFdoaWxlRXNjYXBlZCIsICJjbG9zZWRMaW5rcyIsICJpc0luc2lkZU5vd2lraSIsICJpc0luc2lkZUNvbW1lbnQiLCAiY3VycmVudExvY2F0aW9uIiwgImlzQXRTdHJpbmciLCAiZGVzaXJlZFN0cmluZyIsICJzaG91bGRJbmNyZW1lbnQiLCAibGFzdExpbmsiLCAibmV3TGlua0NvbnRlbnQiLCAibmFtZXNwYWNlTmFtZXMiLCAibGlua0xvY2F0aW9uIiwgImlubmVyTGluayIsICJ1bnBhcnNlZExpbmsiLCAicGFyYW1ldGVycyIsICJhbHRUZXh0IiwgImlzRmlyc3RDaGFyYWN0ZXJDb2xvbiIsICJzaG91bGRGaXJzdENoYXJhY3RlckJlQ29sb24iLCAibGlua1VwcGVyY2FzZVN0YXJ0IiwgImxpbmtMb3dlcmNhc2VTdGFydCIsICJuYW1lc3BhY2UiLCAiYWZ0ZXJMaW5rVGV4dCIsICJuZXdMaW5rIiwgImZ1bmN0aW9uVG9DYWxsIiwgImxvb3BDb3VudGVyIiwgImxpbmtEYXRhIiwgImxpbmtDb250ZW50IiwgInJ1biIsICJlbGlwc2lzUGxhY2Vob2xkZXIiLCAibmJzcFBsYWNlaG9sZGVyIiwgIm9yaWdpbmFsIiwgInN0YXJ0IiwgImVuZCIsICJzdHJheU1hcmt1cFJlZ2V4ZXMiLCAicmVnZXgiLCAic2Vjb25kUnVuIiwgImZ1bGxNYXRjaCIsICJyZWZlcmVuY2VUYWciLCAicHVuY3R1YXRpb24iLCAicmVmZXJlbmNlcyIsICJwcm9jZWVkVW50aWxTdHJpbmciLCAiaXNTZWxmQ2xvc2luZyIsICJwYXJzZXIiLCAicmVwbGFjZW1lbnRzIiwgInJlZmVyZW5jZSIsICJzdGFydFRhZyIsICJ0YWdDb250ZW50IiwgIkZvcm1hdFN0eWxlIiwgIk5hbWVzcGFjZSIsICJUZW1wbGF0ZSIsICJzdGFydExvY2F0aW9uIiwgInN1YlRlbXBsYXRlIiwgInRyaW1tZWRJbm5lclRleHQiLCAicGlwZUVzY2FwZVJlZ2V4IiwgInRhZ0VxdWFsc0VzY2FwZVJlZ2V4ZXMiLCAidGFnRXF1YWxzRXNjYXBlUmVnZXgiLCAiZnVsbFRleHQiLCAidGFnTmFtZSIsICJhdHRyaWJ1dGVzIiwgInBhcmFtZXRlciIsICJzcGxpdFBhcmFtZXRlcnMiLCAiZXF1YWxzTG9jYXRpb24iLCAidGVtcGxhdGVzIiwgIm1vc3RTcGVjaWZpY0RlZmF1bHRTdHlsZVByZWZpeExlbmd0aCIsICJtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVGb3JtYXRTdHlsZSIsICJmb3JtYXRTdHlsZSIsICJ0ZW1wbGF0ZVByZWZpeGVzIiwgInRlbXBsYXRlUHJlZml4IiwgImltYWdlUGFyYW1ldGVycyIsICJudW1iZXIiLCAic2hvdWxkU3Vic3QiLCAic3R5bGUiLCAibmV3TmFtZSIsICJyZXF1aXJlZEtleUxlbmd0aCIsICJpbmRleCIsICJqb2luZWRPdXRwdXQiLCAiYWxsVGVtcGxhdGVzIiwgImluc2lkZVRlbXBsYXRlcyIsICJpc0luc2lkZUxpbmsiLCAidGVtcGxhdGUiLCAibGFzdFRlbXBsYXRlIiwgIm5ld0NvbnRlbnQiLCAiY29tbWVudHMiLCAiY29tbWVudCJdCn0K
