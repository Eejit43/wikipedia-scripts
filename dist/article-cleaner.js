// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),m=!1,o="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(m){let r=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");r.value.includes(o.slice(1))||(r.value?r.value+=`; ${o.charAt(0).toLowerCase()+o.slice(1)}`:r.value=o),m=!1}}),e.addEventListener("click",r=>{r.preventDefault();let c=$("#wpTextbox1");if(c.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let g=c.textSelection("getContents"),a=g;if(a=b(a),a=k(a),a=y(a),a=v(a),a=E(a),a=C(a),a=A(a),a=L(a),g===a)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let n=ve.init.target.getSurface().getModel();n.getLinearFragment(n.getRangeFromSourceOffsets(0,g.length)).insertContent(a),n.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else c.textSelection("setContents",a),c.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let i=document.querySelector("#wpSummary");i?i.value.includes(o.slice(1))||(i.value?i.value+=`; ${o.charAt(0).toLowerCase()+o.slice(1)}`:i.value=o):m=!0}})});function b(e){let m={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},o=["life","career"],r=Object.fromEntries(Object.entries(m).flatMap(([a,i])=>i.map(n=>[n,a]))),g=[...e.matchAll(/(?<=\n)(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(?=\n)/g)].map(a=>{let{startMarkup:i,name:n,endMarkup:p}=a.groups,d=n.replaceAll(/'{3}/g,""),t=Math.max(i.length,p.length,2);return{name:d,depth:t,original:a[0]}});for(let a of g){let n=a.name.toLowerCase()in r?r[a.name.toLowerCase()]:a.name;for(let d of o)n=n.replaceAll(new RegExp(`\\b${d}\\b`,"gi"),d);n=n.charAt(0).toUpperCase()+n.slice(1);let p=`${"=".repeat(a.depth)} ${n} ${"=".repeat(a.depth)}`;a.original!==p&&(e=e.replace(a.original,p))}return e}function k(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function y(e){let o=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(c=>{let[g,a,i]=c;return{type:a.toUpperCase(),value:i,original:g}}),r=mw.Title.newFromText(mw.config.get("wgPageName"));for(let c of o){let g=new RegExp(`${c.original.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}
*`,"g"),a=mw.Title.makeTitle(r.getNamespaceId(),c.value.includes(":")?c.value.split(":")[1]:c.value);if(r.toText()===a.toText()){e=e.replace(g,"");continue}let i=`{{${c.type}:${a.toText()}}}
`;e=e.replace(g,i)}return e}function v(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,"[[Category:$2]]")}function E(e){let m=[],o=[],r=0;function c(i,n=!0){let p=e.slice(r,r+i.length)===i;return p&&n&&(r+=i.length),p}for(;r<e.length;)if(c("[["))o.push({start:r-2,end:-1,isNested:o.length>0});else if(c("]]")){let i=o.pop();if(!i)continue;i.end=r,m.push(i)}else r++;let g=[],a=Object.values(mw.config.get("wgFormattedNamespaces"));for(let i of m){let n=e.slice(i.start+2,i.end-2),[p,...d]=n.split("|"),t=p.replaceAll("_"," ").trim(),s=d.join("|");s=s===" "?" ":s.trim();let u=t.startsWith(":");u&&(t=t.slice(1));let h=!1,l=t.charAt(0).toUpperCase()+t.slice(1),f=t.charAt(0).toLowerCase()+t.slice(1);t.includes(":")&&(l.startsWith("Image:")&&(t=`${t.startsWith("Image:")?"F":"f"}ile:${t.slice(6)}`),u&&["Image","File","Category"].includes(l.split(":")[0])&&(h=!0));let x="";t===s?s="":new RegExp(`^${t.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}[a-z]+$`).test(s)&&(x=s.slice(t.length),s="");for(let T of[l,f])T===s?(t=T,s=""):new RegExp(`^${T.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}[a-z]+$`).test(s)&&(t=T,x=s.slice(T.length),s="");let S=t.split(":")[0];S=S.charAt(0).toUpperCase()+S.slice(1),(s&&t.includes(":")&&a.includes(S)||t.startsWith("file:")||t.startsWith("category:"))&&(t=t.charAt(0).toUpperCase()+t.slice(1));let w=`[[${h?":":""}${t}${s?`|${s}`:""}]]${x}`;g.push([i,w])}for(let i=0;i<2;i++)for(let[n,p]of g)i===0&&n.isNested||i===1&&!n.isNested||(e=e.slice(0,n.start)+p.padStart(n.end-n.start,"\0")+e.slice(n.end));return e.replaceAll("\0","")}function C(e){let m=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<noinclude>\s*<\/noinclude> */g];for(let o of m)for(;o.test(e);)e=e.replace(o,"");return e}function A(e){return e=e.replaceAll(/(\b) {2,}(\b)/g,"$1 $2"),e=e.replaceAll(/(\n|^) +| +(\n|$)/g,"$1$2"),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/(\n|^)([#*]) */g,"$1$2 "),e}function L(e){let m;(l=>(l[l.Expanded=0]="Expanded",l[l.ExpandedAligned=1]="ExpandedAligned",l[l.Minimized=2]="Minimized",l[l.MinimizedSpaced=3]="MinimizedSpaced"))(m||={});class o{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"],2:["coord","start date","end date"]};constructor(s){this.location={start:s}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let l of this.subTemplates)l.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(l.fullText,this.placeholderStrings[0]);let s=this.fullTextEscaped.slice(2,-2).trim();for(let l of this.pipeEscapeRegexes)for(;l.test(s);)s=s.replaceAll(l,`$1${this.placeholderStrings[1]}$2`);let u=s.split("|").map(l=>l.replaceAll(this.placeholderStrings[1],"|").trim());this.name=u.shift();let h=u.map(l=>{let f=l.indexOf("=");if(f===-1)return{key:null,value:l.trim()};let x=l.slice(f+1);return{key:l.slice(0,f).trim(),value:`${x.startsWith(`
`)?`
`:""}${x.trim()}`}});this.parameters=h}getStyle(){for(let[s,u]of Object.entries(this.defaultTemplateStyles))for(let h of u)if(this.name.toLowerCase().startsWith(h))return Number.parseInt(s)}format(){this.fullText||this.parse();let s=this.getStyle();if(s===void 0)return this.fullText;let u=[`{{${this.name}`];if(s===0||s===1){let l=0;s===1&&(l=Math.max(...this.parameters.map(f=>f.key?.length??0)));for(let f of this.parameters)u.push(`| ${f.key?`${f.key.padEnd(l)} = `:""}${f.value}`)}else for(let l of this.parameters)l.value&&u.push(`|${l.key?`${l.key}=`:""}${l.value}`);u.push("}}"),u.length===2?(u[0]+="}}",u.pop()):s===3&&(u[u.length-2]+="}}",u.pop());let h=u.join(s===0||s===1?`
`:s===3?" ":"");for(let l of this.subTemplates)h=h.replace(this.placeholderStrings[0],l.format());return h}}let r=[],c=[],g=!1,a=!1,i=!1,n=0;function p(t,s=!0){let u=e.slice(n,n+t.length)===t;return u&&s&&(n+=t.length),u}for(;n<e.length;)if(p("<nowiki>"))a=!0;else if(p("</nowiki>"))a=!1;else if(p("<!--"))i=!0;else if(p("-->"))i=!1;else if(!a&&!i)if(p("[["))g=!0;else if(g&&p("]]"))g=!1;else if(p("{{")){let t=new o(n-2);c.length>0&&(t.isNested=!0,c.at(-1)?.subTemplates.push(t)),c.push(t)}else if(p("}}")){let t=c.pop();if(!t)continue;t.location.end=n,r.push(t)}else n++;else n++;let d=e;for(let t of r)t.isNested||(t.parse(),d=d.replace(t.fullText,t.format()));return d}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
