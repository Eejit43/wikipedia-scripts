// <pre>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{var N=new mw.Api;async function C(e){return(await N.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:e})).query.pages[0].revisions?.[0].slots.main.content.trim()}(()=>{if(mw.config.get("wgNamespaceNumber")<0||!mw.config.get("wgIsProbablyEditable"))return;let e=["mediawiki.util","jquery.textSelection"];mw.config.get("skin")!=="minerva"&&e.push("mobile.editor.overlay"),mw.loader.using(e,()=>{let p=!1,f="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";function h(n){setTimeout(()=>{n.value.includes(f.slice(1))||(n.value+=n.value&&!n.value.startsWith("/* ")&&!n.value.endsWith(" */ ")?`; ${f.charAt(0).toLowerCase()+f.slice(1)}`:f)},0),p=!1}async function o(n){n.preventDefault();let m=$(mw.config.get("skin")==="minerva"?"#wikitext-editor":"#wpTextbox1");if(m.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let d=m.textSelection("getContents"),t=d;if(t=v(t),t=M(t),t=P(t),t=_(t),t=O(t),t=F(t,[D,U]),t=H(t),t=y(t),t=G(t),t=await W(t),t=j(t),t=y(t,!0),t=B(t),d===t)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let i=ve.init.target.getSurface().getModel();i.getLinearFragment(i.getRangeFromSourceOffsets(0,d.length)).insertContent(t),i.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else m.textSelection("setContents",t),m.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let r=document.querySelector("#wpSummary");r?h(r):p=!0}}mw.config.get("skin")==="minerva"?(mw.hook("mobileFrontend.editorOpened").add(()=>{let n=document.querySelector(".overlay-header .switcher-container"),d=new OO.ui.ButtonWidget({icon:"articleCheck",framed:!1}).$element[0];d.addEventListener("click",o),n.before(d)}),mw.hook("wikipage.content").add(n=>{if(n[0]?.classList.contains("preview")&&p){let m=document.querySelector(".summary-input textarea");h(m)}})):(mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner").addEventListener("click",o),mw.hook("ve.saveDialog.stateChanged").add(()=>{if(p){let m=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");h(m)}}))})})();function L(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function v(e){let p=/[\u0000-\u0009\u000B\u000C\u000E-\u001F\u007F\u00AD\u200B-\u200F\u202A-\u202E\u2060\u2063\uFEFF]/g;return p.test(e)&&(e=e.replaceAll(p,"")),e}function M(e){let p={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},f=["and","birth","career","death","education","life","of","or"],h=Object.fromEntries(Object.entries(p).flatMap(([t,r])=>[[t.toLowerCase(),t],...r.map(i=>[i,t])])),n=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(t=>{let{name:r}=t.groups,{startMarkup:i,endMarkup:c}=t.groups;r=r.replaceAll(/'{3}/g,"");let S=r.matchAll(/\[\[(.+?)]]/g).toArray();for(let a of S)r=r.replace(a[0],a[1].split("|").at(-1));let u=Math.max(i.length,c.length,2);return{name:r,depth:u,original:t[0]}}),m=new Set(n.map(t=>t.name)),d=n.length>0&&/^\n*=+ | =+\n+$/.test(n[0].original)?" ":"";for(let t of n){let r=t.name.toLowerCase(),c=r in h&&!m.has(h[r])?h[r]:t.name;for(let u of f)c=c.replaceAll(new RegExp(`\\b${u}\\b`,"gi"),u);c=c.charAt(0).toUpperCase()+c.slice(1);let S=`${"=".repeat(t.depth)}${d}${c}${d}${"=".repeat(t.depth)}`;t.original!==S&&(e=e.replace(t.original,`

${S}
`))}return e}function P(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function _(e){let f=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(o=>{let[n,m,d]=o;return{type:m.toUpperCase(),value:d,original:n}}),h=mw.Title.newFromText(mw.config.get("wgPageName"));for(let o of f){let n=new RegExp(`${L(o.original)}
*`,"g"),m=mw.Title.newFromText(o.value);if(!m)continue;let d=mw.Title.makeTitle(h.getNamespaceId(),m.getMainText());if(!d)continue;let t=o.type==="DISPLAYTITLE"?h.toText():h.getMainText(),r=o.type==="DISPLAYTITLE"?d.toText():d.getMainText();if(t===r){e=e.replace(n,"");continue}let i=`{{${o.type}:${r}}}
`;e=e.replace(n,i)}return e}function O(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function F(e,p){let f=[],h=[],o=!1,n=!1,m=0;function d(i,c=!0){let S=e.slice(m,m+i.length)===i;return S&&c&&(m+=i.length),S}for(;m<e.length;)if(d("<nowiki>"))o=!0;else if(d("</nowiki>"))o=!1;else if(d("<!--"))n=!0;else if(d("-->"))n=!1;else if(!o&&!n)if(d("[["))h.push({start:m-2,end:-1,isNested:h.length>0});else if(d("]]")){let i=h.pop();if(!i)continue;i.end=m,f.push(i)}else m++;else m++;let t=[],r=Object.values(mw.config.get("wgFormattedNamespaces"));for(let i of f){let c=e.slice(i.start+2,i.end-2),[S,...u]=c.split("|");e=e.slice(0,i.start+2)+"\0".repeat(S.length)+e.slice(i.start+2+S.length);let a=S.replaceAll("_"," ").trim(),s=u.join("|");s=s===" "?" ":s.trim();let E=a.startsWith(":");E&&(a=a.slice(1));let b=!1,l=a.charAt(0).toUpperCase()+a.slice(1),g=a.charAt(0).toLowerCase()+a.slice(1),T=a.split(":")[0];T=T.charAt(0).toUpperCase()+T.slice(1),a.includes(":")&&(l.startsWith("Image:")&&(a=`${a.startsWith("Image:")?"F":"f"}ile:${a.slice(6)}`),E&&(["Image","File","Category"].includes(l.split(":")[0])||!r.includes(T))&&(b=!0));let w="",k="",x=/^('{2,})(.*?)\1$/.exec(s);if(x&&!x[2].includes("''")&&(w=x[1],s=x[2].trim(),k=x[1]),/[!,.:;?]$/.test(s)&&!["Image","File","Category"].includes(l.split(":")[0])){let A=s.slice(-1);a.endsWith(A)||(k+=A,s=s.slice(0,-1))}a===s?s="":new RegExp(`^${L(a)}[a-z]+$`).test(s)&&(k=s.slice(a.length)+k,s="");for(let A of[l,g])A===s?(a=A,s=""):new RegExp(`^${L(A)}[a-z]+$`).test(s)&&(a=A,k=s.slice(A.length)+k,s="");(s&&a.includes(":")&&r.includes(T)||a.startsWith("file:")||a.startsWith("category:"))&&(a=a.charAt(0).toUpperCase()+a.slice(1)),a=`${b?":":""}${a}`,a=a.padStart(S.length,"\0");let I=`${w}[[${a}${s?`|${s}`:""}]]${k}`;t.push([i,I])}for(let i of p)e=i(e,1);for(let i=0;i<2;i++)for(let[c,S]of t)i===0&&c.isNested||i===1&&!c.isNested||(e=e.slice(0,c.start)+S.padEnd(c.end-c.start,"\0")+e.slice(c.end));for(let i of p)e=i(e,2);return e.replaceAll("\0","")}function D(e,p){let f="\x7F",h="\x9F";return p===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",f),e=e.replaceAll("\xA0",h)):(e=e.replaceAll(f,"..."),e=e.replaceAll(h,"&nbsp;")),e}function U(e,p){return p===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(f,h,o)=>`${h}\u2013${o}`.padEnd(f.length,"\0"))),e}function H(e){let p=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let f of p)for(;f.test(e);)e=e.replace(f,"");return e}function y(e,p=!1){let f="\u{F0000}",h=["poem","pre","templatedata"],o=[];e=e.replaceAll(new RegExp(`(<(${h.join("|")})(?: [^<>]*?)?>)(.*?)(</\\2>)`,"gs"),(n,m,d,t,r)=>(t=t.replaceAll(/ +$/gm,"").trim(),o.push(`${m}
${t}
${r}`),f)),e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),p||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`

$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),p||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim();for(let n of o)e=e.replace(f,n);return e}function G(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>.*?<\/ref>|<ref(?!erences).*?\/>)+)([!,.;?])?/g,(r,i,c)=>(c??"")+i);let p=[],f=!1,h=!1,o=0;function n(r){let i=e.slice(o,o+r.length)===r;return i&&(o+=r.length),i}function m(r){for(;o<e.length&&!n(r);)o++}for(;o<e.length;)if(n("<nowiki>"))f=!0;else if(n("</nowiki>"))f=!1;else if(n("<!--"))h=!0;else if(n("-->"))h=!1;else if(!f&&!h)if(!n("<references")&&n("<ref")){let r=o-4;m(">");let i=e.slice(r,o-1).trim().endsWith("/");p.push(i?{start:r,end:o,isSelfClosing:i}:{start:r,end:-1})}else n("</ref>")?p.at(-1).end=o:o++;else o++;let d=new DOMParser,t=[];for(let r of p){let i=e.slice(r.start,r.end),c=/<ref(?!erences).*?>/is.exec(i)[0],u=d.parseFromString(r.isSelfClosing?c.replace(/ *\/ *>/," />"):c+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),a=i.slice(c.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();u=r.isSelfClosing||a.length===0?u.replace(/>\s*<\/ref>/," />"):`${u.slice(0,-6)}${a}</ref>`,i!==u&&t.push([i,u])}for(let[r,i]of t)e=e.replace(r,i);return e}var R;async function W(e){let p;(b=>(b[b.Expanded=0]="Expanded",b[b.ExpandedAligned=1]="ExpandedAligned",b[b.Minimized=2]="Minimized",b[b.MinimizedSpaced=3]="MinimizedSpaced"))(p||={});let f;(E=>(E[E.User=2]="User",E[E.Template=10]="Template",E[E.Draft=118]="Draft"))(f||={}),R??=JSON.parse(await C("User:Eejit43/scripts/article-cleaner.json")??"[]");let h=Object.fromEntries(R.flatMap(u=>u.from.map(a=>[a.charAt(0).toLowerCase()+a.slice(1),u.to])));class o{location;isNested=!1;fullText;fullTextEscaped;rawName;name;parameters=[];subTemplates=[];PLACEHOLDER_STRINGS=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];PIPE_ESCAPE_REGEXES=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];TAG_EQUALS_ESCAPE_REGEXES=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];TEMPLATE_ALIASES=h;DEFAULT_TEMPLATE_STYLES={1:["album rating","album reviews","american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","chembox","cricket uniform","election box","episode list","external music video","extra album cover","field hockey kit","football box","football kit","footballbox","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","judo bracket","judo repechage","listen","location map","medical resources","motorsport season","multiple image","music ratings","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","repechage","rugbybox","sidebar","single ratings","singles","song ratings","speciesbox","starbox","succession box","taxobox","team bracket","track listing","tweet","virusbox","volleyball kit","nteambracket","2nteam-nteambracket","2teambracket","3teambracket","3teamrr","4teambracket","4teamrr","5teambracket","5teamrr","6teambracket","6teamrr","7teambracket","7teamrr","8teambracket","8teamroundrobin","8teamrr","9teambracket","10teambracket","11teambracket","12teambracket","13teambracket","14teambracket","15teambracket","16teambracket","18teambracket","20teambracket","24teambracket","27teambracket","32teambracket","40teambracket","48teambracket","64teambracket","128teambracket"],2:["birth date","coord","death date","end date","lang","start date"],3:["infobox mapframe"]};NAMESPACE_SPECIFIC_TEMPLATES={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};TEMPLATES_TO_KEEP_CONTENT=["draft categories"];TEMPLATES_TO_SUBST=["articlepagename","articlespace","basepagename","fullpagename","namespace","namespacenumber","pagename","rootpagename","subjectpagename","subjectspace","subpagename","talkpagename","talkspace","pagenamebase"];IMAGE_PARAMETERS=new Set(["cover","image_flag","image","logo","map_image"]);IGNORED_IMAGE_SYNTAX=new Set(["thumb","thumbnail","frame","framed","frameless","border","right","left","center","none","baseline","middle","sub","super","text-top","text-bottom","top","bottom"]);constructor(a){this.location={start:a};for(let s=1;s<=10;s++)this.IMAGE_PARAMETERS.add(`image${s}`)}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let l of this.subTemplates)l.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(l.fullText,this.PLACEHOLDER_STRINGS[0]);let a=this.fullTextEscaped.slice(2,-2).trim();for(let l of this.PIPE_ESCAPE_REGEXES)for(;l.test(a);)a=a.replaceAll(l,`$1${this.PLACEHOLDER_STRINGS[1]}$2`);for(let l of this.TAG_EQUALS_ESCAPE_REGEXES)a=a.replaceAll(l,(g,T,w)=>g.replace(w,w.replaceAll("=",this.PLACEHOLDER_STRINGS[2])));let s=a.split("|").map(l=>l.replaceAll(this.PLACEHOLDER_STRINGS[1],"|").trim());this.rawName=s.shift(),this.name=this.rawName.replaceAll("_"," "),this.name.toLowerCase().startsWith("template:")&&(this.name=this.name.slice(9));let E=this.name.charAt(0).toLowerCase()+this.name.slice(1);if(E in this.TEMPLATE_ALIASES){let l=this.name.startsWith(this.name.charAt(0).toLowerCase()),g=this.TEMPLATE_ALIASES[E],T=g.startsWith(g.slice(0,2).toUpperCase())&&/^[A-Z]+$/.exec(g.slice(0,2));this.name=l&&!T?g.charAt(0).toLowerCase()+g.slice(1):g}let b=s.map(l=>{let g=l.indexOf("=");if(g===-1)return{key:null,value:l.replaceAll(this.PLACEHOLDER_STRINGS[2],"=").trim()};let T=l.slice(g+1).replaceAll(this.PLACEHOLDER_STRINGS[2],"=");return{key:l.slice(0,g).trim(),value:`${T.startsWith(`
`)?`
`:""}${T.trim()}`}});this.parameters=b}shouldBeRemoved(){for(let[a,s]of Object.entries(this.NAMESPACE_SPECIFIC_TEMPLATES))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(a)&&s.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let a=0,s;for(let[E,b]of Object.entries(this.DEFAULT_TEMPLATE_STYLES))for(let l of b)this.name.toLowerCase().startsWith(l)&&l.length>=a&&(a=l.length,s=Number.parseInt(E));return s}cleanupParameters(){this.parameters=this.parameters.map(({key:a,value:s})=>{if(a&&this.IMAGE_PARAMETERS.has(a)){s=s.trim();let E=s,b=[];s.startsWith("[[")&&s.endsWith("]]")&&(b=s.slice(2,-2).split("|"),s=b[0].trim()),s=s.replace(/^(File|Image):/,"").replaceAll("_"," ");let l=E.slice(2,-2).split("|").slice(1).map(g=>g.trim()).filter(g=>!this.IGNORED_IMAGE_SYNTAX.has(g)).join("|");l.length>0&&(s+=` <!-- Previous additional data: "${l}" -->`)}return{key:a,value:s}})}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.TEMPLATES_TO_KEEP_CONTENT.includes(this.name.toLowerCase())?this.parameters[0].value:"";let a=mw.config.get("wgNamespaceNumber")!==10&&this.TEMPLATES_TO_SUBST.some(l=>l===this.name.toLowerCase()||this.name.toLowerCase().startsWith(`${l}:`)),s=this.getStyle();if(s===void 0){let l=this.name;this.name.toLowerCase().startsWith("template:")&&(l=this.name.slice(9)),a&&(l=`subst:${l}`),l!==this.rawName&&(this.fullTextEscaped=this.fullTextEscaped.replace(this.rawName,l));for(let g of this.subTemplates)this.fullTextEscaped=this.fullTextEscaped.replace(this.PLACEHOLDER_STRINGS[0],g.format());return this.fullTextEscaped}let E=[`{{${a?"subst:":""}${this.name}`];if(this.cleanupParameters(),s===0||s===1){let l=0;s===1&&(l=Math.max(...this.parameters.map(g=>g.key?.length??0)));for(let[g,T]of this.parameters.entries())!T.key&&!T.value&&this.parameters.slice(g+1).every(w=>w.key??!w.value)||E.push(`| ${T.key?`${T.key.padEnd(l)} = `:""}${T.value}`)}else for(let[l,g]of this.parameters.entries())!g.value&&(g.key||this.parameters.slice(l+1).every(T=>T.key??!T.value))||E.push(`|${g.key?`${g.key}=`:""}${g.value}`);E.push("}}"),E.length===2?(E[0]+="}}",E.pop()):s===3&&(E[E.length-2]+="}}",E.pop());let b=E.join(s===0||s===1?`
`:s===3?" ":"");for(let l of this.subTemplates)b=b.replace(this.PLACEHOLDER_STRINGS[0],l.format());return b}}let n=[],m=[],d=!1,t=!1,r=!1,i=0;function c(u){let a=e.slice(i,i+u.length)===u;return a&&(i+=u.length),a}for(;i<e.length;)if(c("<nowiki>"))t=!0;else if(c("</nowiki>"))t=!1;else if(c("<!--"))r=!0;else if(c("-->"))r=!1;else if(!t&&!r)if(c("[["))d=!0;else if(d&&c("]]"))d=!1;else if(c("{{")){let u=new o(i-2);m.length>0&&(u.isNested=!0,m.at(-1)?.subTemplates.push(u)),m.push(u)}else if(c("}}")){let u=m.pop();if(!u)continue;u.location.end=i,n.push(u)}else i++;else i++;let S=e;for(let u of n)u.isNested||(u.parse(),S=S.replace(u.fullText,u.format()));return S}function j(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let p=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let f of p)e=e.replaceAll(new RegExp(` *<!-- ?${L(f)}.*?--> *
?`,"gs"),"");return e}function B(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let p=[...e.matchAll(/\[\[Category:/g)].length;return e=e.replaceAll(/\n*{{(uncategorized|improve categories)(\|.+?)?}}({{|\n+|$)/gi,""),p===0&&!/{{uncategorized/i.test(e)?e+=`

{{Uncategorized|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`:p===1&&!/{{improve categories/i.test(e)&&(e+=`

{{Improve categories|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`),e}})();

// </pre>
//# sourceMappingURL=data:application/json;base64,
