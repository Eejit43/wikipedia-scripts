// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),g=!1,m="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(g){let p=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");p.value.includes(m.slice(1))||(p.value&&!p.value.startsWith("/* ")&&!p.value.endsWith(" */ ")?p.value+=`; ${m.charAt(0).toLowerCase()+m.slice(1)}`:p.value=`${p.value}${m}`),g=!1}}),e.addEventListener("click",p=>{p.preventDefault();let n=$("#wpTextbox1");if(n.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let f=n.textSelection("getContents"),s=f;if(s=E(s),s=C(s),s=L(s),s=I(s),s=N(s),s=F(s,[M,R]),s=D(s),s=A(s),s=O(s),s=P(s),s=W(s),s=A(s,!0),f===s)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let u=ve.init.target.getSurface().getModel();u.getLinearFragment(u.getRangeFromSourceOffsets(0,f.length)).insertContent(s),u.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else n.textSelection("setContents",s),n.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let h=document.querySelector("#wpSummary");h?h.value.includes(m.slice(1))||(h.value?h.value+=`; ${m.charAt(0).toLowerCase()+m.slice(1)}`:h.value=m):g=!0}})});function S(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function E(e){let g=/[\u0000-\u0009\u000B\u000C\u000E-\u001F\u007F\u00AD\u200B-\u200F\u202A-\u202E\u2060\u2063\uFEFF]/g;return g.test(e)&&(e=e.replaceAll(g,"")),e}function C(e){let g={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},m=["and","birth","career","death","education","life","of","or"],p=Object.fromEntries(Object.entries(g).flatMap(([u,r])=>[[u.toLowerCase(),u],...r.map(a=>[a,u])])),f=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(u=>{let{name:r}=u.groups,{startMarkup:a,endMarkup:d}=u.groups;r=r.replaceAll(/'{3}/g,"");let c=r.matchAll(/\[\[(.+?)]]/g).toArray();for(let t of c)r=r.replace(t[0],t[1].split("|").at(-1));let o=Math.max(a.length,d.length,2);return{name:r,depth:o,original:u[0]}}),s=new Set(f.map(u=>u.name)),h=f.length>0&&/^\n*=+ | =+\n+$/.test(f[0].original)?" ":"";for(let u of f){let r=u.name.toLowerCase(),d=r in p&&!s.has(p[r])?p[r]:u.name;for(let o of m)d=d.replaceAll(new RegExp(`\\b${o}\\b`,"gi"),o);d=d.charAt(0).toUpperCase()+d.slice(1);let c=`${"=".repeat(u.depth)}${h}${d}${h}${"=".repeat(u.depth)}`;u.original!==c&&(e=e.replace(u.original,`

${c}
`))}return e}function L(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function I(e){let m=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(n=>{let[f,s,h]=n;return{type:s.toUpperCase(),value:h,original:f}}),p=mw.Title.newFromText(mw.config.get("wgPageName"));for(let n of m){let f=new RegExp(`${S(n.original)}
*`,"g"),s=mw.Title.newFromText(n.value);if(!s)continue;let h=mw.Title.makeTitle(p.getNamespaceId(),s.getMainText());if(!h)continue;let u=n.type==="DISPLAYTITLE"?p.toText():p.getMainText(),r=n.type==="DISPLAYTITLE"?h.toText():h.getMainText();if(u===r){e=e.replace(f,"");continue}let a=`{{${n.type}:${r}}}
`;e=e.replace(f,a)}return e}function N(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function F(e,g){let m=[],p=[],n=!1,f=!1,s=0;function h(a,d=!0){let c=e.slice(s,s+a.length)===a;return c&&d&&(s+=a.length),c}for(;s<e.length;)if(h("<nowiki>"))n=!0;else if(h("</nowiki>"))n=!1;else if(h("<!--"))f=!0;else if(h("-->"))f=!1;else if(!n&&!f)if(h("[["))p.push({start:s-2,end:-1,isNested:p.length>0});else if(h("]]")){let a=p.pop();if(!a)continue;a.end=s,m.push(a)}else s++;else s++;let u=[],r=Object.values(mw.config.get("wgFormattedNamespaces"));for(let a of m){let d=e.slice(a.start+2,a.end-2),[c,...o]=d.split("|");e=e.slice(0,a.start+2)+"\0".repeat(c.length)+e.slice(a.start+2+c.length);let t=c.replaceAll("_"," ").trim(),i=o.join("|");i=i===" "?" ":i.trim();let x=t.startsWith(":");x&&(t=t.slice(1));let l=!1,b=t.charAt(0).toUpperCase()+t.slice(1),k=t.charAt(0).toLowerCase()+t.slice(1),w=t.split(":")[0];w=w.charAt(0).toUpperCase()+w.slice(1),t.includes(":")&&(b.startsWith("Image:")&&(t=`${t.startsWith("Image:")?"F":"f"}ile:${t.slice(6)}`),x&&(["Image","File","Category"].includes(b.split(":")[0])||!r.includes(w))&&(l=!0));let y="";t===i?i="":new RegExp(`^${S(t)}[a-z]+$`).test(i)&&(y=i.slice(t.length),i="");for(let T of[b,k])T===i?(t=T,i=""):new RegExp(`^${S(T)}[a-z]+$`).test(i)&&(t=T,y=i.slice(T.length),i="");(i&&t.includes(":")&&r.includes(w)||t.startsWith("file:")||t.startsWith("category:"))&&(t=t.charAt(0).toUpperCase()+t.slice(1)),t=`${l?":":""}${t}`,t=t.padStart(c.length,"\0");let v=`[[${t}${i?`|${i}`:""}]]${y}`;u.push([a,v])}for(let a of g)e=a(e,1);for(let a=0;a<2;a++)for(let[d,c]of u)a===0&&d.isNested||a===1&&!d.isNested||(e=e.slice(0,d.start)+c.padEnd(d.end-d.start,"\0")+e.slice(d.end));for(let a of g)e=a(e,2);return e.replaceAll("\0","")}function M(e,g){let m="\x7F",p="\x9F";return g===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",m),e=e.replaceAll("\xA0",p)):(e=e.replaceAll(m,"..."),e=e.replaceAll(p,"&nbsp;")),e}function R(e,g){return g===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(m,p,n)=>`${p}\u2013${n}`.padEnd(m.length,"\0"))),e}function D(e){let g=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let m of g)for(;m.test(e);)e=e.replace(m,"");return e}function A(e,g=!1){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),g||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),g||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim(),e}function O(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>.*?<\/ref>|<ref(?!erences).*?\/>)+)([!,.;?])?/g,(r,a,d)=>(d??"")+a);let g=[],m=!1,p=!1,n=0;function f(r){let a=e.slice(n,n+r.length)===r;return a&&(n+=r.length),a}function s(r){for(;n<e.length&&!f(r);)n++}for(;n<e.length;)if(f("<nowiki>"))m=!0;else if(f("</nowiki>"))m=!1;else if(f("<!--"))p=!0;else if(f("-->"))p=!1;else if(!m&&!p)if(!f("<references")&&f("<ref")){let r=n-4;s(">");let a=e.slice(r,n-1).trim().endsWith("/");g.push(a?{start:r,end:n,isSelfClosing:a}:{start:r,end:-1})}else f("</ref>")?g.at(-1).end=n:n++;else n++;let h=new DOMParser,u=[];for(let r of g){let a=e.slice(r.start,r.end),d=/<ref(?!erences).*?>/is.exec(a)[0],o=h.parseFromString(r.isSelfClosing?d.replace(/ *\/ *>/," />"):d+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),t=a.slice(d.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();o=r.isSelfClosing||t.length===0?o.replace(/>\s*<\/ref>/," />"):`${o.slice(0,-6)}${t}</ref>`,a!==o&&u.push([a,o])}for(let[r,a]of u)e=e.replace(r,a);return e}function P(e){let g;(x=>(x[x.Expanded=0]="Expanded",x[x.ExpandedAligned=1]="ExpandedAligned",x[x.Minimized=2]="Minimized",x[x.MinimizedSpaced=3]="MinimizedSpaced"))(g||={});let m;(i=>(i[i.User=2]="User",i[i.Template=10]="Template",i[i.Draft=118]="Draft"))(m||={});class p{location;isNested=!1;fullText;fullTextEscaped;rawName;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["album rating","album reviews","american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","chembox","cricket uniform","election box","external music video","extra album cover","field hockey kit","football box","football kit","footballbox","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","judo bracket","judo repechage","listen","location map","medical resources","motorsport season","multiple image","music ratings","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","repechage","rugbybox","sidebar","single ratings","singles","song ratings","speciesbox","starbox","succession box","taxobox","team bracket","track listing","virusbox","volleyball kit","nteambracket","2nteam-nteambracket","2teambracket","3teambracket","3teamrr","4teambracket","4teamrr","5teambracket","5teamrr","6teambracket","6teamrr","7teambracket","7teamrr","8teambracket","8teamroundrobin","8teamrr","9teambracket","10teambracket","11teambracket","12teambracket","13teambracket","14teambracket","15teambracket","16teambracket","18teambracket","20teambracket","24teambracket","27teambracket","32teambracket","40teambracket","48teambracket","64teambracket","128teambracket"],2:["birth date","coord","death date","end date","lang","start date"],3:["infobox mapframe"]};namespaceSpecificTemplates={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};templatesToKeepContent=["draft categories"];templatesToSubst=["articlepagename","articlespace","basepagename","fullpagename","namespace","namespacenumber","pagename","rootpagename","subjectpagename","subjectspace","subpagename","talkpagename","talkspace","pagenamebase"];constructor(o){this.location={start:o}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let l of this.subTemplates)l.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(l.fullText,this.placeholderStrings[0]);let o=this.fullTextEscaped.slice(2,-2).trim();for(let l of this.pipeEscapeRegexes)for(;l.test(o);)o=o.replaceAll(l,`$1${this.placeholderStrings[1]}$2`);let t=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];for(let l of t)o=o.replaceAll(l,(b,k,w)=>b.replace(w,w.replaceAll("=",this.placeholderStrings[2])));let i=o.split("|").map(l=>l.replaceAll(this.placeholderStrings[1],"|").trim());this.rawName=i.shift(),this.name=this.rawName?.replaceAll("_"," ");let x=i.map(l=>{let b=l.indexOf("=");if(b===-1)return{key:null,value:l.replaceAll(this.placeholderStrings[2],"=").trim()};let k=l.slice(b+1).replaceAll(this.placeholderStrings[2],"=");return{key:l.slice(0,b).trim(),value:`${k.startsWith(`
`)?`
`:""}${k.trim()}`}});this.parameters=x}shouldBeRemoved(){for(let[o,t]of Object.entries(this.namespaceSpecificTemplates))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(o)&&t.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let o=0,t;for(let[i,x]of Object.entries(this.defaultTemplateStyles))for(let l of x)this.name.toLowerCase().startsWith(l)&&l.length>=o&&(o=l.length,t=Number.parseInt(i));return t}cleanupParameters(){let o=new Set(["cover","image_flag","image","logo","map_image"]);for(let t=1;t<=10;t++)o.add(`image${t}`);this.parameters=this.parameters.map(({key:t,value:i})=>(t&&o.has(t)&&(i=i.trim(),i.startsWith("[[")&&i.endsWith("]]")&&(i=/\[\[(.*?)]]/g.exec(i)[1].split("|")[0]),i=i.replace(/^(File|Image):/,"").replaceAll("_"," ")),{key:t,value:i}))}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.templatesToKeepContent.includes(this.name.toLowerCase())?this.parameters[0].value:"";let o=mw.config.get("wgNamespaceNumber")!==10&&this.templatesToSubst.some(l=>l===this.name.toLowerCase()||this.name.toLowerCase().startsWith(`${l}:`)),t=this.getStyle();if(t===void 0){let l=this.name;this.name.toLowerCase().startsWith("template:")&&(l=this.name.slice(9)),o&&(l=`subst:${l}`),l!==this.rawName&&(this.fullTextEscaped=this.fullTextEscaped.replace(this.rawName,l));for(let b of this.subTemplates)this.fullTextEscaped=this.fullTextEscaped.replace(this.placeholderStrings[0],b.format());return this.fullTextEscaped}let i=[`{{${o?"subst:":""}${this.name}`];if(this.cleanupParameters(),t===0||t===1){let l=0;t===1&&(l=Math.max(...this.parameters.map(b=>b.key?.length??0)));for(let[b,k]of this.parameters.entries())!k.key&&!k.value&&this.parameters.slice(b+1).every(w=>w.key??!w.value)||i.push(`| ${k.key?`${k.key.padEnd(l)} = `:""}${k.value}`)}else for(let[l,b]of this.parameters.entries())!b.value&&(b.key||this.parameters.slice(l+1).every(k=>k.key??!k.value))||i.push(`|${b.key?`${b.key}=`:""}${b.value}`);i.push("}}"),i.length===2?(i[0]+="}}",i.pop()):t===3&&(i[i.length-2]+="}}",i.pop());let x=i.join(t===0||t===1?`
`:t===3?" ":"");for(let l of this.subTemplates)x=x.replace(this.placeholderStrings[0],l.format());return x}}let n=[],f=[],s=!1,h=!1,u=!1,r=0;function a(c){let o=e.slice(r,r+c.length)===c;return o&&(r+=c.length),o}for(;r<e.length;)if(a("<nowiki>"))h=!0;else if(a("</nowiki>"))h=!1;else if(a("<!--"))u=!0;else if(a("-->"))u=!1;else if(!h&&!u)if(a("[["))s=!0;else if(s&&a("]]"))s=!1;else if(a("{{")){let c=new p(r-2);f.length>0&&(c.isNested=!0,f.at(-1)?.subTemplates.push(c)),f.push(c)}else if(a("}}")){let c=f.pop();if(!c)continue;c.location.end=r,n.push(c)}else r++;else r++;let d=e;for(let c of n)c.isNested||(c.parse(),d=d.replace(c.fullText,c.format()));return d}function W(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let g=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let m of g)e=e.replaceAll(new RegExp(` *<!-- ?${S(m)}.*?--> *
?`,"gs"),"");return e}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
