// <pre>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{var N=new mw.Api;async function C(e){return(await N.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:e})).query.pages[0].revisions?.[0].slots.main.content.trim()}(()=>{if(mw.config.get("wgNamespaceNumber")<0||!mw.config.get("wgIsProbablyEditable"))return;let e=["mediawiki.util","jquery.textSelection"];mw.config.get("skin")!=="minerva"&&e.push("mobile.editor.overlay"),mw.loader.using(e,()=>{let u=!1,d="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";function h(n){setTimeout(()=>{n.value.includes(d.slice(1))||(n.value+=n.value&&!n.value.startsWith("/* ")&&!n.value.endsWith(" */ ")?`; ${d.charAt(0).toLowerCase()+d.slice(1)}`:d)},0),u=!1}async function o(n){n.preventDefault();let m=$(mw.config.get("skin")==="minerva"?"#wikitext-editor":"#wpTextbox1");if(m.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let f=m.textSelection("getContents"),t=f;if(t=v(t),t=P(t),t=M(t),t=_(t),t=O(t),t=D(t,[F,H]),t=U(t),t=R(t),t=G(t),t=await W(t),t=j(t),t=R(t,!0),t=B(t),f===t)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let i=ve.init.target.getSurface().getModel();i.getLinearFragment(i.getRangeFromSourceOffsets(0,f.length)).insertContent(t),i.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else m.textSelection("setContents",t),m.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let r=document.querySelector("#wpSummary");r?h(r):u=!0}}mw.config.get("skin")==="minerva"?(mw.hook("mobileFrontend.editorOpened").add(()=>{let n=document.querySelector(".overlay-header .switcher-container"),f=new OO.ui.ButtonWidget({icon:"articleCheck",framed:!1}).$element[0];f.addEventListener("click",o),n.before(f)}),mw.hook("wikipage.content").add(n=>{if(n[0]?.classList.contains("preview")&&u){let m=document.querySelector(".summary-input textarea");h(m)}})):(mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner").addEventListener("click",o),mw.hook("ve.saveDialog.stateChanged").add(()=>{if(u){let m=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");h(m)}}))})})();function x(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function v(e){let u=/[\u0000-\u0009\u000B\u000C\u000E-\u001F\u007F\u00AD\u200B-\u200F\u202A-\u202E\u2060\u2063\uFEFF]/g;return u.test(e)&&(e=e.replaceAll(u,"")),e}function P(e){let u={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},d=["and","birth","career","death","education","life","of","or"],h=Object.fromEntries(Object.entries(u).flatMap(([t,r])=>[[t.toLowerCase(),t],...r.map(i=>[i,t])])),n=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(t=>{let{name:r}=t.groups,{startMarkup:i,endMarkup:c}=t.groups;r=r.replaceAll(/'{3}/g,"");let S=r.matchAll(/\[\[(.+?)]]/g).toArray();for(let a of S)r=r.replace(a[0],a[1].split("|").at(-1));let p=Math.max(i.length,c.length,2);return{name:r,depth:p,original:t[0]}}),m=new Set(n.map(t=>t.name)),f=n.length>0&&/^\n*=+ | =+\n+$/.test(n[0].original)?" ":"";for(let t of n){let r=t.name.toLowerCase(),c=r in h&&!m.has(h[r])?h[r]:t.name;for(let p of d)c=c.replaceAll(new RegExp(`\\b${p}\\b`,"gi"),p);c=c.charAt(0).toUpperCase()+c.slice(1);let S=`${"=".repeat(t.depth)}${f}${c}${f}${"=".repeat(t.depth)}`;t.original!==S&&(e=e.replace(t.original,`

${S}
`))}return e}function M(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function _(e){let d=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(o=>{let[n,m,f]=o;return{type:m.toUpperCase(),value:f,original:n}}),h=mw.Title.newFromText(mw.config.get("wgPageName"));for(let o of d){let n=new RegExp(`${x(o.original)}
*`,"g"),m=mw.Title.newFromText(o.value);if(!m)continue;let f=mw.Title.makeTitle(h.getNamespaceId(),m.getMainText());if(!f)continue;let t=o.type==="DISPLAYTITLE"?h.toText():h.getMainText(),r=o.type==="DISPLAYTITLE"?f.toText():f.getMainText();if(t===r){e=e.replace(n,"");continue}let i=`{{${o.type}:${r}}}
`;e=e.replace(n,i)}return e}function O(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function D(e,u){let d=[],h=[],o=!1,n=!1,m=0;function f(i,c=!0){let S=e.slice(m,m+i.length)===i;return S&&c&&(m+=i.length),S}for(;m<e.length;)if(f("<nowiki>"))o=!0;else if(f("</nowiki>"))o=!1;else if(f("<!--"))n=!0;else if(f("-->"))n=!1;else if(!o&&!n)if(f("[["))h.push({start:m-2,end:-1,isNested:h.length>0});else if(f("]]")){let i=h.pop();if(!i)continue;i.end=m,d.push(i)}else m++;else m++;let t=[],r=Object.values(mw.config.get("wgFormattedNamespaces"));for(let i of d){let c=e.slice(i.start+2,i.end-2),[S,...p]=c.split("|");e=e.slice(0,i.start+2)+"\0".repeat(S.length)+e.slice(i.start+2+S.length);let a=S.replaceAll("_"," ").trim(),s=p.join("|");s=s===" "?" ":s.trim();let E=a.startsWith(":");E&&(a=a.slice(1));let b=!1,l=a.charAt(0).toUpperCase()+a.slice(1),g=a.charAt(0).toLowerCase()+a.slice(1),T=a.split(":")[0];T=T.charAt(0).toUpperCase()+T.slice(1),a.includes(":")&&(l.startsWith("Image:")&&(a=`${a.startsWith("Image:")?"F":"f"}ile:${a.slice(6)}`),E&&(["Image","File","Category"].includes(l.split(":")[0])||!r.includes(T))&&(b=!0));let w="",L="",k=/^('{2,})(.*?)\1$/.exec(s);if(k&&!k[2].includes("''")&&(w=k[1],s=k[2].trim(),L=k[1]),/[!,.:;?]$/.test(s)&&!["Image","File","Category"].includes(l.split(":")[0])){let A=s.slice(-1);a.endsWith(A)||(L+=A,s=s.slice(0,-1))}a===s?s="":new RegExp(`^${x(a)}[a-z]+$`).test(s)&&(L=s.slice(a.length)+L,s="");for(let A of[l,g])A===s?(a=A,s=""):new RegExp(`^${x(A)}[a-z]+$`).test(s)&&(a=A,L=s.slice(A.length)+L,s="");(s&&a.includes(":")&&r.includes(T)||a.startsWith("file:")||a.startsWith("category:"))&&(a=a.charAt(0).toUpperCase()+a.slice(1)),a=`${b?":":""}${a}`,a=a.padStart(S.length,"\0");let I=`${w}[[${a}${s?`|${s}`:""}]]${L}`;t.push([i,I])}for(let i of u)e=i(e,1);for(let i=0;i<2;i++)for(let[c,S]of t)i===0&&c.isNested||i===1&&!c.isNested||(e=e.slice(0,c.start)+S.padEnd(c.end-c.start,"\0")+e.slice(c.end));for(let i of u)e=i(e,2);return e.replaceAll("\0","")}function F(e,u){return u===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026","\x7F"),e=e.replaceAll("\xA0","\x9F")):(e=e.replaceAll("\x7F","..."),e=e.replaceAll("\x9F","&nbsp;")),e}function H(e,u){return u===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(d,h,o)=>`${h}\u2013${o}`.padEnd(d.length,"\0"))),e}function U(e){let u=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let d of u)for(;d.test(e);)e=e.replace(d,"");return e}function R(e,u=!1){let h=["poem","pre","references","templatedata"],o=[];e=e.replaceAll(new RegExp(`(<(${h.join("|")})(?: [^<>]*?)?>)(.*?)(</\\2>)`,"gs"),(n,m,f,t,r)=>(t=t.replaceAll(/ +$/gm,"").trim(),o.push(`${m}
${t}
${r}`),"\u{F0000}")),e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}|\w>) {2,}(\b|\p{Punctuation}|\[\[|\{\{|<\w)/gu,"$1 $2"),u||(e=e.replaceAll(/^ +| +$/gm,"")),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`

$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*]+ .*)\n+(?=[#*]+ )/gm,`$1
`),u||(e=e.replaceAll(/(?<!\|)\s+(?=<ref(?!erences))/g,"")),e=e.replaceAll(/<\/([A-Za-z]+) +>/g,"</$1>"),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim();for(let n of o)e=e.replace("\u{F0000}",n);return e}function G(e){e=e.replaceAll(/((?:<ref(?!erences)[^/]*?>.*?<\/ref>|<ref(?!erences).*?\/>)+)([!,.;?])?/g,(r,i,c)=>(c??"")+i);let u=[],d=!1,h=!1,o=0;function n(r){let i=e.slice(o,o+r.length)===r;return i&&(o+=r.length),i}function m(r){for(;o<e.length&&!n(r);)o++}for(;o<e.length;)if(n("<nowiki>"))d=!0;else if(n("</nowiki>"))d=!1;else if(n("<!--"))h=!0;else if(n("-->"))h=!1;else if(!d&&!h)if(!n("<references")&&n("<ref")){let r=o-4;m(">");let i=e.slice(r,o-1).trim().endsWith("/");u.push(i?{start:r,end:o,isSelfClosing:i}:{start:r,end:-1})}else n("</ref>")?u.at(-1).end=o:o++;else o++;let f=new DOMParser,t=[];for(let r of u){let i=e.slice(r.start,r.end),c=/<ref(?!erences).*?>/is.exec(i)[0],p=f.parseFromString(r.isSelfClosing?c.replace(/ *\/ *>/," />"):c+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),a=i.slice(c.length,-6).trim().replaceAll(/^\[ *([^ \]]*) *]$/gm,"$1").trim();p=r.isSelfClosing||a.length===0?p.replace(/>\s*<\/ref>/," />"):`${p.slice(0,-6)}${a}</ref>`,i!==p&&t.push([i,p])}for(let[r,i]of t)e=e.replace(r,i);return e}var y;async function W(e){let u;(b=>(b[b.Expanded=0]="Expanded",b[b.ExpandedAligned=1]="ExpandedAligned",b[b.Minimized=2]="Minimized",b[b.MinimizedSpaced=3]="MinimizedSpaced"))(u||={});let d;(E=>(E[E.User=2]="User",E[E.Template=10]="Template",E[E.Draft=118]="Draft"))(d||={}),y??=JSON.parse(await C("User:Eejit43/scripts/article-cleaner.json")??"[]");let h=Object.fromEntries(y.flatMap(p=>p.from.map(a=>[a.charAt(0).toLowerCase()+a.slice(1),p.to])));class o{location;isNested=!1;fullText;fullTextEscaped;rawName;name;parameters=[];subTemplates=[];PLACEHOLDER_STRINGS=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];PIPE_ESCAPE_REGEXES=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];TAG_EQUALS_ESCAPE_REGEXES=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];TEMPLATE_ALIASES=h;DEFAULT_TEMPLATE_STYLES={1:["album rating","album reviews","american football uniform","australian rules football kit","automatic taxobox","baseball uniform","basketball kit","beachhandball kit","blockquote","chembox","cricket uniform","election box","episode list","external music video","extra album cover","field hockey kit","football box","football kit","footballbox","gallery","handball kit","hybridbox","icehockey kit","ichnobox","infobox","infraspeciesbox","judo bracket","judo repechage","listen","location map","medical resources","motorsport season","multiple image","music ratings","mycomorphbox","navbox","oobox","orbitbox","osm location map","quote box","repechage","rugbybox","sidebar","single ratings","singles","song ratings","speciesbox","starbox","succession box","taxobox","team bracket","track listing","tweet","virusbox","volleyball kit","nteambracket","2nteam-nteambracket","2teambracket","3teambracket","3teamrr","4teambracket","4teamrr","5teambracket","5teamrr","6teambracket","6teamrr","7teambracket","7teamrr","8teambracket","8teamroundrobin","8teamrr","9teambracket","10teambracket","11teambracket","12teambracket","13teambracket","14teambracket","15teambracket","16teambracket","18teambracket","20teambracket","24teambracket","27teambracket","32teambracket","40teambracket","48teambracket","64teambracket","128teambracket"],2:["birth date","coord","death date","end date","lang","start date"],3:["infobox mapframe"]};NAMESPACE_SPECIFIC_TEMPLATES={118:["afc comment","afc submission","afc submission/draft","afc topic","draft article","draft categories","draft topics","draft","drafts moved from mainspace","preloaddraft submit"],2:["dashboard.wikiedu.org sandbox","user sandbox","userspace draft"]};TEMPLATES_TO_KEEP_CONTENT=["draft categories"];TEMPLATES_TO_SUBST=["articlepagename","articlespace","basepagename","fullpagename","namespace","namespacenumber","pagename","rootpagename","subjectpagename","subjectspace","subpagename","talkpagename","talkspace","pagenamebase"];IMAGE_PARAMETERS=new Set(["cover","image_flag","image_seal","image_skyline","image","logo","map_image"]);IGNORED_IMAGE_SYNTAX=new Set(["thumb","thumbnail","frame","framed","frameless","border","right","left","center","none","baseline","middle","sub","super","text-top","text-bottom","top","bottom"]);constructor(a){this.location={start:a};for(let s=1;s<=10;s++)this.IMAGE_PARAMETERS.add(`image${s}`)}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let l of this.subTemplates)l.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(l.fullText,this.PLACEHOLDER_STRINGS[0]);let a=this.fullTextEscaped.slice(2,-2).trim();for(let l of this.PIPE_ESCAPE_REGEXES)for(;l.test(a);)a=a.replaceAll(l,`$1${this.PLACEHOLDER_STRINGS[1]}$2`);for(let l of this.TAG_EQUALS_ESCAPE_REGEXES)a=a.replaceAll(l,(g,T,w)=>g.replace(w,w.replaceAll("=",this.PLACEHOLDER_STRINGS[2])));let s=a.split("|").map(l=>l.replaceAll(this.PLACEHOLDER_STRINGS[1],"|").trim());this.rawName=s.shift(),this.name=this.rawName.replaceAll("_"," "),this.name.toLowerCase().startsWith("template:")&&(this.name=this.name.slice(9));let E=this.name.charAt(0).toLowerCase()+this.name.slice(1);if(E in this.TEMPLATE_ALIASES){let l=this.name.startsWith(this.name.charAt(0).toLowerCase()),g=this.TEMPLATE_ALIASES[E],T=g.startsWith(g.slice(0,2).toUpperCase())&&/^[A-Z]+$/.exec(g.slice(0,2));this.name=l&&!T?g.charAt(0).toLowerCase()+g.slice(1):g}let b=s.map(l=>{let g=l.indexOf("=");if(g===-1)return{key:null,value:l.replaceAll(this.PLACEHOLDER_STRINGS[2],"=").trim()};let T=l.slice(g+1).replaceAll(this.PLACEHOLDER_STRINGS[2],"=");return{key:l.slice(0,g).trim(),value:`${T.startsWith(`
`)?`
`:""}${T.trim()}`}});this.parameters=b}shouldBeRemoved(){for(let[a,s]of Object.entries(this.NAMESPACE_SPECIFIC_TEMPLATES))if(mw.config.get("wgNamespaceNumber")!==Number.parseInt(a)&&s.includes(this.name.toLowerCase()))return!0;return!1}getStyle(){let a=0,s;for(let[E,b]of Object.entries(this.DEFAULT_TEMPLATE_STYLES))for(let l of b)this.name.toLowerCase().startsWith(l)&&l.length>=a&&(a=l.length,s=Number.parseInt(E));return s}cleanupParameters(){this.parameters=this.parameters.map(({key:a,value:s})=>{if(a&&this.IMAGE_PARAMETERS.has(a)){s=s.trim();let E=s,b=[];s.startsWith("[[")&&s.endsWith("]]")&&(b=s.slice(2,-2).split("|"),s=b[0].trim()),s=s.replace(/^(File|Image):/,"").replaceAll("_"," ");let l=E.slice(2,-2).split("|").slice(1).map(g=>g.trim()).filter(g=>!this.IGNORED_IMAGE_SYNTAX.has(g)).join("|");l.length>0&&(s+=` <!-- Previous additional data: "${l}" -->`)}return{key:a,value:s}})}format(){if(this.fullText||this.parse(),this.shouldBeRemoved())return this.TEMPLATES_TO_KEEP_CONTENT.includes(this.name.toLowerCase())?this.parameters[0].value:"";let a=mw.config.get("wgNamespaceNumber")!==10&&this.TEMPLATES_TO_SUBST.some(l=>l===this.name.toLowerCase()||this.name.toLowerCase().startsWith(`${l}:`)),s=this.getStyle();if(s===void 0){let l=this.name;this.name.toLowerCase().startsWith("template:")&&(l=this.name.slice(9)),a&&(l=`subst:${l}`),l!==this.rawName&&(this.fullTextEscaped=this.fullTextEscaped.replace(this.rawName,l));for(let g of this.subTemplates)this.fullTextEscaped=this.fullTextEscaped.replace(this.PLACEHOLDER_STRINGS[0],g.format());return this.fullTextEscaped}let E=[`{{${a?"subst:":""}${this.name}`];if(this.cleanupParameters(),s===0||s===1){let l=0;s===1&&(l=Math.max(...this.parameters.map(g=>g.key?.length??0)));for(let[g,T]of this.parameters.entries())!T.key&&!T.value&&this.parameters.slice(g+1).every(w=>w.key??!w.value)||E.push(`| ${T.key?`${T.key.padEnd(l)} = `:""}${T.value}`)}else for(let[l,g]of this.parameters.entries())!g.value&&(g.key||this.parameters.slice(l+1).every(T=>T.key??!T.value))||E.push(`|${g.key?`${g.key}=`:""}${g.value}`);E.push("}}"),E.length===2?(E[0]+="}}",E.pop()):s===3&&(E[E.length-2]+="}}",E.pop());let b=E.join(s===0||s===1?`
`:s===3?" ":"");for(let l of this.subTemplates)b=b.replace(this.PLACEHOLDER_STRINGS[0],l.format());return b}}let n=[],m=[],f=!1,t=!1,r=!1,i=0;function c(p){let a=e.slice(i,i+p.length)===p;return a&&(i+=p.length),a}for(;i<e.length;)if(c("<nowiki>"))t=!0;else if(c("</nowiki>"))t=!1;else if(c("<!--"))r=!0;else if(c("-->"))r=!1;else if(!t&&!r)if(c("[["))f=!0;else if(f&&c("]]"))f=!1;else if(c("{{")){let p=new o(i-2);m.length>0&&(p.isNested=!0,m.at(-1)?.subTemplates.push(p)),m.push(p)}else if(c("}}")){let p=m.pop();if(!p)continue;p.location.end=i,n.push(p)}else i++;else i++;let S=e;for(let p of n)p.isNested||(p.parse(),S=S.replace(p.fullText,p.format()));return S}function j(e){if(mw.config.get("wgNamespaceNumber")!==0)return e;let u=["Do not remove this line","EDIT BELOW THIS LINE","Important, do not remove anything above this line before article has been created","Important, do not remove this line before article has been created","Inline citations added to your article will automatically display here","Note: The following pages were redirects to "];for(let d of u)e=e.replaceAll(new RegExp(` *<!-- ?${x(d)}.*?--> *
?`,"gs"),"");return e}function B(e){let u=mw.config.get("wgNamespaceNumber")!==0,d=!!new URLSearchParams(window.location.search).get("section"),h=mw.config.get("wgCategories").includes("All disambiguation pages"),o=mw.config.get("wgIsRedirect");if(u||d||h||o)return e;let n=[...e.matchAll(/\[\[Category:/g)].length;return e=e.replaceAll(/\n*{{(uncategorized|improve categories)(\|.+?)?}}({{|\n+|$)/gi,""),n===0&&!/{{uncategorized/i.test(e)?e+=`

{{Uncategorized|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`:n===1&&!/{{improve categories/i.test(e)&&(e+=`

{{Improve categories|{{subst:CURRENTMONTHNAME}} {{subst:CURRENTYEAR}}}}`),e}})();

// </pre>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vdXRpbGl0eS50cyIsICIuLi9zY3JpcHRzL2FydGljbGUtY2xlYW5lci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHR5cGUgeyBBcGlRdWVyeVJldmlzaW9uc1BhcmFtcyB9IGZyb20gJ3R5cGVzLW1lZGlhd2lraS1hcGknO1xuaW1wb3J0IHR5cGUgeyBQYWdlUmV2aXNpb25zUmVzdWx0IH0gZnJvbSAnLi9nbG9iYWwtdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgYXBpID0gbmV3IG13LkFwaSgpO1xuXG4vKipcbiAqIEZldGNoZXMgdGhlIGNvbnRlbnQgb2YgYSBnaXZlbiBwYWdlLlxuICogQHBhcmFtIHRpdGxlIFRoZSB0aXRsZSB0byBmZXRjaC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBhZ2VDb250ZW50KHRpdGxlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICAoYXdhaXQgYXBpLmdldCh7XG4gICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAnMicsXG4gICAgICAgICAgICBwcm9wOiAncmV2aXNpb25zJyxcbiAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgcnZzbG90czogJ21haW4nLFxuICAgICAgICAgICAgdGl0bGVzOiB0aXRsZSxcbiAgICAgICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlSZXZpc2lvbnNQYXJhbXMpKSBhcyBQYWdlUmV2aXNpb25zUmVzdWx0XG4gICAgKS5xdWVyeS5wYWdlc1swXS5yZXZpc2lvbnM/LlswXS5zbG90cy5tYWluLmNvbnRlbnQudHJpbSgpO1xufVxuIiwgImltcG9ydCB7IGdldFBhZ2VDb250ZW50IH0gZnJvbSAnLi4vdXRpbGl0eSc7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbiAgICBjbGFzcyBWZVJhbmdlIHtcbiAgICAgICAgY29uc3RydWN0b3Ioc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpO1xuICAgIH1cblxuICAgIGNsYXNzIFZlRnJhZ21lbnQge1xuICAgICAgICBpbnNlcnRDb250ZW50KGNvbnRlbnQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgfVxuXG4gICAgY2xhc3MgVmVTdXJmYWNlTW9kZWwge1xuICAgICAgICBnZXRMaW5lYXJGcmFnbWVudChyYW5nZTogVmVSYW5nZSk6IFZlRnJhZ21lbnQ7XG4gICAgICAgIGdldFJhbmdlRnJvbVNvdXJjZU9mZnNldHMoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBWZVJhbmdlO1xuICAgICAgICBzZXRTZWxlY3Rpb24oc2VsZWN0aW9uOiBWZUxpbmVhclNlbGVjdGlvbik6IHZvaWQ7XG4gICAgfVxuXG4gICAgY2xhc3MgVmVUYXJnZXQge1xuICAgICAgICBnZXRTdXJmYWNlKCk6IHsgZ2V0TW9kZWwoKTogVmVTdXJmYWNlTW9kZWwgfTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbiAgICBjbGFzcyBWZUxpbmVhclNlbGVjdGlvbiB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHJhbmdlOiBWZVJhbmdlKTtcbiAgICB9XG5cbiAgICBjb25zdCB2ZToge1xuICAgICAgICBSYW5nZTogdHlwZW9mIFZlUmFuZ2U7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgICAgIGRtOiB7IExpbmVhclNlbGVjdGlvbjogdHlwZW9mIFZlTGluZWFyU2VsZWN0aW9uIH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgICAgIGluaXQ/OiB7IHRhcmdldDogVmVUYXJnZXQgfTtcbiAgICB9O1xufVxuXG5leHBvcnQge307XG5cbigoKSA9PiB7XG4gICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPCAwKSByZXR1cm47IC8vIERvbid0IHJ1biBpbiB2aXJ0dWFsIG5hbWVzcGFjZXNcbiAgICBpZiAoIW13LmNvbmZpZy5nZXQoJ3dnSXNQcm9iYWJseUVkaXRhYmxlJykpIHJldHVybjsgLy8gRG9uJ3QgcnVuIGlmIHVzZXIgY2FuJ3QgZWRpdCBwYWdlXG5cbiAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBbJ21lZGlhd2lraS51dGlsJywgJ2pxdWVyeS50ZXh0U2VsZWN0aW9uJ107XG5cbiAgICBpZiAobXcuY29uZmlnLmdldCgnc2tpbicpICE9PSAnbWluZXJ2YScpIGRlcGVuZGVuY2llcy5wdXNoKCdtb2JpbGUuZWRpdG9yLm92ZXJsYXknKTtcblxuICAgIG13LmxvYWRlci51c2luZyhkZXBlbmRlbmNpZXMsICgpID0+IHtcbiAgICAgICAgbGV0IHNob3VsZEFkZFNjcmlwdE1lc3NhZ2UgPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBTQ1JJUFRfTUVTU0FHRSA9ICdDbGVhbmVkIHVwIGFydGljbGUgY29udGVudCAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvYXJ0aWNsZS1jbGVhbmVyfGFydGljbGUtY2xlYW5lcl1dKSc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIHN1bW1hcnkgdGV4dGFyZWEgd2l0aCB0aGUgc2NyaXB0IG1lc3NhZ2UgaWYgaXQgaXMgbm90IGFscmVhZHkgcHJlc2VudC5cbiAgICAgICAgICogQHBhcmFtIHRleHRhcmVhIFRoZSBzdW1tYXJ5IHRleHRhcmVhIGVsZW1lbnQgdG8gdXBkYXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlU3VtbWFyeSh0ZXh0YXJlYTogSFRNTFRleHRBcmVhRWxlbWVudCB8IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEFkZCB0aW1lb3V0IGJlZm9yZSBzZXR0aW5nIHRleHRhcmVhIHZhbHVlIGFzIHRoaXMgaXMgb3ZlcndyaXR0ZW4gc29tZXRpbWVzIGZvciBzb21lIHJlYXNvblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0ZXh0YXJlYS52YWx1ZS5pbmNsdWRlcyhTQ1JJUFRfTUVTU0FHRS5zbGljZSgxKSkpXG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnZhbHVlICs9XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS52YWx1ZSAmJiAhdGV4dGFyZWEudmFsdWUuc3RhcnRzV2l0aCgnLyogJykgJiYgIXRleHRhcmVhLnZhbHVlLmVuZHNXaXRoKCcgKi8gJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGA7ICR7U0NSSVBUX01FU1NBR0UuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBTQ1JJUFRfTUVTU0FHRS5zbGljZSgxKX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBTQ1JJUFRfTUVTU0FHRTtcbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgICAgICBzaG91bGRBZGRTY3JpcHRNZXNzYWdlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyB0aGUgY2xpY2sgZXZlbnQgZm9yIHRoZSBhY3RpdmF0aW9uIGJ1dHRvbi5cbiAgICAgICAgICogQHBhcmFtIGV2ZW50IFRoZSBtb3VzZSBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgY2xpY2suXG4gICAgICAgICAqL1xuICAgICAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3RpdmF0aW9uKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBjb25zdCBlZGl0b3IgPSAkKG13LmNvbmZpZy5nZXQoJ3NraW4nKSA9PT0gJ21pbmVydmEnID8gJyN3aWtpdGV4dC1lZGl0b3InIDogJyN3cFRleHRib3gxJyk7XG4gICAgICAgICAgICBpZiAoZWRpdG9yLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG13Lm5vdGlmeSgnRWRpdCBib3ggbm90IGZvdW5kIScsIHsgdHlwZTogJ2Vycm9yJywgYXV0b0hpZGVTZWNvbmRzOiAnc2hvcnQnIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFRleHQgPSBlZGl0b3IudGV4dFNlbGVjdGlvbignZ2V0Q29udGVudHMnKTtcblxuICAgICAgICAgICAgbGV0IGZpbmFsVGV4dCA9IG9yaWdpbmFsVGV4dDtcblxuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cFN0cmF5VW5pY29kZUNoYXJhY3RlcnMoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBTZWN0aW9uSGVhZGVycyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cE1hZ2ljV29yZHMoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBEaXNwbGF5dGl0bGVzQW5kRGVmYXVsdHNvcnRzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwQ2F0ZWdvcmllcyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cExpbmtzKGZpbmFsVGV4dCwgW2NsZWFudXBJbXByb3BlckNoYXJhY3RlcnMsIGNsZWFudXBZZWFyUmFuZ2VzXSk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwU3RyYXlNYXJrdXAoZmluYWxUZXh0KTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGNsZWFudXBTcGFjaW5nKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSBjbGVhbnVwUmVmZXJlbmNlcyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gYXdhaXQgZm9ybWF0VGVtcGxhdGVzKGZpbmFsVGV4dCk7XG4gICAgICAgICAgICBmaW5hbFRleHQgPSByZW1vdmVDb21tZW50cyhmaW5hbFRleHQpO1xuICAgICAgICAgICAgZmluYWxUZXh0ID0gY2xlYW51cFNwYWNpbmcoZmluYWxUZXh0LCB0cnVlKTtcbiAgICAgICAgICAgIGZpbmFsVGV4dCA9IGF1dG9UYWdQYWdlKGZpbmFsVGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChvcmlnaW5hbFRleHQgPT09IGZpbmFsVGV4dCkgbXcubm90aWZ5KCdObyBjaGFuZ2VzIHRvIGJlIG1hZGUgdG8gdGhlIGFydGljbGUhJywgeyB0eXBlOiAnd2FybicsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh2ZS5pbml0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1cmZhY2VNb2RlbCA9IHZlLmluaXQudGFyZ2V0LmdldFN1cmZhY2UoKS5nZXRNb2RlbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IHN1cmZhY2VNb2RlbC5nZXRMaW5lYXJGcmFnbWVudChzdXJmYWNlTW9kZWwuZ2V0UmFuZ2VGcm9tU291cmNlT2Zmc2V0cygwLCBvcmlnaW5hbFRleHQubGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50Lmluc2VydENvbnRlbnQoZmluYWxUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgc3VyZmFjZU1vZGVsLnNldFNlbGVjdGlvbihuZXcgdmUuZG0uTGluZWFyU2VsZWN0aW9uKG5ldyB2ZS5SYW5nZSgwLCAwKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci50ZXh0U2VsZWN0aW9uKCdzZXRDb250ZW50cycsIGZpbmFsVGV4dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnRleHRTZWxlY3Rpb24oJ3NldFNlbGVjdGlvbicsIHsgc3RhcnQ6IDAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbXcubm90aWZ5KCdBcnRpY2xlIGNsZWFudXAgY29tcGxldGUhJywgeyB0eXBlOiAnc3VjY2VzcycsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTElucHV0RWxlbWVudD4oJyN3cFN1bW1hcnknKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdW1tYXJ5SW5wdXQpIHVwZGF0ZVN1bW1hcnkoc3VtbWFyeUlucHV0KTtcbiAgICAgICAgICAgICAgICBlbHNlIHNob3VsZEFkZFNjcmlwdE1lc3NhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG13LmNvbmZpZy5nZXQoJ3NraW4nKSA9PT0gJ21pbmVydmEnKSB7XG4gICAgICAgICAgICAvLyBTZXQgdXAgaG9vayB0byBhZGQgYnV0dG9uIHRvIGVkaXRpbmcgdG9vbGJhclxuICAgICAgICAgICAgbXcuaG9vaygnbW9iaWxlRnJvbnRlbmQuZWRpdG9yT3BlbmVkJykuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJTd2l0Y2hlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTERpdkVsZW1lbnQ+KCcub3ZlcmxheS1oZWFkZXIgLnN3aXRjaGVyLWNvbnRhaW5lcicpITtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRvb2wgPSBuZXcgT08udWkuQnV0dG9uV2lkZ2V0KHsgaWNvbjogJ2FydGljbGVDaGVjaycsIGZyYW1lZDogZmFsc2UgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b24gPSB0b29sLiRlbGVtZW50WzBdO1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUFjdGl2YXRpb24pO1xuXG4gICAgICAgICAgICAgICAgaGVhZGVyU3dpdGNoZXIuYmVmb3JlKGJ1dHRvbik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gU2V0IHVwIGhvb2sgZm9yIHVwZGF0aW5nIGVkaXQgc3VtbWFyeVxuICAgICAgICAgICAgbXcuaG9vaygnd2lraXBhZ2UuY29udGVudCcpLmFkZCgoY29udGVudCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBpZiB0cmlnZ2VyZWQgYnkgbWFpbiBjb250ZW50IGxvYWQgaW5zdGVhZCBvZiBwcmV2aWV3XG4gICAgICAgICAgICAgICAgaWYgKCFjb250ZW50WzBdPy5jbGFzc0xpc3QuY29udGFpbnMoJ3ByZXZpZXcnKSkgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cblxuICAgICAgICAgICAgICAgIGlmIChzaG91bGRBZGRTY3JpcHRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTElucHV0RWxlbWVudD4oJy5zdW1tYXJ5LWlucHV0IHRleHRhcmVhJykhO1xuXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVN1bW1hcnkoc3VtbWFyeUlucHV0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNldCB1cCBsaW5rIGluIHNpZGUgbWVudVxuICAgICAgICAgICAgbXcudXRpbC5hZGRDU1MoYFxuI2FydGljbGUtY2xlYW5lciB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuI2NvbnRlbnQ6aGFzKCN3cFRleHRib3gxKSAjYXJ0aWNsZS1jbGVhbmVyIHtcbiAgICBkaXNwbGF5OiB1bnNldDtcbn1gKTtcblxuICAgICAgICAgICAgY29uc3QgbGluayA9IG13LnV0aWwuYWRkUG9ydGxldExpbmsoXG4gICAgICAgICAgICAgICAgbXcuY29uZmlnLmdldCgnc2tpbicpID09PSAnbWluZXJ2YScgPyAncC1uYXZpZ2F0aW9uJyA6ICdwLWNhY3Rpb25zJyxcbiAgICAgICAgICAgICAgICAnIycsXG4gICAgICAgICAgICAgICAgJ1BlcmZvcm0gYXJ0aWNsZSBjbGVhbnVwJyxcbiAgICAgICAgICAgICAgICAnYXJ0aWNsZS1jbGVhbmVyJyxcbiAgICAgICAgICAgICkhO1xuICAgICAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUFjdGl2YXRpb24pO1xuXG4gICAgICAgICAgICAvLyBTZXQgdXAgaG9vayBmb3IgdXBkYXRpbmcgZWRpdCBzdW1tYXJ5IGluIFZpc3VhbEVkaXRvclxuICAgICAgICAgICAgbXcuaG9vaygndmUuc2F2ZURpYWxvZy5zdGF0ZUNoYW5nZWQnKS5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRBZGRTY3JpcHRNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTFRleHRBcmVhRWxlbWVudD4oJy52ZS11aS1td1NhdmVEaWFsb2ctc3VtbWFyeSB0ZXh0YXJlYScpITtcblxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVTdW1tYXJ5KHN1bW1hcnlJbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKCk7XG5cbi8qKlxuICogRXNjYXBlcyByZWdleCBjaGFyYWN0ZXJzIGluIGEgc3RyaW5nLlxuICogQHBhcmFtIHN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZSByZWdleCBjaGFyYWN0ZXJzIGluLlxuICovXG5mdW5jdGlvbiBlc2NhcGVSZWdleENoYXJhY3RlcnMoc3RyaW5nOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2VBbGwoL1skKCkqKy4/W1xcXFxcXF1ee3x9XS9nLCAnXFxcXCQmJyk7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIHN0cmF5IFVuaWNvZGUgY2hhcmFjdGVycyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBTdHJheVVuaWNvZGVDaGFyYWN0ZXJzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIC8vIFRoaXMgcmVnZXggcmVtb3ZlczpcbiAgICAvLyAgIC0gQVNDSUkgY29udHJvbCBjaGFyYWN0ZXJzIChcXHUwMDAwLVxcdTAwMDksIFxcdTAwMEItXFx1MDAwQywgXFx1MDAwRS1cXHUwMDFGKVxuICAgIC8vICAgLSBERUwgKFxcdTAwN0YpXG4gICAgLy8gICAtIFNvZnQgaHlwaGVuIChcXHUwMEFEKVxuICAgIC8vICAgLSBaZXJvLXdpZHRoIGNoYXJhY3RlcnMgYW5kIGRpcmVjdGlvbmFsaXR5IG1hcmtzIChcXHUyMDBCLVxcdTIwMEYpXG4gICAgLy8gICAtIEJpZGkgb3ZlcnJpZGUgYW5kIGZvcm1hdHRpbmcgY2hhcmFjdGVycyAoXFx1MjAyQS1cXHUyMDJFKVxuICAgIC8vICAgLSBXb3JkIGpvaW5lciBhbmQgaW52aXNpYmxlIHNlcGFyYXRvciAoXFx1MjA2MCwgXFx1MjA2MylcbiAgICAvLyAgIC0gQnl0ZSBvcmRlciBtYXJrIChCT00pIChcXHVGRUZGKVxuICAgIGNvbnN0IFNUUkFZX1VOSUNPREVfUkVHRVggPSAvW1xcdTAwMDAtXFx1MDAwOVxcdTAwMEJcXHUwMDBDXFx1MDAwRS1cXHUwMDFGXFx1MDA3RlxcdTAwQURcXHUyMDBCLVxcdTIwMEZcXHUyMDJBLVxcdTIwMkVcXHUyMDYwXFx1MjA2M1xcdUZFRkZdL2c7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG4gICAgaWYgKFNUUkFZX1VOSUNPREVfUkVHRVgudGVzdChjb250ZW50KSkgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbChTVFJBWV9VTklDT0RFX1JFR0VYLCAnJyk7XG5cbiAgICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgc2VjdGlvbiBoZWFkZXJzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cFNlY3Rpb25IZWFkZXJzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGNvbnN0IENPTU1PTl9SRVBMQUNFTUVOVFMgPSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuICAgICAgICAnU2VlIGFsc28nOiBbJ2Fsc28gc2VlJ10sXG4gICAgICAgICdSZWZlcmVuY2VzJzogWydyZWZlcmVuY2UnLCAnc291cmNlJywgJ3NvdXJjZXMnLCAnY2l0YXRpb24nLCAnY2l0YXRpb25zJ10sXG4gICAgICAgICdGdXJ0aGVyIHJlYWRpbmcnOiBbJ2Z1cnRoZXIgcmVhZGluZyddLFxuICAgICAgICAnRXh0ZXJuYWwgbGlua3MnOiBbJ2V4dGVybmFsIGxpbmsnLCAnd2VibGluaycsICd3ZWJsaW5rcyddLFxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuICAgIH07XG5cbiAgICBjb25zdCBDT01NT05fTUlTQ0FQSVRBTElaRURfV09SRFMgPSBbJ2FuZCcsICdiaXJ0aCcsICdjYXJlZXInLCAnZGVhdGgnLCAnZWR1Y2F0aW9uJywgJ2xpZmUnLCAnb2YnLCAnb3InXTtcblxuICAgIGNvbnN0IHJldmVyc2VDb21tb25SZXBsYWNlbWVudHMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKENPTU1PTl9SRVBMQUNFTUVOVFMpLmZsYXRNYXAoKFtrZXksIHZhbHVlc10pID0+IFtcbiAgICAgICAgICAgIFtrZXkudG9Mb3dlckNhc2UoKSwga2V5XSxcbiAgICAgICAgICAgIC4uLih2YWx1ZXMubWFwKCh2YWx1ZSkgPT4gW3ZhbHVlLCBrZXldKSBhcyBbc3RyaW5nLCBzdHJpbmddW10pLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS10eXBlLWFzc2VydGlvblxuICAgICAgICBdKSxcbiAgICApO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IGNvbnRlbnQubWF0Y2hBbGwoLyg/PD1efFxcbilcXG4qKD88c3RhcnRNYXJrdXA+PSspICooPzxuYW1lPi4qPykgKig/PGVuZE1hcmt1cD49KykoXFxuK3wkKS9nKTtcblxuICAgIGNvbnN0IHBhcnNlZEhlYWRlcnMgPSBbLi4uaGVhZGVyc10ubWFwKChoZWFkZXIpID0+IHtcbiAgICAgICAgbGV0IHsgbmFtZSB9ID0gaGVhZGVyLmdyb3VwcyE7XG4gICAgICAgIGNvbnN0IHsgc3RhcnRNYXJrdXAsIGVuZE1hcmt1cCB9ID0gaGVhZGVyLmdyb3VwcyE7XG5cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZUFsbCgvJ3szfS9nLCAnJyk7XG5cbiAgICAgICAgY29uc3QgbGlua3MgPSBuYW1lLm1hdGNoQWxsKC9cXFtcXFsoLis/KV1dL2cpLnRvQXJyYXkoKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGxpbmsgb2YgbGlua3MpIG5hbWUgPSBuYW1lLnJlcGxhY2UobGlua1swXSwgbGlua1sxXS5zcGxpdCgnfCcpLmF0KC0xKSEpO1xuXG4gICAgICAgIGNvbnN0IGRlcHRoID0gTWF0aC5tYXgoc3RhcnRNYXJrdXAubGVuZ3RoLCBlbmRNYXJrdXAubGVuZ3RoLCAyKTtcblxuICAgICAgICByZXR1cm4geyBuYW1lLCBkZXB0aCwgb3JpZ2luYWw6IGhlYWRlclswXSB9O1xuICAgIH0pO1xuXG4gICAgY29uc3QgaGVhZGVyc1NldCA9IG5ldyBTZXQocGFyc2VkSGVhZGVycy5tYXAoKGhlYWRlcikgPT4gaGVhZGVyLm5hbWUpKTtcblxuICAgIGNvbnN0IHRpdGxlU3BhY2VyID0gcGFyc2VkSGVhZGVycy5sZW5ndGggPiAwID8gKC9eXFxuKj0rIHwgPStcXG4rJC8udGVzdChwYXJzZWRIZWFkZXJzWzBdLm9yaWdpbmFsKSA/ICcgJyA6ICcnKSA6ICcnO1xuXG4gICAgZm9yIChjb25zdCBoZWFkZXIgb2YgcGFyc2VkSGVhZGVycykge1xuICAgICAgICBjb25zdCBsb3dlcmNhc2VOYW1lID0gaGVhZGVyLm5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBjb25zdCByZXBsYWNlZE5hbWUgPVxuICAgICAgICAgICAgbG93ZXJjYXNlTmFtZSBpbiByZXZlcnNlQ29tbW9uUmVwbGFjZW1lbnRzICYmICFoZWFkZXJzU2V0LmhhcyhyZXZlcnNlQ29tbW9uUmVwbGFjZW1lbnRzW2xvd2VyY2FzZU5hbWVdKVxuICAgICAgICAgICAgICAgID8gcmV2ZXJzZUNvbW1vblJlcGxhY2VtZW50c1tsb3dlcmNhc2VOYW1lXVxuICAgICAgICAgICAgICAgIDogaGVhZGVyLm5hbWU7XG5cbiAgICAgICAgbGV0IGNhcGl0YWxpemVkTmFtZSA9IHJlcGxhY2VkTmFtZTtcblxuICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2YgQ09NTU9OX01JU0NBUElUQUxJWkVEX1dPUkRTKVxuICAgICAgICAgICAgY2FwaXRhbGl6ZWROYW1lID0gY2FwaXRhbGl6ZWROYW1lLnJlcGxhY2VBbGwobmV3IFJlZ0V4cChgXFxcXGIke3dvcmR9XFxcXGJgLCAnZ2knKSwgd29yZCk7XG5cbiAgICAgICAgY2FwaXRhbGl6ZWROYW1lID0gY2FwaXRhbGl6ZWROYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY2FwaXRhbGl6ZWROYW1lLnNsaWNlKDEpO1xuXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGAkeyc9Jy5yZXBlYXQoaGVhZGVyLmRlcHRoKX0ke3RpdGxlU3BhY2VyfSR7Y2FwaXRhbGl6ZWROYW1lfSR7dGl0bGVTcGFjZXJ9JHsnPScucmVwZWF0KGhlYWRlci5kZXB0aCl9YDtcblxuICAgICAgICBpZiAoaGVhZGVyLm9yaWdpbmFsICE9PSBvdXRwdXQpIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoaGVhZGVyLm9yaWdpbmFsLCBgXFxuXFxuJHtvdXRwdXR9XFxuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogUmVtb3ZlcyB1bm5lY2Vzc2FyeSBtYWdpYyB3b3JkcyBmcm9tIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cE1hZ2ljV29yZHMoY29udGVudDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZUFsbCgvX18oSU5ERVh8Tk9JTkRFWHxORVdTRUNUSU9OTElOS3xOT05FV1NFQ1RJT05MSU5LfE5PRURJVFNFQ1RJT058RElTQU1CSUd8U1RBVElDUkVESVJFQ1R8Rk9SQ0VUT0MpX19cXG4qL2csICcnKTtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgRElTUExBWVRJVExFcyBhbmQgREVGQVVMVFNPUlRzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cERpc3BsYXl0aXRsZXNBbmREZWZhdWx0c29ydHMoY29udGVudDogc3RyaW5nKSB7XG4gICAgY29uc3QgdGFncyA9IGNvbnRlbnQubWF0Y2hBbGwoL3t7KGRpc3BsYXl0aXRsZXxkZWZhdWx0c29ydClbOnxdKC4qPyl9fS9naSk7XG5cbiAgICBjb25zdCBwYXJzZWRUYWdzID0gWy4uLnRhZ3NdLm1hcCgodGFnKSA9PiB7XG4gICAgICAgIGNvbnN0IFtmdWxsVGFnLCB0eXBlLCB2YWx1ZV0gPSB0YWc7XG5cbiAgICAgICAgcmV0dXJuIHsgdHlwZTogdHlwZS50b1VwcGVyQ2FzZSgpLCB2YWx1ZSwgb3JpZ2luYWw6IGZ1bGxUYWcgfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGN1cnJlbnRUaXRsZSA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSkhO1xuXG4gICAgZm9yIChjb25zdCB0YWcgb2YgcGFyc2VkVGFncykge1xuICAgICAgICBjb25zdCBvcmlnaW5hbFRhZ1JlZ2V4ID0gbmV3IFJlZ0V4cChgJHtlc2NhcGVSZWdleENoYXJhY3RlcnModGFnLm9yaWdpbmFsKX1cXG4qYCwgJ2cnKTtcblxuICAgICAgICBjb25zdCB1bnByZWZpeGVkVGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dCh0YWcudmFsdWUpO1xuXG4gICAgICAgIGlmICghdW5wcmVmaXhlZFRpdGxlKSBjb250aW51ZTtcblxuICAgICAgICBjb25zdCB0aXRsZSA9IG13LlRpdGxlLm1ha2VUaXRsZShjdXJyZW50VGl0bGUuZ2V0TmFtZXNwYWNlSWQoKSwgdW5wcmVmaXhlZFRpdGxlLmdldE1haW5UZXh0KCkpO1xuXG4gICAgICAgIGlmICghdGl0bGUpIGNvbnRpbnVlO1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRLZXkgPSB0YWcudHlwZSA9PT0gJ0RJU1BMQVlUSVRMRScgPyBjdXJyZW50VGl0bGUudG9UZXh0KCkgOiBjdXJyZW50VGl0bGUuZ2V0TWFpblRleHQoKTtcblxuICAgICAgICBjb25zdCBjdXN0b21LZXkgPSB0YWcudHlwZSA9PT0gJ0RJU1BMQVlUSVRMRScgPyB0aXRsZS50b1RleHQoKSA6IHRpdGxlLmdldE1haW5UZXh0KCk7XG5cbiAgICAgICAgaWYgKGRlZmF1bHRLZXkgPT09IGN1c3RvbUtleSkge1xuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShvcmlnaW5hbFRhZ1JlZ2V4LCAnJyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld1RleHQgPSBge3ske3RhZy50eXBlfToke2N1c3RvbUtleX19fVxcbmA7XG5cbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShvcmlnaW5hbFRhZ1JlZ2V4LCBuZXdUZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgY2F0ZWdvcmllcyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBDYXRlZ29yaWVzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIHJldHVybiBjb250ZW50LnJlcGxhY2VBbGwoXG4gICAgICAgIC8oXFxbXFxbfH19KTo/Y2F0ZWdvcnk6KC4qPykoXV18fX0pL2dpLFxuICAgICAgICBgW1ske213LmNvbmZpZy5nZXQoJ3dnQ2Fub25pY2FsTmFtZXNwYWNlJykgPT09ICdEcmFmdCcgPyAnOicgOiAnJ31DYXRlZ29yeTokMl1dYCxcbiAgICApO1xufVxuXG5pbnRlcmZhY2UgTGlua0luZm9ybWF0aW9uIHtcbiAgICBzdGFydDogbnVtYmVyO1xuICAgIGVuZDogbnVtYmVyO1xuICAgIGlzTmVzdGVkOiBib29sZWFuO1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBsaW5rcyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKiBAcGFyYW0gZnVuY3Rpb25zQ2FsbGVkV2hpbGVFc2NhcGVkIFRoZSBmdW5jdGlvbnMgY2FsbGVkIHdoaWxlIHRoZSBsaW5rcyBhcmUgZXNjYXBlZC5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cExpbmtzKGNvbnRlbnQ6IHN0cmluZywgZnVuY3Rpb25zQ2FsbGVkV2hpbGVFc2NhcGVkOiAoKGNvbnRlbnQ6IHN0cmluZywgcnVuOiAxIHwgMikgPT4gc3RyaW5nKVtdKSB7XG4gICAgY29uc3QgY2xvc2VkTGlua3M6IExpbmtJbmZvcm1hdGlvbltdID0gW107XG4gICAgY29uc3QgbGlua3M6IExpbmtJbmZvcm1hdGlvbltdID0gW107XG5cbiAgICBsZXQgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICBsZXQgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG5cbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gMDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29udGVudCBmb2xsb3dpbmcgdGhlIGN1cnJlbnQgbG9jYXRpb24gbWF0Y2hlcyB0aGUgZGVzaXJlZCBzdHJpbmcuXG4gICAgICogQHBhcmFtIGRlc2lyZWRTdHJpbmcgVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSBzaG91bGRJbmNyZW1lbnQgV2hldGhlciB0byBpbmNyZW1lbnQgdGhlIGN1cnJlbnQgbG9jYXRpb24gaWYgdGhlIHN0cmluZyBpcyBmb3VuZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0F0U3RyaW5nKGRlc2lyZWRTdHJpbmc6IHN0cmluZywgc2hvdWxkSW5jcmVtZW50ID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBpc0F0U3RyaW5nID0gY29udGVudC5zbGljZShjdXJyZW50TG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbiArIGRlc2lyZWRTdHJpbmcubGVuZ3RoKSA9PT0gZGVzaXJlZFN0cmluZztcblxuICAgICAgICBpZiAoaXNBdFN0cmluZyAmJiBzaG91bGRJbmNyZW1lbnQpIGN1cnJlbnRMb2NhdGlvbiArPSBkZXNpcmVkU3RyaW5nLmxlbmd0aDtcblxuICAgICAgICByZXR1cm4gaXNBdFN0cmluZztcbiAgICB9XG5cbiAgICB3aGlsZSAoY3VycmVudExvY2F0aW9uIDwgY29udGVudC5sZW5ndGgpXG4gICAgICAgIGlmIChpc0F0U3RyaW5nKCc8bm93aWtpPicpKSBpc0luc2lkZU5vd2lraSA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGlzQXRTdHJpbmcoJzwvbm93aWtpPicpKSBpc0luc2lkZU5vd2lraSA9IGZhbHNlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCc8IS0tJykpIGlzSW5zaWRlQ29tbWVudCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGlzQXRTdHJpbmcoJy0tPicpKSBpc0luc2lkZUNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoIWlzSW5zaWRlTm93aWtpICYmICFpc0luc2lkZUNvbW1lbnQpXG4gICAgICAgICAgICBpZiAoaXNBdFN0cmluZygnW1snKSkgbGlua3MucHVzaCh7IHN0YXJ0OiBjdXJyZW50TG9jYXRpb24gLSAyLCBlbmQ6IC0xLCBpc05lc3RlZDogbGlua3MubGVuZ3RoID4gMCB9KTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQXRTdHJpbmcoJ11dJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0TGluayA9IGxpbmtzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghbGFzdExpbmspIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgbGFzdExpbmsuZW5kID0gY3VycmVudExvY2F0aW9uO1xuXG4gICAgICAgICAgICAgICAgY2xvc2VkTGlua3MucHVzaChsYXN0TGluayk7XG4gICAgICAgICAgICB9IGVsc2UgY3VycmVudExvY2F0aW9uKys7XG4gICAgICAgIGVsc2UgY3VycmVudExvY2F0aW9uKys7XG5cbiAgICBjb25zdCBuZXdMaW5rQ29udGVudDogW0xpbmtJbmZvcm1hdGlvbiwgc3RyaW5nXVtdID0gW107XG5cbiAgICBjb25zdCBuYW1lc3BhY2VOYW1lcyA9IE9iamVjdC52YWx1ZXMobXcuY29uZmlnLmdldCgnd2dGb3JtYXR0ZWROYW1lc3BhY2VzJykpO1xuXG4gICAgZm9yIChjb25zdCBsaW5rTG9jYXRpb24gb2YgY2xvc2VkTGlua3MpIHtcbiAgICAgICAgY29uc3QgaW5uZXJMaW5rID0gY29udGVudC5zbGljZShsaW5rTG9jYXRpb24uc3RhcnQgKyAyLCBsaW5rTG9jYXRpb24uZW5kIC0gMik7XG5cbiAgICAgICAgY29uc3QgW3VucGFyc2VkTGluaywgLi4ucGFyYW1ldGVyc10gPSBpbm5lckxpbmsuc3BsaXQoJ3wnKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGxpbmsgbmFtZXMgc28gdGhlc2Ugd29uJ3QgYmUgYWZmZWN0ZWQgYnkgZnVuY3Rpb25zIGNhbGxlZCB3aGlsZSBlc2NhcGVkXG4gICAgICAgIGNvbnRlbnQgPVxuICAgICAgICAgICAgY29udGVudC5zbGljZSgwLCBsaW5rTG9jYXRpb24uc3RhcnQgKyAyKSArXG4gICAgICAgICAgICAnXFwwJy5yZXBlYXQodW5wYXJzZWRMaW5rLmxlbmd0aCkgK1xuICAgICAgICAgICAgY29udGVudC5zbGljZShsaW5rTG9jYXRpb24uc3RhcnQgKyAyICsgdW5wYXJzZWRMaW5rLmxlbmd0aCk7XG5cbiAgICAgICAgbGV0IGxpbmsgPSB1bnBhcnNlZExpbmsucmVwbGFjZUFsbCgnXycsICcgJykudHJpbSgpO1xuICAgICAgICBsZXQgYWx0VGV4dCA9IHBhcmFtZXRlcnMuam9pbignfCcpO1xuICAgICAgICBhbHRUZXh0ID0gYWx0VGV4dCA9PT0gJyAnID8gJyAnIDogYWx0VGV4dC50cmltKCk7XG5cbiAgICAgICAgY29uc3QgaXNGaXJzdENoYXJhY3RlckNvbG9uID0gbGluay5zdGFydHNXaXRoKCc6Jyk7XG4gICAgICAgIGlmIChpc0ZpcnN0Q2hhcmFjdGVyQ29sb24pIGxpbmsgPSBsaW5rLnNsaWNlKDEpO1xuXG4gICAgICAgIGxldCBzaG91bGRGaXJzdENoYXJhY3RlckJlQ29sb24gPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBsaW5rVXBwZXJjYXNlU3RhcnQgPSBsaW5rLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGluay5zbGljZSgxKTtcbiAgICAgICAgY29uc3QgbGlua0xvd2VyY2FzZVN0YXJ0ID0gbGluay5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGxpbmsuc2xpY2UoMSk7XG5cbiAgICAgICAgbGV0IG5hbWVzcGFjZSA9IGxpbmsuc3BsaXQoJzonKVswXTtcbiAgICAgICAgbmFtZXNwYWNlID0gbmFtZXNwYWNlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZXNwYWNlLnNsaWNlKDEpO1xuXG4gICAgICAgIGlmIChsaW5rLmluY2x1ZGVzKCc6JykpIHtcbiAgICAgICAgICAgIGlmIChsaW5rVXBwZXJjYXNlU3RhcnQuc3RhcnRzV2l0aCgnSW1hZ2U6JykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRTdGFydFVwcGVyY2FzZSA9IGxpbmsuc3RhcnRzV2l0aCgnSW1hZ2U6Jyk7XG5cbiAgICAgICAgICAgICAgICBsaW5rID0gYCR7c2hvdWxkU3RhcnRVcHBlcmNhc2UgPyAnRicgOiAnZid9aWxlOiR7bGluay5zbGljZSg2KX1gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaXNGaXJzdENoYXJhY3RlckNvbG9uICYmXG4gICAgICAgICAgICAgICAgKFsnSW1hZ2UnLCAnRmlsZScsICdDYXRlZ29yeSddLmluY2x1ZGVzKGxpbmtVcHBlcmNhc2VTdGFydC5zcGxpdCgnOicpWzBdKSB8fCAhbmFtZXNwYWNlTmFtZXMuaW5jbHVkZXMobmFtZXNwYWNlKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBzaG91bGRGaXJzdENoYXJhY3RlckJlQ29sb24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGJlZm9yZUxpbmtUZXh0ID0gJyc7XG4gICAgICAgIGxldCBhZnRlckxpbmtUZXh0ID0gJyc7XG5cbiAgICAgICAgY29uc3QgbWF0Y2hlZE1hcmt1cCA9IC9eKCd7Mix9KSguKj8pXFwxJC8uZXhlYyhhbHRUZXh0KTtcblxuICAgICAgICBpZiAobWF0Y2hlZE1hcmt1cCAmJiAhbWF0Y2hlZE1hcmt1cFsyXS5pbmNsdWRlcyhcIicnXCIpKSB7XG4gICAgICAgICAgICBiZWZvcmVMaW5rVGV4dCA9IG1hdGNoZWRNYXJrdXBbMV07XG4gICAgICAgICAgICBhbHRUZXh0ID0gbWF0Y2hlZE1hcmt1cFsyXS50cmltKCk7XG4gICAgICAgICAgICBhZnRlckxpbmtUZXh0ID0gbWF0Y2hlZE1hcmt1cFsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgvWyEsLjo7P10kLy50ZXN0KGFsdFRleHQpICYmICFbJ0ltYWdlJywgJ0ZpbGUnLCAnQ2F0ZWdvcnknXS5pbmNsdWRlcyhsaW5rVXBwZXJjYXNlU3RhcnQuc3BsaXQoJzonKVswXSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFkZGVkUHVuY3R1YXRpb24gPSBhbHRUZXh0LnNsaWNlKC0xKTtcblxuICAgICAgICAgICAgaWYgKCFsaW5rLmVuZHNXaXRoKGFkZGVkUHVuY3R1YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgYWZ0ZXJMaW5rVGV4dCArPSBhZGRlZFB1bmN0dWF0aW9uO1xuICAgICAgICAgICAgICAgIGFsdFRleHQgPSBhbHRUZXh0LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaW5rID09PSBhbHRUZXh0KSBhbHRUZXh0ID0gJyc7XG4gICAgICAgIGVsc2UgaWYgKG5ldyBSZWdFeHAoYF4ke2VzY2FwZVJlZ2V4Q2hhcmFjdGVycyhsaW5rKX1bYS16XSskYCkudGVzdChhbHRUZXh0KSkge1xuICAgICAgICAgICAgYWZ0ZXJMaW5rVGV4dCA9IGFsdFRleHQuc2xpY2UobGluay5sZW5ndGgpICsgYWZ0ZXJMaW5rVGV4dDtcbiAgICAgICAgICAgIGFsdFRleHQgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgbmV3TGluayBvZiBbbGlua1VwcGVyY2FzZVN0YXJ0LCBsaW5rTG93ZXJjYXNlU3RhcnRdKVxuICAgICAgICAgICAgaWYgKG5ld0xpbmsgPT09IGFsdFRleHQpIHtcbiAgICAgICAgICAgICAgICBsaW5rID0gbmV3TGluaztcbiAgICAgICAgICAgICAgICBhbHRUZXh0ID0gJyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ldyBSZWdFeHAoYF4ke2VzY2FwZVJlZ2V4Q2hhcmFjdGVycyhuZXdMaW5rKX1bYS16XSskYCkudGVzdChhbHRUZXh0KSkge1xuICAgICAgICAgICAgICAgIGxpbmsgPSBuZXdMaW5rO1xuICAgICAgICAgICAgICAgIGFmdGVyTGlua1RleHQgPSBhbHRUZXh0LnNsaWNlKG5ld0xpbmsubGVuZ3RoKSArIGFmdGVyTGlua1RleHQ7XG4gICAgICAgICAgICAgICAgYWx0VGV4dCA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIChhbHRUZXh0ICYmIGxpbmsuaW5jbHVkZXMoJzonKSAmJiBuYW1lc3BhY2VOYW1lcy5pbmNsdWRlcyhuYW1lc3BhY2UpKSB8fFxuICAgICAgICAgICAgbGluay5zdGFydHNXaXRoKCdmaWxlOicpIHx8XG4gICAgICAgICAgICBsaW5rLnN0YXJ0c1dpdGgoJ2NhdGVnb3J5OicpXG4gICAgICAgIClcbiAgICAgICAgICAgIGxpbmsgPSBsaW5rLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGluay5zbGljZSgxKTtcblxuICAgICAgICBsaW5rID0gYCR7c2hvdWxkRmlyc3RDaGFyYWN0ZXJCZUNvbG9uID8gJzonIDogJyd9JHtsaW5rfWA7XG5cbiAgICAgICAgbGluayA9IGxpbmsucGFkU3RhcnQodW5wYXJzZWRMaW5rLmxlbmd0aCwgJ1xcMCcpO1xuXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGAke2JlZm9yZUxpbmtUZXh0fVtbJHtsaW5rfSR7YWx0VGV4dCA/IGB8JHthbHRUZXh0fWAgOiAnJ31dXSR7YWZ0ZXJMaW5rVGV4dH1gO1xuXG4gICAgICAgIG5ld0xpbmtDb250ZW50LnB1c2goW2xpbmtMb2NhdGlvbiwgb3V0cHV0XSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBmdW5jdGlvblRvQ2FsbCBvZiBmdW5jdGlvbnNDYWxsZWRXaGlsZUVzY2FwZWQpIGNvbnRlbnQgPSBmdW5jdGlvblRvQ2FsbChjb250ZW50LCAxKTtcblxuICAgIGZvciAobGV0IGxvb3BDb3VudGVyID0gMDsgbG9vcENvdW50ZXIgPCAyOyBsb29wQ291bnRlcisrKVxuICAgICAgICBmb3IgKGNvbnN0IFtsaW5rRGF0YSwgbGlua0NvbnRlbnRdIG9mIG5ld0xpbmtDb250ZW50KSB7XG4gICAgICAgICAgICBpZiAobG9vcENvdW50ZXIgPT09IDAgJiYgbGlua0RhdGEuaXNOZXN0ZWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAobG9vcENvdW50ZXIgPT09IDEgJiYgIWxpbmtEYXRhLmlzTmVzdGVkKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29udGVudCA9XG4gICAgICAgICAgICAgICAgY29udGVudC5zbGljZSgwLCBsaW5rRGF0YS5zdGFydCkgKyBsaW5rQ29udGVudC5wYWRFbmQobGlua0RhdGEuZW5kIC0gbGlua0RhdGEuc3RhcnQsICdcXDAnKSArIGNvbnRlbnQuc2xpY2UobGlua0RhdGEuZW5kKTtcbiAgICAgICAgfVxuXG4gICAgZm9yIChjb25zdCBmdW5jdGlvblRvQ2FsbCBvZiBmdW5jdGlvbnNDYWxsZWRXaGlsZUVzY2FwZWQpIGNvbnRlbnQgPSBmdW5jdGlvblRvQ2FsbChjb250ZW50LCAyKTtcblxuICAgIHJldHVybiBjb250ZW50LnJlcGxhY2VBbGwoJ1xcMCcsICcnKTtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgaW1wcm9wZXIgY2hhcmFjdGVycyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKiBAcGFyYW0gcnVuIFRoZSBydW4gbnVtYmVyIG9mIHRoZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2xlYW51cEltcHJvcGVyQ2hhcmFjdGVycyhjb250ZW50OiBzdHJpbmcsIHJ1bjogMSB8IDIpIHtcbiAgICBjb25zdCBFTElQU0lTX1BMQUNFSE9MREVSID0gJ1xcdTAwN0YnO1xuICAgIGNvbnN0IE5CU1BfUExBQ0VIT0xERVIgPSAnXFx1MDA5Ric7XG5cbiAgICBpZiAocnVuID09PSAxKSB7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL1tcdTIwMUNcdTIwMURcdTIwMUVcdTIwMUZdL2csICdcIicpO1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKC9bXHUyMDE4XHUyMDE5XHUyMDFBXHUyMDFCXS9nLCBcIidcIik7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoJ1x1MjAyNicsIEVMSVBTSVNfUExBQ0VIT0xERVIpO1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKCdcdTAwQTAnLCBOQlNQX1BMQUNFSE9MREVSKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKEVMSVBTSVNfUExBQ0VIT0xERVIsICcuLi4nKTtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbChOQlNQX1BMQUNFSE9MREVSLCAnJm5ic3A7Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIHllYXIgcmFuZ2VzIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqIEBwYXJhbSBydW4gVGhlIHJ1biBudW1iZXIgb2YgdGhlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjbGVhbnVwWWVhclJhbmdlcyhjb250ZW50OiBzdHJpbmcsIHJ1bjogMSB8IDIpIHtcbiAgICBpZiAocnVuID09PSAxKVxuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKC8oXFwoXFxkezMsNH0pID9bXHUyMDEyXHUyMDEzXHUyMjEyLV0gPyhcXGR7Myw0fVxcKSkvZywgKG9yaWdpbmFsLCBzdGFydCwgZW5kKSA9PlxuICAgICAgICAgICAgYCR7c3RhcnR9XHUyMDEzJHtlbmR9YC5wYWRFbmQob3JpZ2luYWwubGVuZ3RoLCAnXFwwJyksXG4gICAgICAgICk7XG5cbiAgICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHN0cmF5IG1hcmt1cCBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBTdHJheU1hcmt1cChjb250ZW50OiBzdHJpbmcpIHtcbiAgICBjb25zdCBTVFJBWV9NQVJLVVBfUkVHRVhFUyA9IFtcbiAgICAgICAgLycrKEJvbGR8SXRhbGljKSggdGV4dCk/JysgKi9nLFxuICAgICAgICAvKDxiaWc+KStCaWcoIHRleHQpPyg8XFwvYmlnPikrICovZyxcbiAgICAgICAgLyg8c21hbGw+KStTbWFsbCggdGV4dCk/KDxcXC9zbWFsbD4pKyAqL2csXG4gICAgICAgIC8oPHN1cD4pK1N1cGVyc2NyaXB0KCB0ZXh0KT8oPFxcL3N1cD4pKyAqL2csXG4gICAgICAgIC8oPHN1Yj4pK1N1YnNjcmlwdCggdGV4dCk/KDxcXC9zdWI+KSsgKi9nLFxuICAgICAgICAvKDxzPikrU3RyaWtldGhyb3VnaCg8XFwvcz4pKyAqL2csXG4gICAgICAgIC8oPHU+KStVbmRlcmxpbmUoPFxcL3U+KSsgKi9nLFxuICAgICAgICAvKDxjb2RlPikrQ29tcHV0ZXIgY29kZSg8XFwvY29kZT4pKyAqL2csXG4gICAgICAgIC8oPG5vd2lraT4pK0luc2VydCBub24tZm9ybWF0dGVkIHRleHQgaGVyZSg8XFwvbm93aWtpPikrICovZyxcbiAgICAgICAgLz0rIEhlYWRpbmcgdGV4dCA9KyAqL2csXG4gICAgICAgIC9cXCogQnVsbGV0ZWQgbGlzdCBpdGVtICovZyxcbiAgICAgICAgLyMgTnVtYmVyZWQgbGlzdCBpdGVtICovZyxcbiAgICAgICAgLzxnYWxsZXJ5PlxcbkV4YW1wbGUuanBnXFx8Q2FwdGlvbjFcXG5FeGFtcGxlLmpwZ1xcfENhcHRpb24yXFxuPFxcL2dhbGxlcnk+ICovZyxcbiAgICAgICAgLyNSRURJUkVDVCBcXFtcXFtUYXJnZXQgcGFnZSBuYW1lXV0gKi9nLFxuICAgICAgICAvPCEtLSBJbnZpc2libGUgY29tbWVudCAtLT4gKi9nLFxuICAgICAgICAvPFxccyooYmlnfHNtYWxsfHN1cHxzdWJ8c3x1fGNvZGV8bm93aWtpfG5vaW5jbHVkZXxvbmx5aW5jbHVkZXxpbmNsdWRlb25seXxjZW50ZXJ8YmxvY2txdW90ZXxnYWxsZXJ5KVxccyooXFxzK1tePD5dKik/Plxccyo8XFxzKlxcL1xccypcXDFcXHMqPi9naSxcbiAgICBdO1xuXG4gICAgZm9yIChjb25zdCByZWdleCBvZiBTVFJBWV9NQVJLVVBfUkVHRVhFUykgd2hpbGUgKHJlZ2V4LnRlc3QoY29udGVudCkpIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UocmVnZXgsICcnKTtcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBzcGFjaW5nIGluIGFuIGFydGljbGUncyBjb250ZW50LlxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGFydGljbGUgY29udGVudCB0byBjbGVhbiB1cC5cbiAqIEBwYXJhbSBzZWNvbmRSdW4gV2hldGhlciB0aGUgZnVuY3Rpb24gaXMgYmVpbmcgcnVuIGZvciB0aGUgc2Vjb25kIHRpbWUsIGFmdGVyIG90aGVyIHByb2Nlc3NpbmcuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBTcGFjaW5nKGNvbnRlbnQ6IHN0cmluZywgc2Vjb25kUnVuID0gZmFsc2UpIHtcbiAgICBjb25zdCBQTEFDRUhPTERFUiA9ICdcXHV7RjAwMDB9JztcblxuICAgIGNvbnN0IFRBR1NfVE9fSUdOT1JFID0gWydwb2VtJywgJ3ByZScsICdyZWZlcmVuY2VzJywgJ3RlbXBsYXRlZGF0YSddO1xuXG4gICAgY29uc3QgaWdub3JlZFRhZ3NDb250ZW50OiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbChcbiAgICAgICAgbmV3IFJlZ0V4cChgKDwoJHtUQUdTX1RPX0lHTk9SRS5qb2luKCd8Jyl9KSg/OiBbXjw+XSo/KT8+KSguKj8pKDwvXFxcXDI+KWAsICdncycpLFxuICAgICAgICAoZnVsbE1hdGNoLCBzdGFydFRhZzogc3RyaW5nLCB0YWdOYW1lOiBzdHJpbmcsIGlubmVyQ29udGVudDogc3RyaW5nLCBlbmRUYWc6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaW5uZXJDb250ZW50ID0gaW5uZXJDb250ZW50LnJlcGxhY2VBbGwoLyArJC9nbSwgJycpLnRyaW0oKTtcblxuICAgICAgICAgICAgaWdub3JlZFRhZ3NDb250ZW50LnB1c2goYCR7c3RhcnRUYWd9XFxuJHtpbm5lckNvbnRlbnR9XFxuJHtlbmRUYWd9YCk7XG5cbiAgICAgICAgICAgIHJldHVybiBQTEFDRUhPTERFUjtcbiAgICAgICAgfSxcbiAgICApO1xuXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvKFxcYnxcXHB7UHVuY3R1YXRpb259fFxcXVxcXXxcXH1cXH18XFx3PikgezIsfShcXGJ8XFxwe1B1bmN0dWF0aW9ufXxcXFtcXFt8XFx7XFx7fDxcXHcpL2d1LCAnJDEgJDInKTsgLy8gUmVtb3ZlIGV4dHJhIHNwYWNlcyBiZXR3ZWVuIHdvcmRzIGFuZCBzZW50ZW5jZXNcbiAgICBpZiAoIXNlY29uZFJ1bikgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvXiArfCArJC9nbSwgJycpOyAvLyBSZW1vdmUgZXh0cmEgc3BhY2VzIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgbGluZXNcbiAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKC9cXG57Myx9L2csICdcXG5cXG4nKTsgLy8gUmVtb3ZlIGV4dHJhIG5ld2xpbmVzXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXFxzKih7e1tefV0qc3R1Yn19KS9pLCAnXFxuXFxuJDEnKTsgLy8gRW5zdXJlIHRoZXJlIGlzIG9uZSBibGFuayBsaW5lIGJlZm9yZSB0aGUgZmlyc3Qgc3R1YiB0ZW1wbGF0ZVxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL1xccyskL2csICcnKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIHNwYWNlc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oWyMqXSspICovZ20sICckMSAnKTsgLy8gRW5zdXJlIHRoZXJlIGlzIGEgc3BhY2UgYWZ0ZXIgYSBidWxsZXQgb3IgaGFzaCBpbiBhIGxpc3QgaXRlbVxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oWyMqXSsgLiopXFxuKyg/PVsjKl0rICkvZ20sICckMVxcbicpOyAvLyBSZW1vdmUgbmV3bGluZXMgYmV0d2VlbiBsaXN0IGl0ZW1zXG4gICAgaWYgKCFzZWNvbmRSdW4pIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoLyg/PCFcXHwpXFxzKyg/PTxyZWYoPyFlcmVuY2VzKSkvZywgJycpOyAvLyBSZW1vdmUgc3BhY2VzIGJlZm9yZSByZWZlcmVuY2VzXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvPFxcLyhbQS1aYS16XSspICs+L2csICc8LyQxPicpOyAvLyBSZW1vdmUgZXhjZXNzIHNwYWNlIGluIGNsb3NpbmcgdGFnc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoL14oPSsuKj89KykkXFxuezIsfSg/PV49Ky4qPz0rJCkvZ20sICckMVxcbicpOyAvLyBSZW1vdmUgZXh0cmEgbmV3bGluZXMgYmV0d2VlbiBlbXB0eSBzZWN0aW9uIGFuZCBmb2xsb3dpbmcgc2VjdGlvblxuICAgIGNvbnRlbnQgPSBjb250ZW50LnRyaW0oKTsgLy8gUmVtb3ZlIHdoaXRlc3BhY2UgYXQgdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgY29udGVudFxuXG4gICAgLy8gQWRkIGJhY2sgaWdub3JlZCB0YWdzXG4gICAgZm9yIChjb25zdCB0YWdDb250ZW50IG9mIGlnbm9yZWRUYWdzQ29udGVudCkgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShQTEFDRUhPTERFUiwgdGFnQ29udGVudCk7XG5cbiAgICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgcmVmZXJlbmNlcyBpbiBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gY2xlYW4gdXAuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBSZWZlcmVuY2VzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2VBbGwoXG4gICAgICAgIC8oKD86PHJlZig/IWVyZW5jZXMpW14vXSo/Pi4qPzxcXC9yZWY+fDxyZWYoPyFlcmVuY2VzKS4qP1xcLz4pKykoWyEsLjs/XSk/L2csXG4gICAgICAgIChmdWxsTWF0Y2gsIHJlZmVyZW5jZVRhZzogc3RyaW5nLCBwdW5jdHVhdGlvbjogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiAocHVuY3R1YXRpb24gPz8gJycpICsgcmVmZXJlbmNlVGFnLFxuICAgICk7IC8vIEZpeCBwdW5jdHVhdGlvbiBmb2xsb3dpbmcgcmVmZXJlbmNlc1xuXG4gICAgY29uc3QgcmVmZXJlbmNlczogeyBzdGFydDogbnVtYmVyOyBlbmQ6IG51bWJlcjsgaXNTZWxmQ2xvc2luZz86IHRydWUgfVtdID0gW107XG5cbiAgICBsZXQgaXNJbnNpZGVOb3dpa2kgPSBmYWxzZTtcbiAgICBsZXQgaXNJbnNpZGVDb21tZW50ID0gZmFsc2U7XG5cbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gMDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29udGVudCBmb2xsb3dpbmcgdGhlIGN1cnJlbnQgbG9jYXRpb24gbWF0Y2hlcyB0aGUgZGVzaXJlZCBzdHJpbmcuXG4gICAgICogQHBhcmFtIGRlc2lyZWRTdHJpbmcgVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXRTdHJpbmcoZGVzaXJlZFN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGlzQXRTdHJpbmcgPSBjb250ZW50LnNsaWNlKGN1cnJlbnRMb2NhdGlvbiwgY3VycmVudExvY2F0aW9uICsgZGVzaXJlZFN0cmluZy5sZW5ndGgpID09PSBkZXNpcmVkU3RyaW5nO1xuXG4gICAgICAgIGlmIChpc0F0U3RyaW5nKSBjdXJyZW50TG9jYXRpb24gKz0gZGVzaXJlZFN0cmluZy5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGlzQXRTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VlZHMgdGhyb3VnaCB0aGUgY29udGVudCB1bnRpbCB0aGUgZGVzaXJlZCBzdHJpbmcgaXMgZm91bmQuXG4gICAgICogQHBhcmFtIGRlc2lyZWRTdHJpbmcgVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb2NlZWRVbnRpbFN0cmluZyhkZXNpcmVkU3RyaW5nOiBzdHJpbmcpIHtcbiAgICAgICAgd2hpbGUgKGN1cnJlbnRMb2NhdGlvbiA8IGNvbnRlbnQubGVuZ3RoICYmICFpc0F0U3RyaW5nKGRlc2lyZWRTdHJpbmcpKSBjdXJyZW50TG9jYXRpb24rKztcbiAgICB9XG5cbiAgICB3aGlsZSAoY3VycmVudExvY2F0aW9uIDwgY29udGVudC5sZW5ndGgpXG4gICAgICAgIGlmIChpc0F0U3RyaW5nKCc8bm93aWtpPicpKSBpc0luc2lkZU5vd2lraSA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGlzQXRTdHJpbmcoJzwvbm93aWtpPicpKSBpc0luc2lkZU5vd2lraSA9IGZhbHNlO1xuICAgICAgICBlbHNlIGlmIChpc0F0U3RyaW5nKCc8IS0tJykpIGlzSW5zaWRlQ29tbWVudCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGlzQXRTdHJpbmcoJy0tPicpKSBpc0luc2lkZUNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoIWlzSW5zaWRlTm93aWtpICYmICFpc0luc2lkZUNvbW1lbnQpXG4gICAgICAgICAgICBpZiAoIWlzQXRTdHJpbmcoJzxyZWZlcmVuY2VzJykgJiYgaXNBdFN0cmluZygnPHJlZicpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBjdXJyZW50TG9jYXRpb24gLSA0O1xuXG4gICAgICAgICAgICAgICAgcHJvY2VlZFVudGlsU3RyaW5nKCc+Jyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpc1NlbGZDbG9zaW5nID0gY29udGVudFxuICAgICAgICAgICAgICAgICAgICAuc2xpY2Uoc3RhcnQsIGN1cnJlbnRMb2NhdGlvbiAtIDEpXG4gICAgICAgICAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAgICAgICAgICAgLmVuZHNXaXRoKCcvJyk7XG5cbiAgICAgICAgICAgICAgICByZWZlcmVuY2VzLnB1c2goaXNTZWxmQ2xvc2luZyA/IHsgc3RhcnQsIGVuZDogY3VycmVudExvY2F0aW9uLCBpc1NlbGZDbG9zaW5nIH0gOiB7IHN0YXJ0LCBlbmQ6IC0xIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0F0U3RyaW5nKCc8L3JlZj4nKSkgcmVmZXJlbmNlcy5hdCgtMSkhLmVuZCA9IGN1cnJlbnRMb2NhdGlvbjtcbiAgICAgICAgICAgIGVsc2UgY3VycmVudExvY2F0aW9uKys7XG4gICAgICAgIGVsc2UgY3VycmVudExvY2F0aW9uKys7XG5cbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICBjb25zdCByZXBsYWNlbWVudHM6IFtzdHJpbmcsIHN0cmluZ11bXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCByZWZlcmVuY2Ugb2YgcmVmZXJlbmNlcykge1xuICAgICAgICBjb25zdCBvcmlnaW5hbFRleHQgPSBjb250ZW50LnNsaWNlKHJlZmVyZW5jZS5zdGFydCwgcmVmZXJlbmNlLmVuZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhcnRUYWcgPSAvPHJlZig/IWVyZW5jZXMpLio/Pi9pcy5leGVjKG9yaWdpbmFsVGV4dCkhWzBdO1xuXG4gICAgICAgIGNvbnN0IHBhcnNlZFRhZyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoXG4gICAgICAgICAgICByZWZlcmVuY2UuaXNTZWxmQ2xvc2luZyA/IHN0YXJ0VGFnLnJlcGxhY2UoLyAqXFwvICo+LywgJyAvPicpIDogc3RhcnRUYWcgKyAnPC9yZWY+JyxcbiAgICAgICAgICAgICd0ZXh0L2h0bWwnLFxuICAgICAgICApLmJvZHkuZmlyc3RDaGlsZCBhcyBIVE1MVW5rbm93bkVsZW1lbnQ7XG5cbiAgICAgICAgbGV0IG91dHB1dCA9IHBhcnNlZFRhZy5vdXRlckhUTUwucmVwbGFjZUFsbCgnJmFtcDsnLCAnJicpO1xuXG4gICAgICAgIGNvbnN0IHRhZ0NvbnRlbnQgPSBvcmlnaW5hbFRleHRcbiAgICAgICAgICAgIC5zbGljZShzdGFydFRhZy5sZW5ndGgsIC02KVxuICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoL15cXFsgKihbXiBcXF1dKikgKl0kL2dtLCAnJDEnKVxuICAgICAgICAgICAgLnRyaW0oKTtcblxuICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgcmVmZXJlbmNlLmlzU2VsZkNsb3NpbmcgfHwgdGFnQ29udGVudC5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgICA/IG91dHB1dC5yZXBsYWNlKC8+XFxzKjxcXC9yZWY+LywgJyAvPicpXG4gICAgICAgICAgICAgICAgOiBgJHtvdXRwdXQuc2xpY2UoMCwgLTYpfSR7dGFnQ29udGVudH08L3JlZj5gO1xuXG4gICAgICAgIGlmIChvcmlnaW5hbFRleHQgIT09IG91dHB1dCkgcmVwbGFjZW1lbnRzLnB1c2goW29yaWdpbmFsVGV4dCwgb3V0cHV0XSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBbb3JpZ2luYWxUZXh0LCBvdXRwdXRdIG9mIHJlcGxhY2VtZW50cykgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShvcmlnaW5hbFRleHQsIG91dHB1dCk7XG5cbiAgICByZXR1cm4gY29udGVudDtcbn1cblxuaW50ZXJmYWNlIFRlbXBsYXRlUmVkaXJlY3Qge1xuICAgIGZyb206IHN0cmluZ1tdO1xuICAgIHRvOiBzdHJpbmc7XG59XG5cbmxldCB0ZW1wbGF0ZUFsaWFzZXM6IFRlbXBsYXRlUmVkaXJlY3RbXSB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBGb3JtYXRzIHRlbXBsYXRlIHNwYWNpbmcgaW4gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGZvcm1hdC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZm9ybWF0VGVtcGxhdGVzKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGVudW0gRm9ybWF0U3R5bGUge1xuICAgICAgICBFeHBhbmRlZCxcbiAgICAgICAgRXhwYW5kZWRBbGlnbmVkLFxuICAgICAgICBNaW5pbWl6ZWQsXG4gICAgICAgIE1pbmltaXplZFNwYWNlZCxcbiAgICB9XG5cbiAgICBlbnVtIE5hbWVzcGFjZSB7XG4gICAgICAgIFVzZXIgPSAyLFxuICAgICAgICBUZW1wbGF0ZSA9IDEwLFxuICAgICAgICBEcmFmdCA9IDExOCxcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZUFsaWFzZXMgPz89IEpTT04ucGFyc2UoKGF3YWl0IGdldFBhZ2VDb250ZW50KCdVc2VyOkVlaml0NDMvc2NyaXB0cy9hcnRpY2xlLWNsZWFuZXIuanNvbicpKSA/PyAnW10nKSBhcyBUZW1wbGF0ZVJlZGlyZWN0W107XG5cbiAgICBjb25zdCBtYXBwZWRUZW1wbGF0ZUFsaWFzZXMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIHRlbXBsYXRlQWxpYXNlcy5mbGF0TWFwKChhbGlhcykgPT4gYWxpYXMuZnJvbS5tYXAoKGZyb20pID0+IFtmcm9tLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgZnJvbS5zbGljZSgxKSwgYWxpYXMudG9dKSksXG4gICAgKTtcblxuICAgIGNsYXNzIFRlbXBsYXRlIHtcbiAgICAgICAgcHVibGljIGxvY2F0aW9uOiB7IHN0YXJ0OiBudW1iZXI7IGVuZD86IG51bWJlciB9O1xuICAgICAgICBwdWJsaWMgaXNOZXN0ZWQgPSBmYWxzZTtcblxuICAgICAgICBwdWJsaWMgZnVsbFRleHQ/OiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgZnVsbFRleHRFc2NhcGVkPzogc3RyaW5nO1xuICAgICAgICBwcml2YXRlIHJhd05hbWU/OiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgbmFtZT86IHN0cmluZztcbiAgICAgICAgcHJpdmF0ZSBwYXJhbWV0ZXJzOiB7IGtleTogc3RyaW5nIHwgbnVsbDsgdmFsdWU6IHN0cmluZyB9W10gPSBbXTtcbiAgICAgICAgcHVibGljIHN1YlRlbXBsYXRlczogVGVtcGxhdGVbXSA9IFtdO1xuXG4gICAgICAgIHByaXZhdGUgUExBQ0VIT0xERVJfU1RSSU5HUyA9IFsnXFx1e0YwMDAwfScsICdcXHV7MTBGRkZGfScsICdcXHV7RkZGRkV9J107XG5cbiAgICAgICAgcHJpdmF0ZSBQSVBFX0VTQ0FQRV9SRUdFWEVTID0gWy8oXFxbXFxbW15cXF1dKj8pXFx8KC4qP11dKS9nLCAvKDwhLS0uKj8pXFx8KC4qPy0tPikvZywgLyg8bm93aWtpPi4qPylcXHwoLio/PFxcL25vd2lraT4pL2ddO1xuXG4gICAgICAgIHByaXZhdGUgVEFHX0VRVUFMU19FU0NBUEVfUkVHRVhFUyA9IFsvPChcXHcrKSggW148Pl0rPykoPzwhXFwvKT4uKj88XFwvXFwxPi9nLCAvPChcXHcrKSggW148Pl0rPylcXC8+L2ddO1xuXG4gICAgICAgIHByaXZhdGUgVEVNUExBVEVfQUxJQVNFUyA9IG1hcHBlZFRlbXBsYXRlQWxpYXNlcztcblxuICAgICAgICBwcml2YXRlIERFRkFVTFRfVEVNUExBVEVfU1RZTEVTID0ge1xuICAgICAgICAgICAgW0Zvcm1hdFN0eWxlLkV4cGFuZGVkQWxpZ25lZF06IFtcbiAgICAgICAgICAgICAgICAnYWxidW0gcmF0aW5nJyxcbiAgICAgICAgICAgICAgICAnYWxidW0gcmV2aWV3cycsXG4gICAgICAgICAgICAgICAgJ2FtZXJpY2FuIGZvb3RiYWxsIHVuaWZvcm0nLFxuICAgICAgICAgICAgICAgICdhdXN0cmFsaWFuIHJ1bGVzIGZvb3RiYWxsIGtpdCcsXG4gICAgICAgICAgICAgICAgJ2F1dG9tYXRpYyB0YXhvYm94JyxcbiAgICAgICAgICAgICAgICAnYmFzZWJhbGwgdW5pZm9ybScsXG4gICAgICAgICAgICAgICAgJ2Jhc2tldGJhbGwga2l0JyxcbiAgICAgICAgICAgICAgICAnYmVhY2hoYW5kYmFsbCBraXQnLFxuICAgICAgICAgICAgICAgICdibG9ja3F1b3RlJyxcbiAgICAgICAgICAgICAgICAnY2hlbWJveCcsXG4gICAgICAgICAgICAgICAgJ2NyaWNrZXQgdW5pZm9ybScsXG4gICAgICAgICAgICAgICAgJ2VsZWN0aW9uIGJveCcsXG4gICAgICAgICAgICAgICAgJ2VwaXNvZGUgbGlzdCcsXG4gICAgICAgICAgICAgICAgJ2V4dGVybmFsIG11c2ljIHZpZGVvJyxcbiAgICAgICAgICAgICAgICAnZXh0cmEgYWxidW0gY292ZXInLFxuICAgICAgICAgICAgICAgICdmaWVsZCBob2NrZXkga2l0JyxcbiAgICAgICAgICAgICAgICAnZm9vdGJhbGwgYm94JyxcbiAgICAgICAgICAgICAgICAnZm9vdGJhbGwga2l0JyxcbiAgICAgICAgICAgICAgICAnZm9vdGJhbGxib3gnLFxuICAgICAgICAgICAgICAgICdnYWxsZXJ5JyxcbiAgICAgICAgICAgICAgICAnaGFuZGJhbGwga2l0JyxcbiAgICAgICAgICAgICAgICAnaHlicmlkYm94JyxcbiAgICAgICAgICAgICAgICAnaWNlaG9ja2V5IGtpdCcsXG4gICAgICAgICAgICAgICAgJ2ljaG5vYm94JyxcbiAgICAgICAgICAgICAgICAnaW5mb2JveCcsXG4gICAgICAgICAgICAgICAgJ2luZnJhc3BlY2llc2JveCcsXG4gICAgICAgICAgICAgICAgJ2p1ZG8gYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJ2p1ZG8gcmVwZWNoYWdlJyxcbiAgICAgICAgICAgICAgICAnbGlzdGVuJyxcbiAgICAgICAgICAgICAgICAnbG9jYXRpb24gbWFwJyxcbiAgICAgICAgICAgICAgICAnbWVkaWNhbCByZXNvdXJjZXMnLFxuICAgICAgICAgICAgICAgICdtb3RvcnNwb3J0IHNlYXNvbicsXG4gICAgICAgICAgICAgICAgJ211bHRpcGxlIGltYWdlJyxcbiAgICAgICAgICAgICAgICAnbXVzaWMgcmF0aW5ncycsXG4gICAgICAgICAgICAgICAgJ215Y29tb3JwaGJveCcsXG4gICAgICAgICAgICAgICAgJ25hdmJveCcsXG4gICAgICAgICAgICAgICAgJ29vYm94JyxcbiAgICAgICAgICAgICAgICAnb3JiaXRib3gnLFxuICAgICAgICAgICAgICAgICdvc20gbG9jYXRpb24gbWFwJyxcbiAgICAgICAgICAgICAgICAncXVvdGUgYm94JyxcbiAgICAgICAgICAgICAgICAncmVwZWNoYWdlJyxcbiAgICAgICAgICAgICAgICAncnVnYnlib3gnLFxuICAgICAgICAgICAgICAgICdzaWRlYmFyJyxcbiAgICAgICAgICAgICAgICAnc2luZ2xlIHJhdGluZ3MnLFxuICAgICAgICAgICAgICAgICdzaW5nbGVzJyxcbiAgICAgICAgICAgICAgICAnc29uZyByYXRpbmdzJyxcbiAgICAgICAgICAgICAgICAnc3BlY2llc2JveCcsXG4gICAgICAgICAgICAgICAgJ3N0YXJib3gnLFxuICAgICAgICAgICAgICAgICdzdWNjZXNzaW9uIGJveCcsXG4gICAgICAgICAgICAgICAgJ3RheG9ib3gnLFxuICAgICAgICAgICAgICAgICd0ZWFtIGJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICd0cmFjayBsaXN0aW5nJyxcbiAgICAgICAgICAgICAgICAndHdlZXQnLFxuICAgICAgICAgICAgICAgICd2aXJ1c2JveCcsXG4gICAgICAgICAgICAgICAgJ3ZvbGxleWJhbGwga2l0JyxcblxuICAgICAgICAgICAgICAgIC8vIE51bWJlcmVkIGJyYWNrZXRzXG4gICAgICAgICAgICAgICAgJ250ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzJudGVhbS1udGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcydGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICczdGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICczdGVhbXJyJyxcbiAgICAgICAgICAgICAgICAnNHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnNHRlYW1ycicsXG4gICAgICAgICAgICAgICAgJzV0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzV0ZWFtcnInLFxuICAgICAgICAgICAgICAgICc2dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICc2dGVhbXJyJyxcbiAgICAgICAgICAgICAgICAnN3RlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnN3RlYW1ycicsXG4gICAgICAgICAgICAgICAgJzh0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzh0ZWFtcm91bmRyb2JpbicsXG4gICAgICAgICAgICAgICAgJzh0ZWFtcnInLFxuICAgICAgICAgICAgICAgICc5dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcxMHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMTF0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzEydGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcxM3RlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMTR0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzE1dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcxNnRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMTh0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzIwdGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcyNHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnMjd0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzMydGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICc0MHRlYW1icmFja2V0JyxcbiAgICAgICAgICAgICAgICAnNDh0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICAgICAgJzY0dGVhbWJyYWNrZXQnLFxuICAgICAgICAgICAgICAgICcxMjh0ZWFtYnJhY2tldCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW0Zvcm1hdFN0eWxlLk1pbmltaXplZF06IFsnYmlydGggZGF0ZScsICdjb29yZCcsICdkZWF0aCBkYXRlJywgJ2VuZCBkYXRlJywgJ2xhbmcnLCAnc3RhcnQgZGF0ZSddLFxuICAgICAgICAgICAgW0Zvcm1hdFN0eWxlLk1pbmltaXplZFNwYWNlZF06IFsnaW5mb2JveCBtYXBmcmFtZSddLFxuICAgICAgICB9O1xuXG4gICAgICAgIHByaXZhdGUgTkFNRVNQQUNFX1NQRUNJRklDX1RFTVBMQVRFUyA9IHtcbiAgICAgICAgICAgIFtOYW1lc3BhY2UuRHJhZnRdOiBbXG4gICAgICAgICAgICAgICAgJ2FmYyBjb21tZW50JyxcbiAgICAgICAgICAgICAgICAnYWZjIHN1Ym1pc3Npb24nLFxuICAgICAgICAgICAgICAgICdhZmMgc3VibWlzc2lvbi9kcmFmdCcsXG4gICAgICAgICAgICAgICAgJ2FmYyB0b3BpYycsXG4gICAgICAgICAgICAgICAgJ2RyYWZ0IGFydGljbGUnLFxuICAgICAgICAgICAgICAgICdkcmFmdCBjYXRlZ29yaWVzJyxcbiAgICAgICAgICAgICAgICAnZHJhZnQgdG9waWNzJyxcbiAgICAgICAgICAgICAgICAnZHJhZnQnLFxuICAgICAgICAgICAgICAgICdkcmFmdHMgbW92ZWQgZnJvbSBtYWluc3BhY2UnLFxuICAgICAgICAgICAgICAgICdwcmVsb2FkZHJhZnQgc3VibWl0JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbTmFtZXNwYWNlLlVzZXJdOiBbJ2Rhc2hib2FyZC53aWtpZWR1Lm9yZyBzYW5kYm94JywgJ3VzZXIgc2FuZGJveCcsICd1c2Vyc3BhY2UgZHJhZnQnXSxcbiAgICAgICAgfTtcblxuICAgICAgICBwcml2YXRlIFRFTVBMQVRFU19UT19LRUVQX0NPTlRFTlQgPSBbJ2RyYWZ0IGNhdGVnb3JpZXMnXTtcblxuICAgICAgICBwcml2YXRlIFRFTVBMQVRFU19UT19TVUJTVCA9IFtcbiAgICAgICAgICAgIC8vIE1hZ2ljIHdvcmRzXG4gICAgICAgICAgICAnYXJ0aWNsZXBhZ2VuYW1lJyxcbiAgICAgICAgICAgICdhcnRpY2xlc3BhY2UnLFxuICAgICAgICAgICAgJ2Jhc2VwYWdlbmFtZScsXG4gICAgICAgICAgICAnZnVsbHBhZ2VuYW1lJyxcbiAgICAgICAgICAgICduYW1lc3BhY2UnLFxuICAgICAgICAgICAgJ25hbWVzcGFjZW51bWJlcicsXG4gICAgICAgICAgICAncGFnZW5hbWUnLFxuICAgICAgICAgICAgJ3Jvb3RwYWdlbmFtZScsXG4gICAgICAgICAgICAnc3ViamVjdHBhZ2VuYW1lJyxcbiAgICAgICAgICAgICdzdWJqZWN0c3BhY2UnLFxuICAgICAgICAgICAgJ3N1YnBhZ2VuYW1lJyxcbiAgICAgICAgICAgICd0YWxrcGFnZW5hbWUnLFxuICAgICAgICAgICAgJ3RhbGtzcGFjZScsXG5cbiAgICAgICAgICAgIC8vIFRlbXBsYXRlc1xuICAgICAgICAgICAgJ3BhZ2VuYW1lYmFzZScsXG4gICAgICAgIF07XG5cbiAgICAgICAgcHJpdmF0ZSBJTUFHRV9QQVJBTUVURVJTID0gbmV3IFNldChbJ2NvdmVyJywgJ2ltYWdlX2ZsYWcnLCAnaW1hZ2Vfc2VhbCcsICdpbWFnZV9za3lsaW5lJywgJ2ltYWdlJywgJ2xvZ28nLCAnbWFwX2ltYWdlJ10pO1xuXG4gICAgICAgIHByaXZhdGUgSUdOT1JFRF9JTUFHRV9TWU5UQVggPSBuZXcgU2V0KFtcbiAgICAgICAgICAgIC8vIFR5cGVcbiAgICAgICAgICAgICd0aHVtYicsXG4gICAgICAgICAgICAndGh1bWJuYWlsJyxcbiAgICAgICAgICAgICdmcmFtZScsXG4gICAgICAgICAgICAnZnJhbWVkJyxcbiAgICAgICAgICAgICdmcmFtZWxlc3MnLFxuICAgICAgICAgICAgLy8gQm9yZGVyXG4gICAgICAgICAgICAnYm9yZGVyJyxcbiAgICAgICAgICAgICdyaWdodCcsXG4gICAgICAgICAgICAnbGVmdCcsXG4gICAgICAgICAgICAnY2VudGVyJyxcbiAgICAgICAgICAgICdub25lJyxcbiAgICAgICAgICAgIC8vIEFsaWdubWVudFxuICAgICAgICAgICAgJ2Jhc2VsaW5lJyxcbiAgICAgICAgICAgICdtaWRkbGUnLFxuICAgICAgICAgICAgJ3N1YicsXG4gICAgICAgICAgICAnc3VwZXInLFxuICAgICAgICAgICAgJ3RleHQtdG9wJyxcbiAgICAgICAgICAgICd0ZXh0LWJvdHRvbScsXG4gICAgICAgICAgICAndG9wJyxcbiAgICAgICAgICAgICdib3R0b20nLFxuICAgICAgICBdKTtcblxuICAgICAgICBjb25zdHJ1Y3RvcihzdGFydExvY2F0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYXRpb24gPSB7IHN0YXJ0OiBzdGFydExvY2F0aW9uIH07XG5cbiAgICAgICAgICAgIGZvciAobGV0IG51bWJlciA9IDE7IG51bWJlciA8PSAxMDsgbnVtYmVyKyspIHRoaXMuSU1BR0VfUEFSQU1FVEVSUy5hZGQoYGltYWdlJHtudW1iZXJ9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcGFyc2UoKSB7XG4gICAgICAgICAgICB0aGlzLmZ1bGxUZXh0ID0gY29udGVudC5zbGljZSh0aGlzLmxvY2F0aW9uLnN0YXJ0LCB0aGlzLmxvY2F0aW9uLmVuZCk7XG4gICAgICAgICAgICB0aGlzLmZ1bGxUZXh0RXNjYXBlZCA9IHRoaXMuZnVsbFRleHQ7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViVGVtcGxhdGUgb2YgdGhpcy5zdWJUZW1wbGF0ZXMpIHtcbiAgICAgICAgICAgICAgICBzdWJUZW1wbGF0ZS5wYXJzZSgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5mdWxsVGV4dEVzY2FwZWQgPSB0aGlzLmZ1bGxUZXh0RXNjYXBlZC5yZXBsYWNlKHN1YlRlbXBsYXRlLmZ1bGxUZXh0ISwgdGhpcy5QTEFDRUhPTERFUl9TVFJJTkdTWzBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHRyaW1tZWRJbm5lclRleHQgPSB0aGlzLmZ1bGxUZXh0RXNjYXBlZC5zbGljZSgyLCAtMikudHJpbSgpO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBpcGVFc2NhcGVSZWdleCBvZiB0aGlzLlBJUEVfRVNDQVBFX1JFR0VYRVMpXG4gICAgICAgICAgICAgICAgd2hpbGUgKHBpcGVFc2NhcGVSZWdleC50ZXN0KHRyaW1tZWRJbm5lclRleHQpKVxuICAgICAgICAgICAgICAgICAgICB0cmltbWVkSW5uZXJUZXh0ID0gdHJpbW1lZElubmVyVGV4dC5yZXBsYWNlQWxsKHBpcGVFc2NhcGVSZWdleCwgYCQxJHt0aGlzLlBMQUNFSE9MREVSX1NUUklOR1NbMV19JDJgKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCByZWdleCBvZiB0aGlzLlRBR19FUVVBTFNfRVNDQVBFX1JFR0VYRVMpXG4gICAgICAgICAgICAgICAgdHJpbW1lZElubmVyVGV4dCA9IHRyaW1tZWRJbm5lclRleHQucmVwbGFjZUFsbChyZWdleCwgKGZ1bGxUZXh0LCB0YWdOYW1lOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVsbFRleHQucmVwbGFjZShhdHRyaWJ1dGVzLCBhdHRyaWJ1dGVzLnJlcGxhY2VBbGwoJz0nLCB0aGlzLlBMQUNFSE9MREVSX1NUUklOR1NbMl0pKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHRyaW1tZWRJbm5lclRleHRcbiAgICAgICAgICAgICAgICAuc3BsaXQoJ3wnKVxuICAgICAgICAgICAgICAgIC5tYXAoKHBhcmFtZXRlcikgPT4gcGFyYW1ldGVyLnJlcGxhY2VBbGwodGhpcy5QTEFDRUhPTERFUl9TVFJJTkdTWzFdLCAnfCcpLnRyaW0oKSk7XG5cbiAgICAgICAgICAgIHRoaXMucmF3TmFtZSA9IHBhcmFtZXRlcnMuc2hpZnQoKSE7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLnJhd05hbWUucmVwbGFjZUFsbCgnXycsICcgJyk7XG5cbiAgICAgICAgICAgIC8vIFN0cmlwIG5hbWVzcGFjZSBwcmVmaXggZnJvbSBuYW1lXG4gICAgICAgICAgICBpZiAodGhpcy5uYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgndGVtcGxhdGU6JykpIHRoaXMubmFtZSA9IHRoaXMubmFtZS5zbGljZSg5KTtcblxuICAgICAgICAgICAgY29uc3QgbmFtZUxvd2VyY2FzZUZpcnN0ID0gdGhpcy5uYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgdGhpcy5uYW1lLnNsaWNlKDEpO1xuXG4gICAgICAgICAgICAvLyBSZXNvbHZlIHRlbXBsYXRlIGFsaWFzIGluIG5hbWVcbiAgICAgICAgICAgIGlmIChuYW1lTG93ZXJjYXNlRmlyc3QgaW4gdGhpcy5URU1QTEFURV9BTElBU0VTKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNTdGFydExvd2VyID0gdGhpcy5uYW1lLnN0YXJ0c1dpdGgodGhpcy5uYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsTmFtZSA9IHRoaXMuVEVNUExBVEVfQUxJQVNFU1tuYW1lTG93ZXJjYXNlRmlyc3RdO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbXVzdFN0YXJ0QmVVcHBlcmNhc2UgPVxuICAgICAgICAgICAgICAgICAgICBmaW5hbE5hbWUuc3RhcnRzV2l0aChmaW5hbE5hbWUuc2xpY2UoMCwgMikudG9VcHBlckNhc2UoKSkgJiYgL15bQS1aXSskLy5leGVjKGZpbmFsTmFtZS5zbGljZSgwLCAyKSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBpc1N0YXJ0TG93ZXIgJiYgIW11c3RTdGFydEJlVXBwZXJjYXNlID8gZmluYWxOYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgZmluYWxOYW1lLnNsaWNlKDEpIDogZmluYWxOYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzcGxpdFBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzLm1hcCgocGFyYW1ldGVycykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVxdWFsc0xvY2F0aW9uID0gcGFyYW1ldGVycy5pbmRleE9mKCc9Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXF1YWxzTG9jYXRpb24gPT09IC0xKSByZXR1cm4geyBrZXk6IG51bGwsIHZhbHVlOiBwYXJhbWV0ZXJzLnJlcGxhY2VBbGwodGhpcy5QTEFDRUhPTERFUl9TVFJJTkdTWzJdLCAnPScpLnRyaW0oKSB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbWV0ZXJzLnNsaWNlKGVxdWFsc0xvY2F0aW9uICsgMSkucmVwbGFjZUFsbCh0aGlzLlBMQUNFSE9MREVSX1NUUklOR1NbMl0sICc9Jyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IHBhcmFtZXRlcnMuc2xpY2UoMCwgZXF1YWxzTG9jYXRpb24pLnRyaW0oKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGAke3ZhbHVlLnN0YXJ0c1dpdGgoJ1xcbicpID8gJ1xcbicgOiAnJ30ke3ZhbHVlLnRyaW0oKX1gLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gc3BsaXRQYXJhbWV0ZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBzaG91bGRCZVJlbW92ZWQoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lc3BhY2UsIHRlbXBsYXRlc10gb2YgT2JqZWN0LmVudHJpZXModGhpcy5OQU1FU1BBQ0VfU1BFQ0lGSUNfVEVNUExBVEVTKSkge1xuICAgICAgICAgICAgICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSBOdW1iZXIucGFyc2VJbnQobmFtZXNwYWNlKSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBpZiAodGVtcGxhdGVzLmluY2x1ZGVzKHRoaXMubmFtZSEudG9Mb3dlckNhc2UoKSkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGdldFN0eWxlKCkge1xuICAgICAgICAgICAgbGV0IG1vc3RTcGVjaWZpY0RlZmF1bHRTdHlsZVByZWZpeExlbmd0aCA9IDA7XG4gICAgICAgICAgICBsZXQgbW9zdFNwZWNpZmljRGVmYXVsdFN0eWxlRm9ybWF0U3R5bGU6IEZvcm1hdFN0eWxlIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtmb3JtYXRTdHlsZSwgdGVtcGxhdGVQcmVmaXhlc10gb2YgT2JqZWN0LmVudHJpZXModGhpcy5ERUZBVUxUX1RFTVBMQVRFX1NUWUxFUykpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZW1wbGF0ZVByZWZpeCBvZiB0ZW1wbGF0ZVByZWZpeGVzKVxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUhLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh0ZW1wbGF0ZVByZWZpeCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUHJlZml4Lmxlbmd0aCA+PSBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVQcmVmaXhMZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVQcmVmaXhMZW5ndGggPSB0ZW1wbGF0ZVByZWZpeC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVGb3JtYXRTdHlsZSA9IE51bWJlci5wYXJzZUludChmb3JtYXRTdHlsZSkgYXMgRm9ybWF0U3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1vc3RTcGVjaWZpY0RlZmF1bHRTdHlsZUZvcm1hdFN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBjbGVhbnVwUGFyYW1ldGVycygpIHtcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycy5tYXAoKHsga2V5LCB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSAmJiB0aGlzLklNQUdFX1BBUkFNRVRFUlMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVCZWZvcmUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2VQYXJhbWV0ZXJzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ1tbJykgJiYgdmFsdWUuZW5kc1dpdGgoJ11dJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlUGFyYW1ldGVycyA9IHZhbHVlLnNsaWNlKDIsIC0yKS5zcGxpdCgnfCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGltYWdlUGFyYW1ldGVyc1swXS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14oRmlsZXxJbWFnZSk6LywgJycpLnJlcGxhY2VBbGwoJ18nLCAnICcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZGl0aW9uYWxEYXRhID0gdmFsdWVCZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZSgyLCAtMilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnfCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHBhcmFtZXRlcikgPT4gcGFyYW1ldGVyLnRyaW0oKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHBhcmFtZXRlcikgPT4gIXRoaXMuSUdOT1JFRF9JTUFHRV9TWU5UQVguaGFzKHBhcmFtZXRlcikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuam9pbignfCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRpdGlvbmFsRGF0YS5sZW5ndGggPiAwKSB2YWx1ZSArPSBgIDwhLS0gUHJldmlvdXMgYWRkaXRpb25hbCBkYXRhOiBcIiR7YWRkaXRpb25hbERhdGF9XCIgLS0+YDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBrZXksIHZhbHVlIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmb3JtYXQoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZnVsbFRleHQpIHRoaXMucGFyc2UoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkQmVSZW1vdmVkKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuVEVNUExBVEVTX1RPX0tFRVBfQ09OVEVOVC5pbmNsdWRlcyh0aGlzLm5hbWUhLnRvTG93ZXJDYXNlKCkpID8gdGhpcy5wYXJhbWV0ZXJzWzBdLnZhbHVlIDogJyc7XG5cbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFN1YnN0ID1cbiAgICAgICAgICAgICAgICBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpICE9PSAoTmFtZXNwYWNlLlRlbXBsYXRlIGFzIG51bWJlcikgJiZcbiAgICAgICAgICAgICAgICB0aGlzLlRFTVBMQVRFU19UT19TVUJTVC5zb21lKFxuICAgICAgICAgICAgICAgICAgICAobmFtZSkgPT4gbmFtZSA9PT0gdGhpcy5uYW1lIS50b0xvd2VyQ2FzZSgpIHx8IHRoaXMubmFtZSEudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGAke25hbWV9OmApLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5nZXRTdHlsZSgpO1xuICAgICAgICAgICAgaWYgKHN0eWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3TmFtZSA9IHRoaXMubmFtZSE7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZSEudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKCd0ZW1wbGF0ZTonKSkgbmV3TmFtZSA9IHRoaXMubmFtZSEuc2xpY2UoOSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkU3Vic3QpIG5ld05hbWUgPSBgc3Vic3Q6JHtuZXdOYW1lfWA7XG5cbiAgICAgICAgICAgICAgICBpZiAobmV3TmFtZSAhPT0gdGhpcy5yYXdOYW1lISkgdGhpcy5mdWxsVGV4dEVzY2FwZWQgPSB0aGlzLmZ1bGxUZXh0RXNjYXBlZCEucmVwbGFjZSh0aGlzLnJhd05hbWUhLCBuZXdOYW1lKTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViVGVtcGxhdGUgb2YgdGhpcy5zdWJUZW1wbGF0ZXMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnVsbFRleHRFc2NhcGVkID0gdGhpcy5mdWxsVGV4dEVzY2FwZWQhLnJlcGxhY2UodGhpcy5QTEFDRUhPTERFUl9TVFJJTkdTWzBdLCBzdWJUZW1wbGF0ZS5mb3JtYXQoKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mdWxsVGV4dEVzY2FwZWQhO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBbYHt7JHtzaG91bGRTdWJzdCA/ICdzdWJzdDonIDogJyd9JHt0aGlzLm5hbWUhfWBdO1xuXG4gICAgICAgICAgICB0aGlzLmNsZWFudXBQYXJhbWV0ZXJzKCk7XG5cbiAgICAgICAgICAgIGlmIChzdHlsZSA9PT0gRm9ybWF0U3R5bGUuRXhwYW5kZWQgfHwgc3R5bGUgPT09IEZvcm1hdFN0eWxlLkV4cGFuZGVkQWxpZ25lZCkge1xuICAgICAgICAgICAgICAgIGxldCByZXF1aXJlZEtleUxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUgPT09IEZvcm1hdFN0eWxlLkV4cGFuZGVkQWxpZ25lZClcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRLZXlMZW5ndGggPSBNYXRoLm1heCguLi50aGlzLnBhcmFtZXRlcnMubWFwKChwYXJhbWV0ZXIpID0+IHBhcmFtZXRlci5rZXk/Lmxlbmd0aCA/PyAwKSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtpbmRleCwgcGFyYW1ldGVyXSBvZiB0aGlzLnBhcmFtZXRlcnMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICFwYXJhbWV0ZXIua2V5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhcGFyYW1ldGVyLnZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2xpY2UoaW5kZXggKyAxKS5ldmVyeSgocGFyYW1ldGVyKSA9PiBwYXJhbWV0ZXIua2V5ID8/ICFwYXJhbWV0ZXIudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGB8ICR7cGFyYW1ldGVyLmtleSA/IGAke3BhcmFtZXRlci5rZXkucGFkRW5kKHJlcXVpcmVkS2V5TGVuZ3RoKX0gPSBgIDogJyd9JHtwYXJhbWV0ZXIudmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbaW5kZXgsIHBhcmFtZXRlcl0gb2YgdGhpcy5wYXJhbWV0ZXJzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAhcGFyYW1ldGVyLnZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAocGFyYW1ldGVyLmtleSB8fCB0aGlzLnBhcmFtZXRlcnMuc2xpY2UoaW5kZXggKyAxKS5ldmVyeSgocGFyYW1ldGVyKSA9PiBwYXJhbWV0ZXIua2V5ID8/ICFwYXJhbWV0ZXIudmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChgfCR7cGFyYW1ldGVyLmtleSA/IGAke3BhcmFtZXRlci5rZXl9PWAgOiAnJ30ke3BhcmFtZXRlci52YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG91dHB1dC5wdXNoKCd9fScpO1xuXG4gICAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIG91dHB1dFswXSArPSAnfX0nO1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0LnBvcCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PT0gRm9ybWF0U3R5bGUuTWluaW1pemVkU3BhY2VkKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W291dHB1dC5sZW5ndGggLSAyXSArPSAnfX0nO1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0LnBvcCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgam9pbmVkT3V0cHV0ID0gb3V0cHV0LmpvaW4oXG4gICAgICAgICAgICAgICAgc3R5bGUgPT09IEZvcm1hdFN0eWxlLkV4cGFuZGVkIHx8IHN0eWxlID09PSBGb3JtYXRTdHlsZS5FeHBhbmRlZEFsaWduZWRcbiAgICAgICAgICAgICAgICAgICAgPyAnXFxuJ1xuICAgICAgICAgICAgICAgICAgICA6IHN0eWxlID09PSBGb3JtYXRTdHlsZS5NaW5pbWl6ZWRTcGFjZWRcbiAgICAgICAgICAgICAgICAgICAgICA/ICcgJ1xuICAgICAgICAgICAgICAgICAgICAgIDogJycsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN1YlRlbXBsYXRlIG9mIHRoaXMuc3ViVGVtcGxhdGVzKVxuICAgICAgICAgICAgICAgIGpvaW5lZE91dHB1dCA9IGpvaW5lZE91dHB1dC5yZXBsYWNlKHRoaXMuUExBQ0VIT0xERVJfU1RSSU5HU1swXSwgc3ViVGVtcGxhdGUuZm9ybWF0KCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gam9pbmVkT3V0cHV0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYWxsVGVtcGxhdGVzOiBUZW1wbGF0ZVtdID0gW107XG5cbiAgICBjb25zdCBpbnNpZGVUZW1wbGF0ZXM6IFRlbXBsYXRlW10gPSBbXTtcbiAgICBsZXQgaXNJbnNpZGVMaW5rID0gZmFsc2U7XG4gICAgbGV0IGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgbGV0IGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuXG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbnRlbnQgZm9sbG93aW5nIHRoZSBjdXJyZW50IGxvY2F0aW9uIG1hdGNoZXMgdGhlIGRlc2lyZWQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBkZXNpcmVkU3RyaW5nIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0F0U3RyaW5nKGRlc2lyZWRTdHJpbmc6IHN0cmluZykge1xuICAgICAgICBjb25zdCBpc0F0U3RyaW5nID0gY29udGVudC5zbGljZShjdXJyZW50TG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbiArIGRlc2lyZWRTdHJpbmcubGVuZ3RoKSA9PT0gZGVzaXJlZFN0cmluZztcblxuICAgICAgICBpZiAoaXNBdFN0cmluZykgY3VycmVudExvY2F0aW9uICs9IGRlc2lyZWRTdHJpbmcubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBpc0F0U3RyaW5nO1xuICAgIH1cblxuICAgIHdoaWxlIChjdXJyZW50TG9jYXRpb24gPCBjb250ZW50Lmxlbmd0aClcbiAgICAgICAgaWYgKGlzQXRTdHJpbmcoJzxub3dpa2k+JykpIGlzSW5zaWRlTm93aWtpID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnPC9ub3dpa2k+JykpIGlzSW5zaWRlTm93aWtpID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKGlzQXRTdHJpbmcoJzwhLS0nKSkgaXNJbnNpZGVDb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygnLS0+JykpIGlzSW5zaWRlQ29tbWVudCA9IGZhbHNlO1xuICAgICAgICBlbHNlIGlmICghaXNJbnNpZGVOb3dpa2kgJiYgIWlzSW5zaWRlQ29tbWVudClcbiAgICAgICAgICAgIGlmIChpc0F0U3RyaW5nKCdbWycpKSBpc0luc2lkZUxpbmsgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNJbnNpZGVMaW5rICYmIGlzQXRTdHJpbmcoJ11dJykpIGlzSW5zaWRlTGluayA9IGZhbHNlO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNBdFN0cmluZygne3snKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKGN1cnJlbnRMb2NhdGlvbiAtIDIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluc2lkZVRlbXBsYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLmlzTmVzdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5zaWRlVGVtcGxhdGVzLmF0KC0xKT8uc3ViVGVtcGxhdGVzLnB1c2godGVtcGxhdGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGluc2lkZVRlbXBsYXRlcy5wdXNoKHRlbXBsYXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBdFN0cmluZygnfX0nKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RUZW1wbGF0ZSA9IGluc2lkZVRlbXBsYXRlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWxhc3RUZW1wbGF0ZSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBsYXN0VGVtcGxhdGUubG9jYXRpb24uZW5kID0gY3VycmVudExvY2F0aW9uO1xuXG4gICAgICAgICAgICAgICAgYWxsVGVtcGxhdGVzLnB1c2gobGFzdFRlbXBsYXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSBjdXJyZW50TG9jYXRpb24rKztcbiAgICAgICAgZWxzZSBjdXJyZW50TG9jYXRpb24rKztcblxuICAgIGxldCBuZXdDb250ZW50ID0gY29udGVudDtcblxuICAgIGZvciAoY29uc3QgdGVtcGxhdGUgb2YgYWxsVGVtcGxhdGVzKVxuICAgICAgICBpZiAoIXRlbXBsYXRlLmlzTmVzdGVkKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5wYXJzZSgpO1xuXG4gICAgICAgICAgICBuZXdDb250ZW50ID0gbmV3Q29udGVudC5yZXBsYWNlKHRlbXBsYXRlLmZ1bGxUZXh0ISwgdGVtcGxhdGUuZm9ybWF0KCkpO1xuICAgICAgICB9XG5cbiAgICByZXR1cm4gbmV3Q29udGVudDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHVubmVjZXNzYXJ5IGNvbW1lbnRzIGZyb20gYW4gYXJ0aWNsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0gY29udGVudCBUaGUgYXJ0aWNsZSBjb250ZW50IHRvIGNsZWFuIHVwLlxuICovXG5mdW5jdGlvbiByZW1vdmVDb21tZW50cyhjb250ZW50OiBzdHJpbmcpIHtcbiAgICBpZiAobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSAhPT0gMCkgcmV0dXJuIGNvbnRlbnQ7XG5cbiAgICBjb25zdCBDT01NRU5UU19UT19SRU1PVkUgPSBbXG4gICAgICAgICdEbyBub3QgcmVtb3ZlIHRoaXMgbGluZScsXG4gICAgICAgICdFRElUIEJFTE9XIFRISVMgTElORScsXG4gICAgICAgICdJbXBvcnRhbnQsIGRvIG5vdCByZW1vdmUgYW55dGhpbmcgYWJvdmUgdGhpcyBsaW5lIGJlZm9yZSBhcnRpY2xlIGhhcyBiZWVuIGNyZWF0ZWQnLFxuICAgICAgICAnSW1wb3J0YW50LCBkbyBub3QgcmVtb3ZlIHRoaXMgbGluZSBiZWZvcmUgYXJ0aWNsZSBoYXMgYmVlbiBjcmVhdGVkJyxcbiAgICAgICAgJ0lubGluZSBjaXRhdGlvbnMgYWRkZWQgdG8geW91ciBhcnRpY2xlIHdpbGwgYXV0b21hdGljYWxseSBkaXNwbGF5IGhlcmUnLFxuICAgICAgICAnTm90ZTogVGhlIGZvbGxvd2luZyBwYWdlcyB3ZXJlIHJlZGlyZWN0cyB0byAnLFxuICAgIF07XG5cbiAgICBmb3IgKGNvbnN0IGNvbW1lbnQgb2YgQ09NTUVOVFNfVE9fUkVNT1ZFKVxuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlQWxsKG5ldyBSZWdFeHAoYCAqPCEtLSA/JHtlc2NhcGVSZWdleENoYXJhY3RlcnMoY29tbWVudCl9Lio/LS0+ICpcXG4/YCwgJ2dzJyksICcnKTtcblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEFkZHMgcmVsZXZhbnQgdGFncyB0byBhbiBhcnRpY2xlJ3MgY29udGVudC5cbiAqIEBwYXJhbSBjb250ZW50IFRoZSBhcnRpY2xlIGNvbnRlbnQgdG8gYWRkIHRhZ3MgdG8uXG4gKi9cbmZ1bmN0aW9uIGF1dG9UYWdQYWdlKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGNvbnN0IGlzT3V0c2lkZU1haW5zcGFjZSA9IG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgIT09IDA7XG4gICAgY29uc3QgaXNFZGl0aW5nU2VjdGlvbiA9ICEhbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5nZXQoJ3NlY3Rpb24nKTtcbiAgICBjb25zdCBpc0Rpc2FtYmlndWF0aW9uID0gbXcuY29uZmlnLmdldCgnd2dDYXRlZ29yaWVzJykuaW5jbHVkZXMoJ0FsbCBkaXNhbWJpZ3VhdGlvbiBwYWdlcycpO1xuICAgIGNvbnN0IGlzUmVkaXJlY3QgPSBtdy5jb25maWcuZ2V0KCd3Z0lzUmVkaXJlY3QnKTtcblxuICAgIGlmIChpc091dHNpZGVNYWluc3BhY2UgfHwgaXNFZGl0aW5nU2VjdGlvbiB8fCBpc0Rpc2FtYmlndWF0aW9uIHx8IGlzUmVkaXJlY3QpIHJldHVybiBjb250ZW50O1xuXG4gICAgY29uc3QgbnVtYmVyT2ZDYXRlZ29yaWVzID0gWy4uLmNvbnRlbnQubWF0Y2hBbGwoL1xcW1xcW0NhdGVnb3J5Oi9nKV0ubGVuZ3RoO1xuXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZUFsbCgvXFxuKnt7KHVuY2F0ZWdvcml6ZWR8aW1wcm92ZSBjYXRlZ29yaWVzKShcXHwuKz8pP319KHt7fFxcbit8JCkvZ2ksICcnKTtcblxuICAgIGlmIChudW1iZXJPZkNhdGVnb3JpZXMgPT09IDAgJiYgIS97e3VuY2F0ZWdvcml6ZWQvaS50ZXN0KGNvbnRlbnQpKVxuICAgICAgICBjb250ZW50ICs9ICdcXG5cXG57e1VuY2F0ZWdvcml6ZWR8e3tzdWJzdDpDVVJSRU5UTU9OVEhOQU1FfX0ge3tzdWJzdDpDVVJSRU5UWUVBUn19fX0nO1xuICAgIGVsc2UgaWYgKG51bWJlck9mQ2F0ZWdvcmllcyA9PT0gMSAmJiAhL3t7aW1wcm92ZSBjYXRlZ29yaWVzL2kudGVzdChjb250ZW50KSlcbiAgICAgICAgY29udGVudCArPSAnXFxuXFxue3tJbXByb3ZlIGNhdGVnb3JpZXN8e3tzdWJzdDpDVVJSRU5UTU9OVEhOQU1FfX0ge3tzdWJzdDpDVVJSRU5UWUVBUn19fX0nO1xuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7bUJBR08sSUFBTUEsRUFBTSxJQUFJLEdBQUcsSUFNMUIsZUFBc0JDLEVBQWVDLEVBQWUsQ0FDaEQsT0FDSyxNQUFNRixFQUFJLElBQUksQ0FDWCxPQUFRLFFBQ1IsY0FBZSxJQUNmLEtBQU0sWUFDTixPQUFRLFVBQ1IsUUFBUyxPQUNULE9BQVFFLENBQ1osQ0FBbUMsR0FDckMsTUFBTSxNQUFNLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxNQUFNLEtBQUssUUFBUSxLQUFLLENBQzVELEVDZ0JDLElBQU0sQ0FFSCxHQURJLEdBQUcsT0FBTyxJQUFJLG1CQUFtQixFQUFJLEdBQ3JDLENBQUMsR0FBRyxPQUFPLElBQUksc0JBQXNCLEVBQUcsT0FFNUMsSUFBTUMsRUFBZSxDQUFDLGlCQUFrQixzQkFBc0IsRUFFMUQsR0FBRyxPQUFPLElBQUksTUFBTSxJQUFNLFdBQVdBLEVBQWEsS0FBSyx1QkFBdUIsRUFFbEYsR0FBRyxPQUFPLE1BQU1BLEVBQWMsSUFBTSxDQUNoQyxJQUFJQyxFQUF5QixHQUV2QkMsRUFBaUIsNEZBTXZCLFNBQVNDLEVBQWNDLEVBQWtELENBRXJFLFdBQVcsSUFBTSxDQUNSQSxFQUFTLE1BQU0sU0FBU0YsRUFBZSxNQUFNLENBQUMsQ0FBQyxJQUNoREUsRUFBUyxPQUNMQSxFQUFTLE9BQVMsQ0FBQ0EsRUFBUyxNQUFNLFdBQVcsS0FBSyxHQUFLLENBQUNBLEVBQVMsTUFBTSxTQUFTLE1BQU0sRUFDaEYsS0FBS0YsRUFBZSxPQUFPLENBQUMsRUFBRSxZQUFZLEVBQUlBLEVBQWUsTUFBTSxDQUFDLENBQUMsR0FDckVBLEVBQ2xCLEVBQUcsQ0FBQyxFQUVKRCxFQUF5QixFQUM3QixDQU1BLGVBQWVJLEVBQWlCQyxFQUFtQixDQUMvQ0EsRUFBTSxlQUFlLEVBRXJCLElBQU1DLEVBQVMsRUFB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RUFDcEZDLEVBQWEsR0FBRyxPQUFPLElBQUksY0FBYyxFQUUvQyxHQUFJSCxHQUFzQkMsR0FBb0JDLEdBQW9CQyxFQUFZLE9BQU94SSxFQUVyRixJQUFNeUksRUFBcUIsQ0FBQyxHQUFHekksRUFBUSxTQUFTLGdCQUFnQixDQUFDLEVBQUUsT0FFbkUsT0FBQUEsRUFBVUEsRUFBUSxXQUFXLGdFQUFpRSxFQUFFLEVBRTVGeUksSUFBdUIsR0FBSyxDQUFDLG1CQUFtQixLQUFLekksQ0FBTyxFQUM1REEsR0FBVztBQUFBO0FBQUEsb0VBQ055SSxJQUF1QixHQUFLLENBQUMsd0JBQXdCLEtBQUt6SSxDQUFPLElBQ3RFQSxHQUFXO0FBQUE7QUFBQSwwRUFFUkEsQ0FDWCIsCiAgIm5hbWVzIjogWyJhcGkiLCAiZ2V0UGFnZUNvbnRlbnQiLCAidGl0bGUiLCAiZGVwZW5kZW5jaWVzIiwgInNob3VsZEFkZFNjcmlwdE1lc3NhZ2UiLCAiU0NSSVBUX01FU1NBR0UiLCAidXBkYXRlU3VtbWFyeSIsICJ0ZXh0YXJlYSIsICJoYW5kbGVBY3RpdmF0aW9uIiwgImV2ZW50IiwgImVkaXRvciIsICJvcmlnaW5hbFRleHQiLCAiZmluYWxUZXh0IiwgImNsZWFudXBTdHJheVVuaWNvZGVDaGFyYWN0ZXJzIiwgImNsZWFudXBTZWN0aW9uSGVhZGVycyIsICJjbGVhbnVwTWFnaWNXb3JkcyIsICJjbGVhbnVwRGlzcGxheXRpdGxlc0FuZERlZmF1bHRzb3J0cyIsICJjbGVhbnVwQ2F0ZWdvcmllcyIsICJjbGVhbnVwTGlua3MiLCAiY2xlYW51cEltcHJvcGVyQ2hhcmFjdGVycyIsICJjbGVhbnVwWWVhclJhbmdlcyIsICJjbGVhbnVwU3RyYXlNYXJrdXAiLCAiY2xlYW51cFNwYWNpbmciLCAiY2xlYW51cFJlZmVyZW5jZXMiLCAiZm9ybWF0VGVtcGxhdGVzIiwgInJlbW92ZUNvbW1lbnRzIiwgImF1dG9UYWdQYWdlIiwgInN1cmZhY2VNb2RlbCIsICJzdW1tYXJ5SW5wdXQiLCAiaGVhZGVyU3dpdGNoZXIiLCAiYnV0dG9uIiwgImNvbnRlbnQiLCAiZXNjYXBlUmVnZXhDaGFyYWN0ZXJzIiwgInN0cmluZyIsICJTVFJBWV9VTklDT0RFX1JFR0VYIiwgIkNPTU1PTl9SRVBMQUNFTUVOVFMiLCAiQ09NTU9OX01JU0NBUElUQUxJWkVEX1dPUkRTIiwgInJldmVyc2VDb21tb25SZXBsYWNlbWVudHMiLCAia2V5IiwgInZhbHVlcyIsICJ2YWx1ZSIsICJwYXJzZWRIZWFkZXJzIiwgImhlYWRlciIsICJuYW1lIiwgInN0YXJ0TWFya3VwIiwgImVuZE1hcmt1cCIsICJsaW5rcyIsICJsaW5rIiwgImRlcHRoIiwgImhlYWRlcnNTZXQiLCAidGl0bGVTcGFjZXIiLCAibG93ZXJjYXNlTmFtZSIsICJjYXBpdGFsaXplZE5hbWUiLCAid29yZCIsICJvdXRwdXQiLCAicGFyc2VkVGFncyIsICJ0YWciLCAiZnVsbFRhZyIsICJ0eXBlIiwgImN1cnJlbnRUaXRsZSIsICJvcmlnaW5hbFRhZ1JlZ2V4IiwgInVucHJlZml4ZWRUaXRsZSIsICJ0aXRsZSIsICJkZWZhdWx0S2V5IiwgImN1c3RvbUtleSIsICJuZXdUZXh0IiwgImZ1bmN0aW9uc0NhbGxlZFdoaWxlRXNjYXBlZCIsICJjbG9zZWRMaW5rcyIsICJpc0luc2lkZU5vd2lraSIsICJpc0luc2lkZUNvbW1lbnQiLCAiY3VycmVudExvY2F0aW9uIiwgImlzQXRTdHJpbmciLCAiZGVzaXJlZFN0cmluZyIsICJzaG91bGRJbmNyZW1lbnQiLCAibGFzdExpbmsiLCAibmV3TGlua0NvbnRlbnQiLCAibmFtZXNwYWNlTmFtZXMiLCAibGlua0xvY2F0aW9uIiwgImlubmVyTGluayIsICJ1bnBhcnNlZExpbmsiLCAicGFyYW1ldGVycyIsICJhbHRUZXh0IiwgImlzRmlyc3RDaGFyYWN0ZXJDb2xvbiIsICJzaG91bGRGaXJzdENoYXJhY3RlckJlQ29sb24iLCAibGlua1VwcGVyY2FzZVN0YXJ0IiwgImxpbmtMb3dlcmNhc2VTdGFydCIsICJuYW1lc3BhY2UiLCAiYmVmb3JlTGlua1RleHQiLCAiYWZ0ZXJMaW5rVGV4dCIsICJtYXRjaGVkTWFya3VwIiwgImFkZGVkUHVuY3R1YXRpb24iLCAibmV3TGluayIsICJmdW5jdGlvblRvQ2FsbCIsICJsb29wQ291bnRlciIsICJsaW5rRGF0YSIsICJsaW5rQ29udGVudCIsICJydW4iLCAib3JpZ2luYWwiLCAic3RhcnQiLCAiZW5kIiwgIlNUUkFZX01BUktVUF9SRUdFWEVTIiwgInJlZ2V4IiwgInNlY29uZFJ1biIsICJUQUdTX1RPX0lHTk9SRSIsICJpZ25vcmVkVGFnc0NvbnRlbnQiLCAiZnVsbE1hdGNoIiwgInN0YXJ0VGFnIiwgInRhZ05hbWUiLCAiaW5uZXJDb250ZW50IiwgImVuZFRhZyIsICJ0YWdDb250ZW50IiwgInJlZmVyZW5jZVRhZyIsICJwdW5jdHVhdGlvbiIsICJyZWZlcmVuY2VzIiwgInByb2NlZWRVbnRpbFN0cmluZyIsICJpc1NlbGZDbG9zaW5nIiwgInBhcnNlciIsICJyZXBsYWNlbWVudHMiLCAicmVmZXJlbmNlIiwgInRlbXBsYXRlQWxpYXNlcyIsICJGb3JtYXRTdHlsZSIsICJOYW1lc3BhY2UiLCAiZ2V0UGFnZUNvbnRlbnQiLCAibWFwcGVkVGVtcGxhdGVBbGlhc2VzIiwgImFsaWFzIiwgImZyb20iLCAiVGVtcGxhdGUiLCAic3RhcnRMb2NhdGlvbiIsICJudW1iZXIiLCAic3ViVGVtcGxhdGUiLCAidHJpbW1lZElubmVyVGV4dCIsICJwaXBlRXNjYXBlUmVnZXgiLCAiZnVsbFRleHQiLCAiYXR0cmlidXRlcyIsICJwYXJhbWV0ZXIiLCAibmFtZUxvd2VyY2FzZUZpcnN0IiwgImlzU3RhcnRMb3dlciIsICJmaW5hbE5hbWUiLCAibXVzdFN0YXJ0QmVVcHBlcmNhc2UiLCAic3BsaXRQYXJhbWV0ZXJzIiwgImVxdWFsc0xvY2F0aW9uIiwgInRlbXBsYXRlcyIsICJtb3N0U3BlY2lmaWNEZWZhdWx0U3R5bGVQcmVmaXhMZW5ndGgiLCAibW9zdFNwZWNpZmljRGVmYXVsdFN0eWxlRm9ybWF0U3R5bGUiLCAiZm9ybWF0U3R5bGUiLCAidGVtcGxhdGVQcmVmaXhlcyIsICJ0ZW1wbGF0ZVByZWZpeCIsICJ2YWx1ZUJlZm9yZSIsICJpbWFnZVBhcmFtZXRlcnMiLCAiYWRkaXRpb25hbERhdGEiLCAic2hvdWxkU3Vic3QiLCAic3R5bGUiLCAibmV3TmFtZSIsICJyZXF1aXJlZEtleUxlbmd0aCIsICJpbmRleCIsICJqb2luZWRPdXRwdXQiLCAiYWxsVGVtcGxhdGVzIiwgImluc2lkZVRlbXBsYXRlcyIsICJpc0luc2lkZUxpbmsiLCAidGVtcGxhdGUiLCAibGFzdFRlbXBsYXRlIiwgIm5ld0NvbnRlbnQiLCAiQ09NTUVOVFNfVE9fUkVNT1ZFIiwgImNvbW1lbnQiLCAiaXNPdXRzaWRlTWFpbnNwYWNlIiwgImlzRWRpdGluZ1NlY3Rpb24iLCAiaXNEaXNhbWJpZ3VhdGlvbiIsICJpc1JlZGlyZWN0IiwgIm51bWJlck9mQ2F0ZWdvcmllcyJdCn0K
