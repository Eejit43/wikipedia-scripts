// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),h=!1,u="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(h){let g=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");g.value.includes(u.slice(1))||(g.value?g.value+=`; ${u.charAt(0).toLowerCase()+u.slice(1)}`:g.value=u),h=!1}}),e.addEventListener("click",g=>{g.preventDefault();let o=$("#wpTextbox1");if(o.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let p=o.textSelection("getContents"),t=p;if(t=C(t),t=E(t),t=v(t),t=L(t),t=I(t,[N,F]),t=R(t),t=M(t),t=O(t),t=D(t),p===t)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let c=ve.init.target.getSurface().getModel();c.getLinearFragment(c.getRangeFromSourceOffsets(0,p.length)).insertContent(t),c.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else o.textSelection("setContents",t),o.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let d=document.querySelector("#wpSummary");d?d.value.includes(u.slice(1))||(d.value?d.value+=`; ${u.charAt(0).toLowerCase()+u.slice(1)}`:d.value=u):h=!0}})});function y(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function C(e){let h={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},u=["and","birth","career","death","education","life","or"],g=Object.fromEntries(Object.entries(h).flatMap(([c,i])=>i.map(s=>[s,c]))),p=[...e.matchAll(/(?<=^|\n)\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)(\n+|$)/g)].map(c=>{let{name:i}=c.groups,{startMarkup:s,endMarkup:a}=c.groups;i=i.replaceAll(/'{3}/g,"");let r=i.matchAll(/\[\[(.+?)]]/g).toArray();for(let l of r)i=i.replace(l[0],l[1].split("|").at(-1));let f=Math.max(s.length,a.length,2);return{name:i,depth:f,original:c[0]}}),t=new Set(p.map(c=>c.name.toLowerCase())),d=p.length>0&&/^\n*=+ | =+\n+$/.test(p[0].original)?" ":"";for(let c of p){let i=c.name.toLowerCase(),a=i in g&&!t.has(g[i].toLowerCase())?g[i]:c.name;for(let f of u)a=a.replaceAll(new RegExp(`\\b${f}\\b`,"gi"),f);a=a.charAt(0).toUpperCase()+a.slice(1);let r=`${"=".repeat(c.depth)}${d}${a}${d}${"=".repeat(c.depth)}`;c.original!==r&&(e=e.replace(c.original,`

${r}
`))}return e}function E(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function v(e){let u=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(o=>{let[p,t,d]=o;return{type:t.toUpperCase(),value:d,original:p}}),g=mw.Title.newFromText(mw.config.get("wgPageName"));for(let o of u){let p=new RegExp(`${y(o.original)}
*`,"g"),t=mw.Title.makeTitle(g.getNamespaceId(),o.value.includes(":")?o.value.split(":")[1]:o.value);if(!t)continue;if(g.toText()===t.toText()){e=e.replace(p,"");continue}let d=`{{${o.type}:${t.toText()}}}
`;e=e.replace(p,d)}return e}function L(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function I(e,h){let u=[],g=[],o=!1,p=!1,t=0;function d(s,a=!0){let r=e.slice(t,t+s.length)===s;return r&&a&&(t+=s.length),r}for(;t<e.length;)if(d("<nowiki>"))o=!0;else if(d("</nowiki>"))o=!1;else if(d("<!--"))p=!0;else if(d("-->"))p=!1;else if(!o&&!p)if(d("[["))g.push({start:t-2,end:-1,isNested:g.length>0});else if(d("]]")){let s=g.pop();if(!s)continue;s.end=t,u.push(s)}else t++;else t++;let c=[],i=Object.values(mw.config.get("wgFormattedNamespaces"));for(let s of u){let a=e.slice(s.start+2,s.end-2),[r,...f]=a.split("|");e=e.slice(0,s.start+2)+"\0".repeat(r.length)+e.slice(s.start+2+r.length);let l=r.replaceAll("_"," ").trim(),n=f.join("|");n=n===" "?" ":n.trim();let m=l.startsWith(":");m&&(l=l.slice(1));let x=!1,S=l.charAt(0).toUpperCase()+l.slice(1),T=l.charAt(0).toLowerCase()+l.slice(1),b=l.split(":")[0];b=b.charAt(0).toUpperCase()+b.slice(1),l.includes(":")&&(S.startsWith("Image:")&&(l=`${l.startsWith("Image:")?"F":"f"}ile:${l.slice(6)}`),m&&(["Image","File","Category"].includes(S.split(":")[0])||!i.includes(b))&&(x=!0));let k="";l===n?n="":new RegExp(`^${y(l)}[a-z]+$`).test(n)&&(k=n.slice(l.length),n="");for(let w of[S,T])w===n?(l=w,n=""):new RegExp(`^${y(w)}[a-z]+$`).test(n)&&(l=w,k=n.slice(w.length),n="");(n&&l.includes(":")&&i.includes(b)||l.startsWith("file:")||l.startsWith("category:"))&&(l=l.charAt(0).toUpperCase()+l.slice(1)),l=`${x?":":""}${l}`,l=l.padStart(r.length,"\0");let A=`[[${l}${n?`|${n}`:""}]]${k}`;c.push([s,A])}for(let s of h)e=s(e,1);for(let s=0;s<2;s++)for(let[a,r]of c)s===0&&a.isNested||s===1&&!a.isNested||(e=e.slice(0,a.start)+r.padEnd(a.end-a.start,"\0")+e.slice(a.end));for(let s of h)e=s(e,2);return e.replaceAll("\0","")}function N(e,h){let u="\x7F",g="\x9F";return h===1?(e=e.replaceAll(/[“”„‟]/g,'"'),e=e.replaceAll(/[‘’‚‛]/g,"'"),e=e.replaceAll("\u2026",u),e=e.replaceAll("\xA0",g)):(e=e.replaceAll(u,"..."),e=e.replaceAll(g,"&nbsp;")),e}function F(e,h){return h===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(u,g,o)=>`${g}\u2013${o}`.padEnd(u.length,"\0"))),e}function R(e){let h=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let u of h)for(;u.test(e);)e=e.replace(u,"");return e}function M(e){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}) {2,}(\b|\p{Punctuation}|\[\[|\{\{)/gu,"$1 $2"),e=e.replaceAll(/^ +| +$/gm,""),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*] .*)\n+(?=[#*] )/gm,`$1
`),e=e.replaceAll(/\s+(?=<ref(?!erences))/g,""),e=e.replaceAll(/^(=+.*?=+)$\n{2,}(?=^=+.*?=+$)/gm,`$1
`),e=e.trim(),e}function O(e){e=e.replaceAll(/((?:<ref(?!erences).*?>.*?<\/ref>)+)([!,.;?])/g,"$2$1");let h=[],u=!1,g=!1,o=0;function p(i){let s=e.slice(o,o+i.length)===i;return s&&(o+=i.length),s}function t(i){for(;o<e.length&&!p(i);)o++}for(;o<e.length;)if(p("<nowiki>"))u=!0;else if(p("</nowiki>"))u=!1;else if(p("<!--"))g=!0;else if(p("-->"))g=!1;else if(!u&&!g)if(!p("<references")&&p("<ref")){let i=o-4;t(">");let s=e.slice(i,o-1).trim().endsWith("/");h.push(s?{start:i,end:o,isSelfClosing:s}:{start:i,end:-1})}else p("</ref>")?h.at(-1).end=o:o++;else o++;let d=new DOMParser,c=[];for(let i of h){let s=e.slice(i.start,i.end),a=/<ref(?!erences).*?>/is.exec(s)[0],f=d.parseFromString(i.isSelfClosing?a.replace(/ *\/ *>/," />"):a+"</ref>","text/html").body.firstChild.outerHTML.replaceAll("&amp;","&"),l=s.slice(a.length,-6).trim();f=i.isSelfClosing||l.length===0?f.replace(/>\s*<\/ref>/," />"):`${f.slice(0,-6)}${l}</ref>`,s!==f&&c.push([s,f])}for(let[i,s]of c)e=e.replace(i,s);return e}function D(e){let h;(n=>(n[n.Expanded=0]="Expanded",n[n.ExpandedAligned=1]="ExpandedAligned",n[n.Minimized=2]="Minimized",n[n.MinimizedSpaced=3]="MinimizedSpaced"))(h||={});class u{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}","\u{FFFFE}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["automatic taxobox","blockquote","hybridbox","ichnobox","infobox","infraspeciesbox","listen","location map many","motorsport season","multiple image","mycomorphbox","navbox","oobox","osm location map","quote box","speciesbox","succession box","taxobox","virusbox"],2:["coord","end date","lang","langx","start date"],3:["infobox mapframe"]};constructor(r){this.location={start:r}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let m of this.subTemplates)m.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(m.fullText,this.placeholderStrings[0]);let r=this.fullTextEscaped.slice(2,-2).trim();for(let m of this.pipeEscapeRegexes)for(;m.test(r);)r=r.replaceAll(m,`$1${this.placeholderStrings[1]}$2`);let f=[/<(\w+)( [^<>]+?)(?<!\/)>.*?<\/\1>/g,/<(\w+)( [^<>]+?)\/>/g];for(let m of f)r=r.replaceAll(m,(x,S,T)=>x.replace(T,T.replaceAll("=",this.placeholderStrings[2])));let l=r.split("|").map(m=>m.replaceAll(this.placeholderStrings[1],"|").trim());this.name=l.shift()?.replaceAll("_"," ");let n=l.map(m=>{let x=m.indexOf("=");if(x===-1)return{key:null,value:m.replaceAll(this.placeholderStrings[2],"=").trim()};let S=m.slice(x+1).replaceAll(this.placeholderStrings[2],"=");return{key:m.slice(0,x).trim(),value:`${S.startsWith(`
`)?`
`:""}${S.trim()}`}});this.parameters=n}getStyle(){let r=0,f;for(let[l,n]of Object.entries(this.defaultTemplateStyles))for(let m of n)this.name.toLowerCase().startsWith(m)&&m.length>=r&&(r=m.length,f=Number.parseInt(l));return f}format(){this.fullText||this.parse();let r=this.getStyle();if(r===void 0)return this.fullText;let f=[`{{${this.name}`];if(r===0||r===1){let n=0;r===1&&(n=Math.max(...this.parameters.map(m=>m.key?.length??0)));for(let m of this.parameters)f.push(`| ${m.key?`${m.key.padEnd(n)} = `:""}${m.value}`)}else for(let n of this.parameters)n.value&&f.push(`|${n.key?`${n.key}=`:""}${n.value}`);f.push("}}"),f.length===2?(f[0]+="}}",f.pop()):r===3&&(f[f.length-2]+="}}",f.pop());let l=f.join(r===0||r===1?`
`:r===3?" ":"");for(let n of this.subTemplates)l=l.replace(this.placeholderStrings[0],n.format());return l}}let g=[],o=[],p=!1,t=!1,d=!1,c=0;function i(a){let r=e.slice(c,c+a.length)===a;return r&&(c+=a.length),r}for(;c<e.length;)if(i("<nowiki>"))t=!0;else if(i("</nowiki>"))t=!1;else if(i("<!--"))d=!0;else if(i("-->"))d=!1;else if(!t&&!d)if(i("[["))p=!0;else if(p&&i("]]"))p=!1;else if(i("{{")){let a=new u(c-2);o.length>0&&(a.isNested=!0,o.at(-1)?.subTemplates.push(a)),o.push(a)}else if(i("}}")){let a=o.pop();if(!a)continue;a.location.end=c,g.push(a)}else c++;else c++;let s=e;for(let a of g)a.isNested||(a.parse(),s=s.replace(a.fullText,a.format()));return s}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
