// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/article-cleaner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#article-cleaner {
    display: none;
}

#content:has(#wpTextbox1) #article-cleaner {
    display: unset;
}`);let e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Perform article cleanup","article-cleaner"),d=!1,p="Cleaned up article content (via [[User:Eejit43/scripts/article-cleaner|article-cleaner]])";mw.hook("ve.saveDialog.stateChanged").add(()=>{if(d){let u=document.querySelector(".ve-ui-mwSaveDialog-summary textarea");u.value.includes(p.slice(1))||(u.value?u.value+=`; ${p.charAt(0).toLowerCase()+p.slice(1)}`:u.value=p),d=!1}}),e.addEventListener("click",u=>{u.preventDefault();let r=$("#wpTextbox1");if(r.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let g=r.textSelection("getContents"),s=g;if(s=A(s),s=E(s),s=v(s),s=L(s),s=I(s,[N,M]),s=R(s),s=F(s),s=O(s),s=D(s),g===s)mw.notify("No changes to be made to the article!",{type:"warn",autoHideSeconds:"short"});else{if(ve.init){let f=ve.init.target.getSurface().getModel();f.getLinearFragment(f.getRangeFromSourceOffsets(0,g.length)).insertContent(s),f.setSelection(new ve.dm.LinearSelection(new ve.Range(0,0)))}else r.textSelection("setContents",s),r.textSelection("setSelection",{start:0});mw.notify("Article cleanup complete!",{type:"success",autoHideSeconds:"short"});let o=document.querySelector("#wpSummary");o?o.value.includes(p.slice(1))||(o.value?o.value+=`; ${p.charAt(0).toLowerCase()+p.slice(1)}`:o.value=p):d=!0}})});function b(e){return e.replaceAll(/[$()*+.?[\\\]^{|}]/g,"\\$&")}function A(e){let d={"See also":["also see"],References:["reference","source","sources","citation","citations"],"Further reading":["further reading"],"External links":["external link","weblink","weblinks"]},p=["life","career"],u=Object.fromEntries(Object.entries(d).flatMap(([o,f])=>f.map(i=>[i,o]))),g=[...e.matchAll(/\n*(?<startMarkup>=+) *(?<name>.*?) *(?<endMarkup>=+)\n+/g)].map(o=>{let{name:f}=o.groups,{startMarkup:i,endMarkup:l}=o.groups;f=f.replaceAll(/'{3}/g,"");let n=f.matchAll(/\[\[(.+?)]]/g).toArray();for(let m of n)f=f.replace(m[0],m[1].split("|").at(-1));let c=Math.max(i.length,l.length,2);return{name:f,depth:c,original:o[0]}}),s=g.length>0&&/^\n*=+ | =+\n+$/.test(g[0].original)?" ":"";for(let o of g){let i=o.name.toLowerCase()in u?u[o.name.toLowerCase()]:o.name;for(let n of p)i=i.replaceAll(new RegExp(`\\b${n}\\b`,"gi"),n);i=i.charAt(0).toUpperCase()+i.slice(1);let l=`${"=".repeat(o.depth)}${s}${i}${s}${"=".repeat(o.depth)}`;o.original!==l&&(e=e.replace(o.original,`

${l}
`))}return e}function E(e){return e.replaceAll(/__(INDEX|NOINDEX|NEWSECTIONLINK|NONEWSECTIONLINK|NOEDITSECTION|DISAMBIG|STATICREDIRECT|FORCETOC)__\n*/g,"")}function v(e){let p=[...e.matchAll(/{{(displaytitle|defaultsort)[:|](.*?)}}/gi)].map(r=>{let[g,s,o]=r;return{type:s.toUpperCase(),value:o,original:g}}),u=mw.Title.newFromText(mw.config.get("wgPageName"));for(let r of p){let g=new RegExp(`${b(r.original)}
*`,"g"),s=mw.Title.makeTitle(u.getNamespaceId(),r.value.includes(":")?r.value.split(":")[1]:r.value);if(u.toText()===s.toText()){e=e.replace(g,"");continue}let o=`{{${r.type}:${s.toText()}}}
`;e=e.replace(g,o)}return e}function L(e){return e.replaceAll(/(\[\[|}}):?category:(.*?)(]]|}})/gi,`[[${mw.config.get("wgCanonicalNamespace")==="Draft"?":":""}Category:$2]]`)}function I(e,d){let p=[],u=[],r=!1,g=!1,s=0;function o(l,n=!0){let c=e.slice(s,s+l.length)===l;return c&&n&&(s+=l.length),c}for(;s<e.length;)if(o("<nowiki>"))r=!0;else if(o("</nowiki>"))r=!1;else if(o("<!--"))g=!0;else if(o("-->"))g=!1;else if(!r&&!g)if(o("[["))u.push({start:s-2,end:-1,isNested:u.length>0});else if(o("]]")){let l=u.pop();if(!l)continue;l.end=s,p.push(l)}else s++;else s++;let f=[],i=Object.values(mw.config.get("wgFormattedNamespaces"));for(let l of p){let n=e.slice(l.start+2,l.end-2),[c,...m]=n.split("|");e=e.slice(0,l.start+2)+"\0".repeat(c.length)+e.slice(l.start+2+c.length);let a=c.replaceAll("_"," ").trim(),t=m.join("|");t=t===" "?" ":t.trim();let h=a.startsWith(":");h&&(a=a.slice(1));let T=!1,S=a.charAt(0).toUpperCase()+a.slice(1),C=a.charAt(0).toLowerCase()+a.slice(1),w=a.split(":")[0];w=w.charAt(0).toUpperCase()+w.slice(1),a.includes(":")&&(S.startsWith("Image:")&&(a=`${a.startsWith("Image:")?"F":"f"}ile:${a.slice(6)}`),h&&(["Image","File","Category"].includes(S.split(":")[0])||!i.includes(w))&&(T=!0));let k="";a===t?t="":new RegExp(`^${b(a)}[a-z]+$`).test(t)&&(k=t.slice(a.length),t="");for(let x of[S,C])x===t?(a=x,t=""):new RegExp(`^${b(x)}[a-z]+$`).test(t)&&(a=x,k=t.slice(x.length),t="");(t&&a.includes(":")&&i.includes(w)||a.startsWith("file:")||a.startsWith("category:"))&&(a=a.charAt(0).toUpperCase()+a.slice(1)),a=`${T?":":""}${a}`,a=a.padStart(c.length,"\0");let y=`[[${a}${t?`|${t}`:""}]]${k}`;f.push([l,y])}for(let l of d)e=l(e,1);for(let l=0;l<2;l++)for(let[n,c]of f)l===0&&n.isNested||l===1&&!n.isNested||(e=e.slice(0,n.start)+c.padEnd(n.end-n.start,"\0")+e.slice(n.end));for(let l of d)e=l(e,2);return e.replaceAll("\0","")}function N(e,d){let p="\x7F",u="\x9F";return d===1?(e=e.replaceAll(/[«»“”„‟「」]/g,'"'),e=e.replaceAll(/[‘’‚‛‹›]/g,"'"),e=e.replaceAll("\u2026",p),e=e.replaceAll("\xA0",u)):(e=e.replaceAll(p,"..."),e=e.replaceAll(u,"&nbsp;")),e}function M(e,d){return d===1&&(e=e.replaceAll(/(\(\d{3,4}) ?[‒–−-] ?(\d{3,4}\))/g,(p,u,r)=>`${u}\u2013${r}`.padEnd(p.length,"\0"))),e}function R(e){let d=[/'+(Bold|Italic)( text)?'+ */g,/(<big>)+Big( text)?(<\/big>)+ */g,/(<small>)+Small( text)?(<\/small>)+ */g,/(<sup>)+Superscript( text)?(<\/sup>)+ */g,/(<sub>)+Subscript( text)?(<\/sub>)+ */g,/(<s>)+Strikethrough(<\/s>)+ */g,/(<u>)+Underline(<\/u>)+ */g,/(<code>)+Computer code(<\/code>)+ */g,/(<nowiki>)+Insert non-formatted text here(<\/nowiki>)+ */g,/=+ Heading text =+ */g,/\* Bulleted list item */g,/# Numbered list item */g,/<gallery>\nExample.jpg\|Caption1\nExample.jpg\|Caption2\n<\/gallery> */g,/#REDIRECT \[\[Target page name]] */g,/<!-- Invisible comment --> */g,/<\s*(big|small|sup|sub|s|u|code|nowiki|noinclude|onlyinclude|includeonly|center|blockquote|gallery)\s*(\s+[^<>]*)?>\s*<\s*\/\s*\1\s*>/gi];for(let p of d)for(;p.test(e);)e=e.replace(p,"");return e}function F(e){return e=e.replaceAll(/(\b|\p{Punctuation}|\]\]|\}\}) {2,}(\b|\p{Punctuation}|\[\[|\{\{)/gu,"$1 $2"),e=e.replaceAll(/^ +| +$/gm,""),e=e.replaceAll(/\n{3,}/g,`

`),e=e.replace(/\s*({{[^}]*stub}})/i,`


$1`),e=e.replaceAll(/\s+$/g,""),e=e.replaceAll(/^([#*]+) */gm,"$1 "),e=e.replaceAll(/^([#*] .*)\n+(?=[#*] )/gm,`$1
`),e=e.replaceAll(/\s+(?=<ref)/g,""),e=e.replaceAll(/^(=+.*?=+)$\n{2,}^(=+.*?=+)$/gm,`$1
$2`),e=e.trim(),e}function O(e){e=e.replaceAll(/((?:<ref.*?>.*?<\/ref>)+)([!,.?])/g,"$2$1");let d=[],p=!1,u=!1,r=0;function g(i){let l=e.slice(r,r+i.length)===i;return l&&(r+=i.length),l}function s(i){for(;r<e.length&&!g(i);)r++}for(;r<e.length;)if(g("<nowiki>"))p=!0;else if(g("</nowiki>"))p=!1;else if(g("<!--"))u=!0;else if(g("-->"))u=!1;else if(!p&&!u)if(g("<ref")){let i=r-4;s(">");let l=e.slice(i,r-1).trim().endsWith("/");d.push(l?{start:i,end:r,isSelfClosing:l}:{start:i,end:-1})}else g("</ref>")?d.at(-1).end=r:r++;else r++;let o=new DOMParser,f=[];for(let i of d){let l=e.slice(i.start,i.end),n=/<ref.*?>/i.exec(l)[0],m=o.parseFromString(i.isSelfClosing?n.replace(/ *\/ *>/," />"):n+"</ref>","text/html").body.firstChild.outerHTML,a=l.slice(n.length,-6).trim();m=i.isSelfClosing||a.length===0?m.replace(/>\s*<\/ref>/," />"):`${m.slice(0,-6)}${a}</ref>`,l!==m&&f.push([l,m])}for(let[i,l]of f)e=e.replace(i,l);return e}function D(e){let d;(t=>(t[t.Expanded=0]="Expanded",t[t.ExpandedAligned=1]="ExpandedAligned",t[t.Minimized=2]="Minimized",t[t.MinimizedSpaced=3]="MinimizedSpaced"))(d||={});class p{location;isNested=!1;fullText;fullTextEscaped;name;parameters=[];subTemplates=[];placeholderStrings=["\u{F0000}","\u{10FFFF}"];pipeEscapeRegexes=[/(\[\[[^\]]*?)\|(.*?]])/g,/(<!--.*?)\|(.*?-->)/g,/(<nowiki>.*?)\|(.*?<\/nowiki>)/g];defaultTemplateStyles={1:["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season","blockquote","quote box","multiple image"],2:["coord","start date","end date","lang","langx"]};constructor(c){this.location={start:c}}parse(){this.fullText=e.slice(this.location.start,this.location.end),this.fullTextEscaped=this.fullText;for(let t of this.subTemplates)t.parse(),this.fullTextEscaped=this.fullTextEscaped.replace(t.fullText,this.placeholderStrings[0]);let c=this.fullTextEscaped.slice(2,-2).trim();for(let t of this.pipeEscapeRegexes)for(;t.test(c);)c=c.replaceAll(t,`$1${this.placeholderStrings[1]}$2`);let m=c.split("|").map(t=>t.replaceAll(this.placeholderStrings[1],"|").trim());this.name=m.shift();let a=m.map(t=>{let h=t.indexOf("=");if(h===-1)return{key:null,value:t.trim()};let T=t.slice(h+1);return{key:t.slice(0,h).trim(),value:`${T.startsWith(`
`)?`
`:""}${T.trim()}`}});this.parameters=a}getStyle(){for(let[c,m]of Object.entries(this.defaultTemplateStyles))for(let a of m)if(this.name.toLowerCase().startsWith(a))return Number.parseInt(c)}format(){this.fullText||this.parse();let c=this.getStyle();if(c===void 0)return this.fullText;let m=[`{{${this.name}`];if(c===0||c===1){let t=0;c===1&&(t=Math.max(...this.parameters.map(h=>h.key?.length??0)));for(let h of this.parameters)m.push(`| ${h.key?`${h.key.padEnd(t)} = `:""}${h.value}`)}else for(let t of this.parameters)t.value&&m.push(`|${t.key?`${t.key}=`:""}${t.value}`);m.push("}}"),m.length===2?(m[0]+="}}",m.pop()):c===3&&(m[m.length-2]+="}}",m.pop());let a=m.join(c===0||c===1?`
`:c===3?" ":"");for(let t of this.subTemplates)a=a.replace(this.placeholderStrings[0],t.format());return a}}let u=[],r=[],g=!1,s=!1,o=!1,f=0;function i(n){let c=e.slice(f,f+n.length)===n;return c&&(f+=n.length),c}for(;f<e.length;)if(i("<nowiki>"))s=!0;else if(i("</nowiki>"))s=!1;else if(i("<!--"))o=!0;else if(i("-->"))o=!1;else if(!s&&!o)if(i("[["))g=!0;else if(g&&i("]]"))g=!1;else if(i("{{")){let n=new p(f-2);r.length>0&&(n.isNested=!0,r.at(-1)?.subTemplates.push(n)),r.push(n)}else if(i("}}")){let n=r.pop();if(!n)continue;n.location.end=f,u.push(n)}else f++;else f++;let l=e;for(let n of u)n.isNested||(n.parse(),l=l.replace(n.fullText,n.format()));return l}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
