// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/rmtr-helper.ts

"use strict";(()=>{var I=`#rmtr-review-result{margin:1em;border:1px solid #a2a9b1;border-radius:2px;background-color:#f5f5f5;padding:2.5%;color:#202122;font-size:.8em}#rmtr-review-header{margin-bottom:.5em;font-weight:700;font-size:1.5em}.rmtr-review-header{margin:.5em 0;font-weight:700;font-size:1em}.rmtr-review-invalid-warning{color:#cd5c5c;font-weight:700}.rmtr-review-request-checkbox{margin:3px 3px 0}.rmtr-review-section-content{margin-left:1em;line-height:1.3}.rmtr-review-section-content li+li{margin-top:.4rem;margin-bottom:.4rem}#rmtr-review-submit{margin-top:.2em}#rmtr-review-loading{display:inline-block;vertical-align:text-bottom;margin-top:-.3em;margin-left:3px;height:1.3em;overflow:hidden;line-height:1.5em}#rmtr-review-loading:after{display:inline-table;animation:rmtr-review-loading .8s steps(10) infinite;content:"\\280b\\a\\2819\\a\\2839\\a\\2838\\a\\283c\\a\\2834\\a\\2826\\a\\2827\\a\\2807\\a\\280f";text-align:left;white-space:pre}@keyframes rmtr-review-loading{to{transform:translateY(-15em)}}
`;var x=new mw.Api;mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="Wikipedia:Requested_moves/Technical_requests")return;mw.util.addCSS(I);let E=mw.config.get("wgNamespaceIds"),L=!1;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Review move requests","review-rmtr-requests").addEventListener("click",async j=>{j.preventDefault();let S=!0;if(window.addEventListener("beforeunload",o=>{S&&o.preventDefault()}),L)return document.querySelector("#rmtr-review-result")?.scrollIntoView();L=!0;let P=await O(),A=P.revid,N=P.slots.main.content,y=["Uncontroversial technical requests","Requests to revert undiscussed moves","Contested technical requests","Administrator needed"],T=y[2],M=y[3],d={};function W(o){let t=[],n=["[","{"],c=["]","}"],r=!1,s="";for(let i=0;i<o.length;i++){let a=o[i],l=o[i+1];if(a==="|"&&!r||i===o.length-1){a!=="|"&&(s+=a),t.push(s),s="";continue}s+=a,n.some(m=>m===a&&m===l)?r=!0:c.some(m=>m===a&&m===l)&&(r=!1)}let e={};for(let[i,a]of t.entries()){let l=a.split("=").map(m=>m.trim());l.length===1&&l.unshift((i+1).toString()),e[l.shift()]=l.join("=")}return e}for(let o of y){let n=N.split(new RegExp(`={3,} ?${o} ?={3,}`))[1].split(/={3,}/m)[0].trim().match(/(?:\* ?\n)?[ *:]*{{rmassist\/core.+?(?=[ *:]*{{rmassist\/core|$)/gis);if(n)d[o]=n.map(c=>{c=c.trim();let r=W(c.replaceAll(/(?:\* ?\n)?[ *:]*{{rmassist\/core\s*\||}}(?![^\n]*}}).*/gis,""));return r.full=c,r.original=r[1]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",r.destination=r[2]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",r.requester??=r.sig?.match(/\[\[User:(.*?)(\||]])/)?.[1].trim(),delete r[1],delete r[2],r});else{d[o]=[];continue}}await Promise.all(Object.entries(d).map(async([,o])=>{await Promise.all(o.map(async t=>{let n=mw.Title.newFromText(t.original),c=mw.Title.newFromText(t.destination);if(!n)return mw.notify(`Invalid title "${t.original}"!`,{type:"error"});if(!c)return mw.notify(`Invalid title "${t.destination}"!`,{type:"error"});let r=!/[#<>[\]{|}]/.test(t.destination)&&c,s=document.createElement("span");s.classList.add("rmtr-review-invalid-warning"),s.textContent=`Invalid title "${t.destination}"!`;let e=![E.file,E.category].some(u=>n.getNamespaceId()===u||c.getNamespaceId()===u),i=document.createElement("span");i.classList.add("rmtr-review-invalid-warning"),i.textContent=`Warning: original or destination page is in namespace "${c.getNamespaceId()===E.file?"file":"category"}"!`;let a=await x.parse(`[[:${t.original}]] \u2192 ${r?`[[:${t.destination}]]`:s.outerHTML} requested by ${t.requester?mw.util.isIPAddress(t.requester)?`[[Special:Contributions/${t.requester}|${t.requester}]]`:`[[User:${t.requester}|${t.requester}]]`:/(\[{2}Special:Contributions\/(.*?)\|\2]{2})/.exec(t.sig)?.[1]??"(unknown)"} with reasoning "${t.reason}"`),l=new DOMParser().parseFromString(a,"text/html"),m=document.createElement("li");m.innerHTML=l.querySelector("div.mw-parser-output").firstElementChild.innerHTML,e||m.append(i),t.element=m}))}));let f=document.createElement("div");f.id="rmtr-review-result";let C=document.createElement("div");C.id="rmtr-review-header",C.textContent="Technical move requests review",f.append(C);for(let[o,[t,n]]of Object.entries(d).entries()){let c=document.createElement("div");c.classList.add("rmtr-review-header"),c.textContent=t,f.append(c);let r=document.createElement("div");if(r.classList.add("rmtr-review-section-content"),n.length===0){let s=document.createElement("div");s.textContent="No requests in this section",r.append(s)}else{let s=document.createElement("ul");for(let[e,i]of n.entries()){let a=i.element,l=document.createElement("input");l.type="checkbox",l.classList.add("rmtr-review-request-checkbox"),l.id=`rmtr-review-remove-request-${o}-${e}`,l.addEventListener("change",()=>{l.checked?(d[t][e].result={remove:!0,reason:R.value},u.style.display="inline",v.disabled=!0):(delete d[t][e].result,u.style.display="none",v.disabled=!1)});let m=document.createElement("label");m.htmlFor=`rmtr-review-remove-request-${o}-${e}`,m.textContent="Remove request",a.append(l),a.append(m);let u=document.createElement("span");u.style.display="none",u.append(document.createTextNode(" as "));let R=document.createElement("select");t==="Contested technical requests"&&(R.value="Contested"),R.addEventListener("change",()=>{d[t][e].result.reason=R.value});let D=["Completed","Contested","Already done","Invalid page name","Incorrect venue","Withdrawn","Stale","Not done"];for(let h of D){let g=document.createElement("option");g.value=h,g.textContent=h,R.append(g)}u.append(R),a.append(u);let v=document.createElement("input");v.type="checkbox",v.classList.add("rmtr-review-request-checkbox"),v.id=`rmtr-review-move-request-${o}-${e}`,v.addEventListener("change",()=>{v.checked?(d[t][e].result={move:!0,section:q.value},p.style.display="inline",l.disabled=!0):(delete d[t][e].result,p.style.display="none",l.disabled=!1)});let k=document.createElement("label");k.htmlFor=`rmtr-review-move-request-${o}-${e}`,k.textContent="Switch section",a.append(v),a.append(k);let p=document.createElement("span");p.style.display="none",p.append(document.createTextNode(" to "));let q=document.createElement("select");q.addEventListener("change",()=>{d[t][e].result.section=q.value});for(let h of y){if(h===t)continue;let g=document.createElement("option");g.selected=h===(t===T?M:T),g.value=h,g.textContent=h,q.append(g)}p.append(q),p.append(document.createTextNode(" with reasoning "));let $=document.createElement("input");$.type="text",$.addEventListener("input",()=>{d[t][e].result.reason=$.value}),p.append($),p.append(document.createTextNode(" (optional, automatically pings requestor and signs)")),a.append(p),s.append(a)}r.append(s)}f.append(r)}let w=document.createElement("button");w.id="rmtr-review-submit",w.textContent="Submit",w.addEventListener("click",async()=>{if((await O()).revid!==A)return mw.notify("An edit conflict occurred, please start over!",{type:"error"});w.disabled=!0,b.style.display="inline-block";let t=N,n={remove:{},move:{},total:0};for(let s of Object.values(d))for(let e of s)if(e.result){if("remove"in e.result)t=t.replace(e.full+`
`,"").replace(e.full,""),e.result.reason in n.remove||(n.remove[e.result.reason]=[]),n.remove[e.result.reason].push(e),n.total++;else if("move"in e.result){let i=y[y.indexOf(e.result.section)+1];t=t.replace(e.full+`
`,"").replace(e.full,""),t=t.replace(new RegExp(`(
?
?(?:={3,} ?${i} ?={3,}|$))`),`
${e.full}${e.result.reason?`
:: ${e.requester&&e.requester.length>0?mw.util.isIPAddress(e.requester)?"":`@[[User:${e.requester}|${e.requester}]] `:""} ${e.result.reason} ~~~~`:""}$1`),e.result.section in n.move||(n.move[e.result.section]=[]),n.move[e.result.section].push(e),n.total++}}if(n.total===0)return w.disabled=!1,b.style.display="none",mw.notify("No changes to make!",{type:"error"});let c=Object.values(d).every(s=>s.every(e=>e.result&&"remove"in e.result)),r=`Handled ${n.total} request${n.total>1?"s":""}: ${Object.entries(n.remove).length>0?`Removed ${Object.entries(n.remove).map(([s,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} as ${s.toLowerCase()}`).join(", ")}`:""}${Object.entries(n.move).length>0?`${Object.entries(n.remove).length>0?", ":""}Moved ${Object.entries(n.move).map(([s,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} to "${s}"`).join(", ")}`:""}${c?" (no requests remain)":""} (via [[User:Eejit43/scripts/rmtr-helper|script]])`;await x.edit(mw.config.get("wgPageName"),()=>({text:t,summary:r})),mw.notify(`Successfully handled ${n.total} requests, reloading...`,{type:"success"}),S=!1,window.location.reload()});let b=document.createElement("span");b.id="rmtr-review-loading",b.style.display="none",w.append(b),f.append(w),mw.util.$content[0].prepend(f),f.scrollIntoView()})});async function O(){return(await x.get({action:"query",formatversion:"2",prop:"revisions",rvprop:["content","ids"],rvslots:"main",titles:mw.config.get("wgPageName")})).query.pages[0].revisions[0]}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
