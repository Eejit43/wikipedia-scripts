// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/rmtr-helper.ts

"use strict";(()=>{var T=`#rmtr-review-result{margin:1em;border:1px solid #a2a9b1;border-radius:2px;background-color:#f5f5f5;padding:2.5%;color:#202122;font-size:.8em}#rmtr-review-header{margin-bottom:.5em;font-weight:700;font-size:1.5em}.rmtr-review-header{margin:.5em 0;font-weight:700;font-size:1em}.rmtr-review-invalid-warning{color:#cd5c5c;font-weight:700}.rmtr-review-request-checkbox{margin:3px 3px 0}.rmtr-review-section-content{margin-left:1em;line-height:1.3}.rmtr-review-section-content li+li{margin-top:.4rem;margin-bottom:.4rem}#rmtr-review-submit{margin-top:.2em}#rmtr-review-loading{display:inline-block;vertical-align:text-bottom;margin-top:-.3em;margin-left:3px;height:1.3em;overflow:hidden;line-height:1.5em}#rmtr-review-loading:after{display:inline-table;animation:rmtr-review-loading .8s steps(10) infinite;content:"\\280b\\a\\2819\\a\\2839\\a\\2838\\a\\283c\\a\\2834\\a\\2826\\a\\2827\\a\\2807\\a\\280f";text-align:left;white-space:pre}@keyframes rmtr-review-loading{to{transform:translateY(-15em)}}
`;mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="Wikipedia:Requested_moves/Technical_requests")return;mw.util.addCSS(T);let x=mw.config.get("wgNamespaceIds"),k=!1;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Review move requests","review-rmtr-requests").addEventListener("click",async P=>{if(P.preventDefault(),k)return document.querySelector("#rmtr-review-result")?.scrollIntoView();k=!0;let L=await I(),O=L.revid,S=L.slots.main.content,y=["Uncontroversial technical requests","Requests to revert undiscussed moves","Contested technical requests","Administrator needed"],N=y[2],j=y[3],d={};function A(c){let t=[],n=["[","{"],l=["]","}"],r=!1,s="";for(let i=0;i<c.length;i++){let o=c[i],a=c[i+1];if(o==="|"&&!r||i===c.length-1){o!=="|"&&(s+=o),t.push(s),s="";continue}s+=o,n.some(m=>m===o&&m===a)?r=!0:l.some(m=>m===o&&m===a)&&(r=!1)}let e={};for(let[i,o]of t.entries()){let a=o.split("=").map(m=>m.trim());a.length===1&&a.unshift((i+1).toString()),e[a.shift()]=a.join("=")}return e}for(let c of y){let n=S.split(new RegExp(`={3,} ?${c} ?={3,}`))[1].split(/={3,}/m)[0].trim().match(/(?:\* ?\n)?[ *:]*{{rmassist\/core.+?(?=[ *:]*{{rmassist\/core|$)/gis);if(n)d[c]=n.map(l=>{l=l.trim();let r=A(l.replaceAll(/(?:\* ?\n)?[ *:]*{{rmassist\/core\s*\||}}(?![^\n]*}}).*/gis,""));return r.full=l,r.original=r[1]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",r.destination=r[2]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",r.requester??=r.sig?.match(/\[\[User:(.*?)(\||]])/)?.[1].trim(),delete r[1],delete r[2],r});else{d[c]=[];continue}}await Promise.all(Object.entries(d).map(async([,c])=>{await Promise.all(c.map(async t=>{let n=mw.Title.newFromText(t.original),l=mw.Title.newFromText(t.destination);if(!n)return mw.notify(`Invalid title "${t.original}"!`,{type:"error"});if(!l)return mw.notify(`Invalid title "${t.destination}"!`,{type:"error"});let r=!/[#<>[\]{|}]/.test(t.destination)&&l,s=document.createElement("span");s.classList.add("rmtr-review-invalid-warning"),s.textContent=`Invalid title "${t.destination}"!`;let e=![x.file,x.category].some(u=>n.getNamespaceId()===u||l.getNamespaceId()===u),i=document.createElement("span");i.classList.add("rmtr-review-invalid-warning"),i.textContent=`Warning: original or destination page is in namespace "${l.getNamespaceId()===x.file?"file":"category"}"!`;let o=await new mw.Api().parse(`[[:${t.original}]] \u2192 ${r?`[[:${t.destination}]]`:s.outerHTML} requested by ${t.requester?mw.util.isIPAddress(t.requester)?`[[Special:Contributions/${t.requester}|${t.requester}]]`:`[[User:${t.requester}|${t.requester}]]`:/(\[{2}Special:Contributions\/(.*?)\|\2]{2})/.exec(t.sig)?.[1]??"(unknown)"} with reasoning "${t.reason}"`),a=new DOMParser().parseFromString(o,"text/html"),m=document.createElement("li");m.innerHTML=a.querySelector("div.mw-parser-output").firstElementChild.innerHTML,e||m.append(i),t.element=m}))}));let f=document.createElement("div");f.id="rmtr-review-result";let E=document.createElement("div");E.id="rmtr-review-header",E.textContent="Technical move requests review",f.append(E);for(let[c,[t,n]]of Object.entries(d).entries()){let l=document.createElement("div");l.classList.add("rmtr-review-header"),l.textContent=t,f.append(l);let r=document.createElement("div");if(r.classList.add("rmtr-review-section-content"),n.length===0){let s=document.createElement("div");s.textContent="No requests in this section",r.append(s)}else{let s=document.createElement("ul");for(let[e,i]of n.entries()){let o=i.element,a=document.createElement("input");a.type="checkbox",a.classList.add("rmtr-review-request-checkbox"),a.id=`rmtr-review-remove-request-${c}-${e}`,a.addEventListener("change",()=>{a.checked?(d[t][e].result={remove:!0,reason:R.value},u.style.display="inline",v.disabled=!0):(delete d[t][e].result,u.style.display="none",v.disabled=!1)});let m=document.createElement("label");m.htmlFor=`rmtr-review-remove-request-${c}-${e}`,m.textContent="Remove request",o.append(a),o.append(m);let u=document.createElement("span");u.style.display="none",u.append(document.createTextNode(" as "));let R=document.createElement("select");t==="Contested technical requests"&&(R.value="Contested"),R.addEventListener("change",()=>{d[t][e].result.reason=R.value});let M=["Completed","Contested","Already done","Invalid page name","Incorrect venue","Withdrawn","Stale","Not done"];for(let h of M){let g=document.createElement("option");g.value=h,g.textContent=h,R.append(g)}u.append(R),o.append(u);let v=document.createElement("input");v.type="checkbox",v.classList.add("rmtr-review-request-checkbox"),v.id=`rmtr-review-move-request-${c}-${e}`,v.addEventListener("change",()=>{v.checked?(d[t][e].result={move:!0,section:$.value},p.style.display="inline",a.disabled=!0):(delete d[t][e].result,p.style.display="none",a.disabled=!1)});let C=document.createElement("label");C.htmlFor=`rmtr-review-move-request-${c}-${e}`,C.textContent="Switch section",o.append(v),o.append(C);let p=document.createElement("span");p.style.display="none",p.append(document.createTextNode(" to "));let $=document.createElement("select");$.addEventListener("change",()=>{d[t][e].result.section=$.value});for(let h of y){if(h===t)continue;let g=document.createElement("option");g.selected=h===(t===N?j:N),g.value=h,g.textContent=h,$.append(g)}p.append($),p.append(document.createTextNode(" with reasoning "));let q=document.createElement("input");q.type="text",q.addEventListener("input",()=>{d[t][e].result.reason=q.value}),p.append(q),p.append(document.createTextNode(" (optional, automatically pings requestor and signs)")),o.append(p),s.append(o)}r.append(s)}f.append(r)}let w=document.createElement("button");w.id="rmtr-review-submit",w.textContent="Submit",w.addEventListener("click",async()=>{if((await I()).revid!==O)return mw.notify("An edit conflict occurred, please start over!",{type:"error"});w.disabled=!0,b.style.display="inline-block";let t=S,n={remove:{},move:{},total:0};for(let s of Object.values(d))for(let e of s)if(e.result){if("remove"in e.result)t=t.replace(e.full+`
`,"").replace(e.full,""),e.result.reason in n.remove||(n.remove[e.result.reason]=[]),n.remove[e.result.reason].push(e),n.total++;else if("move"in e.result){let i=y[y.indexOf(e.result.section)+1];t=t.replace(e.full+`
`,"").replace(e.full,""),t=t.replace(new RegExp(`(
?
?(?:={3,} ?${i} ?={3,}|$))`),`
${e.full}${e.result.reason?`
:: ${e.requester&&e.requester.length>0?mw.util.isIPAddress(e.requester)?"":`@[[User:${e.requester}|${e.requester}]] `:""} ${e.result.reason} ~~~~`:""}$1`),e.result.section in n.move||(n.move[e.result.section]=[]),n.move[e.result.section].push(e),n.total++}}if(n.total===0)return w.disabled=!1,b.style.display="none",mw.notify("No changes to make!",{type:"error"});let l=Object.values(d).every(s=>s.every(e=>e.result&&"remove"in e.result)),r=`Handled ${n.total} request${n.total>1?"s":""}: ${Object.entries(n.remove).length>0?`Removed ${Object.entries(n.remove).map(([s,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} as ${s.toLowerCase()}`).join(", ")}`:""}${Object.entries(n.move).length>0?`${Object.entries(n.remove).length>0?", ":""}Moved ${Object.entries(n.move).map(([s,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} to "${s}"`).join(", ")}`:""}${l?" (no requests remain)":""} (via [[User:Eejit43/scripts/rmtr-helper|script]])`;await new mw.Api().edit(mw.config.get("wgPageName"),()=>({text:t,summary:r})),mw.notify(`Successfully handled ${n.total} requests, reloading...`,{type:"success"}),window.location.reload()});let b=document.createElement("span");b.id="rmtr-review-loading",b.style.display="none",w.append(b),f.append(w),mw.util.$content[0].prepend(f),f.scrollIntoView()})});async function I(){return(await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:["content","ids"],rvslots:"main",titles:mw.config.get("wgPageName")})).query.pages[0].revisions[0]}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
