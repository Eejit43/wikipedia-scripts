// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/script-updater.ts

"use strict";(()=>{mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;let p=document.querySelector(".mw-editsection").cloneNode(!0),u=document.createElement("a");u.href="#",u.style.fontWeight="bold",u.textContent="Sync from GitHub",u.addEventListener("click",h=>{h.preventDefault();let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let t=new l;e.addWindows([t]),t.open()}),p.querySelector("a").replaceWith(u),document.querySelector("h2#My_user_scripts + .mw-editsection").after(p);class l extends OO.ui.ProcessDialog{api=new mw.Api;REPO_OWNER="Eejit43";REPO_NAME="wikipedia-scripts";SCRIPT_MESSAGE=" (via [[User:Eejit43/scripts/script-updater.js|script]])";content;scriptsMultiselect;actionsMultiselect;latestCommitHash;scripts;scriptDataUpdaters={"article-cleaner":f,"redirect-helper":y};constructor(){super({size:"medium"}),l.static.name="ScriptUpdaterDialog",l.static.title="script-updater",l.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}getSetupProcess=()=>l.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){let o=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(o.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.scriptsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:this.scripts.map(o=>new OO.ui.CheckboxMultioptionWidget({data:o.name,label:o.name}))}),this.scriptsMultiselect.$element[0].style.columnCount="2";let t=new OO.ui.FieldLayout(this.scriptsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Scripts to update:</b>"),align:"top"});this.actionsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:[{id:"documentation",name:"Update script documentation"},{id:"script",name:"Update script code"},{id:"talk",name:"Create talk redirect",selectedDefault:!1}].map(({id:o,name:c,selectedDefault:n})=>new OO.ui.CheckboxMultioptionWidget({data:o,label:c,selected:n??!0}))});let s=new OO.ui.FieldLayout(this.actionsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Actions to take (if applicable):</b>"),align:"top"}),i=new OO.ui.ButtonGroupWidget({items:Object.entries(this.scriptDataUpdaters).map(([o,c])=>{let n=new OO.ui.ButtonWidget({label:o,flags:["progressive"]});return n.on("click",async()=>{mw.notify(`Fetching ${o} data...`,{tag:"update-script-data-notification"});let m=await c();mw.notify(`Successfully fetched ${o} data, opening diff...`,{type:"success",tag:"update-script-data-notification"}),await new Promise(d=>setTimeout(d,500)),this.openDiff(`User:Eejit43/scripts/${o}.json`,m)}),n})}),a=new OO.ui.FieldLayout(i,{label:new OO.ui.HtmlSnippet("<b>Script data updaters:</b>"),align:"top"});this.content.$element.append(t.$element),this.content.$element.append(s.$element),this.content.$element.append(a.$element),this.$body.append(this.content.$element)}));getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.close()}):e==="save"?new OO.ui.Process(()=>{let t=this.scriptsMultiselect.findSelectedItemsData().map(s=>this.scripts.find(i=>i.name===s));this.close(),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(t.map(s=>this.handleScript(s))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(s=>!s.personal&&!s.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(s=>s.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(s=>s.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${t.length} script${t.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):l.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>l.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});wrapAsyncMethod(e){let t=$.Deferred();return e().then(s=>t.resolve(s)),t.promise()}loadScriptData=async()=>{let e=await fetch(`https://api.github.com/repos/${this.REPO_OWNER}/${this.REPO_NAME}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;let t=await fetch(`https://raw.githubusercontent.com/${this.REPO_OWNER}/${this.REPO_NAME}/${this.latestCommitHash}/scripts.json`);if(!t.ok)return`Failed to fetch script data from GitHub: ${t.statusText} (${t.status})`;let s=await t.json();this.scripts=Object.entries(s).map(([i,a])=>({name:i,...a}))};async handleScript(e){let t=this.actionsMultiselect.findSelectedItemsData(),s=`User:Eejit43/scripts/${e.name}`,i=`User talk:Eejit43/scripts/${e.name}`,a=`${s}.js`,o=["{{User:Eejit43/script-documentation",e.image===!1?`| image             = ${e.image}`:null,e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = ${e["use-instead"].includes("User:")?e["use-instead"]:`[[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`}`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(n=>`[[User:${n}|${n}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.configuration?`| configuration     = ${e.configuration}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([n,m])=>`* '''{{start date and age|${n}}}:'''${Array.isArray(m)?`
${m.map(d=>`** ${d}`).join(`
`)}`:` ${m}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/script-documentation/skin-support|${Object.entries(e["skin-support"]).map(([n,m])=>`${n}=${m}`).join("|")}}}`,e["source-multiple"]?`| source-multiple   = ${e["source-multiple"]}`:null,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean),c=null;if(t.includes("script")){let n=await fetch(`https://raw.githubusercontent.com/${this.REPO_OWNER}/${this.REPO_NAME}/${this.latestCommitHash}/dist/${e.name}.js`);if(n.ok)c=await n.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${n.statusText} (${n.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(t.includes("documentation")&&await this.editOrCreate(s,o.join(`
`),"Syncing script documentation from GitHub"),t.includes("talk")&&await this.editOrCreate(i,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),c&&await this.editOrCreate(a,c,"Syncing script from GitHub")}mapScripts(e){return e.map(t=>`* [[User:Eejit43/scripts/${t.name}${t.personal?".js":""}|${t.name}]] - ${t["short-description"]||t.description}${t["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${t["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,t,s){s+=this.SCRIPT_MESSAGE,await this.api.edit(e,()=>({text:t,summary:s,watchlist:"watch"})).catch(async(i,a)=>{if(i==="nocreate-missing")await this.api.create(e,{summary:s,watchlist:"watch"},t).catch((o,c)=>{mw.notify(`Error creating ${e}: ${c?.error?.info??"Unknown error"} (${o})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${a?.error?.info??"Unknown error"} (${i})`,{type:"error"});return}})}openDiff(e,t){let s={wpTextbox1:t,wpSummary:`Updating data${this.SCRIPT_MESSAGE}`,wpDiff:"1",wpUltimateParam:"1"},i=new URL(`${mw.config.get("wgScriptPath")}/index.php`,window.location.origin);i.searchParams.set("title",e),i.searchParams.set("action","submit");let a=document.createElement("form");a.action=i.toString(),a.method="POST",a.target="_blank";for(let[o,c]of Object.entries(s)){let n=document.createElement("input");n.type="hidden",n.name=o,n.value=c,a.append(n)}document.body.append(a),a.submit(),a.remove()}}Object.assign(l.prototype,OO.ui.ProcessDialog.prototype)});async function f(){let l=(await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"Wikipedia:AutoWikiBrowser/Template redirects"})).query.pages[0].revisions[0].slots.main.content.trim().matchAll(/\* {{tl\|.+/g).toArray().map(h=>{let e=h[0].matchAll(/{{tl\|(.+?)}}/g).toArray();return{from:e.slice(0,-1).map(t=>t[1]),to:e.at(-1)[1]}});return JSON.stringify(l)}async function y(){let p=new mw.Api,u=await p.get({action:"query",list:"categorymembers",cmtitle:"Category:Redirect templates",cmlimit:"max",formatversion:"2"}),l=await p.get({action:"query",list:"categorymembers",cmtitle:"Category:Template redirects with possibilities",cmlimit:"max",formatversion:"2"}),h=u.query.categorymembers.filter(i=>i.title.startsWith("Template:R ")&&i.title!=="Template:R template index").map(i=>({name:i.title.split(":")[1],redirect:!1})),e=l.query.categorymembers.filter(i=>i.title.startsWith("Template:R ")&&i.title!=="Template:R with possibilities").map(i=>({name:i.title.split(":")[1],redirect:!0})),t=[],s=await Promise.all([...h,...e].sort((i,a)=>i.name.startsWith("R comics")||i.name.startsWith("R ME")?1:a.name.startsWith("R comics")||a.name.startsWith("R ME")?-1:i.name.localeCompare(a.name)).map(async i=>{let a=await p.get({action:"templatedata",titles:"Template:"+i.name,formatversion:"2"}),o=Object.values(a.pages)[0]?.params||{},c=Object.fromEntries(Object.entries(o).map(([d,r])=>[d,{aliases:r.aliases,label:r.label?.en??null,description:r.description?.en??null,type:r.type,required:r.required,suggested:r.suggested,default:r.default?.en??null,example:r.example?.en??null}])),n;i.redirect?(n=(await p.get({action:"query",titles:"Template:"+i.name,prop:"linkshere",lhnamespace:10,lhlimit:"max",formatversion:"2"})).query.pages[0].linkshere?.filter(r=>r.redirect).map(r=>r.title.split(":")[1]).filter(r=>![...h,...e].some(g=>g.name===r)&&!r.endsWith("/doc")&&!r.endsWith("/sandbox")).sort((r,g)=>r.localeCompare(g))??[],t.push(...n)):n=(await p.get({action:"query",titles:"Template:"+i.name,prop:"redirects",rdlimit:"max",formatversion:"2"})).query.pages[0].redirects?.filter(r=>r.ns===10).map(r=>r.title.split(":")[1]).filter(r=>!e.some(g=>g.name===r)).sort((r,g)=>r.localeCompare(g))??[];let m={...i.redirect?{redirect:!0}:{},parameters:c,aliases:n};return[i.name,m]}));for(let i of t)for(let[,a]of s)!a.redirect&&a.aliases.includes(i)&&(a.aliases=a.aliases.filter(o=>o!==i));return JSON.stringify(Object.fromEntries(s))}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
