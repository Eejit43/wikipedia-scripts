// <pre>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/script-updater.ts

"use strict";(()=>{var g=new mw.Api;async function y(d){return(await g.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:d})).query.pages[0].revisions?.[0].slots.main.content.trim()}mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;let d=document.querySelector(".mw-editsection").cloneNode(!0),u=document.createElement("a");u.href="#",u.style.fontWeight="bold",u.textContent="Sync from GitHub",u.addEventListener("click",p=>{p.preventDefault();let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let s=new l;e.addWindows([s]),s.open()}),d.querySelector("a").replaceWith(u),document.querySelector("h2#My_user_scripts + .mw-editsection").after(d);class l extends OO.ui.ProcessDialog{REPO_OWNER="Eejit43";REPO_NAME="wikipedia-scripts";SCRIPT_MESSAGE=" (via [[User:Eejit43/scripts/script-updater.js|script]])";content;scriptsMultiselect;actionsMultiselect;latestCommitHash;scripts;scriptDataUpdaters={"article-cleaner":w,"redirect-helper":O};constructor(){super({size:"medium"}),l.static.name="ScriptUpdaterDialog",l.static.title="script-updater",l.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}getSetupProcess=()=>l.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){let i=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(i.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.scriptsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:this.scripts.map(i=>new OO.ui.CheckboxMultioptionWidget({data:i.name,label:i.name}))}),this.scriptsMultiselect.$element[0].style.columnCount="2";let s=new OO.ui.FieldLayout(this.scriptsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Scripts to update:</b>"),align:"top"});this.actionsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:[{id:"documentation",name:"Update script documentation"},{id:"script",name:"Update script code"},{id:"talk",name:"Create talk redirect",selectedDefault:!1}].map(({id:i,name:r,selectedDefault:a})=>new OO.ui.CheckboxMultioptionWidget({data:i,label:r,selected:a??!0}))});let n=new OO.ui.FieldLayout(this.actionsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Actions to take (if applicable):</b>"),align:"top"}),m=new OO.ui.ButtonGroupWidget({items:Object.entries(this.scriptDataUpdaters).map(([i,r])=>{let a=new OO.ui.ButtonWidget({label:i,flags:["progressive"]});return a.on("click",async()=>{mw.notify(`Fetching ${i} data...`,{tag:"update-script-data-notification"});let o=await r();mw.notify(`Successfully fetched ${i} data, opening diff...`,{type:"success",tag:"update-script-data-notification"}),await new Promise(c=>setTimeout(c,500)),this.openDiff(`User:Eejit43/scripts/${i}.json`,o)}),a})}),t=new OO.ui.FieldLayout(m,{label:new OO.ui.HtmlSnippet("<b>Script data updaters:</b>"),align:"top"});this.content.$element.append(s.$element),this.content.$element.append(n.$element),this.content.$element.append(t.$element),this.$body.append(this.content.$element)}));getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.close()}):e==="save"?new OO.ui.Process(()=>{let s=this.scriptsMultiselect.findSelectedItemsData().map(n=>this.scripts.find(m=>m.name===n));this.close(),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(s.map(n=>this.handleScript(n))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(n=>!n.personal&&!n.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(n=>n.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(n=>n.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${s.length} script${s.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):l.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>l.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});wrapAsyncMethod(e){let s=$.Deferred();return e().then(n=>s.resolve(n)),s.promise()}loadScriptData=async()=>{let e=await fetch(`https://api.github.com/repos/${this.REPO_OWNER}/${this.REPO_NAME}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;let s=await fetch(`https://raw.githubusercontent.com/${this.REPO_OWNER}/${this.REPO_NAME}/${this.latestCommitHash}/scripts.json`);if(!s.ok)return`Failed to fetch script data from GitHub: ${s.statusText} (${s.status})`;let n=await s.json();this.scripts=Object.entries(n).map(([m,t])=>({name:m,...t}))};async handleScript(e){let s=this.actionsMultiselect.findSelectedItemsData(),n=`User:Eejit43/scripts/${e.name}`,m=`User talk:Eejit43/scripts/${e.name}`,t=`${n}.js`,i=["{{User:Eejit43/script-documentation",e.image===!1?`| image             = ${e.image}`:null,e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = ${e["use-instead"].includes("User:")?e["use-instead"]:`[[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`}`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(a=>`[[User:${a}|${a}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.configuration?`| configuration     = ${e.configuration}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([a,o])=>`* '''{{start date and age|${a}}}:'''${Array.isArray(o)?`
${o.map(c=>`** ${c}`).join(`
`)}`:` ${o}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/script-documentation/skin-support|${Object.entries(e["skin-support"]).map(([a,o])=>`${a}=${o}`).join("|")}}}`,e["source-multiple"]?`| source-multiple   = ${e["source-multiple"]}`:null,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean),r=null;if(s.includes("script")){let a=await fetch(`https://raw.githubusercontent.com/${this.REPO_OWNER}/${this.REPO_NAME}/${this.latestCommitHash}/dist/${e.name}.js`);if(a.ok)r=await a.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${a.statusText} (${a.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(s.includes("documentation")&&await this.editOrCreate(n,i.join(`
`),"Syncing script documentation from GitHub"),s.includes("talk")&&await this.editOrCreate(m,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),r&&await this.editOrCreate(t,r,"Syncing script from GitHub")}mapScripts(e){return e.map(s=>`* [[User:Eejit43/scripts/${s.name}${s.personal?".js":""}|${s.name}]] - ${s["short-description"]||s.description}${s["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${s["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,s,n){n+=this.SCRIPT_MESSAGE,await g.edit(e,()=>({text:s,summary:n,watchlist:"watch"})).catch(async(m,t)=>{if(m==="nocreate-missing")await g.create(e,{summary:n,watchlist:"watch"},s).catch((i,r)=>{mw.notify(`Error creating ${e}: ${r?.error?.info??"Unknown error"} (${i})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${t?.error?.info??"Unknown error"} (${m})`,{type:"error"});return}})}openDiff(e,s){let n={wpTextbox1:s,wpSummary:`Updating data${this.SCRIPT_MESSAGE}`,wpDiff:"1",wpUltimateParam:"1"},m=new URL(`${mw.config.get("wgScriptPath")}/index.php`,window.location.origin);m.searchParams.set("title",e),m.searchParams.set("action","submit");let t=document.createElement("form");t.action=m.toString(),t.method="POST",t.target="_blank";for(let[i,r]of Object.entries(n)){let a=document.createElement("input");a.type="hidden",a.name=i,a.value=r,t.append(a)}document.body.append(t),t.submit(),t.remove()}}Object.assign(l.prototype,OO.ui.ProcessDialog.prototype)});async function w(){let u=(await y("Wikipedia:AutoWikiBrowser/Template redirects")??"").matchAll(/\* {{tl\|.+/g).toArray().map(l=>{let p=l[0].matchAll(/{{tl\|(.+?)}}/g).toArray();return{from:p.slice(0,-1).map(e=>e[1]),to:p.at(-1)[1]}});return JSON.stringify(u)}function h(d,u){let l=[];for(let p=0;p<d.length;p+=u){let e=d.slice(p,p+u);l.push(e)}return l}async function b(d){let u=0,l=[],p={continue:{}};for(;"continue"in p&&u<10;)p=await g.get({...d,...p.continue}),l.push(p),u++;return l}async function O(){let d=await g.get({action:"query",list:"categorymembers",cmtitle:"Category:Redirect templates",cmlimit:"max",formatversion:"2"}),u=await g.get({action:"query",list:"categorymembers",cmtitle:"Category:Template redirects with possibilities",cmlimit:"max",formatversion:"2"}),l=d.query.categorymembers.filter(t=>t.title.startsWith("Template:R ")&&t.title!=="Template:R template index").map(t=>({name:t.title.split(":")[1],redirect:!1})),p=u.query.categorymembers.filter(t=>t.title.startsWith("Template:R ")&&t.title!=="Template:R with possibilities").map(t=>({name:t.title.split(":")[1],redirect:!0})),e=[...l,...p].sort((t,i)=>t.name.startsWith("R comics")||t.name.startsWith("R ME")?1:i.name.startsWith("R comics")||i.name.startsWith("R ME")?-1:t.name.localeCompare(i.name)),s=Object.fromEntries(e.map(t=>[t.name,{redirect:t.redirect,parameters:{},aliases:[]}]));await Promise.all(h(e,50).map(async t=>{let i=await g.get({action:"templatedata",titles:t.map(r=>`Template:${r.name}`),formatversion:"2"});for(let r of Object.values(i.pages)){let a=Object.fromEntries(Object.entries(r.params).map(([o,c])=>[o,{aliases:c.aliases,label:c.label?.en??null,description:c.description?.en??null,type:c.type,required:c.required,suggested:c.suggested,default:c.default?.en??null,example:c.example?.en??null}]));s[r.title.split(":")[1]].parameters=a}})),await Promise.all(h(l,50).map(async t=>{let r=(await b({action:"query",titles:t.map(a=>`Template:${a.name}`),prop:"redirects",rdnamespace:10,rdlimit:"max",formatversion:"2"})).flatMap(a=>a.query.pages);for(let a of r){let o=a.redirects?.map(c=>c.title.split(":")[1]).filter(c=>!p.some(f=>f.name===c)).sort((c,f)=>c.localeCompare(f))??[];s[a.title.split(":")[1]].aliases.push(...o)}}));let n=[];await Promise.all(h(p,50).map(async t=>{let i=await g.get({action:"query",titles:t.map(r=>`Template:${r.name}`),prop:"linkshere",lhnamespace:10,lhlimit:"max",formatversion:"2"});for(let r of i.query.pages){let a=r.linkshere?.filter(o=>o.redirect).map(o=>o.title.split(":")[1]).filter(o=>!o.endsWith("/doc")&&!o.endsWith("/sandbox")).sort((o,c)=>o.localeCompare(c))??[];n.push(...a),s[r.title.split(":")[1]].aliases=a}}));let m=Object.entries(s).map(([t,i])=>{let r={...i.redirect?{redirect:!0}:{},parameters:i.parameters,aliases:i.aliases.sort((a,o)=>a.localeCompare(o))};return[t,r]});for(let t of n)for(let[,i]of m)!i.redirect&&i.aliases.includes(t)&&(i.aliases=i.aliases.filter(r=>r!==t));return JSON.stringify(Object.fromEntries(m))}})();

// </pre>
//# sourceMappingURL=data:application/json;base64,
