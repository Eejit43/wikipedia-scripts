// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/script-updater.ts

"use strict";(()=>{mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;let y=document.querySelector(".mw-editsection").cloneNode(!0),d=document.createElement("a");d.href="#",d.style.fontWeight="bold",d.textContent="Sync from GitHub",d.addEventListener("click",m=>{m.preventDefault();let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let s=new p;e.addWindows([s]),s.open()}),y.querySelector("a").replaceWith(d),document.querySelector("h2#My_user_scripts + .mw-editsection").after(y);let w=" (via [[User:Eejit43/scripts/script-updater.js|script]])";class p extends OO.ui.ProcessDialog{api=new mw.Api;repoOwner="Eejit43";repoName="wikipedia-scripts";content;scriptsMultiselect;actionsMultiselect;latestCommitHash;scripts;scriptDataUpdaters={"redirect-helper":b};constructor(){super({size:"medium"}),p.static.name="ScriptUpdaterDialog",p.static.title="script-updater",p.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}getSetupProcess=()=>p.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){let o=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(o.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.scriptsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:this.scripts.map(o=>new OO.ui.CheckboxMultioptionWidget({data:o.name,label:o.name}))}),this.scriptsMultiselect.$element[0].style.columnCount="2";let s=new OO.ui.FieldLayout(this.scriptsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Scripts to update:</b>"),align:"top"});this.actionsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:[{id:"documentation",name:"Update script documentation"},{id:"script",name:"Update script code"},{id:"talk",name:"Create talk redirect",selectedDefault:!1}].map(({id:o,name:t,selectedDefault:a})=>new OO.ui.CheckboxMultioptionWidget({data:o,label:t,selected:a??!0}))});let i=new OO.ui.FieldLayout(this.actionsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Actions to take (if applicable):</b>"),align:"top"}),r=new OO.ui.ButtonGroupWidget({items:Object.entries(this.scriptDataUpdaters).map(([o,t])=>{let a=new OO.ui.ButtonWidget({label:`Update ${o} data`,flags:["progressive"]});return a.on("click",async()=>{mw.notify(`Fetching ${o} data...`,{tag:"update-script-data-notification"});let c=await t();mw.notify(`Successfully fetched ${o} data, opening diff...`,{type:"success",tag:"update-script-data-notification"}),await new Promise(g=>setTimeout(g,500)),O("User:Eejit43/scripts/redirect-helper.json",c)}),a})}),l=new OO.ui.FieldLayout(r,{label:new OO.ui.HtmlSnippet("<b>Script updater functions:</b>"),align:"top"});this.content.$element.append(s.$element),this.content.$element.append(i.$element),this.content.$element.append(l.$element),this.$body.append(this.content.$element)}));getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.close()}):e==="save"?new OO.ui.Process(()=>{let s=this.scriptsMultiselect.findSelectedItemsData().map(i=>this.scripts.find(r=>r.name===i));this.close(),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(s.map(i=>this.handleScript(i))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(i=>!i.personal&&!i.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(i=>i.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(i=>i.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${s.length} script${s.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):p.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>p.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});wrapAsyncMethod(e){let s=$.Deferred();return e().then(i=>s.resolve(i)),s.promise()}loadScriptData=async()=>{let e=await fetch(`https://api.github.com/repos/${this.repoOwner}/${this.repoName}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;let s=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/scripts.json`);if(!s.ok)return`Failed to fetch script data from GitHub: ${s.statusText} (${s.status})`;let i=await s.json();this.scripts=Object.entries(i).map(([r,l])=>({name:r,...l}))};async handleScript(e){let s=this.actionsMultiselect.findSelectedItemsData(),i=`User:Eejit43/scripts/${e.name}`,r=`User talk:Eejit43/scripts/${e.name}`,l=`${i}.js`,o=["{{User:Eejit43/script-documentation",e.image===!1?`| image             = ${e.image}`:null,e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = ${e["use-instead"].includes("User:")?e["use-instead"]:`[[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`}`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(a=>`[[User:${a}|${a}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.configuration?`| configuration     = ${e.configuration}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([a,c])=>`* '''{{start date and age|${a}}}:'''${Array.isArray(c)?`
${c.map(g=>`** ${g}`).join(`
`)}`:` ${c}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/script-documentation/skin-support|${Object.entries(e["skin-support"]).map(([a,c])=>`${a}=${c}`).join("|")}}}`,e["source-multiple"]?`| source-multiple   = ${e["source-multiple"]}`:null,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean),t=null;if(s.includes("script")){let a=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/dist/${e.name}.js`);if(a.ok)t=await a.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${a.statusText} (${a.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(s.includes("documentation")&&await this.editOrCreate(i,o.join(`
`),"Syncing script documentation from GitHub"),s.includes("talk")&&await this.editOrCreate(r,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),t&&await this.editOrCreate(l,t,"Syncing script from GitHub")}mapScripts(e){return e.map(s=>`* [[User:Eejit43/scripts/${s.name}${s.personal?".js":""}|${s.name}]] - ${s["short-description"]||s.description}${s["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${s["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,s,i){i+=w,await this.api.edit(e,()=>({text:s,summary:i,watchlist:"watch"})).catch(async(r,l)=>{if(r==="nocreate-missing")await this.api.create(e,{summary:i,watchlist:"watch"},s).catch((o,t)=>{mw.notify(`Error creating ${e}: ${t?.error?.info??"Unknown error"} (${o})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${l?.error?.info??"Unknown error"} (${r})`,{type:"error"});return}})}}Object.assign(p.prototype,OO.ui.ProcessDialog.prototype);async function b(){let m=new mw.Api,e=await m.get({action:"query",list:"categorymembers",cmtitle:"Category:Redirect templates",cmlimit:"max",formatversion:"2"}),s=await m.get({action:"query",list:"categorymembers",cmtitle:"Category:Template redirects with possibilities",cmlimit:"max",formatversion:"2"}),i=e.query.categorymembers.filter(t=>t.title.startsWith("Template:R ")&&t.title!=="Template:R template index").map(t=>({name:t.title.split(":")[1],redirect:!1})),r=s.query.categorymembers.filter(t=>t.title.startsWith("Template:R ")&&t.title!=="Template:R with possibilities").map(t=>({name:t.title.split(":")[1],redirect:!0})),l=[],o=await Promise.all([...i,...r].sort((t,a)=>t.name.startsWith("R comics")||t.name.startsWith("R ME")?1:a.name.startsWith("R comics")||a.name.startsWith("R ME")?-1:t.name.localeCompare(a.name)).map(async t=>{let a=await m.get({action:"templatedata",titles:"Template:"+t.name,formatversion:"2"}),c=Object.values(a.pages)[0]?.params||{},g=Object.fromEntries(Object.entries(c).map(([f,n])=>[f,{aliases:n.aliases,label:n.label?.en??null,description:n.description?.en??null,type:n.type,required:n.required,suggested:n.suggested,default:n.default?.en??null,example:n.example?.en??null}])),h;t.redirect?(h=(await m.get({action:"query",titles:"Template:"+t.name,prop:"linkshere",lhnamespace:10,lhlimit:"max",formatversion:"2"})).query.pages[0].linkshere?.filter(n=>n.redirect).map(n=>n.title.split(":")[1]).filter(n=>![...i,...r].some(u=>u.name===n)&&!n.endsWith("/doc")&&!n.endsWith("/sandbox")).sort((n,u)=>n.localeCompare(u))??[],l.push(...h)):h=(await m.get({action:"query",titles:"Template:"+t.name,prop:"redirects",rdlimit:"max",formatversion:"2"})).query.pages[0].redirects?.filter(n=>n.ns===10).map(n=>n.title.split(":")[1]).filter(n=>!r.some(u=>u.name===n)).sort((n,u)=>n.localeCompare(u))??[];let k={...t.redirect?{redirect:!0}:{},parameters:g,aliases:h};return[t.name,k]}));for(let t of l)for(let[,a]of o)!a.redirect&&a.aliases.includes(t)&&(a.aliases=a.aliases.filter(c=>c!==t));return JSON.stringify(Object.fromEntries(o))}function O(m,e){let s={wpTextbox1:e,wpSummary:`Updating data${w}`,wpDiff:"1",wpUltimateParam:"1"},i=new URL(`${mw.config.get("wgScriptPath")}/index.php`,window.location.origin);i.searchParams.set("title",m),i.searchParams.set("action","submit");let r=document.createElement("form");r.action=i.toString(),r.method="POST",r.target="_blank";for(let[l,o]of Object.entries(s)){let t=document.createElement("input");t.type="hidden",t.name=l,t.value=o,r.append(t)}document.body.append(r),r.submit(),r.remove()}});})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
