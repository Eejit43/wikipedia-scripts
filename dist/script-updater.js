// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/script-updater.ts

"use strict";(()=>{mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;let y=document.querySelector(".mw-editsection").cloneNode(!0),d=document.createElement("a");d.href="#",d.style.fontWeight="bold",d.textContent="Sync from GitHub",d.addEventListener("click",m=>{m.preventDefault();let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let t=new p;e.addWindows([t]),t.open()}),y.querySelector("a").replaceWith(d),document.querySelector("h2#My_user_scripts + .mw-editsection").after(y);class p extends OO.ui.ProcessDialog{api=new mw.Api;repoOwner="Eejit43";repoName="wikipedia-scripts";scriptMessage=" (via [[User:Eejit43/scripts/script-updater.js|script]])";content;scriptsMultiselect;actionsMultiselect;latestCommitHash;scripts;scriptDataUpdaters={"redirect-helper":w};constructor(){super({size:"medium"}),p.static.name="ScriptUpdaterDialog",p.static.title="script-updater",p.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}getSetupProcess=()=>p.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){let r=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(r.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.scriptsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:this.scripts.map(r=>new OO.ui.CheckboxMultioptionWidget({data:r.name,label:r.name}))}),this.scriptsMultiselect.$element[0].style.columnCount="2";let t=new OO.ui.FieldLayout(this.scriptsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Scripts to update:</b>"),align:"top"});this.actionsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:[{id:"documentation",name:"Update script documentation"},{id:"script",name:"Update script code"},{id:"talk",name:"Create talk redirect",selectedDefault:!1}].map(({id:r,name:s,selectedDefault:i})=>new OO.ui.CheckboxMultioptionWidget({data:r,label:s,selected:i??!0}))});let a=new OO.ui.FieldLayout(this.actionsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Actions to take (if applicable):</b>"),align:"top"}),o=new OO.ui.ButtonGroupWidget({items:Object.entries(this.scriptDataUpdaters).map(([r,s])=>{let i=new OO.ui.ButtonWidget({label:`Update ${r} data`,flags:["progressive"]});return i.on("click",async()=>{mw.notify(`Fetching ${r} data...`,{tag:"update-script-data-notification"});let c=await s();mw.notify(`Successfully fetched ${r} data, opening diff...`,{type:"success",tag:"update-script-data-notification"}),await new Promise(g=>setTimeout(g,500)),this.openDiff("User:Eejit43/scripts/redirect-helper.json",c)}),i})}),l=new OO.ui.FieldLayout(o,{label:new OO.ui.HtmlSnippet("<b>Script data updaters:</b>"),align:"top"});this.content.$element.append(t.$element),this.content.$element.append(a.$element),this.content.$element.append(l.$element),this.$body.append(this.content.$element)}));getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.close()}):e==="save"?new OO.ui.Process(()=>{let t=this.scriptsMultiselect.findSelectedItemsData().map(a=>this.scripts.find(o=>o.name===a));this.close(),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(t.map(a=>this.handleScript(a))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(a=>!a.personal&&!a.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(a=>a.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(a=>a.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${t.length} script${t.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):p.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>p.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});wrapAsyncMethod(e){let t=$.Deferred();return e().then(a=>t.resolve(a)),t.promise()}loadScriptData=async()=>{let e=await fetch(`https://api.github.com/repos/${this.repoOwner}/${this.repoName}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;let t=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/scripts.json`);if(!t.ok)return`Failed to fetch script data from GitHub: ${t.statusText} (${t.status})`;let a=await t.json();this.scripts=Object.entries(a).map(([o,l])=>({name:o,...l}))};async handleScript(e){let t=this.actionsMultiselect.findSelectedItemsData(),a=`User:Eejit43/scripts/${e.name}`,o=`User talk:Eejit43/scripts/${e.name}`,l=`${a}.js`,r=["{{User:Eejit43/script-documentation",e.image===!1?`| image             = ${e.image}`:null,e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = ${e["use-instead"].includes("User:")?e["use-instead"]:`[[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`}`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(i=>`[[User:${i}|${i}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.configuration?`| configuration     = ${e.configuration}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([i,c])=>`* '''{{start date and age|${i}}}:'''${Array.isArray(c)?`
${c.map(g=>`** ${g}`).join(`
`)}`:` ${c}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/script-documentation/skin-support|${Object.entries(e["skin-support"]).map(([i,c])=>`${i}=${c}`).join("|")}}}`,e["source-multiple"]?`| source-multiple   = ${e["source-multiple"]}`:null,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean),s=null;if(t.includes("script")){let i=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/dist/${e.name}.js`);if(i.ok)s=await i.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${i.statusText} (${i.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(t.includes("documentation")&&await this.editOrCreate(a,r.join(`
`),"Syncing script documentation from GitHub"),t.includes("talk")&&await this.editOrCreate(o,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),s&&await this.editOrCreate(l,s,"Syncing script from GitHub")}mapScripts(e){return e.map(t=>`* [[User:Eejit43/scripts/${t.name}${t.personal?".js":""}|${t.name}]] - ${t["short-description"]||t.description}${t["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${t["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,t,a){a+=this.scriptMessage,await this.api.edit(e,()=>({text:t,summary:a,watchlist:"watch"})).catch(async(o,l)=>{if(o==="nocreate-missing")await this.api.create(e,{summary:a,watchlist:"watch"},t).catch((r,s)=>{mw.notify(`Error creating ${e}: ${s?.error?.info??"Unknown error"} (${r})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${l?.error?.info??"Unknown error"} (${o})`,{type:"error"});return}})}openDiff(e,t){let a={wpTextbox1:t,wpSummary:`Updating data${this.scriptMessage}`,wpDiff:"1",wpUltimateParam:"1"},o=new URL(`${mw.config.get("wgScriptPath")}/index.php`,window.location.origin);o.searchParams.set("title",e),o.searchParams.set("action","submit");let l=document.createElement("form");l.action=o.toString(),l.method="POST",l.target="_blank";for(let[r,s]of Object.entries(a)){let i=document.createElement("input");i.type="hidden",i.name=r,i.value=s,l.append(i)}document.body.append(l),l.submit(),l.remove()}}Object.assign(p.prototype,OO.ui.ProcessDialog.prototype);async function w(){let m=new mw.Api,e=await m.get({action:"query",list:"categorymembers",cmtitle:"Category:Redirect templates",cmlimit:"max",formatversion:"2"}),t=await m.get({action:"query",list:"categorymembers",cmtitle:"Category:Template redirects with possibilities",cmlimit:"max",formatversion:"2"}),a=e.query.categorymembers.filter(s=>s.title.startsWith("Template:R ")&&s.title!=="Template:R template index").map(s=>({name:s.title.split(":")[1],redirect:!1})),o=t.query.categorymembers.filter(s=>s.title.startsWith("Template:R ")&&s.title!=="Template:R with possibilities").map(s=>({name:s.title.split(":")[1],redirect:!0})),l=[],r=await Promise.all([...a,...o].sort((s,i)=>s.name.startsWith("R comics")||s.name.startsWith("R ME")?1:i.name.startsWith("R comics")||i.name.startsWith("R ME")?-1:s.name.localeCompare(i.name)).map(async s=>{let i=await m.get({action:"templatedata",titles:"Template:"+s.name,formatversion:"2"}),c=Object.values(i.pages)[0]?.params||{},g=Object.fromEntries(Object.entries(c).map(([f,n])=>[f,{aliases:n.aliases,label:n.label?.en??null,description:n.description?.en??null,type:n.type,required:n.required,suggested:n.suggested,default:n.default?.en??null,example:n.example?.en??null}])),h;s.redirect?(h=(await m.get({action:"query",titles:"Template:"+s.name,prop:"linkshere",lhnamespace:10,lhlimit:"max",formatversion:"2"})).query.pages[0].linkshere?.filter(n=>n.redirect).map(n=>n.title.split(":")[1]).filter(n=>![...a,...o].some(u=>u.name===n)&&!n.endsWith("/doc")&&!n.endsWith("/sandbox")).sort((n,u)=>n.localeCompare(u))??[],l.push(...h)):h=(await m.get({action:"query",titles:"Template:"+s.name,prop:"redirects",rdlimit:"max",formatversion:"2"})).query.pages[0].redirects?.filter(n=>n.ns===10).map(n=>n.title.split(":")[1]).filter(n=>!o.some(u=>u.name===n)).sort((n,u)=>n.localeCompare(u))??[];let b={...s.redirect?{redirect:!0}:{},parameters:g,aliases:h};return[s.name,b]}));for(let s of l)for(let[,i]of r)!i.redirect&&i.aliases.includes(s)&&(i.aliases=i.aliases.filter(c=>c!==s));return JSON.stringify(Object.fromEntries(r))}});})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
