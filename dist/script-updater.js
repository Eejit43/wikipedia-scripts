// <pre>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/script-updater.ts

"use strict";(()=>{var g=new mw.Api;async function y(d){return(await g.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:d})).query.pages[0].revisions?.[0].slots.main.content.trim()}mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;let d=document.querySelector(".mw-editsection").cloneNode(!0),u=document.createElement("a");u.href="#",u.style.fontWeight="bold",u.textContent="Sync from GitHub",u.addEventListener("click",p=>{p.preventDefault();let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let s=new l;e.addWindows([s]),s.open()}),d.querySelector("a").replaceWith(u),document.querySelector("h2#My_user_scripts + .mw-editsection").after(d);class l extends OO.ui.ProcessDialog{REPO_OWNER="Eejit43";REPO_NAME="wikipedia-scripts";SCRIPT_MESSAGE=" (via [[User:Eejit43/scripts/script-updater.js|script]])";content;scriptsMultiselect;actionsMultiselect;latestCommitHash;scripts;scriptDataUpdaters={"article-cleaner":w,"redirect-helper":O};constructor(){super({size:"medium"}),l.static.name="ScriptUpdaterDialog",l.static.title="script-updater",l.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}getSetupProcess=()=>l.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){let i=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(i.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.scriptsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:this.scripts.map(i=>new OO.ui.CheckboxMultioptionWidget({data:i.name,label:i.name}))}),this.scriptsMultiselect.$element[0].style.columnCount="2";let s=new OO.ui.FieldLayout(this.scriptsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Scripts to update:</b>"),align:"top"});this.actionsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:[{id:"documentation",name:"Update script documentation"},{id:"script",name:"Update script code"},{id:"talk",name:"Create talk redirect",selectedDefault:!1}].map(({id:i,name:r,selectedDefault:a})=>new OO.ui.CheckboxMultioptionWidget({data:i,label:r,selected:a??!0}))});let n=new OO.ui.FieldLayout(this.actionsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Actions to take (if applicable):</b>"),align:"top"}),m=new OO.ui.ButtonGroupWidget({items:Object.entries(this.scriptDataUpdaters).map(([i,r])=>{let a=new OO.ui.ButtonWidget({label:i,flags:["progressive"]});return a.on("click",async()=>{mw.notify(`Fetching ${i} data...`,{tag:"update-script-data-notification"});let o=await r();mw.notify(`Successfully fetched ${i} data, opening diff...`,{type:"success",tag:"update-script-data-notification"}),await new Promise(c=>setTimeout(c,500)),this.openDiff(`User:Eejit43/scripts/${i}.json`,o)}),a})}),t=new OO.ui.FieldLayout(m,{label:new OO.ui.HtmlSnippet("<b>Script data updaters:</b>"),align:"top"});this.content.$element.append(s.$element),this.content.$element.append(n.$element),this.content.$element.append(t.$element),this.$body.append(this.content.$element)}));getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.close()}):e==="save"?new OO.ui.Process(()=>{let s=this.scriptsMultiselect.findSelectedItemsData().map(n=>this.scripts.find(m=>m.name===n));this.close(),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(s.map(n=>this.handleScript(n))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(n=>!n.personal&&!n.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(n=>n.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(n=>n.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${s.length} script${s.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):l.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>l.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});wrapAsyncMethod(e){let s=$.Deferred();return e().then(n=>s.resolve(n)),s.promise()}loadScriptData=async()=>{let e=await fetch(`https://api.github.com/repos/${this.REPO_OWNER}/${this.REPO_NAME}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;let s=await fetch(`https://raw.githubusercontent.com/${this.REPO_OWNER}/${this.REPO_NAME}/${this.latestCommitHash}/scripts.json`);if(!s.ok)return`Failed to fetch script data from GitHub: ${s.statusText} (${s.status})`;let n=await s.json();this.scripts=Object.entries(n).map(([m,t])=>({name:m,...t}))};async handleScript(e){let s=this.actionsMultiselect.findSelectedItemsData(),n=`User:Eejit43/scripts/${e.name}`,m=`User talk:Eejit43/scripts/${e.name}`,t=`${n}.js`,i=["{{User:Eejit43/script-documentation",e.image===!1?`| image             = ${e.image}`:null,e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = ${e["use-instead"].includes("User:")?e["use-instead"]:`[[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`}`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(a=>`[[User:${a}|${a}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.configuration?`| configuration     = ${e.configuration}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([a,o])=>`* '''{{start date and age|${a}}}:'''${Array.isArray(o)?`
${o.map(c=>`** ${c}`).join(`
`)}`:` ${o}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/script-documentation/skin-support|${Object.entries(e["skin-support"]).map(([a,o])=>`${a}=${o}`).join("|")}}}`,e["source-multiple"]?`| source-multiple   = ${e["source-multiple"]}`:null,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean),r=null;if(s.includes("script")){let a=await fetch(`https://raw.githubusercontent.com/${this.REPO_OWNER}/${this.REPO_NAME}/${this.latestCommitHash}/dist/${e.name}.js`);if(a.ok)r=await a.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${a.statusText} (${a.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(s.includes("documentation")&&await this.editOrCreate(n,i.join(`
`),"Syncing script documentation from GitHub"),s.includes("talk")&&await this.editOrCreate(m,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),r&&await this.editOrCreate(t,r,"Syncing script from GitHub")}mapScripts(e){return e.map(s=>`* [[User:Eejit43/scripts/${s.name}${s.personal?".js":""}|${s.name}]] - ${s["short-description"]||s.description}${s["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${s["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,s,n){n+=this.SCRIPT_MESSAGE,await g.edit(e,()=>({text:s,summary:n,watchlist:"watch"})).catch(async(m,t)=>{if(m==="nocreate-missing")await g.create(e,{summary:n,watchlist:"watch"},s).catch((i,r)=>{mw.notify(`Error creating ${e}: ${r?.error?.info??"Unknown error"} (${i})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${t?.error?.info??"Unknown error"} (${m})`,{type:"error"});return}})}openDiff(e,s){let n={wpTextbox1:s,wpSummary:`Updating data${this.SCRIPT_MESSAGE}`,wpDiff:"1",wpUltimateParam:"1"},m=new URL(`${mw.config.get("wgScriptPath")}/index.php`,window.location.origin);m.searchParams.set("title",e),m.searchParams.set("action","submit");let t=document.createElement("form");t.action=m.toString(),t.method="POST",t.target="_blank";for(let[i,r]of Object.entries(n)){let a=document.createElement("input");a.type="hidden",a.name=i,a.value=r,t.append(a)}document.body.append(t),t.submit(),t.remove()}}Object.assign(l.prototype,OO.ui.ProcessDialog.prototype)});async function w(){let u=(await y("Wikipedia:AutoWikiBrowser/Template redirects")??"").matchAll(/\* {{tl\|.+/g).toArray().map(l=>{let p=l[0].matchAll(/{{tl\|(.+?)}}/g).toArray();return{from:p.slice(0,-1).map(e=>e[1]),to:p.at(-1)[1]}});return JSON.stringify(u)}function h(d,u){let l=[];for(let p=0;p<d.length;p+=u){let e=d.slice(p,p+u);l.push(e)}return l}async function b(d){let u=0,l=[],p={continue:{}};for(;"continue"in p&&u<10;)p=await g.get({...d,...p.continue}),l.push(p),u++;return l}async function O(){let d=await g.get({action:"query",list:"categorymembers",cmtitle:"Category:Redirect templates",cmlimit:"max",formatversion:"2"}),u=await g.get({action:"query",list:"categorymembers",cmtitle:"Category:Template redirects with possibilities",cmlimit:"max",formatversion:"2"}),l=d.query.categorymembers.filter(t=>t.title.startsWith("Template:R ")&&t.title!=="Template:R template index").map(t=>({name:t.title.split(":")[1],redirect:!1})),p=u.query.categorymembers.filter(t=>t.title.startsWith("Template:R ")&&t.title!=="Template:R with possibilities").map(t=>({name:t.title.split(":")[1],redirect:!0})),e=[...l,...p].sort((t,i)=>t.name.startsWith("R comics")||t.name.startsWith("R ME")?1:i.name.startsWith("R comics")||i.name.startsWith("R ME")?-1:t.name.localeCompare(i.name)),s=Object.fromEntries(e.map(t=>[t.name,{redirect:t.redirect,parameters:{},aliases:[]}]));await Promise.all(h(e,50).map(async t=>{let i=await g.get({action:"templatedata",titles:t.map(r=>`Template:${r.name}`),formatversion:"2"});for(let r of Object.values(i.pages)){let a=Object.fromEntries(Object.entries(r.params).map(([o,c])=>[o,{aliases:c.aliases,label:c.label?.en??null,description:c.description?.en??null,type:c.type,required:c.required,suggested:c.suggested,default:c.default?.en??null,example:c.example?.en??null}]));s[r.title.split(":")[1]].parameters=a}})),await Promise.all(h(l,50).map(async t=>{let r=(await b({action:"query",titles:t.map(a=>`Template:${a.name}`),prop:"redirects",rdnamespace:10,rdlimit:"max",formatversion:"2"})).flatMap(a=>a.query.pages);for(let a of r){let o=a.redirects?.map(c=>c.title.split(":")[1]).filter(c=>!p.some(f=>f.name===c)).sort((c,f)=>c.localeCompare(f))??[];s[a.title.split(":")[1]].aliases.push(...o)}}));let n=[];await Promise.all(h(p,50).map(async t=>{let i=await g.get({action:"query",titles:t.map(r=>`Template:${r.name}`),prop:"linkshere",lhnamespace:10,lhlimit:"max",formatversion:"2"});for(let r of i.query.pages){let a=r.linkshere?.filter(o=>o.redirect).map(o=>o.title.split(":")[1]).filter(o=>!o.endsWith("/doc")&&!o.endsWith("/sandbox")).sort((o,c)=>o.localeCompare(c))??[];n.push(...a),s[r.title.split(":")[1]].aliases=a}}));let m=Object.entries(s).map(([t,i])=>{let r={...i.redirect?{redirect:!0}:{},parameters:i.parameters,aliases:i.aliases.sort((a,o)=>a.localeCompare(o))};return[t,r]});for(let t of n)for(let[,i]of m)!i.redirect&&i.aliases.includes(t)&&(i.aliases=i.aliases.filter(r=>r!==t));return JSON.stringify(Object.fromEntries(m))}})();

// </pre>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vdXRpbGl0eS50cyIsICIuLi9zY3JpcHRzL3NjcmlwdC11cGRhdGVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgdHlwZSB7IEFwaVF1ZXJ5UmV2aXNpb25zUGFyYW1zIH0gZnJvbSAndHlwZXMtbWVkaWF3aWtpLWFwaSc7XG5pbXBvcnQgdHlwZSB7IFBhZ2VSZXZpc2lvbnNSZXN1bHQgfSBmcm9tICcuL2dsb2JhbC10eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBhcGkgPSBuZXcgbXcuQXBpKCk7XG5cbi8qKlxuICogRmV0Y2hlcyB0aGUgY29udGVudCBvZiBhIGdpdmVuIHBhZ2UuXG4gKiBAcGFyYW0gdGl0bGUgVGhlIHRpdGxlIHRvIGZldGNoLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGFnZUNvbnRlbnQodGl0bGU6IHN0cmluZykge1xuICAgIHJldHVybiAoXG4gICAgICAgIChhd2FpdCBhcGkuZ2V0KHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgIGZvcm1hdHZlcnNpb246ICcyJyxcbiAgICAgICAgICAgIHByb3A6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgcnZwcm9wOiAnY29udGVudCcsXG4gICAgICAgICAgICBydnNsb3RzOiAnbWFpbicsXG4gICAgICAgICAgICB0aXRsZXM6IHRpdGxlLFxuICAgICAgICB9IHNhdGlzZmllcyBBcGlRdWVyeVJldmlzaW9uc1BhcmFtcykpIGFzIFBhZ2VSZXZpc2lvbnNSZXN1bHRcbiAgICApLnF1ZXJ5LnBhZ2VzWzBdLnJldmlzaW9ucz8uWzBdLnNsb3RzLm1haW4uY29udGVudC50cmltKCk7XG59XG4iLCAiaW1wb3J0IHR5cGUge1xuICAgIEFwaVF1ZXJ5QmFja2xpbmtzcHJvcFBhcmFtcyxcbiAgICBBcGlRdWVyeUNhdGVnb3J5TWVtYmVyc1BhcmFtcyxcbiAgICBBcGlRdWVyeVBhcmFtcyxcbiAgICBUZW1wbGF0ZURhdGFBcGlUZW1wbGF0ZURhdGFQYXJhbXMsXG59IGZyb20gJ3R5cGVzLW1lZGlhd2lraS1hcGknO1xuaW1wb3J0IHR5cGUgeyBBcGlSZXNwb25zZSB9IGZyb20gJ3R5cGVzLW1lZGlhd2lraS9tdy9BcGknO1xuaW1wb3J0IHR5cGUge1xuICAgIENhdGVnb3J5TWVtYmVyc1Jlc3VsdCxcbiAgICBMaW5rc0hlcmVSZXN1bHQsXG4gICAgTWVkaWFXaWtpRGF0YUVycm9yLFxuICAgIFF1ZXJ5Q29udGludWF0aW9uLFxuICAgIFJlZGlyZWN0c1Jlc3VsdCxcbiAgICBUZW1wbGF0ZURhdGFSZXN1bHQsXG59IGZyb20gJy4uL2dsb2JhbC10eXBlcyc7XG5pbXBvcnQgeyBhcGksIGdldFBhZ2VDb250ZW50IH0gZnJvbSAnLi4vdXRpbGl0eSc7XG5cbmludGVyZmFjZSBTY3JpcHQge1xuICAgICduYW1lJzogc3RyaW5nO1xuICAgICdpbi1kZXZlbG9wbWVudCc/OiBib29sZWFuO1xuICAgICd1c2UtaW5zdGVhZCc/OiBzdHJpbmc7XG4gICAgJ2ltYWdlJz86IGZhbHNlO1xuICAgICdpbWFnZS1jYXB0aW9uJz86IHN0cmluZztcbiAgICAnc2hvcnQtZGVzY3JpcHRpb24nOiBzdHJpbmc7XG4gICAgJ2Rlc2NyaXB0aW9uJzogc3RyaW5nO1xuICAgICd1c2FnZSc/OiBzdHJpbmc7XG4gICAgJ2NvbmZpZ3VyYXRpb24nPzogc3RyaW5nO1xuICAgICdjaGFuZ2Vsb2cnPzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgc3RyaW5nW10+O1xuICAgICdvdGhlci1hdXRob3JzJz86IHN0cmluZ1tdO1xuICAgICdmb3JrJz86IHRydWU7XG4gICAgJ3BlcnNvbmFsJz86IHRydWU7XG4gICAgJ3NraW4tc3VwcG9ydCc6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+O1xuICAgICdzb3VyY2UtbXVsdGlwbGUnPzogdHJ1ZTtcbiAgICAncmVsZWFzZWQnOiBzdHJpbmc7XG4gICAgJ3VwZGF0ZWQnOiBzdHJpbmc7XG59XG5cbm13LmxvYWRlci51c2luZyhbJ21lZGlhd2lraS51dGlsJywgJ29vanMtdWktY29yZScsICdvb2pzLXVpLXdpZGdldHMnLCAnb29qcy11aS13aW5kb3dzJ10sICgpID0+IHtcbiAgICBpZiAobXcuY29uZmlnLmdldCgnd2dVc2VyTmFtZScpICE9PSAnRWVqaXQ0MycgfHwgbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpICE9PSAnVXNlcjpFZWppdDQzJykgcmV0dXJuO1xuXG4gICAgY29uc3QgZnVsbExpbmtFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm13LWVkaXRzZWN0aW9uJykhLmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MU3BhbkVsZW1lbnQ7XG5cbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxpbmsuaHJlZiA9ICcjJztcbiAgICBsaW5rLnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XG4gICAgbGluay50ZXh0Q29udGVudCA9ICdTeW5jIGZyb20gR2l0SHViJztcbiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3Qgd2luZG93TWFuYWdlciA9IG5ldyBPTy51aS5XaW5kb3dNYW5hZ2VyKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHdpbmRvd01hbmFnZXIuJGVsZW1lbnRbMF0pO1xuXG4gICAgICAgIGNvbnN0IHNjcmlwdFVwZGF0ZXJEaWFsb2cgPSBuZXcgU2NyaXB0VXBkYXRlckRpYWxvZygpO1xuICAgICAgICB3aW5kb3dNYW5hZ2VyLmFkZFdpbmRvd3MoW3NjcmlwdFVwZGF0ZXJEaWFsb2ddKTtcblxuICAgICAgICBzY3JpcHRVcGRhdGVyRGlhbG9nLm9wZW4oKTtcbiAgICB9KTtcblxuICAgIGZ1bGxMaW5rRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdhJykhLnJlcGxhY2VXaXRoKGxpbmspO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaDIjTXlfdXNlcl9zY3JpcHRzICsgLm13LWVkaXRzZWN0aW9uJykhLmFmdGVyKGZ1bGxMaW5rRWxlbWVudCk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGlzIGEgZGlhbG9nIHRoYXQgbWFuYWdlcyB1cGRhdGluZyBzY3JpcHRzLlxuICAgICAqL1xuICAgIGNsYXNzIFNjcmlwdFVwZGF0ZXJEaWFsb2cgZXh0ZW5kcyBPTy51aS5Qcm9jZXNzRGlhbG9nIHtcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBSRVBPX09XTkVSID0gJ0Vlaml0NDMnO1xuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IFJFUE9fTkFNRSA9ICd3aWtpcGVkaWEtc2NyaXB0cyc7XG5cbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBTQ1JJUFRfTUVTU0FHRSA9ICcgKHZpYSBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL3NjcmlwdC11cGRhdGVyLmpzfHNjcmlwdF1dKSc7XG5cbiAgICAgICAgcHJpdmF0ZSBjb250ZW50ITogT08udWkuUGFuZWxMYXlvdXQ7XG4gICAgICAgIHByaXZhdGUgc2NyaXB0c011bHRpc2VsZWN0ITogT08udWkuQ2hlY2tib3hNdWx0aXNlbGVjdFdpZGdldDtcbiAgICAgICAgcHJpdmF0ZSBhY3Rpb25zTXVsdGlzZWxlY3QhOiBPTy51aS5DaGVja2JveE11bHRpc2VsZWN0V2lkZ2V0O1xuXG4gICAgICAgIHByaXZhdGUgbGF0ZXN0Q29tbWl0SGFzaCE6IHN0cmluZztcbiAgICAgICAgcHJpdmF0ZSBzY3JpcHRzITogU2NyaXB0W107XG5cbiAgICAgICAgcHJpdmF0ZSBzY3JpcHREYXRhVXBkYXRlcnMgPSB7XG4gICAgICAgICAgICAnYXJ0aWNsZS1jbGVhbmVyJzogZ2V0QXJ0aWNsZUNsZWFuZXJEYXRhLFxuICAgICAgICAgICAgJ3JlZGlyZWN0LWhlbHBlcic6IGdldFJlZGlyZWN0SGVscGVyRGF0YSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKHsgc2l6ZTogJ21lZGl1bScgfSk7XG5cbiAgICAgICAgICAgIFNjcmlwdFVwZGF0ZXJEaWFsb2cuc3RhdGljLm5hbWUgPSAnU2NyaXB0VXBkYXRlckRpYWxvZyc7XG4gICAgICAgICAgICBTY3JpcHRVcGRhdGVyRGlhbG9nLnN0YXRpYy50aXRsZSA9ICdzY3JpcHQtdXBkYXRlcic7XG4gICAgICAgICAgICBTY3JpcHRVcGRhdGVyRGlhbG9nLnN0YXRpYy5hY3Rpb25zID0gW1xuICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnY2FuY2VsJywgbGFiZWw6ICdDbG9zZScsIGZsYWdzOiBbJ3NhZmUnLCAnY2xvc2UnXSB9LFxuICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnc2F2ZScsIGxhYmVsOiAnUnVuJywgZmxhZ3M6IFsncHJpbWFyeScsICdwcm9ncmVzc2l2ZSddIH0sXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0U2V0dXBQcm9jZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFNjcmlwdFVwZGF0ZXJEaWFsb2cuc3VwZXIucHJvdG90eXBlLmdldFNldHVwUHJvY2Vzcy5jYWxsKHRoaXMpLm5leHQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndyYXBBc3luY01ldGhvZCh0aGlzLmxvYWRTY3JpcHREYXRhKS50aGVuKChlcnJvcj86IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VFbGVtZW50ID0gbmV3IE9PLnVpLk1lc3NhZ2VXaWRnZXQoeyB0eXBlOiAnZXJyb3InLCBsYWJlbDogZXJyb3IgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudCA9IG5ldyBPTy51aS5QYW5lbExheW91dCh7IHBhZGRlZDogdHJ1ZSwgZXhwYW5kZWQ6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50LiRlbGVtZW50LmFwcGVuZChtZXNzYWdlRWxlbWVudC4kZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzIGFzIHVua25vd24gYXMgeyAkYm9keTogSlF1ZXJ5IH0pLiRib2R5LmFwcGVuZCh0aGlzLmNvbnRlbnQuJGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldEFjdGlvbnMoKS5zZXRBYmlsaXRpZXMoeyBzYXZlOiBmYWxzZSB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gbmV3IE9PLnVpLlBhbmVsTGF5b3V0KHsgcGFkZGVkOiB0cnVlLCBleHBhbmRlZDogZmFsc2UgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JpcHRzTXVsdGlzZWxlY3QgPSBuZXcgT08udWkuQ2hlY2tib3hNdWx0aXNlbGVjdFdpZGdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5zY3JpcHRzLm1hcCgoc2NyaXB0KSA9PiBuZXcgT08udWkuQ2hlY2tib3hNdWx0aW9wdGlvbldpZGdldCh7IGRhdGE6IHNjcmlwdC5uYW1lLCBsYWJlbDogc2NyaXB0Lm5hbWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JpcHRzTXVsdGlzZWxlY3QuJGVsZW1lbnRbMF0uc3R5bGUuY29sdW1uQ291bnQgPSAnMic7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0c011bHRpc2VsZWN0TGF5b3V0ID0gbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHRoaXMuc2NyaXB0c011bHRpc2VsZWN0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IE9PLnVpLkh0bWxTbmlwcGV0KCc8Yj5TY3JpcHRzIHRvIHVwZGF0ZTo8L2I+JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uc011bHRpc2VsZWN0ID0gbmV3IE9PLnVpLkNoZWNrYm94TXVsdGlzZWxlY3RXaWRnZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGlkOiAnZG9jdW1lbnRhdGlvbicsIG5hbWU6ICdVcGRhdGUgc2NyaXB0IGRvY3VtZW50YXRpb24nIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBpZDogJ3NjcmlwdCcsIG5hbWU6ICdVcGRhdGUgc2NyaXB0IGNvZGUnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBpZDogJ3RhbGsnLCBuYW1lOiAnQ3JlYXRlIHRhbGsgcmVkaXJlY3QnLCBzZWxlY3RlZERlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLm1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoeyBpZCwgbmFtZSwgc2VsZWN0ZWREZWZhdWx0IH0pID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBPTy51aS5DaGVja2JveE11bHRpb3B0aW9uV2lkZ2V0KHsgZGF0YTogaWQsIGxhYmVsOiBuYW1lLCBzZWxlY3RlZDogc2VsZWN0ZWREZWZhdWx0ID8/IHRydWUgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25zTXVsdGlzZWxlY3RMYXlvdXQgPSBuZXcgT08udWkuRmllbGRMYXlvdXQodGhpcy5hY3Rpb25zTXVsdGlzZWxlY3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgT08udWkuSHRtbFNuaXBwZXQoJzxiPkFjdGlvbnMgdG8gdGFrZSAoaWYgYXBwbGljYWJsZSk6PC9iPicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBidXR0b25Hcm91cCA9IG5ldyBPTy51aS5CdXR0b25Hcm91cFdpZGdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogT2JqZWN0LmVudHJpZXModGhpcy5zY3JpcHREYXRhVXBkYXRlcnMpLm1hcCgoW25hbWUsIHVwZGF0ZXJdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IE9PLnVpLkJ1dHRvbldpZGdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnczogWydwcm9ncmVzc2l2ZSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5vbignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgRmV0Y2hpbmcgJHtuYW1lfSBkYXRhLi4uYCwgeyB0YWc6ICd1cGRhdGUtc2NyaXB0LWRhdGEtbm90aWZpY2F0aW9uJyB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdXBkYXRlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgU3VjY2Vzc2Z1bGx5IGZldGNoZWQgJHtuYW1lfSBkYXRhLCBvcGVuaW5nIGRpZmYuLi5gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWc6ICd1cGRhdGUtc2NyaXB0LWRhdGEtbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKSk7IC8vIEFsbG93IHRoZSBub3RpZmljYXRpb24gdG8gYmUgc2hvd25cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5EaWZmKGBVc2VyOkVlaml0NDMvc2NyaXB0cy8ke25hbWV9Lmpzb25gLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBidXR0b247XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0RGF0YVVwZGF0ZXJzTXVsdGlzZWxlY3RMYXlvdXQgPSBuZXcgT08udWkuRmllbGRMYXlvdXQoYnV0dG9uR3JvdXAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgT08udWkuSHRtbFNuaXBwZXQoJzxiPlNjcmlwdCBkYXRhIHVwZGF0ZXJzOjwvYj4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduOiAndG9wJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50LiRlbGVtZW50LmFwcGVuZChzY3JpcHRzTXVsdGlzZWxlY3RMYXlvdXQuJGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuJGVsZW1lbnQuYXBwZW5kKGFjdGlvbnNNdWx0aXNlbGVjdExheW91dC4kZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC4kZWxlbWVudC5hcHBlbmQoc2NyaXB0RGF0YVVwZGF0ZXJzTXVsdGlzZWxlY3RMYXlvdXQuJGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICh0aGlzIGFzIHVua25vd24gYXMgeyAkYm9keTogSlF1ZXJ5IH0pLiRib2R5LmFwcGVuZCh0aGlzLmNvbnRlbnQuJGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZ2V0QWN0aW9uUHJvY2VzcyA9IChhY3Rpb246IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ2NhbmNlbCcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPTy51aS5Qcm9jZXNzKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWxzZSBpZiAoYWN0aW9uID09PSAnc2F2ZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPTy51aS5Qcm9jZXNzKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRTY3JpcHRzID0gKHRoaXMuc2NyaXB0c011bHRpc2VsZWN0LmZpbmRTZWxlY3RlZEl0ZW1zRGF0YSgpIGFzIHN0cmluZ1tdKS5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2NyaXB0TmFtZSkgPT4gdGhpcy5zY3JpcHRzLmZpbmQoKHNjcmlwdCkgPT4gc2NyaXB0Lm5hbWUgPT09IHNjcmlwdE5hbWUpISxcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdm9pZCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KCdTeW5jaW5nIHNjcmlwdHMuLi4nLCB7IHRhZzogJ3N5bmMtc2NyaXB0cy1ub3RpZmljYXRpb24nIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChzZWxlY3RlZFNjcmlwdHMubWFwKChzY3JpcHQpID0+IHRoaXMuaGFuZGxlU2NyaXB0KHNjcmlwdCkpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lZGl0T3JDcmVhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXI6RWVqaXQ0My9zY3JpcHRzLWluZm8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBTY3JpcHRzKHRoaXMuc2NyaXB0cy5maWx0ZXIoKHNjcmlwdCkgPT4gIXNjcmlwdC5wZXJzb25hbCAmJiAhc2NyaXB0LmZvcmspKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc9PT0gRm9ya3MgPT09JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBTY3JpcHRzKHRoaXMuc2NyaXB0cy5maWx0ZXIoKHNjcmlwdCkgPT4gc2NyaXB0LmZvcmspKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc9PT0gUGVyc29uYWwgc2NyaXB0cyA9PT0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcFNjcmlwdHModGhpcy5zY3JpcHRzLmZpbHRlcigoc2NyaXB0KSA9PiBzY3JpcHQucGVyc29uYWwpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTeW5jaW5nIHNjcmlwdCBsaXN0IGZyb20gR2l0SHViJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgU3luY2VkICR7c2VsZWN0ZWRTY3JpcHRzLmxlbmd0aH0gc2NyaXB0JHtzZWxlY3RlZFNjcmlwdHMubGVuZ3RoID09PSAxID8gJycgOiAncyd9IGZyb20gR2l0SHViIWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiAnc3luYy1zY3JpcHRzLW5vdGlmaWNhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIFNjcmlwdFVwZGF0ZXJEaWFsb2cuc3VwZXIucHJvdG90eXBlLmdldEFjdGlvblByb2Nlc3MuY2FsbCh0aGlzLCBhY3Rpb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGdldFRlYXJkb3duUHJvY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBTY3JpcHRVcGRhdGVyRGlhbG9nLnN1cGVyLnByb3RvdHlwZS5nZXRUZWFyZG93blByb2Nlc3MuY2FsbCh0aGlzKS5uZXh0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAodGhpcyBhcyB1bmtub3duIGFzIHsgJGJvZHk6IEpRdWVyeSB9KS4kYm9keS5lbXB0eSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdyYXBzIGFuIGFzeW5jIG1ldGhvZCBpbnRvIGEgalF1ZXJ5IERlZmVycmVkIG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIG1ldGhvZCBUaGUgbWV0aG9kIHRvIHdyYXAuXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIHdyYXBBc3luY01ldGhvZChtZXRob2Q6ICgpID0+IFByb21pc2U8dW5rbm93bj4pIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuXG4gICAgICAgICAgICB2b2lkIG1ldGhvZCgpLnRoZW4oKHJlc3VsdCkgPT4gZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpKTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2FkcyBkYXRhIGZvciBhbGwgc2NyaXB0cy5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgbG9hZFNjcmlwdERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsYXRlc3RDb21taXRIYXNoUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8ke3RoaXMuUkVQT19PV05FUn0vJHt0aGlzLlJFUE9fTkFNRX0vY29tbWl0c2ApO1xuICAgICAgICAgICAgaWYgKCFsYXRlc3RDb21taXRIYXNoUmVzcG9uc2Uub2spXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBGYWlsZWQgdG8gZmV0Y2ggbGF0ZXN0IGNvbW1pdCBoYXNoIGZyb20gR2l0SHViOiAke2xhdGVzdENvbW1pdEhhc2hSZXNwb25zZS5zdGF0dXNUZXh0fSAoJHtsYXRlc3RDb21taXRIYXNoUmVzcG9uc2Uuc3RhdHVzfSlgO1xuXG4gICAgICAgICAgICB0aGlzLmxhdGVzdENvbW1pdEhhc2ggPSAoKGF3YWl0IGxhdGVzdENvbW1pdEhhc2hSZXNwb25zZS5qc29uKCkpIGFzIHsgc2hhOiBzdHJpbmcgfVtdKVswXS5zaGE7XG5cbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdERhdGFSZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgICAgICAgIGBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vJHt0aGlzLlJFUE9fT1dORVJ9LyR7dGhpcy5SRVBPX05BTUV9LyR7dGhpcy5sYXRlc3RDb21taXRIYXNofS9zY3JpcHRzLmpzb25gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghc2NyaXB0RGF0YVJlc3BvbnNlLm9rKVxuICAgICAgICAgICAgICAgIHJldHVybiBgRmFpbGVkIHRvIGZldGNoIHNjcmlwdCBkYXRhIGZyb20gR2l0SHViOiAke3NjcmlwdERhdGFSZXNwb25zZS5zdGF0dXNUZXh0fSAoJHtzY3JpcHREYXRhUmVzcG9uc2Uuc3RhdHVzfSlgO1xuXG4gICAgICAgICAgICBjb25zdCBzY3JpcHREYXRhID0gKGF3YWl0IHNjcmlwdERhdGFSZXNwb25zZS5qc29uKCkpIGFzIFJlY29yZDxzdHJpbmcsIE9taXQ8U2NyaXB0LCAnbmFtZSc+PjtcblxuICAgICAgICAgICAgdGhpcy5zY3JpcHRzID0gT2JqZWN0LmVudHJpZXMoc2NyaXB0RGF0YSkubWFwKChbc2NyaXB0TmFtZSwgc2NyaXB0XSkgPT4gKHsgbmFtZTogc2NyaXB0TmFtZSwgLi4uc2NyaXB0IH0pKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyBhbmQgZWRpdHMvY3JlYXRlcyBwYWdlcyBmb3IgYSBnaXZlbiBzY3JpcHQuXG4gICAgICAgICAqIEBwYXJhbSBzY3JpcHQgVGhlIHNjcmlwdCB0byBoYW5kbGUuXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIGFzeW5jIGhhbmRsZVNjcmlwdChzY3JpcHQ6IFNjcmlwdCkge1xuICAgICAgICAgICAgY29uc3QgYWN0aW9uc1RvVGFrZSA9IHRoaXMuYWN0aW9uc011bHRpc2VsZWN0LmZpbmRTZWxlY3RlZEl0ZW1zRGF0YSgpIGFzICgnZG9jdW1lbnRhdGlvbicgfCAnc2NyaXB0JyB8ICd0YWxrJylbXTtcblxuICAgICAgICAgICAgY29uc3Qgc3VicGFnZU5hbWUgPSBgVXNlcjpFZWppdDQzL3NjcmlwdHMvJHtzY3JpcHQubmFtZX1gO1xuICAgICAgICAgICAgY29uc3Qgc3VicGFnZVRhbGtOYW1lID0gYFVzZXIgdGFsazpFZWppdDQzL3NjcmlwdHMvJHtzY3JpcHQubmFtZX1gO1xuICAgICAgICAgICAgY29uc3Qgc2NyaXB0TmFtZSA9IGAke3N1YnBhZ2VOYW1lfS5qc2A7XG5cbiAgICAgICAgICAgIGNvbnN0IGZ1bGxTdWJwYWdlSW5mbyA9IFtcbiAgICAgICAgICAgICAgICAne3tVc2VyOkVlaml0NDMvc2NyaXB0LWRvY3VtZW50YXRpb24nLFxuICAgICAgICAgICAgICAgIHNjcmlwdC5pbWFnZSA9PT0gZmFsc2UgPyBgfCBpbWFnZSAgICAgICAgICAgICA9ICR7c2NyaXB0LmltYWdlfWAgOiBudWxsLFxuICAgICAgICAgICAgICAgIHNjcmlwdFsnaW4tZGV2ZWxvcG1lbnQnXSA/IGB8IGluLWRldmVsb3BtZW50ICAgID0gJHtzY3JpcHRbJ2luLWRldmVsb3BtZW50J119YCA6IG51bGwsXG4gICAgICAgICAgICAgICAgc2NyaXB0Wyd1c2UtaW5zdGVhZCddXG4gICAgICAgICAgICAgICAgICAgID8gYHwgdXNlLWluc3RlYWQgICAgICAgPSAke3NjcmlwdFsndXNlLWluc3RlYWQnXS5pbmNsdWRlcygnVXNlcjonKSA/IHNjcmlwdFsndXNlLWluc3RlYWQnXSA6IGBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzLyR7c2NyaXB0Wyd1c2UtaW5zdGVhZCddfXwke3NjcmlwdFsndXNlLWluc3RlYWQnXX1dXWB9YFxuICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgc2NyaXB0WydpbWFnZS1jYXB0aW9uJ10gPyBgfCBpbWFnZS1jYXB0aW9uICAgICA9ICR7c2NyaXB0WydpbWFnZS1jYXB0aW9uJ119YCA6IG51bGwsXG4gICAgICAgICAgICAgICAgc2NyaXB0WydvdGhlci1hdXRob3JzJ11cbiAgICAgICAgICAgICAgICAgICAgPyBgfCBvdGhlci1hdXRob3JzICAgICA9ICR7c2NyaXB0WydvdGhlci1hdXRob3JzJ10ubWFwKChhdXRob3IpID0+IGBbW1VzZXI6JHthdXRob3J9fCR7YXV0aG9yfV1dYCkuam9pbignLCAnKX1gXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICBgfCBkZXNjcmlwdGlvbi1zaG9ydCA9ICR7c2NyaXB0WydzaG9ydC1kZXNjcmlwdGlvbiddfWAsXG4gICAgICAgICAgICAgICAgYHwgZGVzY3JpcHRpb24gICAgICAgPSAke3NjcmlwdC5kZXNjcmlwdGlvbn1gLFxuICAgICAgICAgICAgICAgIHNjcmlwdC51c2FnZSA/IGB8IHVzYWdlICAgICAgICAgICAgID0gJHtzY3JpcHQudXNhZ2V9YCA6IG51bGwsXG4gICAgICAgICAgICAgICAgc2NyaXB0LmNvbmZpZ3VyYXRpb24gPyBgfCBjb25maWd1cmF0aW9uICAgICA9ICR7c2NyaXB0LmNvbmZpZ3VyYXRpb259YCA6IG51bGwsXG4gICAgICAgICAgICAgICAgc2NyaXB0LmNoYW5nZWxvZ1xuICAgICAgICAgICAgICAgICAgICA/IGB8IGNoYW5nZWxvZyAgICAgICAgID0gXFxuJHtPYmplY3QuZW50cmllcyhzY3JpcHQuY2hhbmdlbG9nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFtkYXRlLCBkZXNjcmlwdGlvbl0pID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCogJycne3tzdGFydCBkYXRlIGFuZCBhZ2V8JHtkYXRlfX19OicnJyR7QXJyYXkuaXNBcnJheShkZXNjcmlwdGlvbikgPyBgXFxuJHtkZXNjcmlwdGlvbi5tYXAoKGxpbmUpID0+IGAqKiAke2xpbmV9YCkuam9pbignXFxuJyl9YCA6IGAgJHtkZXNjcmlwdGlvbn1gfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpfWBcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgIGB8IHNraW4tc3VwcG9ydCAgICAgID0ge3tVc2VyOkVlaml0NDMvc2NyaXB0LWRvY3VtZW50YXRpb24vc2tpbi1zdXBwb3J0fCR7T2JqZWN0LmVudHJpZXMoc2NyaXB0Wydza2luLXN1cHBvcnQnXSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoW3NraW4sIHN0YXR1c10pID0+IGAke3NraW59PSR7c3RhdHVzfWApXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCd8Jyl9fX1gLFxuICAgICAgICAgICAgICAgIHNjcmlwdFsnc291cmNlLW11bHRpcGxlJ10gPyBgfCBzb3VyY2UtbXVsdGlwbGUgICA9ICR7c2NyaXB0Wydzb3VyY2UtbXVsdGlwbGUnXX1gIDogbnVsbCxcbiAgICAgICAgICAgICAgICBgfCByZWxlYXNlZCAgICAgICAgICA9IHt7c3RhcnQgZGF0ZSBhbmQgYWdlfCR7c2NyaXB0LnJlbGVhc2VkfX19YCxcbiAgICAgICAgICAgICAgICBgfCB1cGRhdGVkICAgICAgICAgICA9IHt7c3RhcnQgZGF0ZSBhbmQgYWdlfCR7c2NyaXB0LnVwZGF0ZWR9fX1gLFxuICAgICAgICAgICAgICAgICd9fScsXG4gICAgICAgICAgICBdLmZpbHRlcihCb29sZWFuKTtcblxuICAgICAgICAgICAgbGV0IHNjcmlwdENvbnRlbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoYWN0aW9uc1RvVGFrZS5pbmNsdWRlcygnc2NyaXB0JykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHRDb250ZW50UmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICAgICAgICAgICAgYGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8ke3RoaXMuUkVQT19PV05FUn0vJHt0aGlzLlJFUE9fTkFNRX0vJHt0aGlzLmxhdGVzdENvbW1pdEhhc2h9L2Rpc3QvJHtzY3JpcHQubmFtZX0uanNgLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKHNjcmlwdENvbnRlbnRSZXNwb25zZS5vaykgc2NyaXB0Q29udGVudCA9IGF3YWl0IHNjcmlwdENvbnRlbnRSZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbXcubm90aWZ5KFxuICAgICAgICAgICAgICAgICAgICAgICAgYEZhaWxlZCB0byBmZXRjaCBcIiR7c2NyaXB0Lm5hbWV9LmpzXCIgZnJvbSBHaXRIdWI6ICR7c2NyaXB0Q29udGVudFJlc3BvbnNlLnN0YXR1c1RleHR9ICgke3NjcmlwdENvbnRlbnRSZXNwb25zZS5zdGF0dXN9KWAsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHR5cGU6ICdlcnJvcicsIHRhZzogJ3N5bmMtc2NyaXB0cy1ub3RpZmljYXRpb24nIH0sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghc2NyaXB0LnBlcnNvbmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbnNUb1Rha2UuaW5jbHVkZXMoJ2RvY3VtZW50YXRpb24nKSlcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lZGl0T3JDcmVhdGUoc3VicGFnZU5hbWUsIGZ1bGxTdWJwYWdlSW5mby5qb2luKCdcXG4nKSwgJ1N5bmNpbmcgc2NyaXB0IGRvY3VtZW50YXRpb24gZnJvbSBHaXRIdWInKTtcblxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25zVG9UYWtlLmluY2x1ZGVzKCd0YWxrJykpXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZWRpdE9yQ3JlYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VicGFnZVRhbGtOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyNSRURJUkVDVCBbW1VzZXIgdGFsazpFZWppdDQzXV0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1JlZGlyZWN0aW5nIHNjcmlwdCBkb2N1bWVudGF0aW9uIHRhbGsgcGFnZSB0byBtYWluIHVzZXIgdGFsayBwYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNjcmlwdENvbnRlbnQpIGF3YWl0IHRoaXMuZWRpdE9yQ3JlYXRlKHNjcmlwdE5hbWUsIHNjcmlwdENvbnRlbnQsICdTeW5jaW5nIHNjcmlwdCBmcm9tIEdpdEh1YicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcHMgc2NyaXB0cyB0byBhIGJ1bGxldGVkIGxpc3QuXG4gICAgICAgICAqIEBwYXJhbSBzY3JpcHRzIFRoZSBzY3JpcHRzIHRvIG1hcC5cbiAgICAgICAgICogQHJldHVybnMgVGhlIG1hcHBlZCBzY3JpcHRzLlxuICAgICAgICAgKi9cbiAgICAgICAgcHJpdmF0ZSBtYXBTY3JpcHRzKHNjcmlwdHM6IFNjcmlwdFtdKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NyaXB0c1xuICAgICAgICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICAgICAgICAgIChzY3JpcHQpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBgKiBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzLyR7c2NyaXB0Lm5hbWV9JHtzY3JpcHQucGVyc29uYWwgPyAnLmpzJyA6ICcnfXwke3NjcmlwdC5uYW1lfV1dIC0gJHtzY3JpcHRbJ3Nob3J0LWRlc2NyaXB0aW9uJ10gfHwgc2NyaXB0LmRlc2NyaXB0aW9ufSR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0Wydpbi1kZXZlbG9wbWVudCddID8gJyAoPHNwYW4gc3R5bGU9XCJjb2xvcjogI2JkMjgyOFwiPmluIGRldmVsb3BtZW50PC9zcGFuPiknIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0ke3NjcmlwdFsndXNlLWluc3RlYWQnXSA/ICcgKDxzcGFuIHN0eWxlPVwiY29sb3I6ICNiZDI4MjhcIj5kZXByZWNhdGVkPC9zcGFuPiknIDogJyd9YCxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVkaXRzIGEgcGFnZSwgb3IgY3JlYXRlcyBpdCBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgICAgKiBAcGFyYW0gdGl0bGUgVGhlIHRpdGxlIG9mIHRoZSBwYWdlIHRvIGVkaXQuXG4gICAgICAgICAqIEBwYXJhbSB0ZXh0IFRoZSBwYWdlIGNvbnRlbnQgdG8gc2V0LlxuICAgICAgICAgKiBAcGFyYW0gc3VtbWFyeSBUaGUgZWRpdCBzdW1tYXJ5ICh3aWxsIGFwcGVuZCBzY3JpcHQgbm90aWNlKS5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgYXN5bmMgZWRpdE9yQ3JlYXRlKHRpdGxlOiBzdHJpbmcsIHRleHQ6IHN0cmluZywgc3VtbWFyeTogc3RyaW5nKSB7XG4gICAgICAgICAgICBzdW1tYXJ5ICs9IHRoaXMuU0NSSVBUX01FU1NBR0U7XG5cbiAgICAgICAgICAgIGF3YWl0IGFwaVxuICAgICAgICAgICAgICAgIC5lZGl0KHRpdGxlLCAoKSA9PiAoeyB0ZXh0LCBzdW1tYXJ5LCB3YXRjaGxpc3Q6ICd3YXRjaCcgfSkpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGFzeW5jIChlcnJvckNvZGUsIGVycm9ySW5mbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDb2RlID09PSAnbm9jcmVhdGUtbWlzc2luZycpXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcGkuY3JlYXRlKHRpdGxlLCB7IHN1bW1hcnksIHdhdGNobGlzdDogJ3dhdGNoJyB9LCB0ZXh0KS5jYXRjaCgoZXJyb3JDb2RlLCBlcnJvckluZm8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBFcnJvciBjcmVhdGluZyAke3RpdGxlfTogJHsoZXJyb3JJbmZvIGFzIE1lZGlhV2lraURhdGFFcnJvcik/LmVycm9yPy5pbmZvID8/ICdVbmtub3duIGVycm9yJ30gKCR7ZXJyb3JDb2RlfSlgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHR5cGU6ICdlcnJvcicgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgRXJyb3IgZWRpdGluZyBvciBjcmVhdGluZyAke3RpdGxlfTogJHsoZXJyb3JJbmZvIGFzIE1lZGlhV2lraURhdGFFcnJvcik/LmVycm9yPy5pbmZvID8/ICdVbmtub3duIGVycm9yJ30gKCR7ZXJyb3JDb2RlfSlgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdHlwZTogJ2Vycm9yJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wZW5zIGEgZGlmZiBmb3IgdGhlIGdpdmVuIHBhZ2UgdGl0bGUgYW5kIGNvbnRlbnQuXG4gICAgICAgICAqIEBwYXJhbSBwYWdlVGl0bGUgVGhlIHRpdGxlIG9mIHRoZSBwYWdlIHRvIG9wZW4gYSBkaWZmIGZvci5cbiAgICAgICAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGNvbnRlbnQgdG8gc2V0IGZvciB0aGUgcGFnZS5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgb3BlbkRpZmYocGFnZVRpdGxlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSB7XG4gICAgICAgICAgICAgICAgd3BUZXh0Ym94MTogY29udGVudCxcbiAgICAgICAgICAgICAgICB3cFN1bW1hcnk6IGBVcGRhdGluZyBkYXRhJHt0aGlzLlNDUklQVF9NRVNTQUdFfWAsXG4gICAgICAgICAgICAgICAgd3BEaWZmOiAnMScsIC8vIEFueSB0cnV0aHkgdmFsdWUgbWFrZXMgdGhpcyB3b3JrXG4gICAgICAgICAgICAgICAgd3BVbHRpbWF0ZVBhcmFtOiAnMScsIC8vIE1hcmtzIHRoZSBlbmQgb2YgZm9ybSBkYXRhXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBmb3JtVXJsID0gbmV3IFVSTChgJHttdy5jb25maWcuZ2V0KCd3Z1NjcmlwdFBhdGgnKX0vaW5kZXgucGhwYCwgd2luZG93LmxvY2F0aW9uLm9yaWdpbik7XG4gICAgICAgICAgICBmb3JtVXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3RpdGxlJywgcGFnZVRpdGxlKTtcbiAgICAgICAgICAgIGZvcm1Vcmwuc2VhcmNoUGFyYW1zLnNldCgnYWN0aW9uJywgJ3N1Ym1pdCcpO1xuXG4gICAgICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgICAgICAgICAgZm9ybS5hY3Rpb24gPSBmb3JtVXJsLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBmb3JtLm1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgICAgIGZvcm0udGFyZ2V0ID0gJ19ibGFuayc7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGZvcm1EYXRhKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhpZGRlbkZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICBoaWRkZW5GaWVsZC50eXBlID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgaGlkZGVuRmllbGQubmFtZSA9IGtleTtcbiAgICAgICAgICAgICAgICBoaWRkZW5GaWVsZC52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgZm9ybS5hcHBlbmQoaGlkZGVuRmllbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChmb3JtKTtcbiAgICAgICAgICAgIGZvcm0uc3VibWl0KCk7XG4gICAgICAgICAgICBmb3JtLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihTY3JpcHRVcGRhdGVyRGlhbG9nLnByb3RvdHlwZSwgT08udWkuUHJvY2Vzc0RpYWxvZy5wcm90b3R5cGUpO1xufSk7XG5cbi8qKlxuICogR2V0cyB0aGUgc2NyaXB0IGRhdGEgZm9yIGFydGljbGUtY2xlYW5lci5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0QXJ0aWNsZUNsZWFuZXJEYXRhKCkge1xuICAgIGNvbnN0IGNvbnRlbnQgPSAoYXdhaXQgZ2V0UGFnZUNvbnRlbnQoJ1dpa2lwZWRpYTpBdXRvV2lraUJyb3dzZXIvVGVtcGxhdGUgcmVkaXJlY3RzJykpID8/ICcnO1xuXG4gICAgY29uc3QgcmVwbGFjZW1lbnRzID0gY29udGVudFxuICAgICAgICAubWF0Y2hBbGwoL1xcKiB7e3RsXFx8LisvZylcbiAgICAgICAgLnRvQXJyYXkoKVxuICAgICAgICAubWFwKChsaW5lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZXMgPSBsaW5lWzBdLm1hdGNoQWxsKC97e3RsXFx8KC4rPyl9fS9nKS50b0FycmF5KCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7IGZyb206IHRlbXBsYXRlcy5zbGljZSgwLCAtMSkubWFwKCh0ZW1wbGF0ZSkgPT4gdGVtcGxhdGVbMV0pLCB0bzogdGVtcGxhdGVzLmF0KC0xKSFbMV0gfTtcbiAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVwbGFjZW1lbnRzKTtcbn1cblxuLyoqXG4gKiBDaHVua3MgYW4gYXJyYXkgaW50byBzbWFsbGVyIGFycmF5cyBvZiBhIHNwZWNpZmllZCBzaXplLlxuICogQHBhcmFtIGFycmF5IFRoZSBhcnJheSB0byBjaHVuay5cbiAqIEBwYXJhbSBjaHVua1NpemUgVGhlIHNpemUgb2YgZWFjaCBjaHVuay5cbiAqL1xuZnVuY3Rpb24gY2h1bmtBcnJheTxUPihhcnJheTogVFtdLCBjaHVua1NpemU6IG51bWJlcik6IFRbXVtdIHtcbiAgICBjb25zdCBjaHVua2VkID0gW107XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXkubGVuZ3RoOyBpbmRleCArPSBjaHVua1NpemUpIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBhcnJheS5zbGljZShpbmRleCwgaW5kZXggKyBjaHVua1NpemUpO1xuXG4gICAgICAgIGNodW5rZWQucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNodW5rZWQ7XG59XG5cbi8qKlxuICogR2V0cyBhIGNvbnRpbnVlZCBxdWVyeSByZXN1bHQgZnJvbSB0aGUgQVBJLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgcmVzdWx0cy5cbiAqIEBwYXJhbSBxdWVyeSBUaGUgcXVlcnkgcGFyYW1ldGVycyB0byB1c2UgZm9yIHRoZSBBUEkgcmVxdWVzdC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q29udGludWVkUXVlcnkocXVlcnk6IEFwaVF1ZXJ5UGFyYW1zKTogUHJvbWlzZTxBcGlSZXNwb25zZVtdPiB7XG4gICAgbGV0IGl0ZXJhdGlvbiA9IDA7XG5cbiAgICBjb25zdCByZXR1cm5WYWx1ZSA9IFtdO1xuXG4gICAgbGV0IHJlc3BvbnNlID0geyBjb250aW51ZToge30gfSBhcyBBcGlSZXNwb25zZSAmIFF1ZXJ5Q29udGludWF0aW9uO1xuXG4gICAgd2hpbGUgKCdjb250aW51ZScgaW4gcmVzcG9uc2UgJiYgaXRlcmF0aW9uIDwgMTApIHtcbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KHsgLi4ucXVlcnksIC4uLnJlc3BvbnNlLmNvbnRpbnVlIH0gYXMgQXBpUXVlcnlQYXJhbXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWF3YWl0LWluLWxvb3BcblxuICAgICAgICByZXR1cm5WYWx1ZS5wdXNoKHJlc3BvbnNlKTtcblxuICAgICAgICBpdGVyYXRpb24rKztcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2NyaXB0IGRhdGEgZm9yIHJlZGlyZWN0LWhlbHBlci5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0UmVkaXJlY3RIZWxwZXJEYXRhKCkge1xuICAgIGNvbnN0IGFsbFJlZGlyZWN0VGVtcGxhdGVzID0gKGF3YWl0IGFwaS5nZXQoe1xuICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgIGxpc3Q6ICdjYXRlZ29yeW1lbWJlcnMnLFxuICAgICAgICBjbXRpdGxlOiAnQ2F0ZWdvcnk6UmVkaXJlY3QgdGVtcGxhdGVzJyxcbiAgICAgICAgY21saW1pdDogJ21heCcsXG4gICAgICAgIGZvcm1hdHZlcnNpb246ICcyJyxcbiAgICB9IHNhdGlzZmllcyBBcGlRdWVyeUNhdGVnb3J5TWVtYmVyc1BhcmFtcykpIGFzIENhdGVnb3J5TWVtYmVyc1Jlc3VsdDtcbiAgICBjb25zdCBhbGxQb3NzaWJsZVJlZGlyZWN0VGVtcGxhdGVzID0gKGF3YWl0IGFwaS5nZXQoe1xuICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgIGxpc3Q6ICdjYXRlZ29yeW1lbWJlcnMnLFxuICAgICAgICBjbXRpdGxlOiAnQ2F0ZWdvcnk6VGVtcGxhdGUgcmVkaXJlY3RzIHdpdGggcG9zc2liaWxpdGllcycsXG4gICAgICAgIGNtbGltaXQ6ICdtYXgnLFxuICAgICAgICBmb3JtYXR2ZXJzaW9uOiAnMicsXG4gICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlDYXRlZ29yeU1lbWJlcnNQYXJhbXMpKSBhcyBDYXRlZ29yeU1lbWJlcnNSZXN1bHQ7XG5cbiAgICBjb25zdCByZWRpcmVjdFRlbXBsYXRlcyA9IGFsbFJlZGlyZWN0VGVtcGxhdGVzLnF1ZXJ5LmNhdGVnb3J5bWVtYmVyc1xuICAgICAgICAuZmlsdGVyKChwYWdlKSA9PiBwYWdlLnRpdGxlLnN0YXJ0c1dpdGgoJ1RlbXBsYXRlOlIgJykgJiYgcGFnZS50aXRsZSAhPT0gJ1RlbXBsYXRlOlIgdGVtcGxhdGUgaW5kZXgnKVxuICAgICAgICAubWFwKChwYWdlKSA9PiAoeyBuYW1lOiBwYWdlLnRpdGxlLnNwbGl0KCc6JylbMV0sIHJlZGlyZWN0OiBmYWxzZSB9KSk7XG4gICAgY29uc3QgcG9zc2libGVSZWRpcmVjdFRlbXBsYXRlcyA9IGFsbFBvc3NpYmxlUmVkaXJlY3RUZW1wbGF0ZXMucXVlcnkuY2F0ZWdvcnltZW1iZXJzXG4gICAgICAgIC5maWx0ZXIoKHBhZ2UpID0+IHBhZ2UudGl0bGUuc3RhcnRzV2l0aCgnVGVtcGxhdGU6UiAnKSAmJiBwYWdlLnRpdGxlICE9PSAnVGVtcGxhdGU6UiB3aXRoIHBvc3NpYmlsaXRpZXMnKVxuICAgICAgICAubWFwKChwYWdlKSA9PiAoeyBuYW1lOiBwYWdlLnRpdGxlLnNwbGl0KCc6JylbMV0sIHJlZGlyZWN0OiB0cnVlIH0pKTtcblxuICAgIGNvbnN0IGFsbFRlbXBsYXRlcyA9IFsuLi5yZWRpcmVjdFRlbXBsYXRlcywgLi4ucG9zc2libGVSZWRpcmVjdFRlbXBsYXRlc10uc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAvLyBGb3JjZSBjb21pY3MgYW5kIE1pZGRsZSBFYXJ0aCB0ZW1wbGF0ZXMgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgICAgICBpZiAoYS5uYW1lLnN0YXJ0c1dpdGgoJ1IgY29taWNzJykgfHwgYS5uYW1lLnN0YXJ0c1dpdGgoJ1IgTUUnKSkgcmV0dXJuIDE7XG4gICAgICAgIGVsc2UgaWYgKGIubmFtZS5zdGFydHNXaXRoKCdSIGNvbWljcycpIHx8IGIubmFtZS5zdGFydHNXaXRoKCdSIE1FJykpIHJldHVybiAtMTtcbiAgICAgICAgZWxzZSByZXR1cm4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGZpbmFsRGF0YSA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgYWxsVGVtcGxhdGVzLm1hcCgocGFnZSkgPT4gW3BhZ2UubmFtZSwgeyByZWRpcmVjdDogcGFnZS5yZWRpcmVjdCwgcGFyYW1ldGVyczoge30sIGFsaWFzZXM6IFtdIGFzIHN0cmluZ1tdIH1dKSxcbiAgICApO1xuXG4gICAgLy8gRmV0Y2ggdGhlIFRlbXBsYXRlRGF0YSBmb3IgYWxsIHRlbXBsYXRlc1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBjaHVua0FycmF5KGFsbFRlbXBsYXRlcywgNTApLm1hcChhc3luYyAoY2h1bmspID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlRGF0YVF1ZXJ5UmVzdWx0ID0gKGF3YWl0IGFwaS5nZXQoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3RlbXBsYXRlZGF0YScsXG4gICAgICAgICAgICAgICAgdGl0bGVzOiBjaHVuay5tYXAoKHBhZ2UpID0+IGBUZW1wbGF0ZToke3BhZ2UubmFtZX1gKSxcbiAgICAgICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAnMicsXG4gICAgICAgICAgICB9IHNhdGlzZmllcyBUZW1wbGF0ZURhdGFBcGlUZW1wbGF0ZURhdGFQYXJhbXMpKSBhcyBUZW1wbGF0ZURhdGFSZXN1bHQ7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFnZSBvZiBPYmplY3QudmFsdWVzKHRlbXBsYXRlRGF0YVF1ZXJ5UmVzdWx0LnBhZ2VzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFBhcmFtZXRlcnMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHBhZ2UucGFyYW1zKS5tYXAoKFtuYW1lLCBkYXRhXSkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlhc2VzOiBkYXRhLmFsaWFzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRhdGEubGFiZWw/LmVuID8/IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRhdGEuZGVzY3JpcHRpb24/LmVuID8/IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZGF0YS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBkYXRhLnJlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RlZDogZGF0YS5zdWdnZXN0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogZGF0YS5kZWZhdWx0Py5lbiA/PyBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IGRhdGEuZXhhbXBsZT8uZW4gPz8gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBmaW5hbERhdGFbcGFnZS50aXRsZS5zcGxpdCgnOicpWzFdXS5wYXJhbWV0ZXJzID0gZm9ybWF0dGVkUGFyYW1ldGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgKTtcblxuICAgIC8vIEZpbmQgYWxpYXNlcyBvZiByZWRpcmVjdCB0ZW1wbGF0ZXNcbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgY2h1bmtBcnJheShyZWRpcmVjdFRlbXBsYXRlcywgNTApLm1hcChhc3luYyAoY2h1bmspID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFsbFJlZGlyZWN0c1F1ZXJ5UmVzdWx0ID0gKGF3YWl0IGdldENvbnRpbnVlZFF1ZXJ5KHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgdGl0bGVzOiBjaHVuay5tYXAoKHBhZ2UpID0+IGBUZW1wbGF0ZToke3BhZ2UubmFtZX1gKSxcbiAgICAgICAgICAgICAgICBwcm9wOiAncmVkaXJlY3RzJyxcbiAgICAgICAgICAgICAgICByZG5hbWVzcGFjZTogMTAsXG4gICAgICAgICAgICAgICAgcmRsaW1pdDogJ21heCcsXG4gICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogJzInLFxuICAgICAgICAgICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlCYWNrbGlua3Nwcm9wUGFyYW1zKSkgYXMgUmVkaXJlY3RzUmVzdWx0W107XG5cbiAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0c1F1ZXJ5UmVzdWx0UGFnZXMgPSBhbGxSZWRpcmVjdHNRdWVyeVJlc3VsdC5mbGF0TWFwKChyZXN1bHQpID0+IHJlc3VsdC5xdWVyeS5wYWdlcyk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFnZSBvZiByZWRpcmVjdHNRdWVyeVJlc3VsdFBhZ2VzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwcGVkUmVkaXJlY3RzID1cbiAgICAgICAgICAgICAgICAgICAgcGFnZS5yZWRpcmVjdHNcbiAgICAgICAgICAgICAgICAgICAgICAgID8ubWFwKChyZWRpcmVjdCkgPT4gcmVkaXJlY3QudGl0bGUuc3BsaXQoJzonKVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHJlZGlyZWN0KSA9PiAhcG9zc2libGVSZWRpcmVjdFRlbXBsYXRlcy5zb21lKCh0ZW1wbGF0ZSkgPT4gdGVtcGxhdGUubmFtZSA9PT0gcmVkaXJlY3QpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEubG9jYWxlQ29tcGFyZShiKSkgPz8gW107XG5cbiAgICAgICAgICAgICAgICBmaW5hbERhdGFbcGFnZS50aXRsZS5zcGxpdCgnOicpWzFdXS5hbGlhc2VzLnB1c2goLi4ubWFwcGVkUmVkaXJlY3RzKTsgLy8gRGF0YSBtaWdodCBleGlzdCBmcm9tIHByZXZpb3VzIHF1ZXJpZXMsIHNvIHVwZGF0ZSBpbnN0ZWFkIG9mIG92ZXJ3cml0aW5nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICk7XG5cbiAgICAvLyBGaW5kIGFsaWFzZXMgb2YgcG9zc2libGUgcmVkaXJlY3QgdGVtcGxhdGVzXG4gICAgY29uc3QgYWxsQWxpYXNlc09mUG9zc2libGVUZW1wbGF0ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgY2h1bmtBcnJheShwb3NzaWJsZVJlZGlyZWN0VGVtcGxhdGVzLCA1MCkubWFwKGFzeW5jIChjaHVuaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGlua3NRdWVyeVJlc3VsdCA9IChhd2FpdCBhcGkuZ2V0KHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgdGl0bGVzOiBjaHVuay5tYXAoKHBhZ2UpID0+IGBUZW1wbGF0ZToke3BhZ2UubmFtZX1gKSxcbiAgICAgICAgICAgICAgICBwcm9wOiAnbGlua3NoZXJlJyxcbiAgICAgICAgICAgICAgICBsaG5hbWVzcGFjZTogMTAsXG4gICAgICAgICAgICAgICAgbGhsaW1pdDogJ21heCcsXG4gICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogJzInLFxuICAgICAgICAgICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlCYWNrbGlua3Nwcm9wUGFyYW1zKSkgYXMgTGlua3NIZXJlUmVzdWx0O1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhZ2Ugb2YgbGlua3NRdWVyeVJlc3VsdC5xdWVyeS5wYWdlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcHBlZFJlZGlyZWN0cyA9XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UubGlua3NoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICA/LmZpbHRlcigocGFnZSkgPT4gcGFnZS5yZWRpcmVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHBhZ2UpID0+IHBhZ2UudGl0bGUuc3BsaXQoJzonKVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHBhZ2UpID0+ICFwYWdlLmVuZHNXaXRoKCcvZG9jJykgJiYgIXBhZ2UuZW5kc1dpdGgoJy9zYW5kYm94JykpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYS5sb2NhbGVDb21wYXJlKGIpKSA/PyBbXTtcblxuICAgICAgICAgICAgICAgIGFsbEFsaWFzZXNPZlBvc3NpYmxlVGVtcGxhdGVzLnB1c2goLi4ubWFwcGVkUmVkaXJlY3RzKTtcblxuICAgICAgICAgICAgICAgIGZpbmFsRGF0YVtwYWdlLnRpdGxlLnNwbGl0KCc6JylbMV1dLmFsaWFzZXMgPSBtYXBwZWRSZWRpcmVjdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICk7XG5cbiAgICBjb25zdCBtYXBwZWRGaW5hbERhdGEgPSBPYmplY3QuZW50cmllcyhmaW5hbERhdGEpLm1hcCgoW25hbWUsIHRlbXBsYXRlRGF0YV0pID0+IHtcbiAgICAgICAgY29uc3QgZmluYWxUZW1wbGF0ZURhdGEgPSB7XG4gICAgICAgICAgICAuLi4odGVtcGxhdGVEYXRhLnJlZGlyZWN0ID8geyByZWRpcmVjdDogdHJ1ZSB9IDoge30pLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogdGVtcGxhdGVEYXRhLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICBhbGlhc2VzOiB0ZW1wbGF0ZURhdGEuYWxpYXNlcy5zb3J0KChhLCBiKSA9PiBhLmxvY2FsZUNvbXBhcmUoYikpLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBbbmFtZSwgZmluYWxUZW1wbGF0ZURhdGFdIGFzIGNvbnN0O1xuICAgIH0pO1xuXG4gICAgZm9yIChjb25zdCBwb3NzaWJsZVRlbXBsYXRlQWxpYXMgb2YgYWxsQWxpYXNlc09mUG9zc2libGVUZW1wbGF0ZXMpXG4gICAgICAgIGZvciAoY29uc3QgWywgZGF0YV0gb2YgbWFwcGVkRmluYWxEYXRhKVxuICAgICAgICAgICAgaWYgKCFkYXRhLnJlZGlyZWN0ICYmIGRhdGEuYWxpYXNlcy5pbmNsdWRlcyhwb3NzaWJsZVRlbXBsYXRlQWxpYXMpKVxuICAgICAgICAgICAgICAgIGRhdGEuYWxpYXNlcyA9IGRhdGEuYWxpYXNlcy5maWx0ZXIoKGFsaWFzKSA9PiBhbGlhcyAhPT0gcG9zc2libGVUZW1wbGF0ZUFsaWFzKTtcblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShPYmplY3QuZnJvbUVudHJpZXMobWFwcGVkRmluYWxEYXRhKSk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7bUJBR08sSUFBTUEsRUFBTSxJQUFJLEdBQUcsSUFNMUIsZUFBc0JDLEVBQWVDLEVBQWUsQ0FDaEQsT0FDSyxNQUFNRixFQUFJLElBQUksQ0FDWCxPQUFRLFFBQ1IsY0FBZSxJQUNmLEtBQU0sWUFDTixPQUFRLFVBQ1IsUUFBUyxPQUNULE9BQVFFLENBQ1osQ0FBbUMsR0FDckMsTUFBTSxNQUFNLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxNQUFNLEtBQUssUUFBUSxLQUFLLENBQzVELENDaUJBLEdBQUcsT0FBTyxNQUFNLENBQUMsaUJBQWtCLGVBQWdCLGtCQUFtQixpQkFBaUIsRUFBRyxJQUFNLENBQzVGLEdBQUksR0FBRyxPQUFPLElBQUksWUFBWSxJQUFNLFdBQWEsR0FBRyxPQUFPLElBQUksWUFBWSxJQUFNLGVBQWdCLE9BRWpHLElBQU1DLEVBQWtCLFNBQVMsY0FBYyxpQkFBaUIsRUFBRyxVQUFVLEVBQUksRUFFM0VDLEVBQU8sU0FBUyxjQUFjLEdBQUcsRUFDdkNBLEVBQUssS0FBTyxJQUNaQSxFQUFLLE1BQU0sV0FBYSxPQUN4QkEsRUFBSyxZQUFjLG1CQUNuQkEsRUFBSyxpQkFBaUIsUUFBVUMsR0FBVSxDQUN0Q0EsRUFBTSxlQUFlLEVBRXJCLElBQU1DLEVBQWdCLElBQUksR0FBRyxHQUFH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RUFDZixDQUFDdEUsRUFBSyxVQUFZQSxFQUFLLFFBQVEsU0FBU3lFLENBQXFCLElBQzdEekUsRUFBSyxRQUFVQSxFQUFLLFFBQVEsT0FBUTBFLEdBQVVBLElBQVVELENBQXFCLEdBRXpGLE9BQU8sS0FBSyxVQUFVLE9BQU8sWUFBWUgsQ0FBZSxDQUFDLENBQzdEIiwKICAibmFtZXMiOiBbImFwaSIsICJnZXRQYWdlQ29udGVudCIsICJ0aXRsZSIsICJmdWxsTGlua0VsZW1lbnQiLCAibGluayIsICJldmVudCIsICJ3aW5kb3dNYW5hZ2VyIiwgInNjcmlwdFVwZGF0ZXJEaWFsb2ciLCAiU2NyaXB0VXBkYXRlckRpYWxvZyIsICJnZXRBcnRpY2xlQ2xlYW5lckRhdGEiLCAiZ2V0UmVkaXJlY3RIZWxwZXJEYXRhIiwgImVycm9yIiwgIm1lc3NhZ2VFbGVtZW50IiwgInNjcmlwdCIsICJzY3JpcHRzTXVsdGlzZWxlY3RMYXlvdXQiLCAiaWQiLCAibmFtZSIsICJzZWxlY3RlZERlZmF1bHQiLCAiYWN0aW9uc011bHRpc2VsZWN0TGF5b3V0IiwgImJ1dHRvbkdyb3VwIiwgInVwZGF0ZXIiLCAiYnV0dG9uIiwgImRhdGEiLCAicmVzb2x2ZSIsICJzY3JpcHREYXRhVXBkYXRlcnNNdWx0aXNlbGVjdExheW91dCIsICJhY3Rpb24iLCAic2VsZWN0ZWRTY3JpcHRzIiwgInNjcmlwdE5hbWUiLCAibWV0aG9kIiwgImRlZmVycmVkIiwgInJlc3VsdCIsICJsYXRlc3RDb21taXRIYXNoUmVzcG9uc2UiLCAic2NyaXB0RGF0YVJlc3BvbnNlIiwgInNjcmlwdERhdGEiLCAiYWN0aW9uc1RvVGFrZSIsICJzdWJwYWdlTmFtZSIsICJzdWJwYWdlVGFsa05hbWUiLCAiZnVsbFN1YnBhZ2VJbmZvIiwgImF1dGhvciIsICJkYXRlIiwgImRlc2NyaXB0aW9uIiwgImxpbmUiLCAic2tpbiIsICJzdGF0dXMiLCAic2NyaXB0Q29udGVudCIsICJzY3JpcHRDb250ZW50UmVzcG9uc2UiLCAic2NyaXB0cyIsICJ0aXRsZSIsICJ0ZXh0IiwgInN1bW1hcnkiLCAiYXBpIiwgImVycm9yQ29kZSIsICJlcnJvckluZm8iLCAicGFnZVRpdGxlIiwgImNvbnRlbnQiLCAiZm9ybURhdGEiLCAiZm9ybVVybCIsICJmb3JtIiwgImtleSIsICJ2YWx1ZSIsICJoaWRkZW5GaWVsZCIsICJyZXBsYWNlbWVudHMiLCAiZ2V0UGFnZUNvbnRlbnQiLCAidGVtcGxhdGVzIiwgInRlbXBsYXRlIiwgImNodW5rQXJyYXkiLCAiYXJyYXkiLCAiY2h1bmtTaXplIiwgImNodW5rZWQiLCAiaW5kZXgiLCAiY2h1bmsiLCAiZ2V0Q29udGludWVkUXVlcnkiLCAicXVlcnkiLCAiaXRlcmF0aW9uIiwgInJldHVyblZhbHVlIiwgInJlc3BvbnNlIiwgImFsbFJlZGlyZWN0VGVtcGxhdGVzIiwgImFsbFBvc3NpYmxlUmVkaXJlY3RUZW1wbGF0ZXMiLCAicmVkaXJlY3RUZW1wbGF0ZXMiLCAicGFnZSIsICJwb3NzaWJsZVJlZGlyZWN0VGVtcGxhdGVzIiwgImFsbFRlbXBsYXRlcyIsICJhIiwgImIiLCAiZmluYWxEYXRhIiwgInRlbXBsYXRlRGF0YVF1ZXJ5UmVzdWx0IiwgImZvcm1hdHRlZFBhcmFtZXRlcnMiLCAicmVkaXJlY3RzUXVlcnlSZXN1bHRQYWdlcyIsICJtYXBwZWRSZWRpcmVjdHMiLCAicmVkaXJlY3QiLCAiYWxsQWxpYXNlc09mUG9zc2libGVUZW1wbGF0ZXMiLCAibGlua3NRdWVyeVJlc3VsdCIsICJtYXBwZWRGaW5hbERhdGEiLCAidGVtcGxhdGVEYXRhIiwgImZpbmFsVGVtcGxhdGVEYXRhIiwgInBvc3NpYmxlVGVtcGxhdGVBbGlhcyIsICJhbGlhcyJdCn0K
