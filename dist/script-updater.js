// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/script-updater.ts

"use strict";(()=>{var u=new mw.Api;async function h(g){return(await u.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:g})).query.pages[0].revisions?.[0].slots.main.content.trim()}mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;let g=document.querySelector(".mw-editsection").cloneNode(!0),m=document.createElement("a");m.href="#",m.style.fontWeight="bold",m.textContent="Sync from GitHub",m.addEventListener("click",d=>{d.preventDefault();let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let i=new c;e.addWindows([i]),i.open()}),g.querySelector("a").replaceWith(m),document.querySelector("h2#My_user_scripts + .mw-editsection").after(g);class c extends OO.ui.ProcessDialog{REPO_OWNER="Eejit43";REPO_NAME="wikipedia-scripts";SCRIPT_MESSAGE=" (via [[User:Eejit43/scripts/script-updater.js|script]])";content;scriptsMultiselect;actionsMultiselect;latestCommitHash;scripts;scriptDataUpdaters={"article-cleaner":y,"redirect-helper":w};constructor(){super({size:"medium"}),c.static.name="ScriptUpdaterDialog",c.static.title="script-updater",c.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}getSetupProcess=()=>c.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){let o=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(o.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.scriptsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:this.scripts.map(o=>new OO.ui.CheckboxMultioptionWidget({data:o.name,label:o.name}))}),this.scriptsMultiselect.$element[0].style.columnCount="2";let i=new OO.ui.FieldLayout(this.scriptsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Scripts to update:</b>"),align:"top"});this.actionsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:[{id:"documentation",name:"Update script documentation"},{id:"script",name:"Update script code"},{id:"talk",name:"Create talk redirect",selectedDefault:!1}].map(({id:o,name:l,selectedDefault:n})=>new OO.ui.CheckboxMultioptionWidget({data:o,label:l,selected:n??!0}))});let t=new OO.ui.FieldLayout(this.actionsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Actions to take (if applicable):</b>"),align:"top"}),a=new OO.ui.ButtonGroupWidget({items:Object.entries(this.scriptDataUpdaters).map(([o,l])=>{let n=new OO.ui.ButtonWidget({label:o,flags:["progressive"]});return n.on("click",async()=>{mw.notify(`Fetching ${o} data...`,{tag:"update-script-data-notification"});let p=await l();mw.notify(`Successfully fetched ${o} data, opening diff...`,{type:"success",tag:"update-script-data-notification"}),await new Promise(s=>setTimeout(s,500)),this.openDiff(`User:Eejit43/scripts/${o}.json`,p)}),n})}),r=new OO.ui.FieldLayout(a,{label:new OO.ui.HtmlSnippet("<b>Script data updaters:</b>"),align:"top"});this.content.$element.append(i.$element),this.content.$element.append(t.$element),this.content.$element.append(r.$element),this.$body.append(this.content.$element)}));getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.close()}):e==="save"?new OO.ui.Process(()=>{let i=this.scriptsMultiselect.findSelectedItemsData().map(t=>this.scripts.find(a=>a.name===t));this.close(),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(i.map(t=>this.handleScript(t))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(t=>!t.personal&&!t.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(t=>t.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(t=>t.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${i.length} script${i.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):c.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>c.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});wrapAsyncMethod(e){let i=$.Deferred();return e().then(t=>i.resolve(t)),i.promise()}loadScriptData=async()=>{let e=await fetch(`https://api.github.com/repos/${this.REPO_OWNER}/${this.REPO_NAME}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;let i=await fetch(`https://raw.githubusercontent.com/${this.REPO_OWNER}/${this.REPO_NAME}/${this.latestCommitHash}/scripts.json`);if(!i.ok)return`Failed to fetch script data from GitHub: ${i.statusText} (${i.status})`;let t=await i.json();this.scripts=Object.entries(t).map(([a,r])=>({name:a,...r}))};async handleScript(e){let i=this.actionsMultiselect.findSelectedItemsData(),t=`User:Eejit43/scripts/${e.name}`,a=`User talk:Eejit43/scripts/${e.name}`,r=`${t}.js`,o=["{{User:Eejit43/script-documentation",e.image===!1?`| image             = ${e.image}`:null,e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = ${e["use-instead"].includes("User:")?e["use-instead"]:`[[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`}`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(n=>`[[User:${n}|${n}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.configuration?`| configuration     = ${e.configuration}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([n,p])=>`* '''{{start date and age|${n}}}:'''${Array.isArray(p)?`
${p.map(s=>`** ${s}`).join(`
`)}`:` ${p}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/script-documentation/skin-support|${Object.entries(e["skin-support"]).map(([n,p])=>`${n}=${p}`).join("|")}}}`,e["source-multiple"]?`| source-multiple   = ${e["source-multiple"]}`:null,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean),l=null;if(i.includes("script")){let n=await fetch(`https://raw.githubusercontent.com/${this.REPO_OWNER}/${this.REPO_NAME}/${this.latestCommitHash}/dist/${e.name}.js`);if(n.ok)l=await n.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${n.statusText} (${n.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(i.includes("documentation")&&await this.editOrCreate(t,o.join(`
`),"Syncing script documentation from GitHub"),i.includes("talk")&&await this.editOrCreate(a,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),l&&await this.editOrCreate(r,l,"Syncing script from GitHub")}mapScripts(e){return e.map(i=>`* [[User:Eejit43/scripts/${i.name}${i.personal?".js":""}|${i.name}]] - ${i["short-description"]||i.description}${i["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${i["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,i,t){t+=this.SCRIPT_MESSAGE,await u.edit(e,()=>({text:i,summary:t,watchlist:"watch"})).catch(async(a,r)=>{if(a==="nocreate-missing")await u.create(e,{summary:t,watchlist:"watch"},i).catch((o,l)=>{mw.notify(`Error creating ${e}: ${l?.error?.info??"Unknown error"} (${o})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${r?.error?.info??"Unknown error"} (${a})`,{type:"error"});return}})}openDiff(e,i){let t={wpTextbox1:i,wpSummary:`Updating data${this.SCRIPT_MESSAGE}`,wpDiff:"1",wpUltimateParam:"1"},a=new URL(`${mw.config.get("wgScriptPath")}/index.php`,window.location.origin);a.searchParams.set("title",e),a.searchParams.set("action","submit");let r=document.createElement("form");r.action=a.toString(),r.method="POST",r.target="_blank";for(let[o,l]of Object.entries(t)){let n=document.createElement("input");n.type="hidden",n.name=o,n.value=l,r.append(n)}document.body.append(r),r.submit(),r.remove()}}Object.assign(c.prototype,OO.ui.ProcessDialog.prototype)});async function y(){let m=(await h("Wikipedia:AutoWikiBrowser/Template redirects")??"").matchAll(/\* {{tl\|.+/g).toArray().map(c=>{let d=c[0].matchAll(/{{tl\|(.+?)}}/g).toArray();return{from:d.slice(0,-1).map(e=>e[1]),to:d.at(-1)[1]}});return JSON.stringify(m)}async function w(){let g=await u.get({action:"query",list:"categorymembers",cmtitle:"Category:Redirect templates",cmlimit:"max",formatversion:"2"}),m=await u.get({action:"query",list:"categorymembers",cmtitle:"Category:Template redirects with possibilities",cmlimit:"max",formatversion:"2"}),c=g.query.categorymembers.filter(t=>t.title.startsWith("Template:R ")&&t.title!=="Template:R template index").map(t=>({name:t.title.split(":")[1],redirect:!1})),d=m.query.categorymembers.filter(t=>t.title.startsWith("Template:R ")&&t.title!=="Template:R with possibilities").map(t=>({name:t.title.split(":")[1],redirect:!0})),e=[],i=await Promise.all([...c,...d].sort((t,a)=>t.name.startsWith("R comics")||t.name.startsWith("R ME")?1:a.name.startsWith("R comics")||a.name.startsWith("R ME")?-1:t.name.localeCompare(a.name)).map(async t=>{let a=await u.get({action:"templatedata",titles:"Template:"+t.name,formatversion:"2"}),r=Object.values(a.pages)[0]?.params||{},o=Object.fromEntries(Object.entries(r).map(([p,s])=>[p,{aliases:s.aliases,label:s.label?.en??null,description:s.description?.en??null,type:s.type,required:s.required,suggested:s.suggested,default:s.default?.en??null,example:s.example?.en??null}])),l;t.redirect?(l=(await u.get({action:"query",titles:"Template:"+t.name,prop:"linkshere",lhnamespace:10,lhlimit:"max",formatversion:"2"})).query.pages[0].linkshere?.filter(s=>s.redirect).map(s=>s.title.split(":")[1]).filter(s=>![...c,...d].some(f=>f.name===s)&&!s.endsWith("/doc")&&!s.endsWith("/sandbox")).sort((s,f)=>s.localeCompare(f))??[],e.push(...l)):l=(await u.get({action:"query",titles:"Template:"+t.name,prop:"redirects",rdlimit:"max",formatversion:"2"})).query.pages[0].redirects?.filter(s=>s.ns===10).map(s=>s.title.split(":")[1]).filter(s=>!d.some(f=>f.name===s)).sort((s,f)=>s.localeCompare(f))??[];let n={...t.redirect?{redirect:!0}:{},parameters:o,aliases:l};return[t.name,n]}));for(let t of e)for(let[,a]of i)!a.redirect&&a.aliases.includes(t)&&(a.aliases=a.aliases.filter(r=>r!==t));return JSON.stringify(Object.fromEntries(i))}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vdXRpbGl0eS50cyIsICIuLi9zY3JpcHRzL3NjcmlwdC11cGRhdGVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgdHlwZSB7IEFwaVF1ZXJ5UmV2aXNpb25zUGFyYW1zIH0gZnJvbSAndHlwZXMtbWVkaWF3aWtpL2FwaV9wYXJhbXMnO1xuaW1wb3J0IHR5cGUgeyBQYWdlUmV2aXNpb25zUmVzdWx0IH0gZnJvbSAnLi9nbG9iYWwtdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgYXBpID0gbmV3IG13LkFwaSgpO1xuXG4vKipcbiAqIEZldGNoZXMgdGhlIGNvbnRlbnQgb2YgYSBnaXZlbiBwYWdlLlxuICogQHBhcmFtIHRpdGxlIFRoZSB0aXRsZSB0byBmZXRjaC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBhZ2VDb250ZW50KHRpdGxlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICAoYXdhaXQgYXBpLmdldCh7XG4gICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAnMicsXG4gICAgICAgICAgICBwcm9wOiAncmV2aXNpb25zJyxcbiAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgcnZzbG90czogJ21haW4nLFxuICAgICAgICAgICAgdGl0bGVzOiB0aXRsZSxcbiAgICAgICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlSZXZpc2lvbnNQYXJhbXMpKSBhcyBQYWdlUmV2aXNpb25zUmVzdWx0XG4gICAgKS5xdWVyeS5wYWdlc1swXS5yZXZpc2lvbnM/LlswXS5zbG90cy5tYWluLmNvbnRlbnQudHJpbSgpO1xufVxuIiwgImltcG9ydCB0eXBlIHtcbiAgICBBcGlRdWVyeUJhY2tsaW5rc3Byb3BQYXJhbXMsXG4gICAgQXBpUXVlcnlDYXRlZ29yeU1lbWJlcnNQYXJhbXMsXG4gICAgVGVtcGxhdGVEYXRhQXBpVGVtcGxhdGVEYXRhUGFyYW1zLFxufSBmcm9tICd0eXBlcy1tZWRpYXdpa2kvYXBpX3BhcmFtcyc7XG5pbXBvcnQgdHlwZSB7IENhdGVnb3J5TWVtYmVyc1Jlc3VsdCwgTGlua3NIZXJlUmVzdWx0LCBNZWRpYVdpa2lEYXRhRXJyb3IsIFJlZGlyZWN0c1Jlc3VsdCwgVGVtcGxhdGVEYXRhUmVzdWx0IH0gZnJvbSAnLi4vZ2xvYmFsLXR5cGVzJztcbmltcG9ydCB7IGFwaSwgZ2V0UGFnZUNvbnRlbnQgfSBmcm9tICcuLi91dGlsaXR5JztcblxuaW50ZXJmYWNlIFNjcmlwdCB7XG4gICAgJ25hbWUnOiBzdHJpbmc7XG4gICAgJ2luLWRldmVsb3BtZW50Jz86IGJvb2xlYW47XG4gICAgJ3VzZS1pbnN0ZWFkJz86IHN0cmluZztcbiAgICAnaW1hZ2UnPzogZmFsc2U7XG4gICAgJ2ltYWdlLWNhcHRpb24nPzogc3RyaW5nO1xuICAgICdzaG9ydC1kZXNjcmlwdGlvbic6IHN0cmluZztcbiAgICAnZGVzY3JpcHRpb24nOiBzdHJpbmc7XG4gICAgJ3VzYWdlJz86IHN0cmluZztcbiAgICAnY29uZmlndXJhdGlvbic/OiBzdHJpbmc7XG4gICAgJ2NoYW5nZWxvZyc/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBzdHJpbmdbXT47XG4gICAgJ290aGVyLWF1dGhvcnMnPzogc3RyaW5nW107XG4gICAgJ2ZvcmsnPzogdHJ1ZTtcbiAgICAncGVyc29uYWwnPzogdHJ1ZTtcbiAgICAnc2tpbi1zdXBwb3J0JzogUmVjb3JkPHN0cmluZywgYm9vbGVhbj47XG4gICAgJ3NvdXJjZS1tdWx0aXBsZSc/OiB0cnVlO1xuICAgICdyZWxlYXNlZCc6IHN0cmluZztcbiAgICAndXBkYXRlZCc6IHN0cmluZztcbn1cblxubXcubG9hZGVyLnVzaW5nKFsnbWVkaWF3aWtpLnV0aWwnLCAnb29qcy11aS1jb3JlJywgJ29vanMtdWktd2lkZ2V0cycsICdvb2pzLXVpLXdpbmRvd3MnXSwgKCkgPT4ge1xuICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z1VzZXJOYW1lJykgIT09ICdFZWppdDQzJyB8fCBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJykgIT09ICdVc2VyOkVlaml0NDMnKSByZXR1cm47XG5cbiAgICBjb25zdCBmdWxsTGlua0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubXctZWRpdHNlY3Rpb24nKSEuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxTcGFuRWxlbWVudDtcblxuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGluay5ocmVmID0gJyMnO1xuICAgIGxpbmsuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcbiAgICBsaW5rLnRleHRDb250ZW50ID0gJ1N5bmMgZnJvbSBHaXRIdWInO1xuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zdCB3aW5kb3dNYW5hZ2VyID0gbmV3IE9PLnVpLldpbmRvd01hbmFnZXIoKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQod2luZG93TWFuYWdlci4kZWxlbWVudFswXSk7XG5cbiAgICAgICAgY29uc3Qgc2NyaXB0VXBkYXRlckRpYWxvZyA9IG5ldyBTY3JpcHRVcGRhdGVyRGlhbG9nKCk7XG4gICAgICAgIHdpbmRvd01hbmFnZXIuYWRkV2luZG93cyhbc2NyaXB0VXBkYXRlckRpYWxvZ10pO1xuXG4gICAgICAgIHNjcmlwdFVwZGF0ZXJEaWFsb2cub3BlbigpO1xuICAgIH0pO1xuXG4gICAgZnVsbExpbmtFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2EnKSEucmVwbGFjZVdpdGgobGluayk7XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoMiNNeV91c2VyX3NjcmlwdHMgKyAubXctZWRpdHNlY3Rpb24nKSEuYWZ0ZXIoZnVsbExpbmtFbGVtZW50KTtcblxuICAgIC8qKlxuICAgICAqIEFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgaXMgYSBkaWFsb2cgdGhhdCBtYW5hZ2VzIHVwZGF0aW5nIHNjcmlwdHMuXG4gICAgICovXG4gICAgY2xhc3MgU2NyaXB0VXBkYXRlckRpYWxvZyBleHRlbmRzIE9PLnVpLlByb2Nlc3NEaWFsb2cge1xuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IFJFUE9fT1dORVIgPSAnRWVqaXQ0Myc7XG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgUkVQT19OQU1FID0gJ3dpa2lwZWRpYS1zY3JpcHRzJztcblxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IFNDUklQVF9NRVNTQUdFID0gJyAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvc2NyaXB0LXVwZGF0ZXIuanN8c2NyaXB0XV0pJztcblxuICAgICAgICBwcml2YXRlIGNvbnRlbnQhOiBPTy51aS5QYW5lbExheW91dDtcbiAgICAgICAgcHJpdmF0ZSBzY3JpcHRzTXVsdGlzZWxlY3QhOiBPTy51aS5DaGVja2JveE11bHRpc2VsZWN0V2lkZ2V0O1xuICAgICAgICBwcml2YXRlIGFjdGlvbnNNdWx0aXNlbGVjdCE6IE9PLnVpLkNoZWNrYm94TXVsdGlzZWxlY3RXaWRnZXQ7XG5cbiAgICAgICAgcHJpdmF0ZSBsYXRlc3RDb21taXRIYXNoITogc3RyaW5nO1xuICAgICAgICBwcml2YXRlIHNjcmlwdHMhOiBTY3JpcHRbXTtcblxuICAgICAgICBwcml2YXRlIHNjcmlwdERhdGFVcGRhdGVycyA9IHtcbiAgICAgICAgICAgICdhcnRpY2xlLWNsZWFuZXInOiBnZXRBcnRpY2xlQ2xlYW5lckRhdGEsXG4gICAgICAgICAgICAncmVkaXJlY3QtaGVscGVyJzogZ2V0UmVkaXJlY3RIZWxwZXJEYXRhLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoeyBzaXplOiAnbWVkaXVtJyB9KTtcblxuICAgICAgICAgICAgU2NyaXB0VXBkYXRlckRpYWxvZy5zdGF0aWMubmFtZSA9ICdTY3JpcHRVcGRhdGVyRGlhbG9nJztcbiAgICAgICAgICAgIFNjcmlwdFVwZGF0ZXJEaWFsb2cuc3RhdGljLnRpdGxlID0gJ3NjcmlwdC11cGRhdGVyJztcbiAgICAgICAgICAgIFNjcmlwdFVwZGF0ZXJEaWFsb2cuc3RhdGljLmFjdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdjYW5jZWwnLCBsYWJlbDogJ0Nsb3NlJywgZmxhZ3M6IFsnc2FmZScsICdjbG9zZSddIH0sXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdzYXZlJywgbGFiZWw6ICdSdW4nLCBmbGFnczogWydwcmltYXJ5JywgJ3Byb2dyZXNzaXZlJ10gfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cblxuICAgICAgICBnZXRTZXR1cFByb2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gU2NyaXB0VXBkYXRlckRpYWxvZy5zdXBlci5wcm90b3R5cGUuZ2V0U2V0dXBQcm9jZXNzLmNhbGwodGhpcykubmV4dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JhcEFzeW5jTWV0aG9kKHRoaXMubG9hZFNjcmlwdERhdGEpLnRoZW4oKGVycm9yPzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZUVsZW1lbnQgPSBuZXcgT08udWkuTWVzc2FnZVdpZGdldCh7IHR5cGU6ICdlcnJvcicsIGxhYmVsOiBlcnJvciB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gbmV3IE9PLnVpLlBhbmVsTGF5b3V0KHsgcGFkZGVkOiB0cnVlLCBleHBhbmRlZDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuJGVsZW1lbnQuYXBwZW5kKG1lc3NhZ2VFbGVtZW50LiRlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgYXMgdW5rbm93biBhcyB7ICRib2R5OiBKUXVlcnkgfSkuJGJvZHkuYXBwZW5kKHRoaXMuY29udGVudC4kZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0QWN0aW9ucygpLnNldEFiaWxpdGllcyh7IHNhdmU6IGZhbHNlIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBuZXcgT08udWkuUGFuZWxMYXlvdXQoeyBwYWRkZWQ6IHRydWUsIGV4cGFuZGVkOiBmYWxzZSB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcmlwdHNNdWx0aXNlbGVjdCA9IG5ldyBPTy51aS5DaGVja2JveE11bHRpc2VsZWN0V2lkZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB0aGlzLnNjcmlwdHMubWFwKChzY3JpcHQpID0+IG5ldyBPTy51aS5DaGVja2JveE11bHRpb3B0aW9uV2lkZ2V0KHsgZGF0YTogc2NyaXB0Lm5hbWUsIGxhYmVsOiBzY3JpcHQubmFtZSB9KSksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcmlwdHNNdWx0aXNlbGVjdC4kZWxlbWVudFswXS5zdHlsZS5jb2x1bW5Db3VudCA9ICcyJztcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHRzTXVsdGlzZWxlY3RMYXlvdXQgPSBuZXcgT08udWkuRmllbGRMYXlvdXQodGhpcy5zY3JpcHRzTXVsdGlzZWxlY3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgT08udWkuSHRtbFNuaXBwZXQoJzxiPlNjcmlwdHMgdG8gdXBkYXRlOjwvYj4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduOiAndG9wJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zTXVsdGlzZWxlY3QgPSBuZXcgT08udWkuQ2hlY2tib3hNdWx0aXNlbGVjdFdpZGdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaWQ6ICdkb2N1bWVudGF0aW9uJywgbmFtZTogJ1VwZGF0ZSBzY3JpcHQgZG9jdW1lbnRhdGlvbicgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGlkOiAnc2NyaXB0JywgbmFtZTogJ1VwZGF0ZSBzY3JpcHQgY29kZScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGlkOiAndGFsaycsIG5hbWU6ICdDcmVhdGUgdGFsayByZWRpcmVjdCcsIHNlbGVjdGVkRGVmYXVsdDogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0ubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh7IGlkLCBuYW1lLCBzZWxlY3RlZERlZmF1bHQgfSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE9PLnVpLkNoZWNrYm94TXVsdGlvcHRpb25XaWRnZXQoeyBkYXRhOiBpZCwgbGFiZWw6IG5hbWUsIHNlbGVjdGVkOiBzZWxlY3RlZERlZmF1bHQgPz8gdHJ1ZSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbnNNdWx0aXNlbGVjdExheW91dCA9IG5ldyBPTy51aS5GaWVsZExheW91dCh0aGlzLmFjdGlvbnNNdWx0aXNlbGVjdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5ldyBPTy51aS5IdG1sU25pcHBldCgnPGI+QWN0aW9ucyB0byB0YWtlIChpZiBhcHBsaWNhYmxlKTo8L2I+JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkdyb3VwID0gbmV3IE9PLnVpLkJ1dHRvbkdyb3VwV2lkZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBPYmplY3QuZW50cmllcyh0aGlzLnNjcmlwdERhdGFVcGRhdGVycykubWFwKChbbmFtZSwgdXBkYXRlcl0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidXR0b24gPSBuZXcgT08udWkuQnV0dG9uV2lkZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzOiBbJ3Byb2dyZXNzaXZlJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLm9uKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBGZXRjaGluZyAke25hbWV9IGRhdGEuLi5gLCB7IHRhZzogJ3VwZGF0ZS1zY3JpcHQtZGF0YS1ub3RpZmljYXRpb24nIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB1cGRhdGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBTdWNjZXNzZnVsbHkgZmV0Y2hlZCAke25hbWV9IGRhdGEsIG9wZW5pbmcgZGlmZi4uLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogJ3VwZGF0ZS1zY3JpcHQtZGF0YS1ub3RpZmljYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MDApKTsgLy8gQWxsb3cgdGhlIG5vdGlmaWNhdGlvbiB0byBiZSBzaG93blxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3BlbkRpZmYoYFVzZXI6RWVqaXQ0My9zY3JpcHRzLyR7bmFtZX0uanNvbmAsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHREYXRhVXBkYXRlcnNNdWx0aXNlbGVjdExheW91dCA9IG5ldyBPTy51aS5GaWVsZExheW91dChidXR0b25Hcm91cCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5ldyBPTy51aS5IdG1sU25pcHBldCgnPGI+U2NyaXB0IGRhdGEgdXBkYXRlcnM6PC9iPicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuJGVsZW1lbnQuYXBwZW5kKHNjcmlwdHNNdWx0aXNlbGVjdExheW91dC4kZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC4kZWxlbWVudC5hcHBlbmQoYWN0aW9uc011bHRpc2VsZWN0TGF5b3V0LiRlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50LiRlbGVtZW50LmFwcGVuZChzY3JpcHREYXRhVXBkYXRlcnNNdWx0aXNlbGVjdExheW91dC4kZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgKHRoaXMgYXMgdW5rbm93biBhcyB7ICRib2R5OiBKUXVlcnkgfSkuJGJvZHkuYXBwZW5kKHRoaXMuY29udGVudC4kZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBnZXRBY3Rpb25Qcm9jZXNzID0gKGFjdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uID09PSAnY2FuY2VsJylcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9PLnVpLlByb2Nlc3MoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbHNlIGlmIChhY3Rpb24gPT09ICdzYXZlJylcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9PLnVpLlByb2Nlc3MoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFNjcmlwdHMgPSAodGhpcy5zY3JpcHRzTXVsdGlzZWxlY3QuZmluZFNlbGVjdGVkSXRlbXNEYXRhKCkgYXMgc3RyaW5nW10pLm1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgIChzY3JpcHROYW1lKSA9PiB0aGlzLnNjcmlwdHMuZmluZCgoc2NyaXB0KSA9PiBzY3JpcHQubmFtZSA9PT0gc2NyaXB0TmFtZSkhLFxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICB2b2lkIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoJ1N5bmNpbmcgc2NyaXB0cy4uLicsIHsgdGFnOiAnc3luYy1zY3JpcHRzLW5vdGlmaWNhdGlvbicgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHNlbGVjdGVkU2NyaXB0cy5tYXAoKHNjcmlwdCkgPT4gdGhpcy5oYW5kbGVTY3JpcHQoc2NyaXB0KSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVkaXRPckNyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlcjpFZWppdDQzL3NjcmlwdHMtaW5mbycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcFNjcmlwdHModGhpcy5zY3JpcHRzLmZpbHRlcigoc2NyaXB0KSA9PiAhc2NyaXB0LnBlcnNvbmFsICYmICFzY3JpcHQuZm9yaykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJz09PSBGb3JrcyA9PT0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcFNjcmlwdHModGhpcy5zY3JpcHRzLmZpbHRlcigoc2NyaXB0KSA9PiBzY3JpcHQuZm9yaykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJz09PSBQZXJzb25hbCBzY3JpcHRzID09PScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwU2NyaXB0cyh0aGlzLnNjcmlwdHMuZmlsdGVyKChzY3JpcHQpID0+IHNjcmlwdC5wZXJzb25hbCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1N5bmNpbmcgc2NyaXB0IGxpc3QgZnJvbSBHaXRIdWInLFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBTeW5jZWQgJHtzZWxlY3RlZFNjcmlwdHMubGVuZ3RofSBzY3JpcHQke3NlbGVjdGVkU2NyaXB0cy5sZW5ndGggPT09IDEgPyAnJyA6ICdzJ30gZnJvbSBHaXRIdWIhYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWc6ICdzeW5jLXNjcmlwdHMtbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWxzZSByZXR1cm4gU2NyaXB0VXBkYXRlckRpYWxvZy5zdXBlci5wcm90b3R5cGUuZ2V0QWN0aW9uUHJvY2Vzcy5jYWxsKHRoaXMsIGFjdGlvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgZ2V0VGVhcmRvd25Qcm9jZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFNjcmlwdFVwZGF0ZXJEaWFsb2cuc3VwZXIucHJvdG90eXBlLmdldFRlYXJkb3duUHJvY2Vzcy5jYWxsKHRoaXMpLm5leHQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICh0aGlzIGFzIHVua25vd24gYXMgeyAkYm9keTogSlF1ZXJ5IH0pLiRib2R5LmVtcHR5KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV3JhcHMgYW4gYXN5bmMgbWV0aG9kIGludG8gYSBqUXVlcnkgRGVmZXJyZWQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0gbWV0aG9kIFRoZSBtZXRob2QgdG8gd3JhcC5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgd3JhcEFzeW5jTWV0aG9kKG1ldGhvZDogKCkgPT4gUHJvbWlzZTx1bmtub3duPikge1xuICAgICAgICAgICAgY29uc3QgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG5cbiAgICAgICAgICAgIHZvaWQgbWV0aG9kKCkudGhlbigocmVzdWx0KSA9PiBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvYWRzIGRhdGEgZm9yIGFsbCBzY3JpcHRzLlxuICAgICAgICAgKi9cbiAgICAgICAgcHJpdmF0ZSBsb2FkU2NyaXB0RGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxhdGVzdENvbW1pdEhhc2hSZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyR7dGhpcy5SRVBPX09XTkVSfS8ke3RoaXMuUkVQT19OQU1FfS9jb21taXRzYCk7XG4gICAgICAgICAgICBpZiAoIWxhdGVzdENvbW1pdEhhc2hSZXNwb25zZS5vaylcbiAgICAgICAgICAgICAgICByZXR1cm4gYEZhaWxlZCB0byBmZXRjaCBsYXRlc3QgY29tbWl0IGhhc2ggZnJvbSBHaXRIdWI6ICR7bGF0ZXN0Q29tbWl0SGFzaFJlc3BvbnNlLnN0YXR1c1RleHR9ICgke2xhdGVzdENvbW1pdEhhc2hSZXNwb25zZS5zdGF0dXN9KWA7XG5cbiAgICAgICAgICAgIHRoaXMubGF0ZXN0Q29tbWl0SGFzaCA9ICgoYXdhaXQgbGF0ZXN0Q29tbWl0SGFzaFJlc3BvbnNlLmpzb24oKSkgYXMgeyBzaGE6IHN0cmluZyB9W10pWzBdLnNoYTtcblxuICAgICAgICAgICAgY29uc3Qgc2NyaXB0RGF0YVJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICAgICAgICAgICAgYGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8ke3RoaXMuUkVQT19PV05FUn0vJHt0aGlzLlJFUE9fTkFNRX0vJHt0aGlzLmxhdGVzdENvbW1pdEhhc2h9L3NjcmlwdHMuanNvbmAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFzY3JpcHREYXRhUmVzcG9uc2Uub2spXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBGYWlsZWQgdG8gZmV0Y2ggc2NyaXB0IGRhdGEgZnJvbSBHaXRIdWI6ICR7c2NyaXB0RGF0YVJlc3BvbnNlLnN0YXR1c1RleHR9ICgke3NjcmlwdERhdGFSZXNwb25zZS5zdGF0dXN9KWA7XG5cbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdERhdGEgPSAoYXdhaXQgc2NyaXB0RGF0YVJlc3BvbnNlLmpzb24oKSkgYXMgUmVjb3JkPHN0cmluZywgT21pdDxTY3JpcHQsICduYW1lJz4+O1xuXG4gICAgICAgICAgICB0aGlzLnNjcmlwdHMgPSBPYmplY3QuZW50cmllcyhzY3JpcHREYXRhKS5tYXAoKFtzY3JpcHROYW1lLCBzY3JpcHRdKSA9PiAoeyBuYW1lOiBzY3JpcHROYW1lLCAuLi5zY3JpcHQgfSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIYW5kbGVzIGFuZCBlZGl0cy9jcmVhdGVzIHBhZ2VzIGZvciBhIGdpdmVuIHNjcmlwdC5cbiAgICAgICAgICogQHBhcmFtIHNjcmlwdCBUaGUgc2NyaXB0IHRvIGhhbmRsZS5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlU2NyaXB0KHNjcmlwdDogU2NyaXB0KSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25zVG9UYWtlID0gdGhpcy5hY3Rpb25zTXVsdGlzZWxlY3QuZmluZFNlbGVjdGVkSXRlbXNEYXRhKCkgYXMgKCdkb2N1bWVudGF0aW9uJyB8ICdzY3JpcHQnIHwgJ3RhbGsnKVtdO1xuXG4gICAgICAgICAgICBjb25zdCBzdWJwYWdlTmFtZSA9IGBVc2VyOkVlaml0NDMvc2NyaXB0cy8ke3NjcmlwdC5uYW1lfWA7XG4gICAgICAgICAgICBjb25zdCBzdWJwYWdlVGFsa05hbWUgPSBgVXNlciB0YWxrOkVlaml0NDMvc2NyaXB0cy8ke3NjcmlwdC5uYW1lfWA7XG4gICAgICAgICAgICBjb25zdCBzY3JpcHROYW1lID0gYCR7c3VicGFnZU5hbWV9LmpzYDtcblxuICAgICAgICAgICAgY29uc3QgZnVsbFN1YnBhZ2VJbmZvID0gW1xuICAgICAgICAgICAgICAgICd7e1VzZXI6RWVqaXQ0My9zY3JpcHQtZG9jdW1lbnRhdGlvbicsXG4gICAgICAgICAgICAgICAgc2NyaXB0LmltYWdlID09PSBmYWxzZSA/IGB8IGltYWdlICAgICAgICAgICAgID0gJHtzY3JpcHQuaW1hZ2V9YCA6IG51bGwsXG4gICAgICAgICAgICAgICAgc2NyaXB0Wydpbi1kZXZlbG9wbWVudCddID8gYHwgaW4tZGV2ZWxvcG1lbnQgICAgPSAke3NjcmlwdFsnaW4tZGV2ZWxvcG1lbnQnXX1gIDogbnVsbCxcbiAgICAgICAgICAgICAgICBzY3JpcHRbJ3VzZS1pbnN0ZWFkJ11cbiAgICAgICAgICAgICAgICAgICAgPyBgfCB1c2UtaW5zdGVhZCAgICAgICA9ICR7c2NyaXB0Wyd1c2UtaW5zdGVhZCddLmluY2x1ZGVzKCdVc2VyOicpID8gc2NyaXB0Wyd1c2UtaW5zdGVhZCddIDogYFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvJHtzY3JpcHRbJ3VzZS1pbnN0ZWFkJ119fCR7c2NyaXB0Wyd1c2UtaW5zdGVhZCddfV1dYH1gXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICBzY3JpcHRbJ2ltYWdlLWNhcHRpb24nXSA/IGB8IGltYWdlLWNhcHRpb24gICAgID0gJHtzY3JpcHRbJ2ltYWdlLWNhcHRpb24nXX1gIDogbnVsbCxcbiAgICAgICAgICAgICAgICBzY3JpcHRbJ290aGVyLWF1dGhvcnMnXVxuICAgICAgICAgICAgICAgICAgICA/IGB8IG90aGVyLWF1dGhvcnMgICAgID0gJHtzY3JpcHRbJ290aGVyLWF1dGhvcnMnXS5tYXAoKGF1dGhvcikgPT4gYFtbVXNlcjoke2F1dGhvcn18JHthdXRob3J9XV1gKS5qb2luKCcsICcpfWBcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgIGB8IGRlc2NyaXB0aW9uLXNob3J0ID0gJHtzY3JpcHRbJ3Nob3J0LWRlc2NyaXB0aW9uJ119YCxcbiAgICAgICAgICAgICAgICBgfCBkZXNjcmlwdGlvbiAgICAgICA9ICR7c2NyaXB0LmRlc2NyaXB0aW9ufWAsXG4gICAgICAgICAgICAgICAgc2NyaXB0LnVzYWdlID8gYHwgdXNhZ2UgICAgICAgICAgICAgPSAke3NjcmlwdC51c2FnZX1gIDogbnVsbCxcbiAgICAgICAgICAgICAgICBzY3JpcHQuY29uZmlndXJhdGlvbiA/IGB8IGNvbmZpZ3VyYXRpb24gICAgID0gJHtzY3JpcHQuY29uZmlndXJhdGlvbn1gIDogbnVsbCxcbiAgICAgICAgICAgICAgICBzY3JpcHQuY2hhbmdlbG9nXG4gICAgICAgICAgICAgICAgICAgID8gYHwgY2hhbmdlbG9nICAgICAgICAgPSBcXG4ke09iamVjdC5lbnRyaWVzKHNjcmlwdC5jaGFuZ2Vsb2cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoW2RhdGUsIGRlc2NyaXB0aW9uXSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgKiAnJyd7e3N0YXJ0IGRhdGUgYW5kIGFnZXwke2RhdGV9fX06JycnJHtBcnJheS5pc0FycmF5KGRlc2NyaXB0aW9uKSA/IGBcXG4ke2Rlc2NyaXB0aW9uLm1hcCgobGluZSkgPT4gYCoqICR7bGluZX1gKS5qb2luKCdcXG4nKX1gIDogYCAke2Rlc2NyaXB0aW9ufWB9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbignXFxuJyl9YFxuICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgYHwgc2tpbi1zdXBwb3J0ICAgICAgPSB7e1VzZXI6RWVqaXQ0My9zY3JpcHQtZG9jdW1lbnRhdGlvbi9za2luLXN1cHBvcnR8JHtPYmplY3QuZW50cmllcyhzY3JpcHRbJ3NraW4tc3VwcG9ydCddKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChbc2tpbiwgc3RhdHVzXSkgPT4gYCR7c2tpbn09JHtzdGF0dXN9YClcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJ3wnKX19fWAsXG4gICAgICAgICAgICAgICAgc2NyaXB0Wydzb3VyY2UtbXVsdGlwbGUnXSA/IGB8IHNvdXJjZS1tdWx0aXBsZSAgID0gJHtzY3JpcHRbJ3NvdXJjZS1tdWx0aXBsZSddfWAgOiBudWxsLFxuICAgICAgICAgICAgICAgIGB8IHJlbGVhc2VkICAgICAgICAgID0ge3tzdGFydCBkYXRlIGFuZCBhZ2V8JHtzY3JpcHQucmVsZWFzZWR9fX1gLFxuICAgICAgICAgICAgICAgIGB8IHVwZGF0ZWQgICAgICAgICAgID0ge3tzdGFydCBkYXRlIGFuZCBhZ2V8JHtzY3JpcHQudXBkYXRlZH19fWAsXG4gICAgICAgICAgICAgICAgJ319JyxcbiAgICAgICAgICAgIF0uZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgICAgICAgICBsZXQgc2NyaXB0Q29udGVudCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChhY3Rpb25zVG9UYWtlLmluY2x1ZGVzKCdzY3JpcHQnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdENvbnRlbnRSZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgICAgICAgICAgICBgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLyR7dGhpcy5SRVBPX09XTkVSfS8ke3RoaXMuUkVQT19OQU1FfS8ke3RoaXMubGF0ZXN0Q29tbWl0SGFzaH0vZGlzdC8ke3NjcmlwdC5uYW1lfS5qc2AsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoc2NyaXB0Q29udGVudFJlc3BvbnNlLm9rKSBzY3JpcHRDb250ZW50ID0gYXdhaXQgc2NyaXB0Q29udGVudFJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtdy5ub3RpZnkoXG4gICAgICAgICAgICAgICAgICAgICAgICBgRmFpbGVkIHRvIGZldGNoIFwiJHtzY3JpcHQubmFtZX0uanNcIiBmcm9tIEdpdEh1YjogJHtzY3JpcHRDb250ZW50UmVzcG9uc2Uuc3RhdHVzVGV4dH0gKCR7c2NyaXB0Q29udGVudFJlc3BvbnNlLnN0YXR1c30pYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdHlwZTogJ2Vycm9yJywgdGFnOiAnc3luYy1zY3JpcHRzLW5vdGlmaWNhdGlvbicgfSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzY3JpcHQucGVyc29uYWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uc1RvVGFrZS5pbmNsdWRlcygnZG9jdW1lbnRhdGlvbicpKVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVkaXRPckNyZWF0ZShzdWJwYWdlTmFtZSwgZnVsbFN1YnBhZ2VJbmZvLmpvaW4oJ1xcbicpLCAnU3luY2luZyBzY3JpcHQgZG9jdW1lbnRhdGlvbiBmcm9tIEdpdEh1YicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbnNUb1Rha2UuaW5jbHVkZXMoJ3RhbGsnKSlcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lZGl0T3JDcmVhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJwYWdlVGFsa05hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAnI1JFRElSRUNUIFtbVXNlciB0YWxrOkVlaml0NDNdXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnUmVkaXJlY3Rpbmcgc2NyaXB0IGRvY3VtZW50YXRpb24gdGFsayBwYWdlIHRvIG1haW4gdXNlciB0YWxrIHBhZ2UnLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2NyaXB0Q29udGVudCkgYXdhaXQgdGhpcy5lZGl0T3JDcmVhdGUoc2NyaXB0TmFtZSwgc2NyaXB0Q29udGVudCwgJ1N5bmNpbmcgc2NyaXB0IGZyb20gR2l0SHViJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcyBzY3JpcHRzIHRvIGEgYnVsbGV0ZWQgbGlzdC5cbiAgICAgICAgICogQHBhcmFtIHNjcmlwdHMgVGhlIHNjcmlwdHMgdG8gbWFwLlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgbWFwcGVkIHNjcmlwdHMuXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIG1hcFNjcmlwdHMoc2NyaXB0czogU2NyaXB0W10pIHtcbiAgICAgICAgICAgIHJldHVybiBzY3JpcHRzXG4gICAgICAgICAgICAgICAgLm1hcChcbiAgICAgICAgICAgICAgICAgICAgKHNjcmlwdCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGAqIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvJHtzY3JpcHQubmFtZX0ke3NjcmlwdC5wZXJzb25hbCA/ICcuanMnIDogJyd9fCR7c2NyaXB0Lm5hbWV9XV0gLSAke3NjcmlwdFsnc2hvcnQtZGVzY3JpcHRpb24nXSB8fCBzY3JpcHQuZGVzY3JpcHRpb259JHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHRbJ2luLWRldmVsb3BtZW50J10gPyAnICg8c3BhbiBzdHlsZT1cImNvbG9yOiAjYmQyODI4XCI+aW4gZGV2ZWxvcG1lbnQ8L3NwYW4+KScgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSR7c2NyaXB0Wyd1c2UtaW5zdGVhZCddID8gJyAoPHNwYW4gc3R5bGU9XCJjb2xvcjogI2JkMjgyOFwiPmRlcHJlY2F0ZWQ8L3NwYW4+KScgOiAnJ31gLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuam9pbignXFxuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRWRpdHMgYSBwYWdlLCBvciBjcmVhdGVzIGl0IGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSBUaGUgdGl0bGUgb2YgdGhlIHBhZ2UgdG8gZWRpdC5cbiAgICAgICAgICogQHBhcmFtIHRleHQgVGhlIHBhZ2UgY29udGVudCB0byBzZXQuXG4gICAgICAgICAqIEBwYXJhbSBzdW1tYXJ5IFRoZSBlZGl0IHN1bW1hcnkgKHdpbGwgYXBwZW5kIHNjcmlwdCBub3RpY2UpLlxuICAgICAgICAgKi9cbiAgICAgICAgcHJpdmF0ZSBhc3luYyBlZGl0T3JDcmVhdGUodGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nLCBzdW1tYXJ5OiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHN1bW1hcnkgKz0gdGhpcy5TQ1JJUFRfTUVTU0FHRTtcblxuICAgICAgICAgICAgYXdhaXQgYXBpXG4gICAgICAgICAgICAgICAgLmVkaXQodGl0bGUsICgpID0+ICh7IHRleHQsIHN1bW1hcnksIHdhdGNobGlzdDogJ3dhdGNoJyB9KSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goYXN5bmMgKGVycm9yQ29kZSwgZXJyb3JJbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdub2NyZWF0ZS1taXNzaW5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwaS5jcmVhdGUodGl0bGUsIHsgc3VtbWFyeSwgd2F0Y2hsaXN0OiAnd2F0Y2gnIH0sIHRleHQpLmNhdGNoKChlcnJvckNvZGUsIGVycm9ySW5mbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYEVycm9yIGNyZWF0aW5nICR7dGl0bGV9OiAkeyhlcnJvckluZm8gYXMgTWVkaWFXaWtpRGF0YUVycm9yKT8uZXJyb3I/LmluZm8gPz8gJ1Vua25vd24gZXJyb3InfSAoJHtlcnJvckNvZGV9KWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdHlwZTogJ2Vycm9yJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBFcnJvciBlZGl0aW5nIG9yIGNyZWF0aW5nICR7dGl0bGV9OiAkeyhlcnJvckluZm8gYXMgTWVkaWFXaWtpRGF0YUVycm9yKT8uZXJyb3I/LmluZm8gPz8gJ1Vua25vd24gZXJyb3InfSAoJHtlcnJvckNvZGV9KWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0eXBlOiAnZXJyb3InIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogT3BlbnMgYSBkaWZmIGZvciB0aGUgZ2l2ZW4gcGFnZSB0aXRsZSBhbmQgY29udGVudC5cbiAgICAgICAgICogQHBhcmFtIHBhZ2VUaXRsZSBUaGUgdGl0bGUgb2YgdGhlIHBhZ2UgdG8gb3BlbiBhIGRpZmYgZm9yLlxuICAgICAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgY29udGVudCB0byBzZXQgZm9yIHRoZSBwYWdlLlxuICAgICAgICAgKi9cbiAgICAgICAgcHJpdmF0ZSBvcGVuRGlmZihwYWdlVGl0bGU6IHN0cmluZywgY29udGVudDogc3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IHtcbiAgICAgICAgICAgICAgICB3cFRleHRib3gxOiBjb250ZW50LFxuICAgICAgICAgICAgICAgIHdwU3VtbWFyeTogYFVwZGF0aW5nIGRhdGEke3RoaXMuU0NSSVBUX01FU1NBR0V9YCxcbiAgICAgICAgICAgICAgICB3cERpZmY6ICcxJywgLy8gQW55IHRydXRoeSB2YWx1ZSBtYWtlcyB0aGlzIHdvcmtcbiAgICAgICAgICAgICAgICB3cFVsdGltYXRlUGFyYW06ICcxJywgLy8gTWFya3MgdGhlIGVuZCBvZiBmb3JtIGRhdGFcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGZvcm1VcmwgPSBuZXcgVVJMKGAke213LmNvbmZpZy5nZXQoJ3dnU2NyaXB0UGF0aCcpfS9pbmRleC5waHBgLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luKTtcbiAgICAgICAgICAgIGZvcm1Vcmwuc2VhcmNoUGFyYW1zLnNldCgndGl0bGUnLCBwYWdlVGl0bGUpO1xuICAgICAgICAgICAgZm9ybVVybC5zZWFyY2hQYXJhbXMuc2V0KCdhY3Rpb24nLCAnc3VibWl0Jyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgICAgICAgICBmb3JtLmFjdGlvbiA9IGZvcm1VcmwudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICAgICAgZm9ybS50YXJnZXQgPSAnX2JsYW5rJztcblxuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZm9ybURhdGEpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGlkZGVuRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgICAgIGhpZGRlbkZpZWxkLnR5cGUgPSAnaGlkZGVuJztcbiAgICAgICAgICAgICAgICBoaWRkZW5GaWVsZC5uYW1lID0ga2V5O1xuICAgICAgICAgICAgICAgIGhpZGRlbkZpZWxkLnZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZChoaWRkZW5GaWVsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKGZvcm0pO1xuICAgICAgICAgICAgZm9ybS5zdWJtaXQoKTtcbiAgICAgICAgICAgIGZvcm0ucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKFNjcmlwdFVwZGF0ZXJEaWFsb2cucHJvdG90eXBlLCBPTy51aS5Qcm9jZXNzRGlhbG9nLnByb3RvdHlwZSk7XG59KTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JpcHQgZGF0YSBmb3IgYXJ0aWNsZS1jbGVhbmVyLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRBcnRpY2xlQ2xlYW5lckRhdGEoKSB7XG4gICAgY29uc3QgY29udGVudCA9IChhd2FpdCBnZXRQYWdlQ29udGVudCgnV2lraXBlZGlhOkF1dG9XaWtpQnJvd3Nlci9UZW1wbGF0ZSByZWRpcmVjdHMnKSkgPz8gJyc7XG5cbiAgICBjb25zdCByZXBsYWNlbWVudHMgPSBjb250ZW50XG4gICAgICAgIC5tYXRjaEFsbCgvXFwqIHt7dGxcXHwuKy9nKVxuICAgICAgICAudG9BcnJheSgpXG4gICAgICAgIC5tYXAoKGxpbmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlcyA9IGxpbmVbMF0ubWF0Y2hBbGwoL3t7dGxcXHwoLis/KX19L2cpLnRvQXJyYXkoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHsgZnJvbTogdGVtcGxhdGVzLnNsaWNlKDAsIC0xKS5tYXAoKHRlbXBsYXRlKSA9PiB0ZW1wbGF0ZVsxXSksIHRvOiB0ZW1wbGF0ZXMuYXQoLTEpIVsxXSB9O1xuICAgICAgICB9KTtcblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXBsYWNlbWVudHMpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcmlwdCBkYXRhIGZvciByZWRpcmVjdC1oZWxwZXIuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFJlZGlyZWN0SGVscGVyRGF0YSgpIHtcbiAgICBjb25zdCBhbGxSZWRpcmVjdFRlbXBsYXRlcyA9IChhd2FpdCBhcGkuZ2V0KHtcbiAgICAgICAgYWN0aW9uOiAncXVlcnknLFxuICAgICAgICBsaXN0OiAnY2F0ZWdvcnltZW1iZXJzJyxcbiAgICAgICAgY210aXRsZTogJ0NhdGVnb3J5OlJlZGlyZWN0IHRlbXBsYXRlcycsXG4gICAgICAgIGNtbGltaXQ6ICdtYXgnLFxuICAgICAgICBmb3JtYXR2ZXJzaW9uOiAnMicsXG4gICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlDYXRlZ29yeU1lbWJlcnNQYXJhbXMpKSBhcyBDYXRlZ29yeU1lbWJlcnNSZXN1bHQ7XG4gICAgY29uc3QgYWxsUG9zc2libGVUZW1wbGF0ZXMgPSAoYXdhaXQgYXBpLmdldCh7XG4gICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgbGlzdDogJ2NhdGVnb3J5bWVtYmVycycsXG4gICAgICAgIGNtdGl0bGU6ICdDYXRlZ29yeTpUZW1wbGF0ZSByZWRpcmVjdHMgd2l0aCBwb3NzaWJpbGl0aWVzJyxcbiAgICAgICAgY21saW1pdDogJ21heCcsXG4gICAgICAgIGZvcm1hdHZlcnNpb246ICcyJyxcbiAgICB9IHNhdGlzZmllcyBBcGlRdWVyeUNhdGVnb3J5TWVtYmVyc1BhcmFtcykpIGFzIENhdGVnb3J5TWVtYmVyc1Jlc3VsdDtcblxuICAgIGNvbnN0IHJlZGlyZWN0VGVtcGxhdGVzID0gYWxsUmVkaXJlY3RUZW1wbGF0ZXMucXVlcnkuY2F0ZWdvcnltZW1iZXJzXG4gICAgICAgIC5maWx0ZXIoKHBhZ2UpID0+IHBhZ2UudGl0bGUuc3RhcnRzV2l0aCgnVGVtcGxhdGU6UiAnKSAmJiBwYWdlLnRpdGxlICE9PSAnVGVtcGxhdGU6UiB0ZW1wbGF0ZSBpbmRleCcpXG4gICAgICAgIC5tYXAoKHBhZ2UpID0+ICh7IG5hbWU6IHBhZ2UudGl0bGUuc3BsaXQoJzonKVsxXSwgcmVkaXJlY3Q6IGZhbHNlIH0pKTtcbiAgICBjb25zdCBwb3NzaWJsZVJlZGlyZWN0VGVtcGxhdGVzID0gYWxsUG9zc2libGVUZW1wbGF0ZXMucXVlcnkuY2F0ZWdvcnltZW1iZXJzXG4gICAgICAgIC5maWx0ZXIoKHBhZ2UpID0+IHBhZ2UudGl0bGUuc3RhcnRzV2l0aCgnVGVtcGxhdGU6UiAnKSAmJiBwYWdlLnRpdGxlICE9PSAnVGVtcGxhdGU6UiB3aXRoIHBvc3NpYmlsaXRpZXMnKVxuICAgICAgICAubWFwKChwYWdlKSA9PiAoeyBuYW1lOiBwYWdlLnRpdGxlLnNwbGl0KCc6JylbMV0sIHJlZGlyZWN0OiB0cnVlIH0pKTtcblxuICAgIGNvbnN0IGFsbEFsaWFzZXNPZlJlZGlyZWN0czogc3RyaW5nW10gPSBbXTtcblxuICAgIGNvbnN0IG1hcHBlZERhdGEgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgWy4uLnJlZGlyZWN0VGVtcGxhdGVzLCAuLi5wb3NzaWJsZVJlZGlyZWN0VGVtcGxhdGVzXVxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBGb3JjZSBjb21pY3MgYW5kIE1pZGRsZSBFYXJ0aCB0ZW1wbGF0ZXMgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgICAgICAgICAgICAgIGlmIChhLm5hbWUuc3RhcnRzV2l0aCgnUiBjb21pY3MnKSB8fCBhLm5hbWUuc3RhcnRzV2l0aCgnUiBNRScpKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChiLm5hbWUuc3RhcnRzV2l0aCgnUiBjb21pY3MnKSB8fCBiLm5hbWUuc3RhcnRzV2l0aCgnUiBNRScpKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWFwKGFzeW5jIChwYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGVEYXRhUXVlcnkgPSAoYXdhaXQgYXBpLmdldCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3RlbXBsYXRlZGF0YScsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlczogJ1RlbXBsYXRlOicgKyBwYWdlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHZlcnNpb246ICcyJyxcbiAgICAgICAgICAgICAgICB9IHNhdGlzZmllcyBUZW1wbGF0ZURhdGFBcGlUZW1wbGF0ZURhdGFQYXJhbXMpKSBhcyBUZW1wbGF0ZURhdGFSZXN1bHQ7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gT2JqZWN0LnZhbHVlcyh0ZW1wbGF0ZURhdGFRdWVyeS5wYWdlcylbMF0/LnBhcmFtcyB8fCB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG5cbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRQYXJhbWV0ZXJzID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhwYXJhbWV0ZXJzKS5tYXAoKFtuYW1lLCBkYXRhXSkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlhc2VzOiBkYXRhLmFsaWFzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRhdGEubGFiZWw/LmVuID8/IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRhdGEuZGVzY3JpcHRpb24/LmVuID8/IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZGF0YS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBkYXRhLnJlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RlZDogZGF0YS5zdWdnZXN0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogZGF0YS5kZWZhdWx0Py5lbiA/PyBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IGRhdGEuZXhhbXBsZT8uZW4gPz8gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBsZXQgbWFwcGVkUmVkaXJlY3RzO1xuICAgICAgICAgICAgICAgIGlmIChwYWdlLnJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzUXVlcnkgPSAoYXdhaXQgYXBpLmdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZXM6ICdUZW1wbGF0ZTonICsgcGFnZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2xpbmtzaGVyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaG5hbWVzcGFjZTogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaGxpbWl0OiAnbWF4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHZlcnNpb246ICcyJyxcbiAgICAgICAgICAgICAgICAgICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlCYWNrbGlua3Nwcm9wUGFyYW1zKSkgYXMgTGlua3NIZXJlUmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFJlZGlyZWN0cyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rc1F1ZXJ5LnF1ZXJ5LnBhZ2VzWzBdLmxpbmtzaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8uZmlsdGVyKChwYWdlKSA9PiBwYWdlLnJlZGlyZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHBhZ2UpID0+IHBhZ2UudGl0bGUuc3BsaXQoJzonKVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGFnZSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFbLi4ucmVkaXJlY3RUZW1wbGF0ZXMsIC4uLnBvc3NpYmxlUmVkaXJlY3RUZW1wbGF0ZXNdLnNvbWUoKHRlbXBsYXRlKSA9PiB0ZW1wbGF0ZS5uYW1lID09PSBwYWdlKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXBhZ2UuZW5kc1dpdGgoJy9kb2MnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXBhZ2UuZW5kc1dpdGgoJy9zYW5kYm94JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmxvY2FsZUNvbXBhcmUoYikpID8/IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbEFsaWFzZXNPZlJlZGlyZWN0cy5wdXNoKC4uLm1hcHBlZFJlZGlyZWN0cyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVkaXJlY3RzUXVlcnkgPSAoYXdhaXQgYXBpLmdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZXM6ICdUZW1wbGF0ZTonICsgcGFnZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogJ3JlZGlyZWN0cycsXG4gICAgICAgICAgICAgICAgICAgICAgICByZGxpbWl0OiAnbWF4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHZlcnNpb246ICcyJyxcbiAgICAgICAgICAgICAgICAgICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlCYWNrbGlua3Nwcm9wUGFyYW1zKSkgYXMgUmVkaXJlY3RzUmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFJlZGlyZWN0cyA9XG4gICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdHNRdWVyeS5xdWVyeS5wYWdlc1swXS5yZWRpcmVjdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmZpbHRlcigocmVkaXJlY3QpID0+IHJlZGlyZWN0Lm5zID09PSAxMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChyZWRpcmVjdCkgPT4gcmVkaXJlY3QudGl0bGUuc3BsaXQoJzonKVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChyZWRpcmVjdCkgPT4gIXBvc3NpYmxlUmVkaXJlY3RUZW1wbGF0ZXMuc29tZSgodGVtcGxhdGUpID0+IHRlbXBsYXRlLm5hbWUgPT09IHJlZGlyZWN0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYS5sb2NhbGVDb21wYXJlKGIpKSA/PyBbXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLihwYWdlLnJlZGlyZWN0ID8geyByZWRpcmVjdDogdHJ1ZSB9IDoge30pLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBmb3JtYXR0ZWRQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgICBhbGlhc2VzOiBtYXBwZWRSZWRpcmVjdHMsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBbcGFnZS5uYW1lLCB0ZW1wbGF0ZURhdGFdIGFzIGNvbnN0O1xuICAgICAgICAgICAgfSksXG4gICAgKTtcblxuICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxsQWxpYXNlc09mUmVkaXJlY3RzKVxuICAgICAgICBmb3IgKGNvbnN0IFssIGRhdGFdIG9mIG1hcHBlZERhdGEpXG4gICAgICAgICAgICBpZiAoIWRhdGEucmVkaXJlY3QgJiYgZGF0YS5hbGlhc2VzLmluY2x1ZGVzKGFsaWFzKSkgZGF0YS5hbGlhc2VzID0gZGF0YS5hbGlhc2VzLmZpbHRlcigoYSkgPT4gYSAhPT0gYWxpYXMpO1xuXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KE9iamVjdC5mcm9tRW50cmllcyhtYXBwZWREYXRhKSk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7bUJBR08sSUFBTUEsRUFBTSxJQUFJLEdBQUcsSUFNMUIsZUFBc0JDLEVBQWVDLEVBQWUsQ0FDaEQsT0FDSyxNQUFNRixFQUFJLElBQUksQ0FDWCxPQUFRLFFBQ1IsY0FBZSxJQUNmLEtBQU0sWUFDTixPQUFRLFVBQ1IsUUFBUyxPQUNULE9BQVFFLENBQ1osQ0FBbUMsR0FDckMsTUFBTSxNQUFNLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxNQUFNLEtBQUssUUFBUSxLQUFLLENBQzVELENDUUEsR0FBRyxPQUFPLE1BQU0sQ0FBQyxpQkFBa0IsZUFBZ0Isa0JBQW1CLGlCQUFpQixFQUFHLElBQU0sQ0FDNUYsR0FBSSxHQUFHLE9BQU8sSUFBSSxZQUFZLElBQU0sV0FBYSxHQUFHLE9BQU8sSUFBSSxZQUFZLElBQU0sZUFBZ0IsT0FFakcsSUFBTUMsRUFBa0IsU0FBUyxjQUFjLGlCQUFpQixFQUFHLFVBQVUsRUFBSSxFQUUzRUMsRUFBTyxTQUFTLGNBQWMsR0FBRyxFQUN2Q0EsRUFBSyxLQUFPLElBQ1pBLEVBQUssTUFBTSxXQUFhLE9BQ3hCQSxFQUFLLFlBQWMsbUJBQ25CQSxFQUFLLGlCQUFpQixRQUFVQyxHQUFVLENBQ3RDQSxFQUFNLGVBQWUsRUFFckIsSUFBTUMsRUFBZ0IsSUFBSSxHQUFHLEdBQUcsY0FDaEMsU0FBUyxLQUFLLE9BQU9BLEVBQWMsU0FBUyxDQUFDLENBQUMsRUFFOUMsSUFBTUMsRUFBc0IsSUFBSUMsRUFDaENGLEVBQWMsV0FBVyxDQUFDQyxDQUFtQixDQUFDLEVBRTlDQSxFQUFvQixLQUFLLENBQzdCLENBQUMsRUFFREosRUFBZ0Is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QSxHQVJ3QixNQUFNM0IsRUFBSSxJQUFJLENBQ2xDLE9BQVEsUUFDUixPQUFRLFlBQWNrQixFQUFLLEtBQzNCLEtBQU0sWUFDTixRQUFTLE1BQ1QsY0FBZSxHQUNuQixDQUF1QyxHQUdwQixNQUFNLE1BQU0sQ0FBQyxFQUFFLFdBQ3hCLE9BQVFVLEdBQWFBLEVBQVMsS0FBTyxFQUFFLEVBQ3hDLElBQUtBLEdBQWFBLEVBQVMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDOUMsT0FBUUEsR0FBYSxDQUFDVCxFQUEwQixLQUFNTCxHQUFhQSxFQUFTLE9BQVNjLENBQVEsQ0FBQyxFQUM5RixLQUFLLENBQUNOLEVBQUdDLElBQU1ELEVBQUUsY0FBY0MsQ0FBQyxDQUFDLEdBQUssQ0FBQyxFQUdwRCxJQUFNTSxFQUFlLENBQ2pCLEdBQUlYLEVBQUssU0FBVyxDQUFFLFNBQVUsRUFBSyxFQUFJLENBQUMsRUFDMUMsV0FBWVEsRUFDWixRQUFTQyxDQUNiLEVBRUEsTUFBTyxDQUFDVCxFQUFLLEtBQU1XLENBQVksQ0FDbkMsQ0FBQyxDQUNULEVBRUEsUUFBV0MsS0FBU1YsRUFDaEIsT0FBVyxDQUFDLENBQUVoRCxDQUFJLElBQUtpRCxFQUNmLENBQUNqRCxFQUFLLFVBQVlBLEVBQUssUUFBUSxTQUFTMEQsQ0FBSyxJQUFHMUQsRUFBSyxRQUFVQSxFQUFLLFFBQVEsT0FBUWtELEdBQU1BLElBQU1RLENBQUssR0FFakgsT0FBTyxLQUFLLFVBQVUsT0FBTyxZQUFZVCxDQUFVLENBQUMsQ0FDeEQiLAogICJuYW1lcyI6IFsiYXBpIiwgImdldFBhZ2VDb250ZW50IiwgInRpdGxlIiwgImZ1bGxMaW5rRWxlbWVudCIsICJsaW5rIiwgImV2ZW50IiwgIndpbmRvd01hbmFnZXIiLCAic2NyaXB0VXBkYXRlckRpYWxvZyIsICJTY3JpcHRVcGRhdGVyRGlhbG9nIiwgImdldEFydGljbGVDbGVhbmVyRGF0YSIsICJnZXRSZWRpcmVjdEhlbHBlckRhdGEiLCAiZXJyb3IiLCAibWVzc2FnZUVsZW1lbnQiLCAic2NyaXB0IiwgInNjcmlwdHNNdWx0aXNlbGVjdExheW91dCIsICJpZCIsICJuYW1lIiwgInNlbGVjdGVkRGVmYXVsdCIsICJhY3Rpb25zTXVsdGlzZWxlY3RMYXlvdXQiLCAiYnV0dG9uR3JvdXAiLCAidXBkYXRlciIsICJidXR0b24iLCAiZGF0YSIsICJyZXNvbHZlIiwgInNjcmlwdERhdGFVcGRhdGVyc011bHRpc2VsZWN0TGF5b3V0IiwgImFjdGlvbiIsICJzZWxlY3RlZFNjcmlwdHMiLCAic2NyaXB0TmFtZSIsICJtZXRob2QiLCAiZGVmZXJyZWQiLCAicmVzdWx0IiwgImxhdGVzdENvbW1pdEhhc2hSZXNwb25zZSIsICJzY3JpcHREYXRhUmVzcG9uc2UiLCAic2NyaXB0RGF0YSIsICJhY3Rpb25zVG9UYWtlIiwgInN1YnBhZ2VOYW1lIiwgInN1YnBhZ2VUYWxrTmFtZSIsICJmdWxsU3VicGFnZUluZm8iLCAiYXV0aG9yIiwgImRhdGUiLCAiZGVzY3JpcHRpb24iLCAibGluZSIsICJza2luIiwgInN0YXR1cyIsICJzY3JpcHRDb250ZW50IiwgInNjcmlwdENvbnRlbnRSZXNwb25zZSIsICJzY3JpcHRzIiwgInRpdGxlIiwgInRleHQiLCAic3VtbWFyeSIsICJhcGkiLCAiZXJyb3JDb2RlIiwgImVycm9ySW5mbyIsICJwYWdlVGl0bGUiLCAiY29udGVudCIsICJmb3JtRGF0YSIsICJmb3JtVXJsIiwgImZvcm0iLCAia2V5IiwgInZhbHVlIiwgImhpZGRlbkZpZWxkIiwgInJlcGxhY2VtZW50cyIsICJnZXRQYWdlQ29udGVudCIsICJ0ZW1wbGF0ZXMiLCAidGVtcGxhdGUiLCAiYWxsUmVkaXJlY3RUZW1wbGF0ZXMiLCAiYWxsUG9zc2libGVUZW1wbGF0ZXMiLCAicmVkaXJlY3RUZW1wbGF0ZXMiLCAicGFnZSIsICJwb3NzaWJsZVJlZGlyZWN0VGVtcGxhdGVzIiwgImFsbEFsaWFzZXNPZlJlZGlyZWN0cyIsICJtYXBwZWREYXRhIiwgImEiLCAiYiIsICJ0ZW1wbGF0ZURhdGFRdWVyeSIsICJwYXJhbWV0ZXJzIiwgImZvcm1hdHRlZFBhcmFtZXRlcnMiLCAibWFwcGVkUmVkaXJlY3RzIiwgInJlZGlyZWN0IiwgInRlbXBsYXRlRGF0YSIsICJhbGlhcyJdCn0K
