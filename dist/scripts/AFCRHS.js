// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/AFCRHS.ts

"use strict";(function(){if(mw.config.get("wgPageName")!=="Wikipedia:Articles_for_creation/Redirects"&&mw.config.get("wgPageName")!=="Wikipedia:Articles_for_creation/Categories")return;const w=mw.config.get("wgPageName").replace(/_/g," "),c=[];let R=[];const N=" ([[User:Eejit43/scripts/AFCRHS|AFCRHS 2]])";let x=0,P=0;const m=[],H=[],j={exists:"The title you suggested already exists on Wikipedia",blank:"We cannot accept empty submissions","no-target":" A redirect cannot be created unless the target is an existing article. Either you have not specified the target, or the target does not exist",unlikely:"The title you suggested seems unlikely. Could you provide a source showing that it is a commonly used alternate name?","not-redirect":"This request is not a redirect request",custom:""},D={exists:"The category you suggested already exists on Wikipedia",blank:"We cannot accept empty submissions",unlikely:"It seems unlikely that there are enough pages to support this category","not-category":"This request is not a category request",custom:""};async function M(){let e=await S(w);e=z(e);const l=/==.*?==/;e=e.substring(e.search(l)),R=e.match(/^==.*?==$((\r?\n?)(?!==[^=]).*)*/gim);for(let a=0;a<R.length;a++)if(!/(\{\{\s*afc(?!\s+comment)|This is an archived discussion)/i.test(R[a])){const n=R[a].match(l)[0];if(n.search(/Redirect request/i)!==-1){const r=/\[\[(\s*[^=]*?)*?\]\]/g,u=n.match(r);if(!u)continue;for(let i=0;i<u.length;i++)u[i]=u[i].replace(/[[\]]/g,""),u[i].charAt(0)===":"&&(u[i]=u[i].substring(1));/Target of redirect:\s*\[\[([^[\]]*)\]\]/i.test(R[a]);const f=$.trim(RegExp.$1),g=/Reason:[ \t]*?(.+)/i.exec(R[a]),A=g&&g[1].trim()?g[1]:null,k=/Source.*?:[ \t]*?(.+)/i.exec(R[a]),v=k&&k[1].trim()?k[1]:null,_={type:"redirect",from:[],section:a,to:f,title:f,reason:A,source:v};for(let i=0;i<u.length;i++){const V={type:"redirect",to:f,id:x,title:u[i],action:""};_.from.push(V),m.push(V),x++}c.push(_)}else if(n.search(/Category request/i)!==-1){let r=/\[\[[^[\]]+\]\]/.exec(n);if(!r)continue;r=r[0],r=r.replace(/[[\]]/g,""),r=r.replace(/Category\s*:\s*/gi,"Category:"),r.charAt(0)===":"&&(r=r.substring(1));let u=R[a].substring(n.length);const d=u.indexOf("Parent category/categories");d>=0&&(u=u.substring(d));const f=[];let h=null;const g=/\[\[\s*:\s*(Category:[^\][]*)\]\]/gi;do h=g.exec(u),h&&f.push(h[1]);while(h);const A={type:"category",title:r,section:a,id:x,action:"",parents:f.join(",")};x++,c.push(A),m.push(A)}}const o=$("<h3>Reviewing AfC redirect requests</h3>");E(o);const b=o.parent();let p=1;const s=[{label:"Accept",value:"accept"},{label:"Decline",value:"decline"},{label:"Comment",value:"comment"},{label:"None",selected:!0,value:"none"}];for(let a=0;a<c.length;a++){let t;c[a].to!==void 0?t=c[a].to.replace(/\s/g,""):t="";const n=$("<ul>"),r=$("<li>");if(c[a].type==="redirect"){if(r.append("Redirect(s) to "),t){if(!c[a].to)for(let d=c[a].from.length-1;d>=0;d--)H.push({id:c[a].from[d].id,reason:"not-redirect"})}else for(let d=c[a].from.length-1;d>=0;d--)H.push({id:c[a].from[d].id,reason:"no-target"});c[a]===""||c[a]===" "?(r.append("Empty submission #"+p),p++):t.length>0?r.append($("<a>").attr("href",mw.config.get("wgArticlePath").replace("$1",encodeURIComponent(c[a].to))).attr("target","_blank").text(c[a].to)):r.append("<b>no target given</b>: ");const u=$("<ul>").appendTo(r);for(let d=0;d<c[a].from.length;d++){const f=c[a].from[d];let h=f.title;h.replace(/\s*/gi,"").length===0&&(h="<b>no title specified</b>, check the request details");const g=$("<ul>");c[a].reason&&g.append("<li>Reason: "+c[a].reason+"</li>"),c[a].source&&g.append("<li>Source: "+c[a].source+"</li>");const A='http://www.google.com/search?q="'+encodeURIComponent(h)+'"+-wikipedia.org';u.append($("<li>").append("From: "+h+" (<small><a href='"+A+`'" target="_blank">Google</a> <b>&middot;</b> <a href="https://en.wikipedia.org/wiki/Special:WhatLinksHere/`+encodeURIComponent(h)+'" target="_blank">what links here</a>)</small><br/>').append(g).append($("<label>").attr("for","afcHelper_redirect_action_"+f.id).text("Action: ")).append(U("afcHelper_redirect_action_"+f.id,s,F(f.id))).append($("<div>").attr("id","afcHelper_redirect_extra_"+f.id)))}}else{const u=c[a].id;r.append("Category submission: ").append($("<a>").attr("href","/wiki/"+c[a].title).attr("title",c[a].title).text(c[a].title)).append("<br />").append($("<label>").attr("for","afcHelper_redirect_action_"+u).text("Action: ")).append(U("afcHelper_redirect_action_"+u,s,F(u))).append($("<div>").attr("id","afcHelper_redirect_extra_"+u))}n.append(r),b.append(n)}b.append($("<button>").attr("id","afcHelper_redirect_done_button").attr("name","afcHelper_redirect_done_button").text("Done").click(L));for(let a=0;a<H.length;a++)$("#afcHelper_redirect_action_"+H[a].id).attr("value","decline"),q(H[a].id),$("#afcHelper_redirect_decline_"+H[a].id).attr("value",H[a].reason)}function F(e){return function(){q(e)}}function q(e){const l=$("#afcHelper_redirect_extra_"+e),o=$("#afcHelper_redirect_action_"+e).val();l.html(""),o==="accept"?(m[e].type==="redirect"?(l.append('<label for="afcHelper_redirect_from_'+e+'">From: </label>'),l.append($("<input>").attr("type","text").attr("name","afcHelper_redirect_from_"+e).attr("id","afcHelper_redirect_from_"+e).attr("value",m[e].title)),l.html(l.html()+'&nbsp;<br /><label for="afcHelper_redirect_to_'+e+'">To: </label><input type="text" name="afcHelper_redirect_to_'+e+'" id="afcHelper_redirect_to_'+e+'" value="'+m[e].to+'" />'),l.html(l.html()+'<br /><label for="afcHelper_redirect_append_'+e+'">Template to append: (<a href="https://en.wikipedia.org/wiki/Wikipedia:TMR" target="_blank">Help</a>)</label>'),l.html(l.html()+I("afcHelper_redirect_append_"+e,[{label:"None",selected:!0,value:"none"},{labelAndValue:"Frequently used",disabled:!0},{labelAndValue:"R from alternative language"},{labelAndValue:"R from alternative name"},{labelAndValue:"R from modification"},{labelAndValue:"R to section"},{labelAndValue:"R from diacritic"},{labelAndValue:"R to diacritic"},{labelAndValue:"From \u2013 abbreviation, capitalisation, and grammar",disabled:!0},{labelAndValue:"R from acronym"},{labelAndValue:"R from initialism"},{labelAndValue:"R from CamelCase"},{labelAndValue:"R from miscapitalisation"},{labelAndValue:"R from other capitalisation"},{labelAndValue:"R from modification"},{labelAndValue:"R from plural"},{label:"From parts of speach",value:"From parts of speach",disabled:!0},{labelAndValue:"R from adjective"},{labelAndValue:"R from adverb"},{labelAndValue:"R from common noun"},{labelAndValue:"R from gerund"},{labelAndValue:"R from proper noun"},{labelAndValue:"R from verb"},{labelAndValue:"From \u2013 spelling",disabled:!0},{labelAndValue:"R from alternative spelling"},{labelAndValue:"R from misspelling"},{labelAndValue:"R from American English"},{labelAndValue:"R from British English"},{labelAndValue:"R from ASCII-only"},{labelAndValue:"R from diacritic"},{labelAndValue:"R from ligature"},{labelAndValue:"R from stylization"},{labelAndValue:"R from alternative transliteration"},{labelAndValue:"R from Wade\u2013Giles romanization"},{labelAndValue:"From alternative names, general",disabled:!0},{labelAndValue:"R from alternative language"},{labelAndValue:"R from alternative name"},{labelAndValue:"R from former name"},{labelAndValue:"R from historic name"},{labelAndValue:"R from incomplete name"},{labelAndValue:"R from incorrect name"},{labelAndValue:"R from letter\u2013word combination"},{labelAndValue:"R from long name"},{labelAndValue:"R from portmanteau"},{labelAndValue:"R from predecessor company name"},{labelAndValue:"R from short name"},{labelAndValue:"R from sort name"},{labelAndValue:"R from less specific name"},{labelAndValue:"R from more specific name"},{labelAndValue:"R from antonym"},{labelAndValue:"R from eponym"},{labelAndValue:"R from synonym"},{labelAndValue:"R from Roman numerals"},{labelAndValue:"From alternative names, geography",disabled:!0},{labelAndValue:"R from Canadian settlement name"},{labelAndValue:"R from name and country"},{labelAndValue:"R from city and state"},{labelAndValue:"R from city and province"},{labelAndValue:"R from more specific geographic name"},{labelAndValue:"R from postal abbreviation"},{labelAndValue:"R from postal code"},{labelAndValue:"R from US postal abbreviation"},{labelAndValue:"From alternative names, organisms",disabled:!0},{labelAndValue:"R from scientific abbreviation"},{labelAndValue:"R from scientific name"},{labelAndValue:"R from alternative scientific name"},{labelAndValue:"R from monotypic taxon"},{labelAndValue:"From alternative names, people",disabled:!0},{labelAndValue:"R from birth name"},{labelAndValue:"R from given name"},{labelAndValue:"R from married name"},{labelAndValue:"R from name with title"},{labelAndValue:"R from non-neutral name"},{labelAndValue:"R from personal name"},{labelAndValue:"R from pseudonym"},{labelAndValue:"R from relative"},{labelAndValue:"R from spouse"},{labelAndValue:"R from surname"},{labelAndValue:"From alternative names, technical",disabled:!0},{labelAndValue:"R from Bluebook abbreviation"},{labelAndValue:"R from brand name"},{labelAndValue:"R from drug trade name"},{labelAndValue:"R from file name"},{labelAndValue:"R from Java package name"},{labelAndValue:"R from MathSciNet abbreviation"},{labelAndValue:"R from molecular formula"},{labelAndValue:"R from NLM abbreviation"},{labelAndValue:"R from product name"},{labelAndValue:"R from slogan"},{labelAndValue:"R from symbol"},{labelAndValue:"R from systematic abbreviations"},{labelAndValue:"R from technical name"},{labelAndValue:"R from trademark"},{labelAndValue:"From \u2013 navigation",disabled:!0},{labelAndValue:"R from file metadata link"},{labelAndValue:"R mentioned in hatnote"},{labelAndValue:"R from shortcut"},{labelAndValue:"R from template shortcut"},{labelAndValue:"From disambiguations",disabled:!0},{labelAndValue:"R from ambiguous term"},{labelAndValue:"R from incomplete disambiguation"},{labelAndValue:"R from incorrect disambiguation"},{labelAndValue:"R from other disambiguation"},{labelAndValue:"R from predictable disambiguation"},{labelAndValue:"R from unnecessary disambiguation"},{labelAndValue:"From mergers, duplicates, and moves",disabled:!0},{labelAndValue:"R from duplicated article"},{labelAndValue:"R with history"},{labelAndValue:"R from merge"},{labelAndValue:"R from move"},{labelAndValue:"R with old history"},{labelAndValue:"From fiction",disabled:!0},{labelAndValue:"R from fictional character"},{labelAndValue:"R from fictional element"},{labelAndValue:"R from fictional location"},{labelAndValue:"From related info",disabled:!0},{labelAndValue:"R from album"},{labelAndValue:"R from animal"},{labelAndValue:"R from book"},{labelAndValue:"R from catchphrase"},{labelAndValue:"R from domain name"},{labelAndValue:"R from top-level domain"},{labelAndValue:"R from film"},{labelAndValue:"R from gender"},{labelAndValue:"R from legislation"},{labelAndValue:"R from list topic"},{labelAndValue:"R from member"},{labelAndValue:"R from person"},{labelAndValue:"R from phrase"},{labelAndValue:"R from quotation"},{labelAndValue:"R from related word"},{labelAndValue:"R from school"},{labelAndValue:"R from song"},{labelAndValue:"R from subtopic"},{labelAndValue:"R from team"},{labelAndValue:"R from work"},{labelAndValue:"R from writer"},{labelAndValue:"R from Unicode"},{labelAndValue:"To \u2013 grammar, punctuation, and spelling",disabled:!0},{labelAndValue:"R to acronym"},{labelAndValue:"R to initialism"},{labelAndValue:"R to ASCII-only title"},{labelAndValue:"R to diacritic"},{labelAndValue:"R to ligature"},{labelAndValue:"R to plural"},{labelAndValue:"To alternative names",disabled:!0},{labelAndValue:"R to former name"},{labelAndValue:"R to historic name"},{labelAndValue:"R to joint biography"},{labelAndValue:"R to name with title"},{labelAndValue:"R to monotypic taxon"},{labelAndValue:"R to scientific name"},{labelAndValue:"R to systematic name"},{labelAndValue:"R to technical name"},{labelAndValue:"To \u2013 navigation and disambiguation",disabled:!0},{labelAndValue:"R to anchor"},{labelAndValue:"R to anthroponymy page"},{labelAndValue:"R to disambiguation page"},{labelAndValue:"R to list entry"},{labelAndValue:"R to section"},{labelAndValue:"To miscellaneous",disabled:!0},{labelAndValue:"R to decade"},{labelAndValue:"R to related topic"},{labelAndValue:"R to subpage"},{labelAndValue:"R to subtopic"},{labelAndValue:"R to TV episode list entry"},{label:"Custom - prompt me",value:"custom"}]))):(l.html('<label for="afcHelper_redirect_name_'+e+'">Category name: </label><input type="text" size="100" name="afcHelper_redirect_name_'+e+'" id="afcHelper_redirect_name_'+e+'" value="'+m[e].title+'" />'),l.html(l.html()+'<br /><label for="afcHelper_redirect_parents_'+e+'">Parent categories (comma-separated):</label><input type="text" size="100" id="afcHelper_redirect_parents_'+e+'" name="afcHelper_redirect_parents_'+e+'" value="'+m[e].parents+'" />'),l.append("<br />"),l.append($("<input>",{type:"checkbox",name:"afcHelper_redirect_container_"+e,id:"afcHelper_redirect_container_"+e})),l.append('<label for="afcHelper_redirect_container_'+e+'">This is a <a href="/wiki/Wikipedia:Container_category" title="Wikipedia:Container category">container category</a></label>'),l.html(l.html()+'<br /><input type="checkbox" name="afcHelper_redirect_container_'+e+'"')),l.html(l.html()+'<br /><label for="afcHelper_redirect_comment_'+e+'">Comment:</label><input type="text" size="100" id="afcHelper_redirect_comment_'+e+'" name="afcHelper_redirect_comment_'+e+'"/>')):o==="decline"?(m[e].type==="redirect"?l.html('<label for="afcHelper_redirect_decline_'+e+'">Reason for decline: </label>'+I("afcHelper_redirect_decline_"+e,[{label:"Already exists",value:"exists"},{label:"Blank request",value:"blank"},{label:"No valid target specified",value:"no-target"},{label:"Unlikely search term",value:"unlikely"},{label:"Not a redirect request",value:"not-redirect"},{label:"Custom - reason below",selected:!0,value:"custom"}])):l.html('<label for="afcHelper_redirect_decline_'+e+'">Reason for decline: </label>'+I("afcHelper_redirect_decline_"+e,[{label:"Already exists",value:"exists"},{label:"Blank request",value:"blank"},{label:"Unlikely category",value:"unlikely"},{label:"Not a category request",value:"not-category"},{label:"Custom - reason below",selected:!0,value:"custom"}])),l.html(l.html()+'<br/><label for="afcHelper_redirect_comment_'+e+'">Comment: </label><input type="text" size="100" id="afcHelper_redirect_comment_'+e+'" name="afcHelper_redirect_comment_'+e+'"/>')):o==="none"?l.html(""):l.html(l.html()+'<label for="afcHelper_redirect_comment_'+e+'">Comment: </label><input type="text" size="100" id="afcHelper_redirect_comment_'+e+'" name="afcHelper_redirect_comment_'+e+'"/>')}async function L(){for(let a=0;a<m.length;a++){const t=$("#afcHelper_redirect_action_"+a).val();m[a].action=t,t!=="none"&&(t==="accept"?m[a].type==="redirect"?(m[a].title=$("#afcHelper_redirect_from_"+a).val(),m[a].to=$("#afcHelper_redirect_to_"+a).val(),m[a].append=$("#afcHelper_redirect_append_"+a).val(),m[a].append==="custom"&&(m[a].append=prompt("Please enter the template to append to "+m[a].title+". Do not include the curly brackets.")),m[a].append==="none"||m[a].append===null?m[a].append="":m[a].append="{{"+m[a].append+"}}"):(m[a].title=$("#afcHelper_redirect_name_"+a).val(),m[a].parents=$("#afcHelper_redirect_parents_"+a).val(),m[a].container=$("#afcHelper_redirect_container_"+a).is(":checked")):t==="decline"&&(m[a].reason=$("#afcHelper_redirect_decline_"+a).val()),m[a].comment=$("#afcHelper_redirect_comment_"+a).val())}E('<ul id="afcHelper_status"></ul><ul id="afcHelper_finish"></ul>');const e=function(a){$("#afcHelper_status").append(a)};$("#afcHelper_finish").html($("#afcHelper_finish").html()+'<span id="afcHelper_finished_wrapper"><span id="afcHelper_finished_main" style="display:none"><li id="afcHelper_done"><b>Done (<a href="'+mw.config.get("wgArticlePath").replace("$1",encodeURI(w))+'?action=purge" title="'+w+'">Reload page</a>)</b></li></span></span>');let l=await S(w,e),o=0,b=0,p=0;e("<li>Processing "+c.length+" submission"+(c.length===1?"":"s")+"...</li>");for(let a=0;a<c.length;a++){const t=c[a];if(l.indexOf(R[t.section])===-1){e("<li>Skipping "+t.title+": Cannot find section. Perhaps it was modified in the mean time?</li>");continue}let n=R[t.section];const r=l.indexOf(R[t.section]),u=r+n.length;if(t.type==="category")if(t.action==="accept"){let d="<!--Created by WP:AFC -->";t.container&&(d+=`
{{Container category}}`),t.parents!==""&&(d=t.parents.split(",").map(A=>"[["+A+"]]").join(`
`)),C(t.title,d,"Created via [[WP:AFC|Articles for Creation]]",!0);const f="{{subst:WPAFC/article|class=Cat}}",h=new mw.Title(t.title).getTalkPage().toText();C(h,f,"Placing WPAFC project banner",!0);const g=n.match(/==[^=]*==/)[0];n=g+`
{{AfC-c|a}}
`+n.substring(g.length),t.comment!==""?n+=`
*{{subst:afc category|accept|2=`+t.comment+`}} ~~~~
`:n+=`
*{{subst:afc category}} ~~~~
`,n+=`{{AfC-c|b}}
`,o++}else if(t.action==="decline"){const d=n.match(/==[^=]*==/)[0];let f=D[t.reason];if(f===""?f=t.comment:t.comment!==""&&(f=f+": "+t.comment),f===""){$("afcHelper_status").html($("#afcHelper_status").html()+"<li>Skipping "+t.title+": No decline reason specified.</li>");continue}n=d+`
{{AfC-c|d}}
`+n.substring(d.length),t.comment===""?n+=`
*{{subst:afc category|`+t.reason+`}} ~~~~
`:n+=`
*{{subst:afc category|decline|2=`+f+`}} ~~~~
`,n+=`{{AfC-c|b}}
`,b++}else t.action==="comment"&&(t.comment!==""&&(n+=`

{{afc comment|1=`+t.comment+` ~~~~}}
`),p++);else{let d="",f="",h="",g=0,A=0,T=0,k=!1;for(let _=0;_<t.from.length;_++){const i=t.from[_];if(i.action==="accept"){const V=`#REDIRECT [[${i.to}]]${i.append?`

{{Redirect category shell|
${i.append}
}}`:""}`;C(i.title,V,"Redirected page to [["+i.to+"]] via [[WP:AFC|Articles for Creation]]",!0);const W=new mw.Title(i.title);if(!W.isTalkPage()){const O=W.getTalkPage().toText();C(O,"{{subst:WPAFC/redirect}}","Placing WPAFC project banner",!0)}d+=i.title+" &rarr; "+i.to,i.comment!==""?(d+=": "+i.comment,k=!0):d+=". ",g++}else if(i.action==="decline"){let V=j[i.reason];if(V===""?V=i.comment:i.comment!==""&&(V=V+": "+i.comment),V===""){$("#afcHelper_status").html($("#afcHelper_status").html()+"<li>Skipping "+i.title+": No decline reason specified.</li>");continue}f+=i.reason==="blank"||i.reason==="not-redirect"?V+". ":i.title+" &rarr; "+i.to+": "+V+". ",A++}else i.action==="comment"&&(h+=i.title+": "+i.comment+". ",T++)}let v="";if(g>0&&(v+=`
*{{subst:afc redirect|accept|2=`+d+" Thank you for your contributions to Wikipedia!}} ~~~~"),A>0&&(v+=`
*{{subst:afc redirect|decline|2=`+f+"}} ~~~~"),T>0&&(v+=`
*{{afc comment|1=`+h+"~~~~}}"),v+=`
`,!k&&g===t.from.length&&(g>1?v=`
*{{subst:afc redirect|all}} ~~~~
`:v=`
*{{subst:afc redirect}} ~~~~
`),g+A+T>0)if(g+A===t.from.length){const _=n.match(/==[^=]*==/)[0];g>0&&A>0?n=_+`
{{AfC-c|p}}`+n.substring(_.length):g>0?n=_+`
{{AfC-c|a}}`+n.substring(_.length):n=_+`
{{AfC-c|d}}`+n.substring(_.length),n+=v,n+=`{{AfC-c|b}}
`}else n+=v+`
`;o+=g,b+=A,p+=T}l=l.substring(0,r)+n+l.substring(u)}let s="Updating submission status:";o>0&&(s+=" accepting "+o+" request"+(o>1?"s":"")),b>0&&(o>0&&(s+=","),s+=" declining "+b+" request"+(b>1?"s":"")),p>0&&((o>0||b>0)&&(s+=","),s+=" commenting on "+p+" request"+(p>1?"s":"")),C(w,l,s,!1),$(document).ajaxStop(()=>{$("#afcHelper_finished_main").css("display","")})}async function S(e,l){l=typeof l<"u"?l:function(){},l('<li id="afcHelper_get'+y(e)+'">Getting <a href="'+mw.config.get("wgArticlePath").replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></li>");const o=await new mw.Api().get({action:"query",prop:"revisions",rvprop:"content",format:"json",indexpageids:!0,titles:e}),b=o.query.pageids[0];if(b==="-1")return l('The page <a class="new" href="'+mw.config.get("wgArticlePath").replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a> does not exist"),"";const p=o.query.pages[b].revisions[0]["*"];return l('<li id="afcHelper_get'+y(e)+'">Got <a href="'+mw.config.get("wgArticlePath").replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></li>"),p}function z(e){const l=/(\[){1,2}(?:https?:)?\/\/(en.wikipedia.org\/wiki|enwp.org)\/([^\s|\][]+)(\s|\|)?((?:\[\[[^[\]]*\]\]|[^\][])*)(\]){1,2}/gi,o=e;let b;for(;b=l.exec(o);){const p=decodeURI(b[3].replace(/_/g," "));let s=decodeURI(b[5].replace(/_/g," "));p===s&&(s="");const a="[["+p+(s?"|"+s:"")+"]]";e=e.replace(b[0],a)}return e}function I(e,l){return U(e,l).prop("outerHTML")}function U(e,l,o){const b=$("<select>").attr("name",e).attr("id",e);return o!==null&&b.change(o),l.forEach(p=>{p.labelAndValue&&(p.value=p.labelAndValue,p.label=p.labelAndValue);const s=$("<option>").appendTo(b).val(p.value).text(p.label);p.selected&&s.attr("selected","selected"),p.disabled&&s.attr("disabled","disabled")}),b}function E(e,l){if(!arguments.length||e===""||e===null)return $("#display-message").empty().hide(),!0;{let o=$("#display-message");if(!o.length)if(o=$('<div id="display-message" style="margin:1em;padding:0.5em 2.5%;border:solid 1px #ddd;background-color:#fcfcfc;font-size: 0.8em"></div>'),mw.util.$content.length)mw.util.$content.prepend(o);else return!1;return l&&o.prop("class","display-message-"+l),typeof e=="object"?(o.empty(),o.append(e)):o.html(e),o[0].scrollIntoView(),!0}}function y(e){return e.replace(/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~ ]/g,"")}function C(e,l,o,b,p){const s=mw.config.get("wgArticlePath");o+=N,$("#afcHelper_finished_wrapper").html('<span id="afcHelper_AJAX_finished_'+P+'" style="display:none">'+$("#afcHelper_finished_wrapper").html()+"</span>");const a=P;P++,$("#afcHelper_status").html($("#afcHelper_status").html()+'<li id="afcHelper_edit'+y(e)+'">Editing <a href="'+s.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></li>");const t={action:"edit",title:e,text:l,summary:o};b&&(t.createonly=!0);const n=new mw.Api;if(n.postWithEditToken(t).done(r=>{r&&r.edit&&r.edit.result&&r.edit.result==="Success"?$("#afcHelper_edit"+y(e)).html('Saved <a href="'+s.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a>"):($("#afcHelper_edit"+y(e)).html('<span class="afcHelper_notice"><b>Edit failed on <a href="'+s.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span>. Error info: "+JSON.stringify(r)),console.error("Edit failed on %s (%s). Error info: %s",s.replace("$1",encodeURI(e)),e,JSON.stringify(r)))}).fail(r=>{b&&r==="articleexists"?$("#afcHelper_edit"+y(e)).html('<span class="afcHelper_notice"><b>Edit failed on <a href="'+s.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span>. Error info: The article already exists!"):$("#afcHelper_edit"+y(e)).html('<span class="afcHelper_notice"><b>Edit failed on <a href="'+s.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span>. Error info: "+r)}).always(()=>{$("#afcHelper_AJAX_finished_"+a).css("display","")}),!p&&$(".patrollink").length){const r=$(".patrollink a").attr("href"),u=mw.util.getParamValue("rcid",r);if(u){$("#afcHelper_status").html($("#afcHelper_status").html()+'<li id="afcHelper_patrol'+y(e)+'">Marking <a href="'+s.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+" as patrolled</a></li>");const d={action:"patrol",format:"json",rcid:u};n.postWithToken("patrol",d).done(f=>{f?$("#afcHelper_patrol"+y(e)).html('Marked <a href="'+s.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a> as patrolled"):($("#afcHelper_patrol"+y(e)).html('<span class="afcHelper_notice"><b>Patrolling failed on <a href="'+s.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span> with an unknown error"),console.error("Patrolling failed on %s (%s) with an unknown error.",s.replace("$1",encodeURI(e)),e))}).fail(f=>{$("#afcHelper_patrol"+y(e)).html('<span class="afcHelper_notice"><b>Patrolling failed on <a href="'+s.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span>. Error info: "+f)})}}}mw.loader.using(["mediawiki.api","mediawiki.util"],()=>{mw.util.addCSS(`
#display-message * {
    margin: revert;
    border: revert;
    background: revert;
    padding: revert;
}`);const e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Review AFC/RC","ca-afcrhs","Review","a");$(e).click(l=>{l.preventDefault(),c.length=0,R.length=0,x=0,m.length=0,H.length=0,M()})})})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
