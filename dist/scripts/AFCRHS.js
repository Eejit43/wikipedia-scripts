// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/AFCRHS.ts

"use strict";(function(){if(mw.config.get("wgPageName")!=="Wikipedia:Articles_for_creation/Redirects"&&mw.config.get("wgPageName")!=="Wikipedia:Articles_for_creation/Categories")return;const w=mw.config.get("wgPageName").replaceAll("_"," "),v=[];let k=[];const N=" ([[User:Eejit43/scripts/AFCRHS|AFCRHS 2]])";let x=0,I=0;const V=[],T=[],j={exists:"The title you suggested already exists on Wikipedia",blank:"We cannot accept empty submissions","no-target":" A redirect cannot be created unless the target is an existing article. Either you have not specified the target, or the target does not exist",unlikely:"The title you suggested seems unlikely. Could you provide a source showing that it is a commonly used alternate name?","not-redirect":"This request is not a redirect request",custom:""},M={exists:"The category you suggested already exists on Wikipedia",blank:"We cannot accept empty submissions",unlikely:"It seems unlikely that there are enough pages to support this category","not-category":"This request is not a category request",custom:""};async function D(){let e=await E(w);e=z(e);const l=/==.*?==/;e=e.slice(Math.max(0,e.search(l))),k=e.match(/^==.*?==$((\r?\n?)(?!==[^=]).*)*/gim);for(const[a,t]of k.entries())if(!/({{\s*afc(?!\s+comment)|this is an archived discussion)/i.test(t)){const s=t.match(l)[0];if(s.search(/redirect request/i)!==-1){const r=/\[\[(\s*[^=]*?)*?]]/g,n=s.match(r);if(!n)continue;for(let _=0;_<n.length;_++)n[_]=n[_].replaceAll(/[[\]]/g,""),n[_].charAt(0)===":"&&(n[_]=n[_].slice(1));/target of redirect:\s*\[\[([^[\]]*)]]/i.test(t);const d=$.trim(RegExp.$1),A=/reason:[\t ]*?(.+)/i.exec(t),H=A&&A[1].trim()?A[1]:null,g=/source.*?:[\t ]*?(.+)/i.exec(t),f=g&&g[1].trim()?g[1]:null,h={type:"redirect",from:[],section:a,to:d,title:d,reason:H,source:f};for(const _ of n){const P={type:"redirect",to:d,id:x,title:_,action:""};h.from.push(P),V.push(P),x++}v.push(h)}else if(s.search(/category request/i)!==-1){let r=/\[\[[^[\]]+]]/.exec(s);if(!r)continue;r=r[0],r=r.replaceAll(/[[\]]/g,""),r=r.replaceAll(/category\s*:\s*/gi,"Category:"),r.charAt(0)===":"&&(r=r.slice(1));let n=t.slice(s.length);const p=n.indexOf("Parent category/categories");p>=0&&(n=n.slice(Math.max(0,p)));const d=[];let u=null;const A=/\[\[\s*:\s*(category:[^[\]]*)]]/gi;do u=A.exec(n),u&&d.push(u[1]);while(u);const H={type:"category",title:r,section:a,id:x,action:"",parents:d.join(",")};x++,v.push(H),V.push(H)}}const i=$("<h3>Reviewing AfC redirect requests</h3>");W(i);const m=i.parent();let c=1;const o=[{label:"Accept",value:"accept"},{label:"Decline",value:"decline"},{label:"Comment",value:"comment"},{label:"None",selected:!0,value:"none"}];for(const a of v){let t;t=a.to===void 0?"":a.to.replaceAll(/\s/g,"");const b=$("<ul>"),s=$("<li>");if(a.type==="redirect"){if(s.append("Redirect(s) to "),t){if(!a.to)for(let n=a.from.length-1;n>=0;n--)T.push({id:a.from[n].id,reason:"not-redirect"})}else for(let n=a.from.length-1;n>=0;n--)T.push({id:a.from[n].id,reason:"no-target"});a===""||a===" "?(s.append("Empty submission #"+c),c++):t.length>0?s.append($("<a>").attr("href",mw.config.get("wgArticlePath").replace("$1",encodeURIComponent(a.to))).attr("target","_blank").text(a.to)):s.append("<b>no target given</b>: ");const r=$("<ul>").appendTo(s);for(let n=0;n<a.from.length;n++){const p=a.from[n];let d=p.title;d.replaceAll(/\s*/gi,"").length===0&&(d="<b>no title specified</b>, check the request details");const u=$("<ul>");a.reason&&u.append("<li>Reason: "+a.reason+"</li>"),a.source&&u.append("<li>Source: "+a.source+"</li>");const A='http://www.google.com/search?q="'+encodeURIComponent(d)+'"+-wikipedia.org';r.append($("<li>").append("From: "+d+" (<small><a href='"+A+`'" target="_blank">Google</a> <b>&middot;</b> <a href="https://en.wikipedia.org/wiki/Special:WhatLinksHere/`+encodeURIComponent(d)+'" target="_blank">what links here</a>)</small><br/>').append(u).append($("<label>").attr("for","afcHelper_redirect_action_"+p.id).text("Action: ")).append(U("afcHelper_redirect_action_"+p.id,o,S(p.id))).append($("<div>").attr("id","afcHelper_redirect_extra_"+p.id)))}}else{const r=a.id;s.append("Category submission: ").append($("<a>").attr("href","/wiki/"+a.title).attr("title",a.title).text(a.title)).append("<br />").append($("<label>").attr("for","afcHelper_redirect_action_"+r).text("Action: ")).append(U("afcHelper_redirect_action_"+r,o,S(r))).append($("<div>").attr("id","afcHelper_redirect_extra_"+r))}b.append(s),m.append(b)}m.append($("<button>").attr("id","afcHelper_redirect_done_button").attr("name","afcHelper_redirect_done_button").text("Done").click(L));for(const a of T)$("#afcHelper_redirect_action_"+a.id).attr("value","decline"),q(a.id),$("#afcHelper_redirect_decline_"+a.id).attr("value",a.reason)}function S(e){return function(){q(e)}}function q(e){const l=$("#afcHelper_redirect_extra_"+e),i=$("#afcHelper_redirect_action_"+e).val();switch(l.html(""),i){case"accept":{V[e].type==="redirect"?(l.append('<label for="afcHelper_redirect_from_'+e+'">From: </label>'),l.append($("<input>").attr("type","text").attr("name","afcHelper_redirect_from_"+e).attr("id","afcHelper_redirect_from_"+e).attr("value",V[e].title)),l.html(l.html()+'&nbsp;<br /><label for="afcHelper_redirect_to_'+e+'">To: </label><input type="text" name="afcHelper_redirect_to_'+e+'" id="afcHelper_redirect_to_'+e+'" value="'+V[e].to+'" />'),l.html(l.html()+'<br /><label for="afcHelper_redirect_append_'+e+'">Template to append: (<a href="https://en.wikipedia.org/wiki/Wikipedia:TMR" target="_blank">Help</a>)</label>'),l.html(l.html()+F("afcHelper_redirect_append_"+e,[{label:"None",selected:!0,value:"none"},{labelAndValue:"Frequently used",disabled:!0},{labelAndValue:"R from alternative language"},{labelAndValue:"R from alternative name"},{labelAndValue:"R from modification"},{labelAndValue:"R to section"},{labelAndValue:"R from diacritic"},{labelAndValue:"R to diacritic"},{labelAndValue:"From \u2013 abbreviation, capitalisation, and grammar",disabled:!0},{labelAndValue:"R from acronym"},{labelAndValue:"R from initialism"},{labelAndValue:"R from CamelCase"},{labelAndValue:"R from miscapitalisation"},{labelAndValue:"R from other capitalisation"},{labelAndValue:"R from modification"},{labelAndValue:"R from plural"},{label:"From parts of speach",value:"From parts of speach",disabled:!0},{labelAndValue:"R from adjective"},{labelAndValue:"R from adverb"},{labelAndValue:"R from common noun"},{labelAndValue:"R from gerund"},{labelAndValue:"R from proper noun"},{labelAndValue:"R from verb"},{labelAndValue:"From \u2013 spelling",disabled:!0},{labelAndValue:"R from alternative spelling"},{labelAndValue:"R from misspelling"},{labelAndValue:"R from American English"},{labelAndValue:"R from British English"},{labelAndValue:"R from ASCII-only"},{labelAndValue:"R from diacritic"},{labelAndValue:"R from ligature"},{labelAndValue:"R from stylization"},{labelAndValue:"R from alternative transliteration"},{labelAndValue:"R from Wade\u2013Giles romanization"},{labelAndValue:"From alternative names, general",disabled:!0},{labelAndValue:"R from alternative language"},{labelAndValue:"R from alternative name"},{labelAndValue:"R from former name"},{labelAndValue:"R from historic name"},{labelAndValue:"R from incomplete name"},{labelAndValue:"R from incorrect name"},{labelAndValue:"R from letter\u2013word combination"},{labelAndValue:"R from long name"},{labelAndValue:"R from portmanteau"},{labelAndValue:"R from predecessor company name"},{labelAndValue:"R from short name"},{labelAndValue:"R from sort name"},{labelAndValue:"R from less specific name"},{labelAndValue:"R from more specific name"},{labelAndValue:"R from antonym"},{labelAndValue:"R from eponym"},{labelAndValue:"R from synonym"},{labelAndValue:"R from Roman numerals"},{labelAndValue:"From alternative names, geography",disabled:!0},{labelAndValue:"R from Canadian settlement name"},{labelAndValue:"R from name and country"},{labelAndValue:"R from city and state"},{labelAndValue:"R from city and province"},{labelAndValue:"R from more specific geographic name"},{labelAndValue:"R from postal abbreviation"},{labelAndValue:"R from postal code"},{labelAndValue:"R from US postal abbreviation"},{labelAndValue:"From alternative names, organisms",disabled:!0},{labelAndValue:"R from scientific abbreviation"},{labelAndValue:"R from scientific name"},{labelAndValue:"R from alternative scientific name"},{labelAndValue:"R from monotypic taxon"},{labelAndValue:"From alternative names, people",disabled:!0},{labelAndValue:"R from birth name"},{labelAndValue:"R from given name"},{labelAndValue:"R from married name"},{labelAndValue:"R from name with title"},{labelAndValue:"R from non-neutral name"},{labelAndValue:"R from personal name"},{labelAndValue:"R from pseudonym"},{labelAndValue:"R from relative"},{labelAndValue:"R from spouse"},{labelAndValue:"R from surname"},{labelAndValue:"From alternative names, technical",disabled:!0},{labelAndValue:"R from Bluebook abbreviation"},{labelAndValue:"R from brand name"},{labelAndValue:"R from drug trade name"},{labelAndValue:"R from file name"},{labelAndValue:"R from Java package name"},{labelAndValue:"R from MathSciNet abbreviation"},{labelAndValue:"R from molecular formula"},{labelAndValue:"R from NLM abbreviation"},{labelAndValue:"R from product name"},{labelAndValue:"R from slogan"},{labelAndValue:"R from symbol"},{labelAndValue:"R from systematic abbreviations"},{labelAndValue:"R from technical name"},{labelAndValue:"R from trademark"},{labelAndValue:"From \u2013 navigation",disabled:!0},{labelAndValue:"R from file metadata link"},{labelAndValue:"R mentioned in hatnote"},{labelAndValue:"R from shortcut"},{labelAndValue:"R from template shortcut"},{labelAndValue:"From disambiguations",disabled:!0},{labelAndValue:"R from ambiguous term"},{labelAndValue:"R from incomplete disambiguation"},{labelAndValue:"R from incorrect disambiguation"},{labelAndValue:"R from other disambiguation"},{labelAndValue:"R from predictable disambiguation"},{labelAndValue:"R from unnecessary disambiguation"},{labelAndValue:"From mergers, duplicates, and moves",disabled:!0},{labelAndValue:"R from duplicated article"},{labelAndValue:"R with history"},{labelAndValue:"R from merge"},{labelAndValue:"R from move"},{labelAndValue:"R with old history"},{labelAndValue:"From fiction",disabled:!0},{labelAndValue:"R from fictional character"},{labelAndValue:"R from fictional element"},{labelAndValue:"R from fictional location"},{labelAndValue:"From related info",disabled:!0},{labelAndValue:"R from album"},{labelAndValue:"R from animal"},{labelAndValue:"R from book"},{labelAndValue:"R from catchphrase"},{labelAndValue:"R from domain name"},{labelAndValue:"R from top-level domain"},{labelAndValue:"R from film"},{labelAndValue:"R from gender"},{labelAndValue:"R from legislation"},{labelAndValue:"R from list topic"},{labelAndValue:"R from member"},{labelAndValue:"R from person"},{labelAndValue:"R from phrase"},{labelAndValue:"R from quotation"},{labelAndValue:"R from related word"},{labelAndValue:"R from school"},{labelAndValue:"R from song"},{labelAndValue:"R from subtopic"},{labelAndValue:"R from team"},{labelAndValue:"R from work"},{labelAndValue:"R from writer"},{labelAndValue:"R from Unicode"},{labelAndValue:"To \u2013 grammar, punctuation, and spelling",disabled:!0},{labelAndValue:"R to acronym"},{labelAndValue:"R to initialism"},{labelAndValue:"R to ASCII-only title"},{labelAndValue:"R to diacritic"},{labelAndValue:"R to ligature"},{labelAndValue:"R to plural"},{labelAndValue:"To alternative names",disabled:!0},{labelAndValue:"R to former name"},{labelAndValue:"R to historic name"},{labelAndValue:"R to joint biography"},{labelAndValue:"R to name with title"},{labelAndValue:"R to monotypic taxon"},{labelAndValue:"R to scientific name"},{labelAndValue:"R to systematic name"},{labelAndValue:"R to technical name"},{labelAndValue:"To \u2013 navigation and disambiguation",disabled:!0},{labelAndValue:"R to anchor"},{labelAndValue:"R to anthroponymy page"},{labelAndValue:"R to disambiguation page"},{labelAndValue:"R to list entry"},{labelAndValue:"R to section"},{labelAndValue:"To miscellaneous",disabled:!0},{labelAndValue:"R to decade"},{labelAndValue:"R to related topic"},{labelAndValue:"R to subpage"},{labelAndValue:"R to subtopic"},{labelAndValue:"R to TV episode list entry"},{label:"Custom - prompt me",value:"custom"}]))):(l.html('<label for="afcHelper_redirect_name_'+e+'">Category name: </label><input type="text" size="100" name="afcHelper_redirect_name_'+e+'" id="afcHelper_redirect_name_'+e+'" value="'+V[e].title+'" />'),l.html(l.html()+'<br /><label for="afcHelper_redirect_parents_'+e+'">Parent categories (comma-separated):</label><input type="text" size="100" id="afcHelper_redirect_parents_'+e+'" name="afcHelper_redirect_parents_'+e+'" value="'+V[e].parents+'" />'),l.append("<br />"),l.append($("<input>",{type:"checkbox",name:"afcHelper_redirect_container_"+e,id:"afcHelper_redirect_container_"+e})),l.append('<label for="afcHelper_redirect_container_'+e+'">This is a <a href="/wiki/Wikipedia:Container_category" title="Wikipedia:Container category">container category</a></label>'),l.html(l.html()+'<br /><input type="checkbox" name="afcHelper_redirect_container_'+e+'"')),l.html(l.html()+'<br /><label for="afcHelper_redirect_comment_'+e+'">Comment:</label><input type="text" size="100" id="afcHelper_redirect_comment_'+e+'" name="afcHelper_redirect_comment_'+e+'"/>');break}case"decline":{V[e].type==="redirect"?l.html('<label for="afcHelper_redirect_decline_'+e+'">Reason for decline: </label>'+F("afcHelper_redirect_decline_"+e,[{label:"Already exists",value:"exists"},{label:"Blank request",value:"blank"},{label:"No valid target specified",value:"no-target"},{label:"Unlikely search term",value:"unlikely"},{label:"Not a redirect request",value:"not-redirect"},{label:"Custom - reason below",selected:!0,value:"custom"}])):l.html('<label for="afcHelper_redirect_decline_'+e+'">Reason for decline: </label>'+F("afcHelper_redirect_decline_"+e,[{label:"Already exists",value:"exists"},{label:"Blank request",value:"blank"},{label:"Unlikely category",value:"unlikely"},{label:"Not a category request",value:"not-category"},{label:"Custom - reason below",selected:!0,value:"custom"}])),l.html(l.html()+'<br/><label for="afcHelper_redirect_comment_'+e+'">Comment: </label><input type="text" size="100" id="afcHelper_redirect_comment_'+e+'" name="afcHelper_redirect_comment_'+e+'"/>');break}case"none":{l.html("");break}default:l.html(l.html()+'<label for="afcHelper_redirect_comment_'+e+'">Comment: </label><input type="text" size="100" id="afcHelper_redirect_comment_'+e+'" name="afcHelper_redirect_comment_'+e+'"/>')}}async function L(){for(const[a,t]of V.entries()){const b=$("#afcHelper_redirect_action_"+a).val();t.action=b,b!=="none"&&(b==="accept"?t.type==="redirect"?(t.title=$("#afcHelper_redirect_from_"+a).val(),t.to=$("#afcHelper_redirect_to_"+a).val(),t.append=$("#afcHelper_redirect_append_"+a).val(),t.append==="custom"&&(t.append=prompt("Please enter the template to append to "+t.title+". Do not include the curly brackets.")),t.append=t.append==="none"||t.append===null?"":"{{"+t.append+"}}"):(t.title=$("#afcHelper_redirect_name_"+a).val(),t.parents=$("#afcHelper_redirect_parents_"+a).val(),t.container=$("#afcHelper_redirect_container_"+a).is(":checked")):b==="decline"&&(t.reason=$("#afcHelper_redirect_decline_"+a).val()),t.comment=$("#afcHelper_redirect_comment_"+a).val())}W('<ul id="afcHelper_status"></ul><ul id="afcHelper_finish"></ul>');const e=function(a){$("#afcHelper_status").append(a)};$("#afcHelper_finish").html($("#afcHelper_finish").html()+'<span id="afcHelper_finished_wrapper"><span id="afcHelper_finished_main" style="display:none"><li id="afcHelper_done"><b>Done (<a href="'+mw.config.get("wgArticlePath").replace("$1",encodeURI(w))+'?action=purge" title="'+w+'">Reload page</a>)</b></li></span></span>');let l=await E(w,e),i=0,m=0,c=0;e("<li>Processing "+v.length+" submission"+(v.length===1?"":"s")+"...</li>");for(const a of v){if(!l.includes(k[a.section])){e("<li>Skipping "+a.title+": Cannot find section. Perhaps it was modified in the mean time?</li>");continue}let t=k[a.section];const b=l.indexOf(k[a.section]),s=b+t.length;if(a.type==="category")switch(a.action){case"accept":{let r="<!--Created by WP:AFC -->";a.container&&(r+=`
{{Container category}}`),a.parents!==""&&(r=a.parents.split(",").map(u=>"[["+u+"]]").join(`
`)),C(a.title,r,"Created via [[WP:AFC|Articles for Creation]]",!0);const n="{{subst:WPAFC/article|class=Cat}}",p=new mw.Title(a.title).getTalkPage().toText();C(p,n,"Placing WPAFC project banner",!0);const d=t.match(/==[^=]*==/)[0];t=d+`
{{AfC-c|a}}
`+t.slice(d.length),t+=a.comment===""?`
*{{subst:afc category}} ~~~~
`:`
*{{subst:afc category|accept|2=`+a.comment+`}} ~~~~
`,t+=`{{AfC-c|b}}
`,i++;break}case"decline":{const r=t.match(/==[^=]*==/)[0];let n=M[a.reason];if(n===""?n=a.comment:a.comment!==""&&(n=n+": "+a.comment),n===""){$("afcHelper_status").html($("#afcHelper_status").html()+"<li>Skipping "+a.title+": No decline reason specified.</li>");continue}t=r+`
{{AfC-c|d}}
`+t.slice(r.length),t+=a.comment===""?`
*{{subst:afc category|`+a.reason+`}} ~~~~
`:`
*{{subst:afc category|decline|2=`+n+`}} ~~~~
`,t+=`{{AfC-c|b}}
`,m++;break}case"comment":{a.comment!==""&&(t+=`

{{afc comment|1=`+a.comment+` ~~~~}}
`),c++;break}}else{let r="",n="",p="",d=0,u=0,A=0,H=!1;for(let g=0;g<a.from.length;g++){const f=a.from[g];switch(f.action){case"accept":{const h=`#REDIRECT [[${f.to}]]${f.append?`

{{Redirect category shell|
${f.append}
}}`:""}`;C(f.title,h,"Redirected page to [["+f.to+"]] via [[WP:AFC|Articles for Creation]]",!0);const _=new mw.Title(f.title);if(!_.isTalkPage()){const P=_.getTalkPage().toText();C(P,"{{subst:WPAFC/redirect}}","Placing WPAFC project banner",!0)}r+=f.title+" &rarr; "+f.to,f.comment===""?r+=". ":(r+=": "+f.comment,H=!0),d++;break}case"decline":{let h=j[f.reason];if(h===""?h=f.comment:f.comment!==""&&(h=h+": "+f.comment),h===""){$("#afcHelper_status").html($("#afcHelper_status").html()+"<li>Skipping "+f.title+": No decline reason specified.</li>");continue}n+=f.reason==="blank"||f.reason==="not-redirect"?h+". ":f.title+" &rarr; "+f.to+": "+h+". ",u++;break}case"comment":{p+=f.title+": "+f.comment+". ",A++;break}}}let y="";if(d>0&&(y+=`
*{{subst:afc redirect|accept|2=`+r+" Thank you for your contributions to Wikipedia!}} ~~~~"),u>0&&(y+=`
*{{subst:afc redirect|decline|2=`+n+"}} ~~~~"),A>0&&(y+=`
*{{afc comment|1=`+p+"~~~~}}"),y+=`
`,!H&&d===a.from.length&&(y=d>1?`
*{{subst:afc redirect|all}} ~~~~
`:`
*{{subst:afc redirect}} ~~~~
`),d+u+A>0)if(d+u===a.from.length){const g=t.match(/==[^=]*==/)[0];d>0&&u>0?t=g+`
{{AfC-c|p}}`+t.slice(g.length):d>0?t=g+`
{{AfC-c|a}}`+t.slice(g.length):t=g+`
{{AfC-c|d}}`+t.slice(g.length),t+=y,t+=`{{AfC-c|b}}
`}else t+=y+`
`;i+=d,m+=u,c+=A}l=l.slice(0,Math.max(0,b))+t+l.slice(Math.max(0,s))}let o="Updating submission status:";i>0&&(o+=" accepting "+i+" request"+(i>1?"s":"")),m>0&&(i>0&&(o+=","),o+=" declining "+m+" request"+(m>1?"s":"")),c>0&&((i>0||m>0)&&(o+=","),o+=" commenting on "+c+" request"+(c>1?"s":"")),C(w,l,o,!1),$(document).ajaxStop(()=>{$("#afcHelper_finished_main").css("display","")})}async function E(e,l){l=l??function(){},l('<li id="afcHelper_get'+R(e)+'">Getting <a href="'+mw.config.get("wgArticlePath").replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></li>");const i=await new mw.Api().get({action:"query",prop:"revisions",rvprop:"content",format:"json",indexpageids:!0,titles:e}),m=i.query.pageids[0];if(m==="-1")return l('The page <a class="new" href="'+mw.config.get("wgArticlePath").replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a> does not exist"),"";const c=i.query.pages[m].revisions[0]["*"];return l('<li id="afcHelper_get'+R(e)+'">Got <a href="'+mw.config.get("wgArticlePath").replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></li>"),c}function z(e){const l=/(\[){1,2}(?:https?:)?\/\/(en.wikipedia.org\/wiki|enwp.org)\/([^\s[\]|]+)([\s|])?((?:\[\[[^[\]]*]]|[^[\]])*)(]){1,2}/gi,i=e;let m;for(;m=l.exec(i);){const c=decodeURI(m[3].replaceAll("_"," "));let o=decodeURI(m[5].replaceAll("_"," "));c===o&&(o="");const a="[["+c+(o?"|"+o:"")+"]]";e=e.replace(m[0],a)}return e}function F(e,l){return U(e,l).prop("outerHTML")}function U(e,l,i){const m=$("<select>").attr("name",e).attr("id",e);i!==null&&m.change(i);for(const c of l){c.labelAndValue&&(c.value=c.labelAndValue,c.label=c.labelAndValue);const o=$("<option>").appendTo(m).val(c.value).text(c.label);c.selected&&o.attr("selected","selected"),c.disabled&&o.attr("disabled","disabled")}return m}function W(e,l){if(arguments.length===0||e===""||e===null)return $("#display-message").empty().hide(),!0;{let i=$("#display-message");if(i.length===0)if(i=$('<div id="display-message" style="margin:1em;padding:0.5em 2.5%;border:solid 1px #ddd;background-color:#fcfcfc;font-size: 0.8em"></div>'),mw.util.$content.length>0)mw.util.$content.prepend(i);else return!1;return l&&i.prop("class","display-message-"+l),typeof e=="object"?(i.empty(),i.append(e)):i.html(e),i[0].scrollIntoView(),!0}}function R(e){return e.replaceAll(/[ !"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/g,"")}function C(e,l,i,m,c){const o=mw.config.get("wgArticlePath");i+=N,$("#afcHelper_finished_wrapper").html('<span id="afcHelper_AJAX_finished_'+I+'" style="display:none">'+$("#afcHelper_finished_wrapper").html()+"</span>");const a=I;I++,$("#afcHelper_status").html($("#afcHelper_status").html()+'<li id="afcHelper_edit'+R(e)+'">Editing <a href="'+o.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></li>");const t={action:"edit",title:e,text:l,summary:i};m&&(t.createonly=!0);const b=new mw.Api;if(b.postWithEditToken(t).done(s=>{s?.edit?.result&&s.edit.result==="Success"?$("#afcHelper_edit"+R(e)).html('Saved <a href="'+o.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a>"):($("#afcHelper_edit"+R(e)).html('<span class="afcHelper_notice"><b>Edit failed on <a href="'+o.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span>. Error info: "+JSON.stringify(s)),console.error("Edit failed on %s (%s). Error info: %s",o.replace("$1",encodeURI(e)),e,JSON.stringify(s)))}).fail(s=>{m&&s==="articleexists"?$("#afcHelper_edit"+R(e)).html('<span class="afcHelper_notice"><b>Edit failed on <a href="'+o.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span>. Error info: The article already exists!"):$("#afcHelper_edit"+R(e)).html('<span class="afcHelper_notice"><b>Edit failed on <a href="'+o.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span>. Error info: "+s)}).always(()=>{$("#afcHelper_AJAX_finished_"+a).css("display","")}),!c&&$(".patrollink").length>0){const s=$(".patrollink a").attr("href"),r=mw.util.getParamValue("rcid",s);if(r){$("#afcHelper_status").html($("#afcHelper_status").html()+'<li id="afcHelper_patrol'+R(e)+'">Marking <a href="'+o.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+" as patrolled</a></li>");const n={action:"patrol",format:"json",rcid:r};b.postWithToken("patrol",n).done(p=>{p?$("#afcHelper_patrol"+R(e)).html('Marked <a href="'+o.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a> as patrolled"):($("#afcHelper_patrol"+R(e)).html('<span class="afcHelper_notice"><b>Patrolling failed on <a href="'+o.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span> with an unknown error"),console.error("Patrolling failed on %s (%s) with an unknown error.",o.replace("$1",encodeURI(e)),e))}).fail(p=>{$("#afcHelper_patrol"+R(e)).html('<span class="afcHelper_notice"><b>Patrolling failed on <a href="'+o.replace("$1",encodeURI(e))+'" title="'+e+'">'+e+"</a></b></span>. Error info: "+p)})}}}mw.loader.using(["mediawiki.api","mediawiki.util"],()=>{mw.util.addCSS(`
#display-message * {
    margin: revert;
    border: revert;
    background: revert;
    padding: revert;
}`);const e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Review AFC/RC","ca-afcrhs","Review","a");$(e).click(l=>{l.preventDefault(),v.length=0,k.length=0,x=0,V.length=0,T.length=0,D()})})})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
