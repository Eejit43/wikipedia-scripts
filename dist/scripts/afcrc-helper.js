// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const H=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",G=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!H&&!G)return;const U=H?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${U} creation requests`,"afcrc-helper").addEventListener("click",F=>{F.preventDefault();const j=new OO.ui.WindowManager;document.body.append(j.$element[0]);const t=new D(U,mw.config.get("wgPageName").replaceAll("_"," "));j.addWindows([t]),t.open(),t.load()});class N extends OO.ui.Dialog{constructor(){super({size:"large"});this.initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);N.static.name="ShowActionsDialog",N.static.title="Actions"}addLogEntry(t,e="notice"){const s=new OO.ui.MessageWidget({type:e,inline:!0,label:new OO.ui.HtmlSnippet(t)});this.logOutput.append(s.$element[0]),this.updateSize(),this.closeButton.scrollElementIntoView()}showReload(){this.closeButton.$element.remove();const t=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});t.on("click",()=>window.location.reload()),this.contentLayout.$element.append(t.$element)}}Object.assign(N.prototype,OO.ui.Dialog.prototype);class z extends OO.ui.TextInputWidget{constructor(t){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const s=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:s?.getNamespaceId()??0,gapprefix:s?.getMainText()??t,generator:"allpages"}).catch(()=>null).then(i=>{if(i?.query?.pages){const a=i.query.pages.map(c=>({data:c.title,label:c.title}));this.emit("showing-values",a),e.resolve(a)}else e.resolve([])}),e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:s})=>new OO.ui.MenuOptionWidget({data:e,label:s}));OO.ui.mixin.LookupElement.call(this,t)}}Object.assign(z.prototype,OO.ui.mixin.LookupElement.prototype);class _ extends OO.ui.TextInputWidget{constructor(t){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const s=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:s?.getMainText()??t,generator:"allpages",prop:"categories"}).catch(()=>null).then(i=>{if(i?.query?.pages){const a=i.query.pages.filter(c=>!c.categories?.some(n=>n.title==="Category:Wikipedia soft redirected categories")).map(c=>{const n=c.title.split(":")[1];return{data:n,label:n}});this.emit("showing-values",a),e.resolve(a)}else e.resolve([])}),e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:s})=>new OO.ui.MenuOptionWidget({data:e,label:s}));OO.ui.mixin.LookupElement.call(this,t)}}Object.assign(_.prototype,OO.ui.mixin.LookupElement.prototype);class D extends OO.ui.ProcessDialog{constructor(t,e){super({size:"large"});this.api=new mw.Api;this.scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";this.templateEditorsInfo=[];this.parsedRequests=[];this.actionsToTake=[];this.editsCreationsToMake=[];this.getActionProcess=t=>t==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):t==="save"?new OO.ui.Process(()=>{this.performActions()}):D.super.prototype.getActionProcess.call(this,t);this.getTeardownProcess=()=>D.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});D.static.name="AfcrcHelperDialog",D.static.title="afcrc-helper",D.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=e,this.requestPageType=t,mw.util.addCSS(`
.afcrc-helper-request {
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}

.afcrc-helper-template-parameters-container, .afcrc-helper-template-parameters-container details {
    background-color: #e2e2e2;
    border-radius: 5px;
    margin-block: 10px;
    padding: 5px;
}

.afcrc-helper-template-parameters-container {
    margin-left: 8px;
}

.afcrc-helper-template-parameters-container summary {
    cursor: pointer;
    font-weight: bold;
}

.afcrc-helper-template-parameters-container details {
    background-color: #d1cece;
    margin-block: 5px;
}

#afcrc-helper-no-templates-message {
    padding: 5px;
}`)}async load(){const t=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"});this.redirectTemplates=JSON.parse(t.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}");const e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle});this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=this.pageContent.match(/^(.*?)==/s)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==").replaceAll(new RegExp(`\\[https?:${mw.config.get("wgServer")}/(.*?)]`,"g"),"[[$1]]");const t=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(e=>e[0]);for(const e of t){if(/{{afc-c\|/i.test(e))continue;const i=e.match(/^==(.*?)==$/m)[1].trim();if(U==="redirect"){const a={},c=[...i.matchAll(/\[\[(.*?)]]/g)].map(g=>g[1]?.trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);if(c.length===0)continue;a.pages=c;const n=e.match(/Target of redirect: ?\[\[(.*?)]]/)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!n)continue;a.target=n,a.reason=e.match(/reason: ?(.*?)\*source(?: \(if applicable\))?:/is)?.[1].trim()??"",a.source=e.match(/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is)?.[1].trim()??"";const o=e.match(e.includes("<references />")?/<references \/>\n+(.*)/:new RegExp(`(?:<references \\/>${a.source?`|${a.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))?.[1].trim();if(!o)continue;a.requester={type:/\[\[User( talk)?:/.test(o)?"user":"ip",name:o.match(/(?:Special:Contributions\/|User(?: talk)?:)(.*?)\|/)[1].trim()},this.parsedRequests.push(a),this.actionsToTake.push({target:a.target,requests:Object.fromEntries(c.map(g=>[g,{originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"}]))})}else{const a={},c=i.match(/:?Category:(.*?)(]]|$)/)?.[1].trim();if(!c)continue;a.category=c.replaceAll("_"," "),a.examples=[...e.match(/example pages which belong to this category:(.*?)parent category\/categories:/is)[1].matchAll(/\*\s*(?:\[\[)?(.*?)(\||]]|\s*?\n)/g)].map(O=>O[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[],a.parents=[...e.match(/parent category\/categories:(.*?)(\n\n|\n\[\[(special:contributions\/|user:))/is)[1].matchAll(/(?<!\|)#?:?Category:(.*?)(\||]]|\s*?\n)/g)].map(O=>O[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[];const n=e.indexOf("[[User:"),o=e.indexOf("[[User talk:"),g=e.indexOf("[[Special:Contributions/"),h=Math.min(...[n,o,g].filter(O=>O!==-1));if(h===Number.POSITIVE_INFINITY||(a.requester=h===g?{type:"ip",name:e.match(/\[\[Special:Contributions\/(.*?)(\||]])/)[1].trim()}:{type:"user",name:e.match(/\[\[User(?: talk)?:(.*?)(\||]])/)[1].trim()},!a.requester.name))continue;this.parsedRequests.push(a),this.actionsToTake.push({category:a.category,examples:a.examples,parents:a.parents,originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"})}}}loadInputElements(){if(this.parsedRequests.length>0){let t=0;const e=()=>{const i=Math.min(t+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${t+1}-${i}/${this.parsedRequests.length} requests)`);for(let a=t;a<i;a++)this.requestPageType==="redirect"?this.loadRedirectRequestElements(a):this.loadCategoryRequestElements(a);i<this.parsedRequests.length?(t=i,setTimeout(e,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};e()}else{const t=new OO.ui.MessageWidget({type:"notice",label:"No valid requests to handle!"}),e=new OO.ui.PanelLayout({padded:!0,expanded:!1});e.$element.append(t.$element),this.$body.append(e.$element),this.updateSize()}}loadRedirectRequestElements(t){const e=this.parsedRequests[t],s=document.createElement("details");s.classList.add("afcrc-helper-request"),s.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const i=document.createElement("summary");i.innerHTML=e.pages.map(u=>`<b>${u}</b>`).join(", ")+" \u2192 ";const a=document.createElement("a");a.target="_blank",a.href=mw.util.getUrl(e.target),a.textContent=e.target,i.append(a),s.append(i);const c=document.createElement("div");c.classList.add("afcrc-helper-request-info");const n=document.createElement("span");n.style.color="dimgray",n.textContent="None";const o=document.createElement("div"),g=document.createElement("b");g.textContent="Reason: ",o.append(g),e.reason?o.append(e.reason):o.append(n.cloneNode(!0)),c.append(o);const h=document.createElement("div"),O=document.createElement("b");O.textContent="Source: ",h.append(O),e.source?h.append(e.source):h.append(n.cloneNode(!0)),c.append(h);const v=document.createElement("div"),C=document.createElement("b");C.textContent="Requester: ",v.append(C);const k=document.createElement("a");k.target="_blank",k.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),k.textContent=e.requester.name,v.append(k),c.append(v),s.append(c),s.append(document.createElement("hr"));const R=document.createElement("div");R.classList.add("afcrc-helper-request-responder");for(const u of e.pages){const p=document.createElement("div"),l=document.createElement("b");l.textContent=u+" \u2192 "+e.target,p.append(l);let f,b;const w=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(y=>new OO.ui.RadioOptionWidget({data:y,label:y}))});w.selectItemByLabel("None"),w.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const y=w.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].requests[u].action=y,!f||!b){const T=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.keys(this.redirectTemplates).map(m=>({data:m,label:m}))});T.getMenu().filterMode="substring",T.on("change",()=>{const m=T.getValue().sort((M,E)=>M.toLowerCase().localeCompare(E.toLowerCase()));T.getValue().join(";")!==m.join(";")&&T.setValue(m),this.actionsToTake[t].requests[u].redirectTemplates=m;for(const M of this.templateEditorsInfo)M.details.style.display="none";let I=0;for(const M of T.getValue()){const E=this.templateEditorsInfo.find(V=>V.name===M);E&&(E.details.style.display="block",I++)}r.textContent=`Template parameters (${I>0?`for ${I} template${I>1?"s":""}`:"none to show"})`,d.style.display=I>0?"none":"block"}),f=new OO.ui.FieldLayout(T,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates:"}),p.append(f.$element[0]),b=document.createElement("details"),b.classList.add("afcrc-helper-template-parameters-container");const r=document.createElement("summary");r.textContent="Template parameters (none to show)",b.append(r);for(const[m,I]of Object.entries(this.redirectTemplates)){const M=Object.entries(I.parameters);if(M.length===0)continue;const E=document.createElement("details");E.style.display="none";const V=document.createElement("summary");V.textContent=m,E.append(V);const Q={name:m,details:E,parameters:[]};for(const[B,q]of M){const J=new OO.ui.TextInputWidget({placeholder:q.default?.toString(),required:q.required}),Y=new OO.ui.FieldLayout(J,{label:new OO.ui.HtmlSnippet(`${B}${!q.label||B.toLowerCase()===q.label?.toLowerCase()?"":` (${q.label})`}${q.description?` (${q.description})`:""} (type: ${q.type}) ${q.suggested?" (suggested)":""}${q.example?` (example: "${q.example}")`:""}`),align:"inline"});E.append(Y.$element[0]),Q.parameters.push({name:B,aliases:q.aliases,editor:J})}b.append(E),this.templateEditorsInfo.push(Q)}const d=document.createElement("div");d.id="afcrc-helper-no-templates-message",d.textContent="No templates with parameters to display!",b.append(d),p.append(b)}if(["comment","close"].includes(y)){W.$element.show();const T=P.getValue().trim();T?this.actionsToTake[t].requests[u].comment=T:delete this.actionsToTake[t].requests[u].comment}else W.$element.hide(),delete this.actionsToTake[t].requests[u].comment;switch(this.updateRequestColor(s,t),f.$element.hide(),b.style.display="none",x.$element.hide(),L.$element.hide(),y){case"accept":{f.$element.show(),b.style.display="block";break}case"deny":{x.$element.show();break}case"close":{L.$element.show();break}}});const S=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["notredirect","article creation requests"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([y,T])=>({data:`autofill:${y}`,label:`Autofilled text for ${T}`}))});S.on("change",()=>{this.actionsToTake[t].requests[u].denyReason=S.getValue()||"autofill:unlikely"}),S.setValue("autofill:unlikely"),S.getMenu().selectItemByData("autofill:unlikely");const x=new OO.ui.FieldLayout(S,{align:"inline",label:"Deny reason:"});x.$element.hide();const A=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([y,T])=>new OO.ui.MenuOptionWidget({data:T,label:y}))}});A.getMenu().on("choose",()=>{const y=A.getMenu().findSelectedItem();this.actionsToTake[t].requests[u].closingReason={name:y.getLabel(),id:y.getData()},this.updateRequestColor(s,t)}),A.getMenu().selectItemByData("r"),this.actionsToTake[t].requests[u].closingReason={name:"No response",id:"r"};const L=new OO.ui.FieldLayout(A,{align:"inline",label:"Closing reason:"});L.$element.hide();const P=new OO.ui.TextInputWidget;P.on("change",()=>{const y=P.getValue().trim();y?this.actionsToTake[t].requests[u].comment=y:delete this.actionsToTake[t].requests[u].comment});const W=new OO.ui.FieldLayout(P,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});W.$element.hide(),p.append(w.$element[0],x.$element[0],L.$element[0],W.$element[0]),R.append(p)}s.append(R),this.$body.append(s),this.updateSize()}loadCategoryRequestElements(t){const e=this.parsedRequests[t],s=document.createElement("details");s.classList.add("afcrc-helper-request"),s.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const i=document.createElement("summary");i.innerHTML=`<b>Category:${e.category}</b>`,s.append(i);const a=document.createElement("div");a.classList.add("afcrc-helper-request-info");const c=document.createElement("span");c.style.color="dimgray",c.textContent="None";const n=document.createElement("div"),o=document.createElement("b");if(o.textContent="Examples: ",n.append(o),e.examples.length>0)for(const[r,d]of e.examples.entries()){const m=document.createElement("a");m.target="_blank",m.href=mw.util.getUrl(d),m.textContent=d,n.append(m),r!==e.examples.length-1&&n.append(", ")}else n.append(c.cloneNode(!0));a.append(n);const g=document.createElement("div"),h=document.createElement("b");if(h.textContent="Parents: ",g.append(h),e.parents.length>0)for(const[r,d]of e.parents.entries()){const m=document.createElement("a");m.target="_blank",m.href=mw.util.getUrl(`Category:${d}`),m.textContent=d,g.append(m),r!==e.parents.length-1&&g.append(", ")}else g.append(c.cloneNode(!0));a.append(g);const O=document.createElement("div"),v=document.createElement("b");v.textContent="Requester: ",O.append(v);const C=document.createElement("a");C.target="_blank",C.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),C.textContent=e.requester.name,O.append(C),a.append(O),s.append(a),s.append(document.createElement("hr"));const k=document.createElement("div");k.classList.add("afcrc-helper-request-responder");const R=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(r=>new OO.ui.RadioOptionWidget({data:r,label:r}))});R.selectItemByLabel("None"),R.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const r=R.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].action=r,["comment","close"].includes(r)){T.$element.show();const d=y.getValue().trim();d?this.actionsToTake[t].comment=d:delete this.actionsToTake[t].comment}else T.$element.hide(),delete this.actionsToTake[t].comment;switch(this.updateRequestColor(s,t),f.$element.hide(),x.$element.hide(),L.$element.hide(),W.$element.hide(),r){case"accept":{f.$element.show(),x.$element.show();break}case"deny":{L.$element.show();break}case"close":{W.$element.show();break}}});const u=new z({placeholder:"Add pages here"});u.on("change",()=>{let r=u.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^:/,""),r.length>0&&u.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),u.on("showing-values",r=>{for(const d of r)p.addAllowedValue(d.data)});const p=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:u});p.on("change",()=>{const r=p.getValue().sort((d,m)=>d.toLowerCase().localeCompare(m.toLowerCase()));p.getValue().join(";")!==r.join(";")&&p.setValue(r),this.actionsToTake[t].examples=r});const{examples:l}=this.actionsToTake[t];for(const r of l)p.addAllowedValue(r);p.setValue(l);const f=new OO.ui.FieldLayout(p,{align:"inline",label:"Pages to categorize:"});f.$element.hide();const b=new _({placeholder:"Add categories here"});b.on("change",()=>{let r=b.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^Category:/,""),r.length>0&&b.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),b.on("showing-values",r=>{for(const d of r)w.addAllowedValue(d.data)});const w=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:b});w.on("change",()=>{const r=w.getValue().sort((d,m)=>d.toLowerCase().localeCompare(m.toLowerCase()));w.getValue().join(";")!==r.join(";")&&w.setValue(r),this.actionsToTake[t].parents=r});const{parents:S}=this.actionsToTake[t];for(const r of S)w.addAllowedValue(r);w.setValue(S);const x=new OO.ui.FieldLayout(w,{align:"inline",label:"Categories:"});x.$element.hide();const A=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing categories"],["empty","empty submissions"],["unlikely","categories that are unlikely to have enough pages"],["notcategory","page creation requests"],["notenglish","requests not in English"]].map(([r,d])=>({data:`autofill:${r}`,label:`Autofilled text for ${d}`}))});A.on("change",()=>{this.actionsToTake[t].denyReason=A.getValue()||"autofill:unlikely"}),A.setValue("autofill:unlikely"),A.getMenu().selectItemByData("autofill:unlikely");const L=new OO.ui.FieldLayout(A,{align:"inline",label:"Deny reason:"});L.$element.hide();const P=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([r,d])=>new OO.ui.MenuOptionWidget({data:d,label:r}))}});P.getMenu().on("choose",()=>{const r=P.getMenu().findSelectedItem();this.actionsToTake[t].closingReason={name:r.getLabel(),id:r.getData()},this.updateRequestColor(s,t)}),P.getMenu().selectItemByData("r"),this.actionsToTake[t].closingReason={name:"No response",id:"r"};const W=new OO.ui.FieldLayout(P,{align:"inline",label:"Closing reason:"});W.$element.hide();const y=new OO.ui.TextInputWidget;y.on("change",()=>{const r=y.getValue().trim();r?this.actionsToTake[t].comment=r:delete this.actionsToTake[t].comment});const T=new OO.ui.FieldLayout(y,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});T.$element.hide(),k.append(R.$element[0],f.$element[0],x.$element[0],L.$element[0],W.$element[0],T.$element[0]),s.append(k),this.$body.append(s),this.updateSize()}updateRequestColor(t,e){if(this.requestPageType==="redirect"){const s=Object.values(this.actionsToTake[e].requests),i=s.every(o=>o.action==="accept"||o.action==="deny"),a=s.find(o=>o.action==="close")?.closingReason?.id,c=s.every(o=>o.action==="close"&&o.closingReason?.id===a);let n="";if(i){const o=s.filter(h=>h.action==="accept").length,g=s.filter(h=>h.action==="deny").length;o>0&&g>0?n="#fff17e":o>0?n="#a0ffa0":n="#ffcece"}else c&&(a==="r"?n="#ffcece":a==="s"?n="#90c090":n="#b8b8b8");t.style.backgroundColor=n}else{const{action:s}=this.actionsToTake[e];let i="";s==="accept"?i="#a0ffa0":s==="deny"?i="#ffcece":s==="close"&&(this.actionsToTake[e].closingReason?.id==="r"?i="#ffcece":this.actionsToTake[e].closingReason?.id==="s"?i="#90c090":i="#b8b8b8"),t.style.backgroundColor=i}}async performActions(){const t=new OO.ui.WindowManager;document.body.append(t.$element[0]);const e=new N;t.addWindows([e]),e.open();const s={accepted:0,denied:0,"commented on":0,closed:0};let i=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();if(this.requestPageType==="redirect")if(this.actionsToTake.some(c=>Object.values(c.requests).some(n=>n.action!=="none"))){for(const{target:n,requests:o}of this.actionsToTake){const g=Object.values(o).some(l=>l.action==="accept"||l.action==="deny"),h=Object.values(o).every(l=>l.action==="accept"||l.action==="deny"),O=Object.values(o).find(l=>l.action==="close")?.closingReason?.id,v=Object.values(o).every(l=>l.action==="close"&&l.closingReason?.id===O),C=[],k=[],R=[],u=Object.keys(o).length;for(const[l,f]of Object.entries(o))switch(f.action){case"accept":{g&&!h?e.addLogEntry(`Not all requests to "${n}" were accepted or denied, the handling of "${l}" will be ignored.`,"warning"):(C.push(l),s.accepted++);break}case"deny":{g&&!h?e.addLogEntry(`Not all requests to "${n}" were accepted or denied, the handling of "${l}" is being ignored.`,"warning"):(k.push([l,f.denyReason]),s.denied++);break}case"comment":{f.comment?(R.push([l,f.comment]),s["commented on"]++):e.addLogEntry(`The request to create "${l}" \u2192 "${n}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{v?(f.comment&&R.push([l,f.comment]),s.closed++):e.addLogEntry(`Not all requests to "${n}" were closed with the same reason, the handling of "${l}" is being ignored.`,"warning");break}}let p={pageText:i,...Object.values(o)[0].originalText};if(R.length>0&&(p=this.modifySectionData(p,{append:this.mapComments(R,u===1,R.length===u)})),h){let l;if(C.length>0&&k.length>0){l="p";const f=`* {{subst:AfC redirect}} (${C.map(w=>`[[${w}]]`).join(", ")}) ~~~~`,b=this.mapDeniedReasons(k,!1,!1);for(const w of C)this.handleAcceptedRedirect(w,o[w],n);p=this.modifySectionData(p,{append:`${f}
${b}`})}else if(C.length>0){l="a";for(const f of C)this.handleAcceptedRedirect(f,o[f],n);p=this.modifySectionData(p,{append:`* {{subst:AfC redirect${C.length>1?"|all":""}}} ~~~~`})}else l="d",p=this.modifySectionData(p,{append:this.mapDeniedReasons(k,u===1,!0)});p=this.modifySectionData(p,{prepend:`{{AfC-c|${l}}}`,append:"{{AfC-c|b}}"})}else v&&(p=this.modifySectionData(p,{prepend:`{{AfC-c|${O}}}`,append:"{{AfC-c|b}}"}));i=p.pageText}if(this.beforeText+this.pageContent===i)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(s).filter(([,n])=>n>0).map(([n,o])=>`${n} ${o}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:i,summary:`Handling AfC redirect requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!");else if(this.actionsToTake.some(c=>c.action!=="none")){for(const n of this.actionsToTake){let o={pageText:i,...n.originalText};switch(n.action){case"accept":{o=this.modifySectionData(o,{prepend:"{{AfC-c|a}}",append:`* {{subst:AfC category}} ~~~~
{{AfC-c|b}}`}),this.handleAcceptedCategory(n),s.accepted++;break}case"deny":{o=this.modifySectionData(o,{prepend:"{{AfC-c|d}}",append:`* ${this.formatDeniedReason(n.denyReason)} ~~~~
{{AfC-c|b}}`}),s.denied++;break}case"comment":{n.comment?(o=this.modifySectionData(o,{append:`* {{AfC comment|1=${n.comment}}} ~~~~`}),s["commented on"]++):e.addLogEntry(`The request to create "${n.category}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{o=this.modifySectionData(o,{prepend:`{{AfC-c|${n.closingReason.id}}}`,append:(n.comment?`* {{AfC comment|1=${n.comment}}} ~~~~`:"")+`
{{AfC-c|b}`}),s.closed++;break}}i=o.pageText}if(this.beforeText+this.pageContent===i)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(s).filter(([,n])=>n>0).map(([n,o])=>`${n} ${o}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:i,summary:`Handling AfC category requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}formatDeniedReason(t){const e=t.startsWith("autofill:")?t.replace("autofill:",""):`decline|2=${t}`;return`{{subst:AfC ${this.requestPageType}|${e}}}`}mapDeniedReasons(t,e,s){if(e)return`* ${this.formatDeniedReason(t[0][1])} ~~~~`;const i={};for(const[c,n]of t)i[n]||(i[n]=[]),i[n].push(c);const a=Object.entries(i);return a.map(([c,n])=>`* ${this.formatDeniedReason(c)}${a.length>1||!s?` (${n.map(o=>`[[${o}]]`).join(", ")})`:""} ~~~~`).join(`
`)}mapComments(t,e,s){if(e)return`* {{AfC comment|1=${t[0][1]}}} ~~~~`;const i={};for(const[c,n]of t)i[n]||(i[n]=[]),i[n].push(c);const a=Object.entries(i);return a.map(([c,n])=>`* {{AfC comment|1=${c}}}${a.length>1||!s?` (${n.map(o=>`[[${o}]]`).join(", ")})`:""} ~~~~`).join(`
`)}modifySectionData(t,{prepend:e,append:s}){const{fullSectionText:i,sectionText:a}=t;return e&&(t.sectionText=e+`
`+t.sectionText),s&&(t.sectionText+=`
`+s),t.fullSectionText=t.fullSectionText.replace(a,t.sectionText),t.pageText=t.pageText.replace(i,t.fullSectionText),t}handleAcceptedRedirect(t,e,s){const i=e.redirectTemplates&&e.redirectTemplates.length>0?e.redirectTemplates.map(a=>{const c=this.templateEditorsInfo.find(o=>o.name===a);if(!c)return`{{${a}}}`;const n=c.parameters.map((o,g)=>{const h=o.editor.getValue().trim();return h?`|${o.name===(g+1).toString()?"":`${o.name}=`}${h}`:null}).filter(Boolean).join("");return`{{${a}${n}}}`}):null;this.editsCreationsToMake.push({type:"create",isRedirect:!0,title:t,text:`#REDIRECT [[${s}]]${i?`

{{Redirect category shell|
${i.join(`
`)}
}}`:""}`,summary:`Creating redirect to [[${s}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:mw.Title.newFromText(t).getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}handleAcceptedCategory(t){this.editsCreationsToMake.push({type:"create",isRedirect:!1,title:`Category:${t.category}`,text:t.parents.map(e=>`[[Category:${e}]]`).join(`
`),summary:`Creating category as requested at [[WP:AFC/C]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:`Category talk:${t.category}`,text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`},...t.examples.map(e=>({type:"edit",title:e,transform:({content:s})=>({text:`${s}
[[Category:${t.category}]]`,summary:`Adding page to [[:Category:${t.category}]] as requested at [[WP:AFC/C]]${this.scriptMessage}`})})))}async makeAllEditsCreations(t){for(const e of this.editsCreationsToMake){const s=e.type==="edit"?this.api.edit(e.title,e.transform):this.api.create(e.title,{summary:e.summary},e.text),i=document.createElement("a");i.target="_blank",i.href=mw.util.getUrl(e.title,"isRedirect"in e&&e.isRedirect?{redirect:"no"}:void 0),i.textContent=e.title,t.addLogEntry(`${e.type==="edit"?"Editing":"Creating"} ${i.outerHTML}...`),await s.catch(async(a,c)=>{a==="ratelimited"?(t.addLogEntry(`Rate limited. Waiting for 70 seconds... (resuming at ${new Date(Date.now()+7e4).toLocaleTimeString()})`,"warning"),await new Promise(n=>setTimeout(n,7e4)),t.addLogEntry("Continuing...","success"),await s.catch((n,o)=>{t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${i.outerHTML}: ${o?.error.info??"Unknown error"} (${n}).`,"error")})):t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${i.outerHTML}: ${c?.error.info??"Unknown error"} (${a}).`,"error")})}}}Object.assign(D.prototype,OO.ui.ProcessDialog.prototype)});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
