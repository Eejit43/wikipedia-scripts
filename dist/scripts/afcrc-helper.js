"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const E=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",L=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!E&&!L)return;const x=E?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${x} creation requests`,"afcrc-helper").addEventListener("click",P=>{P.preventDefault();const k=new OO.ui.WindowManager;document.body.append(k.$element[0]);const e=new f(x,mw.config.get("wgPageName"));k.addWindows([e]),e.open()});class C extends OO.ui.Dialog{constructor(){super({size:"medium"});this.initialize=()=>{OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container");const e=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]});return e.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,e.$element),this};this.getBodyHeight=()=>this.contentLayout.$element.outerHeight(!0);C.static.name="ShowActionsDialog",C.static.title="Actions"}addLogEntry(e){const n=document.createElement("div");n.textContent=e,this.logOutput.append(n)}}Object.assign(C.prototype,OO.ui.Dialog.prototype);class f extends OO.ui.ProcessDialog{constructor(e,n){super({size:"large"});this.api=new mw.Api;this.scriptMessage="[[User:Eejit43/scripts/afcrc-helper|afcrc-helper]]";this.parsedRequests=[];this.actionsToTake={};this.getSetupProcess=()=>(mw.util.addCSS(`
.afcrc-helper-request {
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}`),f.super.prototype.getSetupProcess.call(this).next(()=>this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle}).then(e=>{this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()})));this.getActionProcess=e=>{switch(e){case"cancel":return new OO.ui.Process(()=>{this.getManager().closeWindow(this)});case"show-actions":return new OO.ui.Process(()=>{this.performActions(!0)});case"save":return new OO.ui.Process(()=>{this.performActions(!1)});default:return f.super.prototype.getActionProcess.call(this,e)}};this.getTeardownProcess=()=>f.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});f.static.name="AfcrcHelperDialog",f.static.title="afcrc-helper",f.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"show-actions",label:"Show actions to take"},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=n,this.requestPageType=e}parseRequests(){this.beforeText=this.pageContent.match(/^(.*?)==/s)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==").replaceAll(new RegExp(`\\[https?:${mw.config.get("wgServer")}/(.*?)]`,"g"),"[[$1]]");const e=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(n=>n[0]);for(const n of e){if(/{{afc-c\|/i.test(n))continue;const r=n.match(/^==(.*?)==$/m)[1].trim();if(x==="redirect"){const s={},a=[...r.matchAll(/\[\[(.*?)]]/g)].map(i=>i[1].trim().replace(/^:/,"").replaceAll("_"," "));s.pages=a;const R=n.match(/Target of redirect: ?\[\[(.*?)]]/)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!R)continue;s.target=R,s.reason=n.match(/reason: ?(.*?)\*source(?: \(if applicable\))?:/is)[1].trim(),s.source=n.match(/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n)/is)[1].trim();const y=n.match(n.includes("<references />")?/<references \/>\n(.*)/:new RegExp(`(?:<references \\/>${s.source?`|${s.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))[1].trim();s.requester={type:y.includes("[[User:")?"user":"ip",name:y.match(/(?:Special:Contributions\/|User:)(.*?)\|/)[1].trim()},this.parsedRequests.push(s),this.actionsToTake[s.target]=Object.fromEntries(a.map(i=>[i,{originalText:n.replace(/^==.*?==$/m,"").trim(),action:"none"}]))}else{const s={}}}}loadInputElements(){if(this.requestPageType==="redirect")for(const e of this.parsedRequests){const n=document.createElement("details");n.classList.add("afcrc-helper-request");const h=document.createElement("summary");h.innerHTML=e.pages.map(o=>`<b>${o}</b>`).join(", ")+" \u2192 ";const r=document.createElement("a");r.target="_blank",r.href=mw.util.getUrl(e.target),r.textContent=e.target,h.append(r),n.append(h);const s=document.createElement("div");s.classList.add("afcrc-helper-request-info");const a=document.createElement("span");a.style.color="dimgray",a.textContent="None";const R=document.createElement("div"),y=document.createElement("b");y.textContent="Reason: ",R.append(y),e.reason?R.append(e.reason):R.append(a),s.append(R);const i=document.createElement("div"),u=document.createElement("b");u.textContent="Source: ",i.append(u),e.source?i.append(e.source):i.append(a),s.append(i);const $=document.createElement("div"),A=document.createElement("b");A.textContent="Requester: ",$.append(A);const q=document.createElement("a");q.target="_blank",q.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),q.textContent=e.requester.name,$.append(q),s.append($),n.append(s),n.append(document.createElement("hr"));const T=document.createElement("div");T.classList.add("afcrc-helper-request-responder");for(const o of e.pages){const w=document.createElement("div"),v=document.createElement("b");v.textContent=o+" \u2192 "+e.target,w.append(v);const c=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(l=>new OO.ui.RadioOptionWidget({data:l,label:l}))});c.selectItemByLabel("None"),c.on("choose",()=>{const l=c.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[e.target][o].action=l,["comment","close"].includes(l)){O.$element.show();const b=m.getValue().trim();b?this.actionsToTake[e.target][o].comment=b:delete this.actionsToTake[e.target][o].comment}else O.$element.hide(),delete this.actionsToTake[e.target][o].comment;if(l==="deny")d.$element.show(),this.actionsToTake[e.target][o].denyReason=t.getValue();else if(l==="close"){g.$element.show();const b=p.getMenu().findSelectedItem();this.actionsToTake[e.target][o].closingReason={name:b.getLabel(),id:b.getData()},delete this.actionsToTake[e.target][o].denyReason}else d.$element.hide(),g.$element.hide(),delete this.actionsToTake[e.target][o].denyReason,delete this.actionsToTake[e.target][o].closingReason});const t=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([l,b])=>({data:`autofill:${l}`,label:`Autofilled text for ${b}`}))});t.getMenu().on("choose",()=>{this.actionsToTake[e.target][o].denyReason=t.getValue()}),t.setValue("autofill:unlikely"),t.getMenu().selectItemByData("autofill:unlikely");const d=new OO.ui.FieldLayout(t,{align:"inline",label:"Deny reason"});d.$element.hide();const p=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([l,b])=>new OO.ui.MenuOptionWidget({data:b,label:l}))}});p.getMenu().on("choose",()=>{const l=p.getMenu().findSelectedItem();this.actionsToTake[e.target][o].closingReason={name:l.getLabel(),id:l.getData()}}),p.getMenu().selectItemByLabel("No response");const g=new OO.ui.FieldLayout(p,{align:"inline",label:"Closing reason"});g.$element.hide();const m=new OO.ui.TextInputWidget;m.on("change",()=>{const l=m.getValue().trim();l?this.actionsToTake[e.target][o].comment=l:delete this.actionsToTake[e.target][o].comment});const O=new OO.ui.FieldLayout(m,{classes:["afcrc-comment-input"],align:"inline",label:"Comment"});O.$element.hide(),w.append(c.$element[0],d.$element[0],g.$element[0],O.$element[0]),T.append(w)}n.append(T),this.$body.append(n)}else for(const e of this.parsedRequests){const n=document.createElement("details");n.classList.add("afcrc-helper-request");const h=document.createElement("summary");h.textContent=e.name,n.append(h),this.$body.append(n)}}performActions(e){const n=e?"will be":"has been",h=new OO.ui.WindowManager;document.body.append(h.$element[0]);const r=new C;h.addWindows([r]),r.open();const s={accepted:0,denied:0,commented:0,closed:0};let a=this.beforeText+this.pageContent;if(this.requestPageType==="redirect")if(Object.values(this.actionsToTake).some(y=>Object.values(y).some(i=>i.action!=="none"))){for(const[i,u]of Object.entries(this.actionsToTake)){const $=Object.values(u).some(t=>t.action==="accept"||t.action==="deny"),A=Object.values(u).every(t=>t.action==="accept"||t.action==="deny"),q=Object.values(u).find(t=>t.action==="close")?.closingReason?.id,T=Object.values(u).every(t=>t.action==="close"&&t.closingReason?.id===q),o=[],w=[],v=[];for(const[t,d]of Object.entries(u)){const p=`The request to create "${t}" \u2192 "${i}" ${n} `,g=d.comment?" and commented on":"";switch(d.action){case"accept":{$&&!A?r.addLogEntry(`Not all requests to "${i}" were accepted or denied, the handling of "${t}" will be ignored.`):(r.addLogEntry(p+`accepted${g}.`),o.push(t),s.accepted++);break}case"deny":{$&&!A?r.addLogEntry(`Not all requests to "${i}" were accepted or denied, the handling of "${t}" is being ignored.`):(r.addLogEntry(p+"denied."),w.push([t,d.denyReason||"decline"]),s.denied++);break}case"comment":{d.comment?(r.addLogEntry(p+"commented on."),v.push(`[${t} \u2192 ${i}] ${d.comment}`),s.commented++):r.addLogEntry(p+"marked to be commented on, but no comment was provided.");break}case"close":{T?(r.addLogEntry(p+`closed as ${d.closingReason.name.toLowerCase()}${g}.`),s.closed++):r.addLogEntry(`Not all requests to "${i}" were closed with the same reason, the handling of "${t}" is being ignored.`);break}}}let c=Object.values(u)[0].originalText;if(v.length>0&&(c+=`
`+v.map(t=>`* {{AfC comment|1=${t}}} ~~~~`).join(`
`),a=a.replace(Object.values(u)[0].originalText,c)),$){let t;const d=c;if(o.length>0&&w.length>0){t="p";const p=o.map(m=>`* {{subst:AfC redirect}} [${m}] ~~~~`),g=w.map(([m,O])=>`* {{subst:AfC redirect|${O.startsWith("autofill:")?O.replace("autofill:",""):`decline|1=${O}`}}} [${m}] ~~~~`);c+=`
`+p.join(`
`)+`
`+g.join(`
`),a=a.replace(d,c)}else if(o.length>0)t="a",c+=`
 * {{subst:AfC redirect${o.length>1?"|all":""}}} ~~~~`,a=a.replace(d,c);else{t="d";const p=w.map(([g,m])=>`* {{subst:AfC redirect|${m.startsWith("autofill:")?m.replace("autofill:",""):`decline|1=${m}`}}} [${g}] ~~~~`);c+=`
`+p.join(`
`),a=a.replace(d,c)}a=a.replace(c,`{{AfC-c|${t}}}
${c}
{{AfC-c|b}}`)}else T&&(a=a.replace(c,`{{AfC-c|${q}}}
${c}
{{AfC-c|b}}`))}if(this.beforeText+this.pageContent===a)return;const y=Object.entries(s).filter(([,i])=>i>0).map(([i,u])=>`${i} ${u}`).join(", ");this.api.edit(this.pageTitle,()=>({text:a,summary:`Handling AfC redirect requests (${y}) ${this.scriptMessage}`}))}else r.addLogEntry(`No requests ${e?"will be":"have been"} handled!`)}}Object.assign(f.prototype,OO.ui.ProcessDialog.prototype)});
//# sourceMappingURL=data:application/json;base64,
