// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const z=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",Y=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!z&&!Y)return;const F=z?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${F} creation requests`,"afcrc-helper").addEventListener("click",B=>{B.preventDefault();const t=new OO.ui.WindowManager;document.body.append(t.$element[0]);const e=new I(F,mw.config.get("wgPageName").replaceAll("_"," "));t.addWindows([e]),e.open(),e.load()});class N extends OO.ui.Dialog{contentLayout;logOutput;closeButton;constructor(){super({size:"large"}),N.static.name="ShowActionsDialog",N.static.title="Actions"}initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);addLogEntry(t,e="notice"){const s=new OO.ui.MessageWidget({type:e,inline:!0,label:new OO.ui.HtmlSnippet(t)});this.logOutput.append(s.$element[0]),this.updateSize(),this.closeButton.scrollElementIntoView()}showReload(){this.closeButton.$element.remove();const t=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});t.on("click",()=>window.location.reload()),this.contentLayout.$element.append(t.$element)}}Object.assign(N.prototype,OO.ui.Dialog.prototype);class _ extends OO.ui.TextInputWidget{api=new mw.Api;constructor(t){super(t),OO.ui.mixin.LookupElement.call(this,t)}getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const s=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:s?.getNamespaceId()??0,gapprefix:s?.getMainText()??t,generator:"allpages"}).catch(()=>null).then(r=>{if(r?.query?.pages){const i=r.query.pages.map(c=>({data:c.title,label:c.title}));this.emit("showing-values",i),e.resolve(i)}else e.resolve([])}),e.promise({abort(){}})};getLookupCacheDataFromResponse=t=>t??[];getLookupMenuOptionsFromData=t=>t.map(({data:e,label:s})=>new OO.ui.MenuOptionWidget({data:e,label:s}))}Object.assign(_.prototype,OO.ui.mixin.LookupElement.prototype);class Q extends OO.ui.TextInputWidget{api=new mw.Api;constructor(t){super(t),OO.ui.mixin.LookupElement.call(this,t)}getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const s=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:s?.getMainText()??t,generator:"allpages",prop:"categories"}).catch(()=>null).then(r=>{if(r?.query?.pages){const i=r.query.pages.filter(c=>!c.categories?.some(a=>a.title==="Category:Wikipedia soft redirected categories")).map(c=>{const a=c.title.split(":")[1];return{data:a,label:a}});this.emit("showing-values",i),e.resolve(i)}else e.resolve([])}),e.promise({abort(){}})};getLookupCacheDataFromResponse=t=>t??[];getLookupMenuOptionsFromData=t=>t.map(({data:e,label:s})=>new OO.ui.MenuOptionWidget({data:e,label:s}))}Object.assign(Q.prototype,OO.ui.mixin.LookupElement.prototype);class I extends OO.ui.ProcessDialog{api=new mw.Api;scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";requestPageType;pageTitle;redirectTemplates;beforeText;pageContent;parsedRequests=[];actionsToTake=[];editsCreationsToMake=[];constructor(t,e){super({size:"large"}),I.static.name="AfcrcHelperDialog",I.static.title="afcrc-helper",I.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=e,this.requestPageType=t,mw.util.addCSS(`
.afcrc-helper-request {
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-target-editor {
    font-family: monospace;
    min-width: 1ch;
    max-width: calc(100% - 4ch);
}

.afcrc-helper-external-link {
    text-decoration: none !important;
}

.afcrc-helper-external-link svg {
    display: inline-block;
    width: 1em;
    height: 1em;
    fill: currentColor;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout-header {
    width: max-content;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}

.afcrc-helper-template-parameters-container, .afcrc-helper-template-parameters-container details {
    background-color: #fff;
    border: 1px solid #a2a9b1;
    border-radius: 2px;
    margin-block: 10px;
    padding: 5px;
}

.afcrc-helper-template-parameters-container {
    margin-left: 8px;
}

.afcrc-helper-template-parameters-container summary {
    cursor: pointer;
    font-weight: bold;
}

.afcrc-helper-template-parameters-container details {
    background-color: #e2e2e2;
    margin-block: 5px;
}

#afcrc-helper-no-templates-message {
    padding: 5px;
}`)}getActionProcess=t=>t==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):t==="save"?new OO.ui.Process(()=>{this.performActions()}):I.super.prototype.getActionProcess.call(this,t);getTeardownProcess=()=>I.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});async load(){const t=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"});this.redirectTemplates=JSON.parse(t.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}");const e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle});this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=this.pageContent.match(/^(.*?)==/s)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==");const t=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(e=>e[0]);for(const e of t){if(/{{afc-c\|/i.test(e))continue;const r=e.match(/^==(.*?)==$/m)[1].trim();if(F==="redirect"){const i={},c=[...r.matchAll(/\[\[(.*?)]]/g)].map(u=>u[1]?.trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);if(c.length===0)continue;i.pages=c;const a=e.match(/Target of redirect: ?\[\[(.*?)]]/)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!a)continue;i.target=a,i.reason=e.match(/reason: ?(.*?)\*source(?: \(if applicable\))?:/is)?.[1].trim()??"",i.source=e.match(/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is)?.[1].trim()??"";const o=e.match(e.includes("<references />")?/<references \/>\n+(.*)/:new RegExp(`(?:<references \\/>${i.source?`|${i.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))?.[1].trim(),h=o?o.match(/(?:Special:Contributions\/|User(?: talk)?:)(.*?)\|/)?.[1].trim():null;i.requester=o&&h?{type:/\[\[User( talk)?:/.test(o)?"user":"ip",name:h}:null,this.parsedRequests.push(i),this.actionsToTake.push({target:i.target,requests:Object.fromEntries(c.map(u=>[u,{originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"}]))})}else{const i={},c=r.match(/:?Category:(.*?)(]]|$)/)?.[1].trim();if(!c)continue;i.category=c.replaceAll("_"," "),i.examples=[...e.match(/example pages which belong to this category:(.*?)parent category\/categories:/is)[1].matchAll(/\*\s*(?:\[\[)?(.*?)(\||]]|\s*?\n)/g)].map(y=>y[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[],i.parents=[...e.match(/parent category\/categories:(.*?)(\n\n|\n\[\[(special:contributions\/|user:))/is)[1].matchAll(/(?<!\|)#?:?Category:(.*?)(\||]]|\s*?\n)/g)].map(y=>y[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[];const a=e.indexOf("[[User:"),o=e.indexOf("[[User talk:"),h=e.indexOf("[[Special:Contributions/"),u=Math.min(...[a,o,h].filter(y=>y!==-1));i.requester=u===Number.POSITIVE_INFINITY?null:u===h?{type:"ip",name:e.match(/\[\[Special:Contributions\/(.*?)(\||]])/)[1].trim()}:{type:"user",name:e.match(/\[\[User(?: talk)?:(.*?)(\||]])/)[1].trim()},i.requester?.name||(i.requester=null),this.parsedRequests.push(i),this.actionsToTake.push({category:i.category,examples:i.examples,parents:i.parents,originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"})}}}loadInputElements(){if(this.parsedRequests.length>0){let t=0;const e=()=>{const r=Math.min(t+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${t+1}-${r}/${this.parsedRequests.length} requests)`);for(let i=t;i<r;i++)this.requestPageType==="redirect"?this.loadRedirectRequestElements(i):this.loadCategoryRequestElements(i);r<this.parsedRequests.length?(t=r,setTimeout(e,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};e()}else{const t=new OO.ui.MessageWidget({type:"notice",label:"No valid requests to handle!"}),e=new OO.ui.PanelLayout({padded:!0,expanded:!1});e.$element.append(t.$element),this.$body.append(e.$element),this.updateSize()}}loadRedirectRequestElements(t){const e=this.parsedRequests[t],s=document.createElement("details");s.classList.add("afcrc-helper-request"),s.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const r=document.createElement("summary");r.innerHTML=e.pages.map(l=>`<b>${l}</b>`).join(", ")+" \u2192 ",r.addEventListener("keyup",l=>{document.activeElement?.tagName==="INPUT"&&l.key===" "&&l.preventDefault()});const i=document.createElement("input");i.classList.add("afcrc-helper-target-editor"),i.style.width=`${e.target.length}ch`,i.value=e.target,i.addEventListener("input",()=>{i.value=i.value.replaceAll("_"," "),i.style.width=`${i.value.length}ch`,this.actionsToTake[t].target=i.value,c.href=mw.util.getUrl(i.value)}),r.append(i);const c=document.createElement("a");c.classList.add("afcrc-helper-external-link"),c.target="_blank",c.href=mw.util.getUrl(e.target),c.innerHTML=`
<svg viewbox="0 0 48 48">
    <path d="M36 24c-1.2 0-2 0.8-2 2v12c0 1.2-0.8 2-2 2h-22c-1.2
        0-2-0.8-2-2v-22c0-1.2 0.8-2 2-2h12c1.2 0 2-0.8 2-2s-0.8-2-2-2h-12c-3.4
        0-6 2.6-6 6v22c0 3.4 2.6 6 6 6h22c3.4 0 6-2.6
        6-6v-12c0-1.2-0.8-2-2-2z"></path>
    <path d="M43.8 5.2c-0.2-0.4-0.6-0.8-1-1-0.2-0.2-0.6-0.2-0.8-0.2h-12c-1.2
        0-2 0.8-2 2s0.8 2 2 2h7.2l-18.6 18.6c-0.8 0.8-0.8 2 0 2.8 0.4 0.4 0.8
        0.6 1.4 0.6s1-0.2 1.4-0.6l18.6-18.6v7.2c0 1.2 0.8 2 2 2s2-0.8
        2-2v-12c0-0.2 0-0.6-0.2-0.8z"></path>
</svg>`,r.append(c),s.append(r);const a=document.createElement("div");a.classList.add("afcrc-helper-request-info");const o=document.createElement("span");o.style.color="dimgray",o.textContent="None";const h=document.createElement("span");h.style.color="dimgray",h.textContent="Unknown";const u=document.createElement("div"),y=document.createElement("b");y.textContent="Reason: ",u.append(y),e.reason?u.append(e.reason):u.append(o.cloneNode(!0)),a.append(u);const k=document.createElement("div"),w=document.createElement("b");w.textContent="Source: ",k.append(w),e.source?k.append(e.source):k.append(o.cloneNode(!0)),a.append(k);const b=document.createElement("div"),T=document.createElement("b");if(T.textContent="Requester: ",b.append(T),e.requester){const l=document.createElement("a");l.target="_blank",l.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),l.textContent=e.requester.name,b.append(l)}else b.append(h.cloneNode(!0));a.append(b),s.append(a),s.append(document.createElement("hr"));const O=document.createElement("div");O.classList.add("afcrc-helper-request-responder");for(const l of e.pages){const d=document.createElement("div"),g=document.createElement("b");g.textContent=l,d.append(g);let C,m;const j=[],L=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(n=>new OO.ui.RadioOptionWidget({data:n,label:n}))});L.selectItemByLabel("None"),L.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const n=L.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].requests[l].action=n,!C||!m){const p=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.entries(this.redirectTemplates).map(([v,{redirect:D}])=>{if(!D)return{data:v,label:v};const E=new OO.ui.HtmlSnippet(`${v} <i>(redirect with possibilities)</i>`);return{data:v,label:E}})});p.getMenu().filterMode="substring",p.on("change",()=>{const v=p.getValue().sort((E,x)=>E.toLowerCase().localeCompare(x.toLowerCase()));p.getValue().join(";")!==v.join(";")&&p.setValue(v),this.actionsToTake[t].requests[l].redirectTemplates=v;for(const E of j)E.details.style.display="none";let D=0;for(const E of p.getValue()){const x=j.find(U=>U.name===E);x&&(x.details.style.display="block",D++)}f.textContent=`Template parameters (${D>0?`for ${D} template${D>1?"s":""}`:"none to show"})`,V.style.display=D>0?"none":"block"}),C=new OO.ui.FieldLayout(p,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates:"}),A.$element[0].before(C.$element[0]),m=document.createElement("details"),m.classList.add("afcrc-helper-template-parameters-container");const f=document.createElement("summary");f.textContent="Template parameters (none to show)",m.append(f);for(const[v,D]of Object.entries(this.redirectTemplates)){const E=Object.entries(D.parameters);if(E.length===0)continue;const x=document.createElement("details");x.style.display="none";const U=document.createElement("summary");U.textContent=v,x.append(U);const J={name:v,details:x,parameters:[]};for(const[H,R]of E){const G=new OO.ui.TextInputWidget({placeholder:R.default?.toString(),required:R.required}),K=new OO.ui.FieldLayout(G,{label:new OO.ui.HtmlSnippet(`${H}${!R.label||H.toLowerCase()===R.label?.toLowerCase()?"":` (${R.label})`}${R.description?` (${R.description})`:""} (type: ${R.type}) ${R.suggested?" (suggested)":""}${R.example?` (example: "${R.example}")`:""}`),align:"inline"});x.append(K.$element[0]),J.parameters.push({name:H,aliases:R.aliases,editor:G})}m.append(x),j.push(J)}this.actionsToTake[t].requests[l].redirectTemplateParameters=j;const V=document.createElement("div");V.id="afcrc-helper-no-templates-message",V.textContent="No templates with parameters to display!",m.append(V),A.$element[0].before(m)}if(["accept","comment","close"].includes(n)){A.$element.show();const p=W.getValue().trim();p?this.actionsToTake[t].requests[l].comment=p:delete this.actionsToTake[t].requests[l].comment}else A.$element.hide(),delete this.actionsToTake[t].requests[l].comment;switch(this.updateRequestColor(s,t),C.$element.hide(),m.style.display="none",P.$element.hide(),M.$element.hide(),n){case"accept":{C.$element.show(),m.style.display="block";break}case"deny":{P.$element.show();break}case"close":{M.$element.show();break}}});const q=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["notredirect","article creation requests"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([n,p])=>({data:`autofill:${n}`,label:`Autofilled text for ${p}`}))});q.on("change",()=>{this.actionsToTake[t].requests[l].denyReason=q.getValue()||"autofill:unlikely"}),q.setValue("autofill:unlikely"),q.getMenu().selectItemByData("autofill:unlikely");const P=new OO.ui.FieldLayout(q,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'});P.$element.hide();const S=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([n,p])=>new OO.ui.MenuOptionWidget({data:p,label:n}))}});S.getMenu().on("choose",()=>{const n=S.getMenu().findSelectedItem();this.actionsToTake[t].requests[l].closingReason={name:n.getLabel(),id:n.getData()},this.updateRequestColor(s,t)}),S.getMenu().selectItemByData("r"),this.actionsToTake[t].requests[l].closingReason={name:"No response",id:"r"};const M=new OO.ui.FieldLayout(S,{align:"inline",label:"Closing reason:"});M.$element.hide();const W=new OO.ui.TextInputWidget;W.on("change",()=>{const n=W.getValue().trim();n?this.actionsToTake[t].requests[l].comment=n:delete this.actionsToTake[t].requests[l].comment});const A=new OO.ui.FieldLayout(W,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});A.$element.hide(),d.append(L.$element[0],P.$element[0],M.$element[0],A.$element[0]),O.append(d)}s.append(O),this.$body.append(s),this.updateSize()}loadCategoryRequestElements(t){const e=this.parsedRequests[t],s=document.createElement("details");s.classList.add("afcrc-helper-request"),s.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const r=document.createElement("summary");r.innerHTML=`<b>Category:${e.category}</b>`,s.append(r);const i=document.createElement("div");i.classList.add("afcrc-helper-request-info");const c=document.createElement("span");c.style.color="dimgray",c.textContent="None";const a=document.createElement("span");a.style.color="dimgray",a.textContent="Unknown";const o=document.createElement("div"),h=document.createElement("b");if(h.textContent="Examples: ",o.append(h),e.examples.length>0)for(const[n,p]of e.examples.entries()){const f=document.createElement("a");f.target="_blank",f.href=mw.util.getUrl(p),f.textContent=p,o.append(f),n!==e.examples.length-1&&o.append(", ")}else o.append(c.cloneNode(!0));i.append(o);const u=document.createElement("div"),y=document.createElement("b");if(y.textContent="Parents: ",u.append(y),e.parents.length>0)for(const[n,p]of e.parents.entries()){const f=document.createElement("a");f.target="_blank",f.href=mw.util.getUrl(`Category:${p}`),f.textContent=p,u.append(f),n!==e.parents.length-1&&u.append(", ")}else u.append(c.cloneNode(!0));i.append(u);const k=document.createElement("div"),w=document.createElement("b");if(w.textContent="Requester: ",k.append(w),e.requester){const n=document.createElement("a");n.target="_blank",n.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),n.textContent=e.requester.name,k.append(n)}else k.append(a.cloneNode(!0));i.append(k),s.append(i),s.append(document.createElement("hr"));const b=document.createElement("div");b.classList.add("afcrc-helper-request-responder");const T=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(n=>new OO.ui.RadioOptionWidget({data:n,label:n}))});T.selectItemByLabel("None"),T.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const n=T.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].action=n,["comment","close"].includes(n)){A.$element.show();const p=W.getValue().trim();p?this.actionsToTake[t].comment=p:delete this.actionsToTake[t].comment}else A.$element.hide(),delete this.actionsToTake[t].comment;switch(this.updateRequestColor(s,t),g.$element.hide(),L.$element.hide(),P.$element.hide(),M.$element.hide(),n){case"accept":{g.$element.show(),L.$element.show();break}case"deny":{P.$element.show();break}case"close":{M.$element.show();break}}});const O=new _({placeholder:"Add pages here"});O.on("change",()=>{let n=O.getValue();n=n.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),n=n.replace(/^:/,""),n.length>0&&O.setValue(n[0].toUpperCase()+n.slice(1).replaceAll("_"," "))}),O.on("showing-values",n=>{for(const p of n)l.addAllowedValue(p.data)});const l=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:O});l.on("change",()=>{const n=l.getValue().sort((p,f)=>p.toLowerCase().localeCompare(f.toLowerCase()));l.getValue().join(";")!==n.join(";")&&l.setValue(n),this.actionsToTake[t].examples=n});const{examples:d}=this.actionsToTake[t];for(const n of d)l.addAllowedValue(n);l.setValue(d);const g=new OO.ui.FieldLayout(l,{align:"inline",label:"Pages to categorize:"});g.$element.hide();const C=new Q({placeholder:"Add categories here"});C.on("change",()=>{let n=C.getValue();n=n.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),n=n.replace(/^Category:/,""),n.length>0&&C.setValue(n[0].toUpperCase()+n.slice(1).replaceAll("_"," "))}),C.on("showing-values",n=>{for(const p of n)m.addAllowedValue(p.data)});const m=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:C});m.on("change",()=>{const n=m.getValue().sort((p,f)=>p.toLowerCase().localeCompare(f.toLowerCase()));m.getValue().join(";")!==n.join(";")&&m.setValue(n),this.actionsToTake[t].parents=n});const{parents:j}=this.actionsToTake[t];for(const n of j)m.addAllowedValue(n);m.setValue(j);const L=new OO.ui.FieldLayout(m,{align:"inline",label:"Categories:"});L.$element.hide();const q=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing categories"],["empty","empty submissions"],["unlikely","categories that are unlikely to have enough pages"],["notcategory","page creation requests"],["notenglish","requests not in English"]].map(([n,p])=>({data:`autofill:${n}`,label:`Autofilled text for ${p}`}))});q.on("change",()=>{this.actionsToTake[t].denyReason=q.getValue()||"autofill:unlikely"}),q.setValue("autofill:unlikely"),q.getMenu().selectItemByData("autofill:unlikely");const P=new OO.ui.FieldLayout(q,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'});P.$element.hide();const S=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([n,p])=>new OO.ui.MenuOptionWidget({data:p,label:n}))}});S.getMenu().on("choose",()=>{const n=S.getMenu().findSelectedItem();this.actionsToTake[t].closingReason={name:n.getLabel(),id:n.getData()},this.updateRequestColor(s,t)}),S.getMenu().selectItemByData("r"),this.actionsToTake[t].closingReason={name:"No response",id:"r"};const M=new OO.ui.FieldLayout(S,{align:"inline",label:"Closing reason:"});M.$element.hide();const W=new OO.ui.TextInputWidget;W.on("change",()=>{const n=W.getValue().trim();n?this.actionsToTake[t].comment=n:delete this.actionsToTake[t].comment});const A=new OO.ui.FieldLayout(W,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});A.$element.hide(),b.append(T.$element[0],g.$element[0],L.$element[0],P.$element[0],M.$element[0],A.$element[0]),s.append(b),this.$body.append(s),this.updateSize()}updateRequestColor(t,e){if(this.requestPageType==="redirect"){const s=Object.values(this.actionsToTake[e].requests),r=s.every(o=>o.action==="accept"||o.action==="deny"),i=s.find(o=>o.action==="close")?.closingReason?.id,c=s.every(o=>o.action==="close"&&o.closingReason?.id===i);let a="";if(r){const o=s.filter(u=>u.action==="accept").length,h=s.filter(u=>u.action==="deny").length;o>0&&h>0?a="#fff17e":o>0?a="#a0ffa0":a="#ffcece"}else c&&(i==="r"?a="#ffcece":i==="s"?a="#90c090":a="#b8b8b8");t.style.backgroundColor=a}else{const{action:s}=this.actionsToTake[e];let r="";s==="accept"?r="#a0ffa0":s==="deny"?r="#ffcece":s==="close"&&(this.actionsToTake[e].closingReason?.id==="r"?r="#ffcece":this.actionsToTake[e].closingReason?.id==="s"?r="#90c090":r="#b8b8b8"),t.style.backgroundColor=r}}async performActions(){const t=new OO.ui.WindowManager;document.body.append(t.$element[0]);const e=new N;t.addWindows([e]),e.open();const s={accepted:0,denied:0,"commented on":0,closed:0};let r=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();if(this.requestPageType==="redirect")if(this.actionsToTake.some(c=>Object.values(c.requests).some(a=>a.action!=="none"))){for(const{target:a,requests:o}of this.actionsToTake){const h=Object.values(o).some(d=>d.action==="accept"||d.action==="deny"),u=Object.values(o).every(d=>d.action==="accept"||d.action==="deny"),y=Object.values(o).find(d=>d.action==="close")?.closingReason?.id,k=Object.values(o).every(d=>d.action==="close"&&d.closingReason?.id===y),w=[],b=[],T=[],O=Object.keys(o).length;for(const[d,g]of Object.entries(o))switch(g.action){case"accept":{h&&!u?e.addLogEntry(`Not all requests to "${a}" were accepted or denied, the handling of "${d}" will be ignored.`,"warning"):(w.push(d),g.comment&&T.push([d,g.comment]),s.accepted++);break}case"deny":{h&&!u?e.addLogEntry(`Not all requests to "${a}" were accepted or denied, the handling of "${d}" is being ignored.`,"warning"):(b.push([d,g.denyReason]),s.denied++);break}case"comment":{g.comment?(T.push([d,g.comment]),s["commented on"]++):e.addLogEntry(`The request to create "${d}" \u2192 "${a}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{k?(g.comment&&T.push([d,g.comment]),s.closed++):e.addLogEntry(`Not all requests to "${a}" were closed with the same reason, the handling of "${d}" is being ignored.`,"warning");break}}let l={pageText:r,...Object.values(o)[0].originalText};if(T.length>0&&(l=this.modifySectionData(l,{append:this.mapComments(T,O===1,T.length===O)})),u){let d;if(w.length>0&&b.length>0){d="p";const g=`* {{subst:AfC redirect}} (${w.map(m=>`[[${m}]]`).join(", ")}) ~~~~`,C=this.mapDeniedReasons(b,!1,!1);for(const m of w)this.handleAcceptedRedirect(m,o[m],a);l=this.modifySectionData(l,{append:`${g}
${C}`})}else if(w.length>0){d="a";for(const g of w)this.handleAcceptedRedirect(g,o[g],a);l=this.modifySectionData(l,{append:`* {{subst:AfC redirect${w.length>1?"|all":""}}} ~~~~`})}else d="d",l=this.modifySectionData(l,{append:this.mapDeniedReasons(b,O===1,!0)});l=this.modifySectionData(l,{prepend:`{{AfC-c|${d}}}`,append:"{{AfC-c|b}}"})}else k&&(l=this.modifySectionData(l,{prepend:`{{AfC-c|${y}}}`,append:"{{AfC-c|b}}"}));r=l.pageText}if(this.beforeText+this.pageContent===r)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(s).filter(([,a])=>a>0).map(([a,o])=>`${a} ${o}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:r,summary:`Handling AfC redirect requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!");else if(this.actionsToTake.some(c=>c.action!=="none")){for(const a of this.actionsToTake){let o={pageText:r,...a.originalText};switch(a.action){case"accept":{o=this.modifySectionData(o,{prepend:"{{AfC-c|a}}",append:`* {{subst:AfC category}} ~~~~
{{AfC-c|b}}`}),this.handleAcceptedCategory(a),s.accepted++;break}case"deny":{o=this.modifySectionData(o,{prepend:"{{AfC-c|d}}",append:`* ${this.formatDeniedReason(a.denyReason)} ~~~~
{{AfC-c|b}}`}),s.denied++;break}case"comment":{a.comment?(o=this.modifySectionData(o,{append:`* {{AfC comment|1=${a.comment}}} ~~~~`}),s["commented on"]++):e.addLogEntry(`The request to create "${a.category}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{o=this.modifySectionData(o,{prepend:`{{AfC-c|${a.closingReason.id}}}`,append:(a.comment?`* {{AfC comment|1=${a.comment}}} ~~~~`:"")+`
{{AfC-c|b}`}),s.closed++;break}}r=o.pageText}if(this.beforeText+this.pageContent===r)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(s).filter(([,a])=>a>0).map(([a,o])=>`${a} ${o}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:r,summary:`Handling AfC category requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}formatDeniedReason(t){const e=t.startsWith("autofill:")?t.match(/autofill:(\w+)/)[1]:`decline|2=${t}`,s=t.includes(",")?" "+t.slice(t.indexOf(",")+1).trim():"";return`{{subst:AfC ${this.requestPageType}|${e}}}${s}`}mapDeniedReasons(t,e,s){if(e)return`* ${this.formatDeniedReason(t[0][1])} ~~~~`;const r={};for(const[c,a]of t)r[a]||(r[a]=[]),r[a].push(c);const i=Object.entries(r);return i.map(([c,a])=>`* ${this.formatDeniedReason(c)}${i.length>1||!s?` (${a.map(o=>`[[${o}]]`).join(", ")})`:""} ~~~~`).join(`
`)}mapComments(t,e,s){if(e)return`* {{AfC comment|1=${t[0][1]}}} ~~~~`;const r={};for(const[c,a]of t)r[a]||(r[a]=[]),r[a].push(c);const i=Object.entries(r);return i.map(([c,a])=>`* {{AfC comment|1=${c}}}${i.length>1||!s?` (${a.map(o=>`[[${o}]]`).join(", ")})`:""} ~~~~`).join(`
`)}modifySectionData(t,{prepend:e,append:s}){const{fullSectionText:r,sectionText:i}=t;return e&&(t.sectionText=e+`
`+t.sectionText),s&&(t.sectionText+=`
`+s),t.fullSectionText=t.fullSectionText.replace(i,t.sectionText),t.pageText=t.pageText.replace(r,t.fullSectionText),t}handleAcceptedRedirect(t,e,s){const r=e.redirectTemplates&&e.redirectTemplates.length>0?e.redirectTemplates.map(i=>{const c=e.redirectTemplateParameters?.find(o=>o.name===i);if(!c)return`{{${i}}}`;const a=c.parameters.map((o,h)=>{const u=o.editor.getValue().trim();return u?`|${o.name===(h+1).toString()?"":`${o.name}=`}${u}`:null}).filter(Boolean).join("");return`{{${i}${a}}}`}):null;this.editsCreationsToMake.push({type:"create",isRedirect:!0,title:t,text:`#REDIRECT [[${s}]]${r?`

{{Redirect category shell|
${r.join(`
`)}
}}`:""}`,summary:`Creating redirect to [[${s}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:mw.Title.newFromText(t).getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}handleAcceptedCategory(t){this.editsCreationsToMake.push({type:"create",isRedirect:!1,title:`Category:${t.category}`,text:t.parents.map(e=>`[[Category:${e}]]`).join(`
`),summary:`Creating category as requested at [[WP:AFC/C]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:`Category talk:${t.category}`,text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`},...t.examples.map(e=>({type:"edit",title:e,transform:({content:s})=>({text:`${s}
[[Category:${t.category}]]`,summary:`Adding page to [[:Category:${t.category}]] as requested at [[WP:AFC/C]]${this.scriptMessage}`})})))}async makeAllEditsCreations(t){for(const e of this.editsCreationsToMake){const s=e.type==="edit"?this.api.edit(e.title,e.transform):this.api.create(e.title,{summary:e.summary},e.text),r=document.createElement("a");r.target="_blank",r.href=mw.util.getUrl(e.title,"isRedirect"in e&&e.isRedirect?{redirect:"no"}:void 0),r.textContent=e.title,t.addLogEntry(`${e.type==="edit"?"Editing":"Creating"} ${r.outerHTML}...`),await s.catch(async(i,c)=>{i==="ratelimited"?(t.addLogEntry(`Rate limited. Waiting for 70 seconds... (resuming at ${new Date(Date.now()+7e4).toLocaleTimeString()})`,"warning"),await new Promise(a=>setTimeout(a,7e4)),t.addLogEntry("Continuing...","success"),await s.catch((a,o)=>{t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${r.outerHTML}: ${o?.error.info??"Unknown error"} (${a}).`,"error")})):t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${r.outerHTML}: ${c?.error.info??"Unknown error"} (${i}).`,"error")})}}}Object.assign(I.prototype,OO.ui.ProcessDialog.prototype)});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
