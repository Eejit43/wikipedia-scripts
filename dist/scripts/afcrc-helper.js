// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const M=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",S=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!M&&!S)return;const x=M?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${x} creation requests`,"afcrc-helper").addEventListener("click",j=>{j.preventDefault();const W=new OO.ui.WindowManager;document.body.append(W.$element[0]);const t=new E(x,mw.config.get("wgPageName"));W.addWindows([t]),t.open(),t.load()});class L extends OO.ui.Dialog{constructor(){super({size:"large"});this.initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);L.static.name="ShowActionsDialog",L.static.title="Actions"}addLogEntry(t,e="notice"){const n=new OO.ui.MessageWidget({type:e,inline:!0,label:t});this.logOutput.append(n.$element[0]),this.updateSize(),this.closeButton.scrollElementIntoView()}showReload(){this.closeButton.$element.remove();const t=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});t.on("click",()=>window.location.reload()),this.contentLayout.$element.append(t.$element)}}Object.assign(L.prototype,OO.ui.Dialog.prototype);class D extends OO.ui.TextInputWidget{constructor(t){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const n=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:n?.getMainText()??t,generator:"allpages",prop:"categories"}).catch(()=>null).then(a=>{if(a?.query?.pages){const o=a.query.pages.filter(c=>!(c.categories&&c.categories.some(s=>s.title==="Category:Wikipedia soft redirected categories"))).map(c=>{const s=c.title.split(":")[1];return{data:s,label:s}});this.emit("showing-values",o),e.resolve(o)}else e.resolve([])}),e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:n})=>new OO.ui.MenuOptionWidget({data:e,label:n}));OO.ui.mixin.LookupElement.call(this,t)}}Object.assign(D.prototype,OO.ui.mixin.LookupElement.prototype);class E extends OO.ui.ProcessDialog{constructor(t,e){super({size:"large"});this.api=new mw.Api;this.scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";this.parsedRequests=[];this.actionsToTake=[];this.editsCreationsToMake=[];this.getActionProcess=t=>t==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):t==="save"?new OO.ui.Process(()=>{this.performActions()}):E.super.prototype.getActionProcess.call(this,t);this.getTeardownProcess=()=>E.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});E.static.name="AfcrcHelperDialog",E.static.title="afcrc-helper",E.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=e,this.requestPageType=t,mw.util.addCSS(`
.afcrc-helper-request {
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}`)}async load(){const t=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"});this.redirectTemplateItems=Object.keys(JSON.parse(t.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")).map(n=>({data:n,label:n}));const e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle});this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=this.pageContent.match(/^(.*?)==/s)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==").replaceAll(new RegExp(`\\[https?:${mw.config.get("wgServer")}/(.*?)]`,"g"),"[[$1]]");const t=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(e=>e[0]);for(const e of t){if(/{{afc-c\|/i.test(e))continue;const a=e.match(/^==(.*?)==$/m)[1].trim();if(x==="redirect"){const o={},c=[...a.matchAll(/\[\[(.*?)]]/g)].map(y=>y[1].trim().replace(/^:/,"").replaceAll("_"," "));o.pages=c;const s=e.match(/Target of redirect: ?\[\[(.*?)]]/)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!s)continue;o.target=s,o.reason=e.match(/reason: ?(.*?)\*source(?: \(if applicable\))?:/is)[1].trim(),o.source=e.match(/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is)[1].trim();const r=e.match(e.includes("<references />")?/<references \/>\n(.*)/:new RegExp(`(?:<references \\/>${o.source?`|${o.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))[1].trim();o.requester={type:r.includes("[[User:")?"user":"ip",name:r.match(/(?:Special:Contributions\/|User:)(.*?)\|/)[1].trim()},this.parsedRequests.push(o),this.actionsToTake.push({target:o.target,requests:Object.fromEntries(c.map(y=>[y,{originalText:e.replace(/^==.*?==$/m,"").trim(),action:"none"}]))})}else{const o={};o.category=a.match(/\[\[:Category:(.*?)]]/)[1].trim(),o.examples=[...e.match(/example pages which belong to this category:(.*?)parent category\/categories:/is)[1].matchAll(/\[\[(.*?)]]/g)].map(s=>s[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[],o.parents=[...e.match(/parent category\/categories:(.*?)\n\n/is)[1].matchAll(/\[\[:Category:(.*?)]]/g)].map(s=>s[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[];const c=e.match(/\[\[User:(.*?)\|/);o.requester={type:c?"user":"ip",name:c?c[1].trim():e.match(/Special:Contributions\/(.*?)\|/)[1].trim()},this.parsedRequests.push(o),this.actionsToTake.push({category:o.category,parents:o.parents,originalText:e.replace(/^==.*?==$/m,"").trim(),action:"none"})}}}loadInputElements(){if(this.parsedRequests.length>0){let t=0;const e=()=>{const a=Math.min(t+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${t+1}-${a}/${this.parsedRequests.length} requests)`);for(let o=t;o<a;o++)this.requestPageType==="redirect"?this.loadRedirectRequestElements(o):this.loadCategoryRequestElements(o);a<this.parsedRequests.length?(t=a,setTimeout(e,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};e()}else{const t=new OO.ui.MessageWidget({type:"notice",label:"No requests to handle!"}),e=new OO.ui.PanelLayout({padded:!0,expanded:!1});e.$element.append(t.$element),this.$body.append(e.$element),this.updateSize()}}loadRedirectRequestElements(t){const e=this.parsedRequests[t],n=document.createElement("details");n.classList.add("afcrc-helper-request"),n.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const a=document.createElement("summary");a.innerHTML=e.pages.map(p=>`<b>${p}</b>`).join(", ")+" \u2192 ";const o=document.createElement("a");o.target="_blank",o.href=mw.util.getUrl(e.target),o.textContent=e.target,a.append(o),n.append(a);const c=document.createElement("div");c.classList.add("afcrc-helper-request-info");const s=document.createElement("span");s.style.color="dimgray",s.textContent="None";const r=document.createElement("div"),y=document.createElement("b");y.textContent="Reason: ",r.append(y),e.reason?r.append(e.reason):r.append(s.cloneNode(!0)),c.append(r);const T=document.createElement("div"),k=document.createElement("b");k.textContent="Source: ",T.append(k),e.source?T.append(e.source):T.append(s.cloneNode(!0)),c.append(T);const q=document.createElement("div"),b=document.createElement("b");b.textContent="Requester: ",q.append(b);const w=document.createElement("a");w.target="_blank",w.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),w.textContent=e.requester.name,q.append(w),c.append(q),n.append(c),n.append(document.createElement("hr"));const R=document.createElement("div");R.classList.add("afcrc-helper-request-responder");for(const p of e.pages){const d=document.createElement("div"),l=document.createElement("b");l.textContent=p+" \u2192 "+e.target,d.append(l);const h=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(i=>new OO.ui.RadioOptionWidget({data:i,label:i}))});h.selectItemByLabel("None"),h.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const i=h.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].requests[p].action=i,["comment","close"].includes(i)){v.$element.show();const g=A.getValue().trim();g?this.actionsToTake[t].requests[p].comment=g:delete this.actionsToTake[t].requests[p].comment}else v.$element.hide(),delete this.actionsToTake[t].requests[p].comment;this.updateRequestColor(n,t);const u=d.querySelector(".afcrc-helper-tag-select-layout");switch(u&&u.remove(),C.$element.hide(),O.$element.hide(),i){case"accept":{const g=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:this.redirectTemplateItems});g.getMenu().filterMode="substring",g.on("change",()=>{const P=g.getValue().sort((N,V)=>N.toLowerCase().localeCompare(V.toLowerCase()));g.getValue().join(";")!==P.join(";")&&g.setValue(P),this.actionsToTake[t].requests[p].redirectTemplates=P}),g.setValue(this.actionsToTake[t].requests[p].redirectTemplates??[]);const I=new OO.ui.FieldLayout(g,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates"});d.append(I.$element[0]),this.actionsToTake[t].requests[p].redirectTemplates=g.getValue();break}case"deny":{C.$element.show(),this.actionsToTake[t].requests[p].denyReason=f.getValue();break}case"close":{O.$element.show();const g=m.getMenu().findSelectedItem();this.actionsToTake[t].requests[p].closingReason={name:g.getLabel(),id:g.getData()};break}}});const f=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([i,u])=>({data:`autofill:${i}`,label:`Autofilled text for ${u}`}))});f.on("change",()=>{this.actionsToTake[t].requests[p].denyReason=f.getValue()||"autofill:unlikely"}),f.setValue("autofill:unlikely"),f.getMenu().selectItemByData("autofill:unlikely");const C=new OO.ui.FieldLayout(f,{align:"inline",label:"Deny reason"});C.$element.hide();const m=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([i,u])=>new OO.ui.MenuOptionWidget({data:u,label:i}))}});m.getMenu().on("choose",()=>{const i=m.getMenu().findSelectedItem();this.actionsToTake[t].requests[p].closingReason={name:i.getLabel(),id:i.getData()},this.updateRequestColor(n,t)}),m.getMenu().selectItemByData("r"),this.actionsToTake[t].requests[p].closingReason={name:"No response",id:"r"};const O=new OO.ui.FieldLayout(m,{align:"inline",label:"Closing reason"});O.$element.hide();const A=new OO.ui.TextInputWidget;A.on("change",()=>{const i=A.getValue().trim();i?this.actionsToTake[t].requests[p].comment=i:delete this.actionsToTake[t].requests[p].comment});const v=new OO.ui.FieldLayout(A,{classes:["afcrc-comment-input"],align:"inline",label:"Comment"});v.$element.hide(),d.append(h.$element[0],C.$element[0],O.$element[0],v.$element[0]),R.append(d)}n.append(R),this.$body.append(n),this.updateSize()}loadCategoryRequestElements(t){const e=this.parsedRequests[t],n=document.createElement("details");n.classList.add("afcrc-helper-request"),n.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const a=document.createElement("summary");a.innerHTML=`<b>Category:${e.category}</b>`,n.append(a);const o=document.createElement("div");o.classList.add("afcrc-helper-request-info");const c=document.createElement("span");c.style.color="dimgray",c.textContent="None";const s=document.createElement("div"),r=document.createElement("b");if(r.textContent="Examples: ",s.append(r),e.examples.length>0)for(const[i,u]of e.examples.entries()){const g=document.createElement("a");g.target="_blank",g.href=mw.util.getUrl(u),g.textContent=u,s.append(g),i!==e.examples.length-1&&s.append(", ")}else s.append(c.cloneNode(!0));o.append(s);const y=document.createElement("div"),T=document.createElement("b");if(T.textContent="Parents: ",y.append(T),e.parents.length>0)for(const[i,u]of e.parents.entries()){const g=document.createElement("a");g.target="_blank",g.href=mw.util.getUrl(`Category:${u}`),g.textContent=u,y.append(g),i!==e.parents.length-1&&y.append(", ")}else y.append(c.cloneNode(!0));o.append(y);const k=document.createElement("div"),q=document.createElement("b");q.textContent="Requester: ",k.append(q);const b=document.createElement("a");b.target="_blank",b.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),b.textContent=e.requester.name,k.append(b),o.append(k),n.append(o),n.append(document.createElement("hr"));const w=document.createElement("div");w.classList.add("afcrc-helper-request-responder");const R=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(i=>new OO.ui.RadioOptionWidget({data:i,label:i}))});R.selectItemByLabel("None"),R.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const i=R.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].action=i,["comment","close"].includes(i)){v.$element.show();const u=A.getValue().trim();u?this.actionsToTake[t].comment=u:delete this.actionsToTake[t].comment}else v.$element.hide(),delete this.actionsToTake[t].comment;switch(this.updateRequestColor(n,t),h.$element.hide(),C.$element.hide(),O.$element.hide(),i){case"accept":{h.$element.show();break}case"deny":{C.$element.show(),this.actionsToTake[t].denyReason=f.getValue();break}case"close":{O.$element.show();const u=m.getMenu().findSelectedItem();this.actionsToTake[t].closingReason={name:u.getLabel(),id:u.getData()};break}}});const p=new D({placeholder:"Add categories here"});p.on("change",()=>{let i=p.getValue();i=i.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),i=i.replace(/^Category:/,""),i.length>0&&p.setValue(i[0].toUpperCase()+i.slice(1).replaceAll("_"," "))}),p.on("showing-values",i=>{for(const u of i)d.addAllowedValue(u.data)});const d=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:p});d.on("change",()=>{const i=d.getValue().sort((u,g)=>u.toLowerCase().localeCompare(g.toLowerCase()));d.getValue().join(";")!==i.join(";")&&d.setValue(i),this.actionsToTake[t].parents=i});const{parents:l}=this.actionsToTake[t];for(const i of l)d.addAllowedValue(i);d.setValue(l);const h=new OO.ui.FieldLayout(d,{align:"inline",label:"Categories"});h.$element.hide();const f=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing categories"],["empty","empty submissions"],["unlikely","categories that are unlikely to have enough pages"],["notcategory","page creation requests"],["notenglish","requests not in English"]].map(([i,u])=>({data:`autofill:${i}`,label:`Autofilled text for ${u}`}))});f.on("change",()=>{this.actionsToTake[t].denyReason=f.getValue()||"autofill:unlikely"}),f.setValue("autofill:unlikely"),f.getMenu().selectItemByData("autofill:unlikely");const C=new OO.ui.FieldLayout(f,{align:"inline",label:"Deny reason"});C.$element.hide();const m=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([i,u])=>new OO.ui.MenuOptionWidget({data:u,label:i}))}});m.getMenu().on("choose",()=>{const i=m.getMenu().findSelectedItem();this.actionsToTake[t].closingReason={name:i.getLabel(),id:i.getData()},this.updateRequestColor(n,t)}),m.getMenu().selectItemByData("r"),this.actionsToTake[t].closingReason={name:"No response",id:"r"};const O=new OO.ui.FieldLayout(m,{align:"inline",label:"Closing reason"});O.$element.hide();const A=new OO.ui.TextInputWidget;A.on("change",()=>{const i=A.getValue().trim();i?this.actionsToTake[t].comment=i:delete this.actionsToTake[t].comment});const v=new OO.ui.FieldLayout(A,{classes:["afcrc-comment-input"],align:"inline",label:"Comment"});v.$element.hide(),w.append(R.$element[0],h.$element[0],C.$element[0],O.$element[0],v.$element[0]),n.append(w),this.$body.append(n),this.updateSize()}updateRequestColor(t,e){if(this.requestPageType==="redirect"){const n=Object.values(this.actionsToTake[e].requests),a=n.every(r=>r.action==="accept"||r.action==="deny"),o=n.find(r=>r.action==="close")?.closingReason?.id,c=n.every(r=>r.action==="close"&&r.closingReason?.id===o);let s="";if(a){const r=n.filter(T=>T.action==="accept").length,y=n.filter(T=>T.action==="deny").length;r>0&&y>0?s="#fff17e":r>0?s="#a0ffa0":s="#ffcece"}else c&&(o==="r"?s="#ffcece":o==="s"?s="#90c090":s="#b8b8b8");t.style.backgroundColor=s}else{const{action:n}=this.actionsToTake[e];let a="";n==="accept"?a="#a0ffa0":n==="deny"?a="#ffcece":n==="close"&&(this.actionsToTake[e].closingReason?.id==="r"?a="#ffcece":this.actionsToTake[e].closingReason?.id==="s"?a="#90c090":a="#b8b8b8"),t.style.backgroundColor=a}}async performActions(){const t=new OO.ui.WindowManager;document.body.append(t.$element[0]);const e=new L;t.addWindows([e]),e.open();const n={accepted:0,denied:0,commented:0,closed:0};let a=this.beforeText+this.pageContent;if(this.requestPageType==="redirect")if(this.actionsToTake.some(c=>Object.values(c.requests).some(s=>s.action!=="none"))){for(const{target:s,requests:r}of this.actionsToTake){const y=Object.values(r).some(l=>l.action==="accept"||l.action==="deny"),T=Object.values(r).every(l=>l.action==="accept"||l.action==="deny"),k=Object.values(r).find(l=>l.action==="close")?.closingReason?.id,q=Object.values(r).every(l=>l.action==="close"&&l.closingReason?.id===k),b=[],w=[],R=[],p=Object.keys(r).length;for(const[l,h]of Object.entries(r))switch(h.action){case"accept":{y&&!T?e.addLogEntry(`Not all requests to "${s}" were accepted or denied, the handling of "${l}" will be ignored.`,"warning"):(b.push(l),n.accepted++);break}case"deny":{y&&!T?e.addLogEntry(`Not all requests to "${s}" were accepted or denied, the handling of "${l}" is being ignored.`,"warning"):(w.push([l,h.denyReason||"decline"]),n.denied++);break}case"comment":{h.comment?(R.push(`${h.comment}${p>1?` [${l}]`:""}`),n.commented++):e.addLogEntry(`The request to create "${l}" \u2192 "${s}" has been marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{q?(h.comment&&R.push(`${h.comment}${p>1?` [${l}]`:""}`),n.closed++):e.addLogEntry(`Not all requests to "${s}" were closed with the same reason, the handling of "${l}" is being ignored.`,"warning");break}}let d=Object.values(r)[0].originalText;if(R.length>0&&(d+=`
`+R.map(l=>`* {{AfC comment|1=${l}}} ~~~~`).join(`
`),a=a.replace(Object.values(r)[0].originalText,d)),y){let l;const h=d;if(b.length>0&&w.length>0){l="p";const f=b.map(m=>`* {{subst:AfC redirect}} [${m}] ~~~~`),C=w.map(([m,O])=>`* {{subst:AfC redirect|${O.startsWith("autofill:")?O.replace("autofill:",""):`decline|1=${O}`}}} [${m}] ~~~~`);for(const m of b)this.handleAcceptedRedirect(m,r[m],s);d+=`
`+f.join(`
`)+`
`+C.join(`
`),a=a.replace(h,d)}else if(b.length>0){l="a";for(const f of b)this.handleAcceptedRedirect(f,r[f],s);d+=`
* {{subst:AfC redirect${b.length>1?"|all":""}}} ~~~~`,a=a.replace(h,d)}else{l="d";const f=w.map(([C,m])=>`* {{subst:AfC redirect|${m.startsWith("autofill:")?m.replace("autofill:",""):`decline|1=${m}`}}}${w.length>1?` [${C}]`:""} ~~~~`);d+=`
`+f.join(`
`),a=a.replace(h,d)}a=a.replace(d,`{{AfC-c|${l}}}
${d}
{{AfC-c|b}}`)}else q&&(a=a.replace(d,`{{AfC-c|${k}}}
${d}
{{AfC-c|b}}`))}if(this.beforeText+this.pageContent===a)return e.addLogEntry("No requests have been handled!");const c=Object.entries(n).filter(([,s])=>s>0).map(([s,r])=>`${s} ${r}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:a,summary:`Handling AfC redirect requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All redirect requests handled, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!");else if(this.actionsToTake.some(c=>c.action!=="none")){for(const s of this.actionsToTake){const r=s.originalText;switch(s.action){case"accept":{a=a.replace(r,`{{AfC-c|a}}
${r}
* {{subst:AfC category}} ~~~~
{{AfC-c|b}}`),this.handleAcceptedCategory(s),n.accepted++;break}case"deny":{a=a.replace(r,`{{AfC-c|d}}
${r}
* {{subst:AfC category|${s.denyReason.startsWith("autofill:")?s.denyReason.replace("autofill:",""):`decline|1=${s.denyReason}`}}} ~~~~
{{AfC-c|b}}`),n.denied++;break}case"comment":{s.comment?(a=a.replace(r,`${r}
* {{AfC comment|1=${s.comment}}} ~~~~`),n.commented++):e.addLogEntry(`The request to create "${s.category}" has been marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{a=a.replace(r,`{{AfC-c|${s.closingReason.id}}}
${r}${s.comment?`
* {{AfC comment|1=${s.comment}}} ~~~~`:""}
{{AfC-c|b}}`),n.closed++;break}}}if(this.beforeText+this.pageContent===a)return e.addLogEntry("No requests have been handled!");const c=Object.entries(n).filter(([,s])=>s>0).map(([s,r])=>`${s} ${r}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:a,summary:`Handling AfC category requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All category requests handled, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}handleAcceptedRedirect(t,e,n){const a=e.redirectTemplates&&e.redirectTemplates.length>0?e.redirectTemplates?.map(o=>`{{${o}}}`).join(`
`):null;this.editsCreationsToMake.push({type:"create",title:t,text:`#REDIRECT [[${n}]]${a?`

{{Redirect category shell|
${a}
}}`:""}`,summary:`Creating redirect to [[${n}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",title:mw.Title.newFromText(t).getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}handleAcceptedCategory(t){this.editsCreationsToMake.push({type:"create",title:`Category:${t.category}`,text:t.parents.map(e=>`[[Category:${e}]]`).join(`
`),summary:`Creating category as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",title:`Category talk:${t.category}`,text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}async makeAllEditsCreations(t){for(const e of this.editsCreationsToMake){const n=e.type==="edit"?this.api.edit(e.title,e.transform):this.api.create(e.title,{summary:e.summary},e.text);t.addLogEntry(`${e.type==="edit"?"Editing":"Creating"} ${e.title}...`),await n.catch(async(a,o)=>{a==="ratelimited"?(t.addLogEntry("Rate limited. Waiting for 65 seconds..."),await new Promise(c=>setTimeout(c,65e3)),t.addLogEntry("Continuing..."),await n.catch((c,s)=>{t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${e.title}: ${s?.error.info??"Unknown error"} (${c})`)})):t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${e.title}: ${o?.error.info??"Unknown error"} (${a})`)})}}}Object.assign(E.prototype,OO.ui.ProcessDialog.prototype)});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
