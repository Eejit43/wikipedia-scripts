// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const z=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",Y=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!z&&!Y)return;const F=z?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${F} creation requests`,"afcrc-helper").addEventListener("click",B=>{B.preventDefault();const N=new OO.ui.WindowManager;document.body.append(N.$element[0]);const t=new I(F,mw.config.get("wgPageName").replaceAll("_"," "));N.addWindows([t]),t.open(),t.load()});class V extends OO.ui.Dialog{constructor(){super({size:"large"});this.initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);V.static.name="ShowActionsDialog",V.static.title="Actions"}addLogEntry(t,e="notice"){const a=new OO.ui.MessageWidget({type:e,inline:!0,label:new OO.ui.HtmlSnippet(t)});this.logOutput.append(a.$element[0]),this.updateSize(),this.closeButton.scrollElementIntoView()}showReload(){this.closeButton.$element.remove();const t=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});t.on("click",()=>window.location.reload()),this.contentLayout.$element.append(t.$element)}}Object.assign(V.prototype,OO.ui.Dialog.prototype);class _ extends OO.ui.TextInputWidget{constructor(t){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const a=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:a?.getNamespaceId()??0,gapprefix:a?.getMainText()??t,generator:"allpages"}).catch(()=>null).then(r=>{if(r?.query?.pages){const i=r.query.pages.map(c=>({data:c.title,label:c.title}));this.emit("showing-values",i),e.resolve(i)}else e.resolve([])}),e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:a})=>new OO.ui.MenuOptionWidget({data:e,label:a}));OO.ui.mixin.LookupElement.call(this,t)}}Object.assign(_.prototype,OO.ui.mixin.LookupElement.prototype);class Q extends OO.ui.TextInputWidget{constructor(t){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const a=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:a?.getMainText()??t,generator:"allpages",prop:"categories"}).catch(()=>null).then(r=>{if(r?.query?.pages){const i=r.query.pages.filter(c=>!c.categories?.some(n=>n.title==="Category:Wikipedia soft redirected categories")).map(c=>{const n=c.title.split(":")[1];return{data:n,label:n}});this.emit("showing-values",i),e.resolve(i)}else e.resolve([])}),e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:a})=>new OO.ui.MenuOptionWidget({data:e,label:a}));OO.ui.mixin.LookupElement.call(this,t)}}Object.assign(Q.prototype,OO.ui.mixin.LookupElement.prototype);class I extends OO.ui.ProcessDialog{constructor(t,e){super({size:"large"});this.api=new mw.Api;this.scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";this.parsedRequests=[];this.actionsToTake=[];this.editsCreationsToMake=[];this.getActionProcess=t=>t==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):t==="save"?new OO.ui.Process(()=>{this.performActions()}):I.super.prototype.getActionProcess.call(this,t);this.getTeardownProcess=()=>I.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});I.static.name="AfcrcHelperDialog",I.static.title="afcrc-helper",I.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=e,this.requestPageType=t,mw.util.addCSS(`
.afcrc-helper-request {
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}

.afcrc-helper-template-parameters-container, .afcrc-helper-template-parameters-container details {
    background-color: #fff;
    border: 1px solid #a2a9b1;
    border-radius: 2px;
    margin-block: 10px;
    padding: 5px;
}

.afcrc-helper-template-parameters-container {
    margin-left: 8px;
}

.afcrc-helper-template-parameters-container summary {
    cursor: pointer;
    font-weight: bold;
}

.afcrc-helper-template-parameters-container details {
    background-color: #e2e2e2;
    margin-block: 5px;
}

#afcrc-helper-no-templates-message {
    padding: 5px;
}`)}async load(){const t=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"});this.redirectTemplates=JSON.parse(t.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}");const e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle});this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=this.pageContent.match(/^(.*?)==/s)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==");const t=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(e=>e[0]);for(const e of t){if(/{{afc-c\|/i.test(e))continue;const r=e.match(/^==(.*?)==$/m)[1].trim();if(F==="redirect"){const i={},c=[...r.matchAll(/\[\[(.*?)]]/g)].map(f=>f[1]?.trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);if(c.length===0)continue;i.pages=c;const n=e.match(/Target of redirect: ?\[\[(.*?)]]/)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!n)continue;i.target=n,i.reason=e.match(/reason: ?(.*?)\*source(?: \(if applicable\))?:/is)?.[1].trim()??"",i.source=e.match(/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is)?.[1].trim()??"";const o=e.match(e.includes("<references />")?/<references \/>\n+(.*)/:new RegExp(`(?:<references \\/>${i.source?`|${i.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))?.[1].trim();i.requester=o?{type:/\[\[User( talk)?:/.test(o)?"user":"ip",name:o.match(/(?:Special:Contributions\/|User(?: talk)?:)(.*?)\|/)[1].trim()}:null,this.parsedRequests.push(i),this.actionsToTake.push({target:i.target,requests:Object.fromEntries(c.map(f=>[f,{originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"}]))})}else{const i={},c=r.match(/:?Category:(.*?)(]]|$)/)?.[1].trim();if(!c)continue;i.category=c.replaceAll("_"," "),i.examples=[...e.match(/example pages which belong to this category:(.*?)parent category\/categories:/is)[1].matchAll(/\*\s*(?:\[\[)?(.*?)(\||]]|\s*?\n)/g)].map(b=>b[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[],i.parents=[...e.match(/parent category\/categories:(.*?)(\n\n|\n\[\[(special:contributions\/|user:))/is)[1].matchAll(/(?<!\|)#?:?Category:(.*?)(\||]]|\s*?\n)/g)].map(b=>b[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[];const n=e.indexOf("[[User:"),o=e.indexOf("[[User talk:"),f=e.indexOf("[[Special:Contributions/"),m=Math.min(...[n,o,f].filter(b=>b!==-1));i.requester=m===Number.POSITIVE_INFINITY?null:m===f?{type:"ip",name:e.match(/\[\[Special:Contributions\/(.*?)(\||]])/)[1].trim()}:{type:"user",name:e.match(/\[\[User(?: talk)?:(.*?)(\||]])/)[1].trim()},i.requester?.name||(i.requester=null),this.parsedRequests.push(i),this.actionsToTake.push({category:i.category,examples:i.examples,parents:i.parents,originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"})}}}loadInputElements(){if(this.parsedRequests.length>0){let t=0;const e=()=>{const r=Math.min(t+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${t+1}-${r}/${this.parsedRequests.length} requests)`);for(let i=t;i<r;i++)this.requestPageType==="redirect"?this.loadRedirectRequestElements(i):this.loadCategoryRequestElements(i);r<this.parsedRequests.length?(t=r,setTimeout(e,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};e()}else{const t=new OO.ui.MessageWidget({type:"notice",label:"No valid requests to handle!"}),e=new OO.ui.PanelLayout({padded:!0,expanded:!1});e.$element.append(t.$element),this.$body.append(e.$element),this.updateSize()}}loadRedirectRequestElements(t){const e=this.parsedRequests[t],a=document.createElement("details");a.classList.add("afcrc-helper-request"),a.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const r=document.createElement("summary");r.innerHTML=e.pages.map(p=>`<b>${p}</b>`).join(", ")+" \u2192 ";const i=document.createElement("a");i.target="_blank",i.href=mw.util.getUrl(e.target),i.textContent=e.target,r.append(i),a.append(r);const c=document.createElement("div");c.classList.add("afcrc-helper-request-info");const n=document.createElement("span");n.style.color="dimgray",n.textContent="None";const o=document.createElement("span");o.style.color="dimgray",o.textContent="Unknown";const f=document.createElement("div"),m=document.createElement("b");m.textContent="Reason: ",f.append(m),e.reason?f.append(e.reason):f.append(n.cloneNode(!0)),c.append(f);const b=document.createElement("div"),A=document.createElement("b");A.textContent="Source: ",b.append(A),e.source?b.append(e.source):b.append(n.cloneNode(!0)),c.append(b);const O=document.createElement("div"),k=document.createElement("b");if(k.textContent="Requester: ",O.append(k),e.requester){const p=document.createElement("a");p.target="_blank",p.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),p.textContent=e.requester.name,O.append(p)}else O.append(o.cloneNode(!0));c.append(O),a.append(c),a.append(document.createElement("hr"));const C=document.createElement("div");C.classList.add("afcrc-helper-request-responder");for(const p of e.pages){const d=document.createElement("div"),l=document.createElement("b");l.textContent=p+" \u2192 "+e.target,d.append(l);let g,w,y=[];const j=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(h=>new OO.ui.RadioOptionWidget({data:h,label:h}))});j.selectItemByLabel("None"),j.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const h=j.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].requests[p].action=h,!g||!w){const s=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.entries(this.redirectTemplates).map(([q,{redirect:M}])=>{if(!M)return{data:q,label:q};const x=new OO.ui.HtmlSnippet(`${q} <i>(redirect with possibilities)</i>`);return{data:q,label:x}})});s.getMenu().filterMode="substring",s.on("change",()=>{const q=s.getValue().sort((x,L)=>x.toLowerCase().localeCompare(L.toLowerCase()));s.getValue().join(";")!==q.join(";")&&s.setValue(q),this.actionsToTake[t].requests[p].redirectTemplates=q;for(const x of y)x.details.style.display="none";let M=0;for(const x of s.getValue()){const L=y.find(U=>U.name===x);L&&(L.details.style.display="block",M++)}u.textContent=`Template parameters (${M>0?`for ${M} template${M>1?"s":""}`:"none to show"})`,T.style.display=M>0?"none":"block"}),g=new OO.ui.FieldLayout(s,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates:"}),d.append(g.$element[0]),w=document.createElement("details"),w.classList.add("afcrc-helper-template-parameters-container");const u=document.createElement("summary");u.textContent="Template parameters (none to show)",w.append(u);for(const[q,M]of Object.entries(this.redirectTemplates)){const x=Object.entries(M.parameters);if(x.length===0)continue;const L=document.createElement("details");L.style.display="none";const U=document.createElement("summary");U.textContent=q,L.append(U);const J={name:q,details:L,parameters:[]};for(const[H,R]of x){const G=new OO.ui.TextInputWidget({placeholder:R.default?.toString(),required:R.required}),K=new OO.ui.FieldLayout(G,{label:new OO.ui.HtmlSnippet(`${H}${!R.label||H.toLowerCase()===R.label?.toLowerCase()?"":` (${R.label})`}${R.description?` (${R.description})`:""} (type: ${R.type}) ${R.suggested?" (suggested)":""}${R.example?` (example: "${R.example}")`:""}`),align:"inline"});L.append(K.$element[0]),J.parameters.push({name:H,aliases:R.aliases,editor:G})}w.append(L),y.push(J)}this.actionsToTake[t].requests[p].redirectTemplateParameters=y;const T=document.createElement("div");T.id="afcrc-helper-no-templates-message",T.textContent="No templates with parameters to display!",w.append(T),d.append(w)}if(["comment","close"].includes(h)){S.$element.show();const s=D.getValue().trim();s?this.actionsToTake[t].requests[p].comment=s:delete this.actionsToTake[t].requests[p].comment}else S.$element.hide(),delete this.actionsToTake[t].requests[p].comment;switch(this.updateRequestColor(a,t),g.$element.hide(),w.style.display="none",v.$element.hide(),W.$element.hide(),h){case"accept":{g.$element.show(),w.style.display="block";break}case"deny":{v.$element.show();break}case"close":{W.$element.show();break}}});const E=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["notredirect","article creation requests"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([h,s])=>({data:`autofill:${h}`,label:`Autofilled text for ${s}`}))});E.on("change",()=>{this.actionsToTake[t].requests[p].denyReason=E.getValue()||"autofill:unlikely"}),E.setValue("autofill:unlikely"),E.getMenu().selectItemByData("autofill:unlikely");const v=new OO.ui.FieldLayout(E,{align:"inline",label:"Deny reason:"});v.$element.hide();const P=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([h,s])=>new OO.ui.MenuOptionWidget({data:s,label:h}))}});P.getMenu().on("choose",()=>{const h=P.getMenu().findSelectedItem();this.actionsToTake[t].requests[p].closingReason={name:h.getLabel(),id:h.getData()},this.updateRequestColor(a,t)}),P.getMenu().selectItemByData("r"),this.actionsToTake[t].requests[p].closingReason={name:"No response",id:"r"};const W=new OO.ui.FieldLayout(P,{align:"inline",label:"Closing reason:"});W.$element.hide();const D=new OO.ui.TextInputWidget;D.on("change",()=>{const h=D.getValue().trim();h?this.actionsToTake[t].requests[p].comment=h:delete this.actionsToTake[t].requests[p].comment});const S=new OO.ui.FieldLayout(D,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});S.$element.hide(),d.append(j.$element[0],v.$element[0],W.$element[0],S.$element[0]),C.append(d)}a.append(C),this.$body.append(a),this.updateSize()}loadCategoryRequestElements(t){const e=this.parsedRequests[t],a=document.createElement("details");a.classList.add("afcrc-helper-request"),a.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const r=document.createElement("summary");r.innerHTML=`<b>Category:${e.category}</b>`,a.append(r);const i=document.createElement("div");i.classList.add("afcrc-helper-request-info");const c=document.createElement("span");c.style.color="dimgray",c.textContent="None";const n=document.createElement("span");n.style.color="dimgray",n.textContent="Unknown";const o=document.createElement("div"),f=document.createElement("b");if(f.textContent="Examples: ",o.append(f),e.examples.length>0)for(const[s,u]of e.examples.entries()){const T=document.createElement("a");T.target="_blank",T.href=mw.util.getUrl(u),T.textContent=u,o.append(T),s!==e.examples.length-1&&o.append(", ")}else o.append(c.cloneNode(!0));i.append(o);const m=document.createElement("div"),b=document.createElement("b");if(b.textContent="Parents: ",m.append(b),e.parents.length>0)for(const[s,u]of e.parents.entries()){const T=document.createElement("a");T.target="_blank",T.href=mw.util.getUrl(`Category:${u}`),T.textContent=u,m.append(T),s!==e.parents.length-1&&m.append(", ")}else m.append(c.cloneNode(!0));i.append(m);const A=document.createElement("div"),O=document.createElement("b");if(O.textContent="Requester: ",A.append(O),e.requester){const s=document.createElement("a");s.target="_blank",s.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),s.textContent=e.requester.name,A.append(s)}else A.append(n.cloneNode(!0));i.append(A),a.append(i),a.append(document.createElement("hr"));const k=document.createElement("div");k.classList.add("afcrc-helper-request-responder");const C=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(s=>new OO.ui.RadioOptionWidget({data:s,label:s}))});C.selectItemByLabel("None"),C.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const s=C.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].action=s,["comment","close"].includes(s)){h.$element.show();const u=S.getValue().trim();u?this.actionsToTake[t].comment=u:delete this.actionsToTake[t].comment}else h.$element.hide(),delete this.actionsToTake[t].comment;switch(this.updateRequestColor(a,t),g.$element.hide(),E.$element.hide(),P.$element.hide(),D.$element.hide(),s){case"accept":{g.$element.show(),E.$element.show();break}case"deny":{P.$element.show();break}case"close":{D.$element.show();break}}});const p=new _({placeholder:"Add pages here"});p.on("change",()=>{let s=p.getValue();s=s.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),s=s.replace(/^:/,""),s.length>0&&p.setValue(s[0].toUpperCase()+s.slice(1).replaceAll("_"," "))}),p.on("showing-values",s=>{for(const u of s)d.addAllowedValue(u.data)});const d=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:p});d.on("change",()=>{const s=d.getValue().sort((u,T)=>u.toLowerCase().localeCompare(T.toLowerCase()));d.getValue().join(";")!==s.join(";")&&d.setValue(s),this.actionsToTake[t].examples=s});const{examples:l}=this.actionsToTake[t];for(const s of l)d.addAllowedValue(s);d.setValue(l);const g=new OO.ui.FieldLayout(d,{align:"inline",label:"Pages to categorize:"});g.$element.hide();const w=new Q({placeholder:"Add categories here"});w.on("change",()=>{let s=w.getValue();s=s.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),s=s.replace(/^Category:/,""),s.length>0&&w.setValue(s[0].toUpperCase()+s.slice(1).replaceAll("_"," "))}),w.on("showing-values",s=>{for(const u of s)y.addAllowedValue(u.data)});const y=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:w});y.on("change",()=>{const s=y.getValue().sort((u,T)=>u.toLowerCase().localeCompare(T.toLowerCase()));y.getValue().join(";")!==s.join(";")&&y.setValue(s),this.actionsToTake[t].parents=s});const{parents:j}=this.actionsToTake[t];for(const s of j)y.addAllowedValue(s);y.setValue(j);const E=new OO.ui.FieldLayout(y,{align:"inline",label:"Categories:"});E.$element.hide();const v=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing categories"],["empty","empty submissions"],["unlikely","categories that are unlikely to have enough pages"],["notcategory","page creation requests"],["notenglish","requests not in English"]].map(([s,u])=>({data:`autofill:${s}`,label:`Autofilled text for ${u}`}))});v.on("change",()=>{this.actionsToTake[t].denyReason=v.getValue()||"autofill:unlikely"}),v.setValue("autofill:unlikely"),v.getMenu().selectItemByData("autofill:unlikely");const P=new OO.ui.FieldLayout(v,{align:"inline",label:"Deny reason:"});P.$element.hide();const W=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([s,u])=>new OO.ui.MenuOptionWidget({data:u,label:s}))}});W.getMenu().on("choose",()=>{const s=W.getMenu().findSelectedItem();this.actionsToTake[t].closingReason={name:s.getLabel(),id:s.getData()},this.updateRequestColor(a,t)}),W.getMenu().selectItemByData("r"),this.actionsToTake[t].closingReason={name:"No response",id:"r"};const D=new OO.ui.FieldLayout(W,{align:"inline",label:"Closing reason:"});D.$element.hide();const S=new OO.ui.TextInputWidget;S.on("change",()=>{const s=S.getValue().trim();s?this.actionsToTake[t].comment=s:delete this.actionsToTake[t].comment});const h=new OO.ui.FieldLayout(S,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});h.$element.hide(),k.append(C.$element[0],g.$element[0],E.$element[0],P.$element[0],D.$element[0],h.$element[0]),a.append(k),this.$body.append(a),this.updateSize()}updateRequestColor(t,e){if(this.requestPageType==="redirect"){const a=Object.values(this.actionsToTake[e].requests),r=a.every(o=>o.action==="accept"||o.action==="deny"),i=a.find(o=>o.action==="close")?.closingReason?.id,c=a.every(o=>o.action==="close"&&o.closingReason?.id===i);let n="";if(r){const o=a.filter(m=>m.action==="accept").length,f=a.filter(m=>m.action==="deny").length;o>0&&f>0?n="#fff17e":o>0?n="#a0ffa0":n="#ffcece"}else c&&(i==="r"?n="#ffcece":i==="s"?n="#90c090":n="#b8b8b8");t.style.backgroundColor=n}else{const{action:a}=this.actionsToTake[e];let r="";a==="accept"?r="#a0ffa0":a==="deny"?r="#ffcece":a==="close"&&(this.actionsToTake[e].closingReason?.id==="r"?r="#ffcece":this.actionsToTake[e].closingReason?.id==="s"?r="#90c090":r="#b8b8b8"),t.style.backgroundColor=r}}async performActions(){const t=new OO.ui.WindowManager;document.body.append(t.$element[0]);const e=new V;t.addWindows([e]),e.open();const a={accepted:0,denied:0,"commented on":0,closed:0};let r=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();if(this.requestPageType==="redirect")if(this.actionsToTake.some(c=>Object.values(c.requests).some(n=>n.action!=="none"))){for(const{target:n,requests:o}of this.actionsToTake){const f=Object.values(o).some(l=>l.action==="accept"||l.action==="deny"),m=Object.values(o).every(l=>l.action==="accept"||l.action==="deny"),b=Object.values(o).find(l=>l.action==="close")?.closingReason?.id,A=Object.values(o).every(l=>l.action==="close"&&l.closingReason?.id===b),O=[],k=[],C=[],p=Object.keys(o).length;for(const[l,g]of Object.entries(o))switch(g.action){case"accept":{f&&!m?e.addLogEntry(`Not all requests to "${n}" were accepted or denied, the handling of "${l}" will be ignored.`,"warning"):(O.push(l),a.accepted++);break}case"deny":{f&&!m?e.addLogEntry(`Not all requests to "${n}" were accepted or denied, the handling of "${l}" is being ignored.`,"warning"):(k.push([l,g.denyReason]),a.denied++);break}case"comment":{g.comment?(C.push([l,g.comment]),a["commented on"]++):e.addLogEntry(`The request to create "${l}" \u2192 "${n}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{A?(g.comment&&C.push([l,g.comment]),a.closed++):e.addLogEntry(`Not all requests to "${n}" were closed with the same reason, the handling of "${l}" is being ignored.`,"warning");break}}let d={pageText:r,...Object.values(o)[0].originalText};if(C.length>0&&(d=this.modifySectionData(d,{append:this.mapComments(C,p===1,C.length===p)})),m){let l;if(O.length>0&&k.length>0){l="p";const g=`* {{subst:AfC redirect}} (${O.map(y=>`[[${y}]]`).join(", ")}) ~~~~`,w=this.mapDeniedReasons(k,!1,!1);for(const y of O)this.handleAcceptedRedirect(y,o[y],n);d=this.modifySectionData(d,{append:`${g}
${w}`})}else if(O.length>0){l="a";for(const g of O)this.handleAcceptedRedirect(g,o[g],n);d=this.modifySectionData(d,{append:`* {{subst:AfC redirect${O.length>1?"|all":""}}} ~~~~`})}else l="d",d=this.modifySectionData(d,{append:this.mapDeniedReasons(k,p===1,!0)});d=this.modifySectionData(d,{prepend:`{{AfC-c|${l}}}`,append:"{{AfC-c|b}}"})}else A&&(d=this.modifySectionData(d,{prepend:`{{AfC-c|${b}}}`,append:"{{AfC-c|b}}"}));r=d.pageText}if(this.beforeText+this.pageContent===r)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(a).filter(([,n])=>n>0).map(([n,o])=>`${n} ${o}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:r,summary:`Handling AfC redirect requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!");else if(this.actionsToTake.some(c=>c.action!=="none")){for(const n of this.actionsToTake){let o={pageText:r,...n.originalText};switch(n.action){case"accept":{o=this.modifySectionData(o,{prepend:"{{AfC-c|a}}",append:`* {{subst:AfC category}} ~~~~
{{AfC-c|b}}`}),this.handleAcceptedCategory(n),a.accepted++;break}case"deny":{o=this.modifySectionData(o,{prepend:"{{AfC-c|d}}",append:`* ${this.formatDeniedReason(n.denyReason)} ~~~~
{{AfC-c|b}}`}),a.denied++;break}case"comment":{n.comment?(o=this.modifySectionData(o,{append:`* {{AfC comment|1=${n.comment}}} ~~~~`}),a["commented on"]++):e.addLogEntry(`The request to create "${n.category}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{o=this.modifySectionData(o,{prepend:`{{AfC-c|${n.closingReason.id}}}`,append:(n.comment?`* {{AfC comment|1=${n.comment}}} ~~~~`:"")+`
{{AfC-c|b}`}),a.closed++;break}}r=o.pageText}if(this.beforeText+this.pageContent===r)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(a).filter(([,n])=>n>0).map(([n,o])=>`${n} ${o}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:r,summary:`Handling AfC category requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}formatDeniedReason(t){const e=t.startsWith("autofill:")?t.replace("autofill:",""):`decline|2=${t}`;return`{{subst:AfC ${this.requestPageType}|${e}}}`}mapDeniedReasons(t,e,a){if(e)return`* ${this.formatDeniedReason(t[0][1])} ~~~~`;const r={};for(const[c,n]of t)r[n]||(r[n]=[]),r[n].push(c);const i=Object.entries(r);return i.map(([c,n])=>`* ${this.formatDeniedReason(c)}${i.length>1||!a?` (${n.map(o=>`[[${o}]]`).join(", ")})`:""} ~~~~`).join(`
`)}mapComments(t,e,a){if(e)return`* {{AfC comment|1=${t[0][1]}}} ~~~~`;const r={};for(const[c,n]of t)r[n]||(r[n]=[]),r[n].push(c);const i=Object.entries(r);return i.map(([c,n])=>`* {{AfC comment|1=${c}}}${i.length>1||!a?` (${n.map(o=>`[[${o}]]`).join(", ")})`:""} ~~~~`).join(`
`)}modifySectionData(t,{prepend:e,append:a}){const{fullSectionText:r,sectionText:i}=t;return e&&(t.sectionText=e+`
`+t.sectionText),a&&(t.sectionText+=`
`+a),t.fullSectionText=t.fullSectionText.replace(i,t.sectionText),t.pageText=t.pageText.replace(r,t.fullSectionText),t}handleAcceptedRedirect(t,e,a){const r=e.redirectTemplates&&e.redirectTemplates.length>0?e.redirectTemplates.map(i=>{const c=e.redirectTemplateParameters?.find(o=>o.name===i);if(!c)return`{{${i}}}`;const n=c.parameters.map((o,f)=>{const m=o.editor.getValue().trim();return m?`|${o.name===(f+1).toString()?"":`${o.name}=`}${m}`:null}).filter(Boolean).join("");return`{{${i}${n}}}`}):null;this.editsCreationsToMake.push({type:"create",isRedirect:!0,title:t,text:`#REDIRECT [[${a}]]${r?`

{{Redirect category shell|
${r.join(`
`)}
}}`:""}`,summary:`Creating redirect to [[${a}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:mw.Title.newFromText(t).getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}handleAcceptedCategory(t){this.editsCreationsToMake.push({type:"create",isRedirect:!1,title:`Category:${t.category}`,text:t.parents.map(e=>`[[Category:${e}]]`).join(`
`),summary:`Creating category as requested at [[WP:AFC/C]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:`Category talk:${t.category}`,text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`},...t.examples.map(e=>({type:"edit",title:e,transform:({content:a})=>({text:`${a}
[[Category:${t.category}]]`,summary:`Adding page to [[:Category:${t.category}]] as requested at [[WP:AFC/C]]${this.scriptMessage}`})})))}async makeAllEditsCreations(t){for(const e of this.editsCreationsToMake){const a=e.type==="edit"?this.api.edit(e.title,e.transform):this.api.create(e.title,{summary:e.summary},e.text),r=document.createElement("a");r.target="_blank",r.href=mw.util.getUrl(e.title,"isRedirect"in e&&e.isRedirect?{redirect:"no"}:void 0),r.textContent=e.title,t.addLogEntry(`${e.type==="edit"?"Editing":"Creating"} ${r.outerHTML}...`),await a.catch(async(i,c)=>{i==="ratelimited"?(t.addLogEntry(`Rate limited. Waiting for 70 seconds... (resuming at ${new Date(Date.now()+7e4).toLocaleTimeString()})`,"warning"),await new Promise(n=>setTimeout(n,7e4)),t.addLogEntry("Continuing...","success"),await a.catch((n,o)=>{t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${r.outerHTML}: ${o?.error.info??"Unknown error"} (${n}).`,"error")})):t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${r.outerHTML}: ${c?.error.info??"Unknown error"} (${i}).`,"error")})}}}Object.assign(I.prototype,OO.ui.ProcessDialog.prototype)});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
