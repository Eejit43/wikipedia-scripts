"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const P=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",j=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!P&&!j)return;const L=P?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${L} creation requests`,"afcrc-helper").addEventListener("click",D=>{D.preventDefault();const C=new OO.ui.WindowManager;document.body.append(C.$element[0]);const e=new w(L,mw.config.get("wgPageName"));C.addWindows([e]),e.open()});class A extends OO.ui.Dialog{constructor(){super({size:"medium"});this.initialize=()=>{OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container");const e=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]});return e.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,e.$element),this};this.getBodyHeight=()=>this.contentLayout.$element.outerHeight(!0);A.static.name="ShowActionsDialog",A.static.title="Actions"}addLogEntry(e){const t=document.createElement("div");t.textContent=e,this.logOutput.append(t)}}Object.assign(A.prototype,OO.ui.Dialog.prototype);class w extends OO.ui.ProcessDialog{constructor(e,t){super({size:"large"});this.api=new mw.Api;this.scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";this.parsedRequests=[];this.actionsToTake={};this.getSetupProcess=()=>(mw.util.addCSS(`
.afcrc-helper-request {
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}`),w.super.prototype.getSetupProcess.call(this).next(()=>this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"}).then(e=>{this.redirectTemplateItems=Object.keys(JSON.parse(e.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")).map(t=>({data:t,label:t}))})).next(()=>this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle}).then(e=>{this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()})));this.getActionProcess=e=>{switch(e){case"cancel":return new OO.ui.Process(()=>{this.getManager().closeWindow(this)});case"show-actions":return new OO.ui.Process(()=>{this.performActions(!0)});case"save":return new OO.ui.Process(()=>{this.performActions(!1)});default:return w.super.prototype.getActionProcess.call(this,e)}};this.getTeardownProcess=()=>w.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});w.static.name="AfcrcHelperDialog",w.static.title="afcrc-helper",w.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"show-actions",label:"Show actions to take"},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=t,this.requestPageType=e}parseRequests(){this.beforeText=this.pageContent.match(/^(.*?)==/s)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==").replaceAll(new RegExp(`\\[https?:${mw.config.get("wgServer")}/(.*?)]`,"g"),"[[$1]]");const e=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(t=>t[0]);for(const t of e){if(/{{afc-c\|/i.test(t))continue;const r=t.match(/^==(.*?)==$/m)[1].trim();if(L==="redirect"){const s={},i=[...r.matchAll(/\[\[(.*?)]]/g)].map(o=>o[1].trim().replace(/^:/,"").replaceAll("_"," "));s.pages=i;const R=t.match(/Target of redirect: ?\[\[(.*?)]]/)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!R)continue;s.target=R,s.reason=t.match(/reason: ?(.*?)\*source(?: \(if applicable\))?:/is)[1].trim(),s.source=t.match(/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n)/is)[1].trim();const y=t.match(t.includes("<references />")?/<references \/>\n(.*)/:new RegExp(`(?:<references \\/>${s.source?`|${s.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))[1].trim();s.requester={type:y.includes("[[User:")?"user":"ip",name:y.match(/(?:Special:Contributions\/|User:)(.*?)\|/)[1].trim()},this.parsedRequests.push(s),this.actionsToTake[s.target]=Object.fromEntries(i.map(o=>[o,{originalText:t.replace(/^==.*?==$/m,"").trim(),action:"none"}]))}else{const s={}}}}loadInputElements(){if(this.requestPageType==="redirect")for(const e of this.parsedRequests){const t=document.createElement("details");t.classList.add("afcrc-helper-request");const g=document.createElement("summary");g.innerHTML=e.pages.map(a=>`<b>${a}</b>`).join(", ")+" \u2192 ";const r=document.createElement("a");r.target="_blank",r.href=mw.util.getUrl(e.target),r.textContent=e.target,g.append(r),t.append(g);const s=document.createElement("div");s.classList.add("afcrc-helper-request-info");const i=document.createElement("span");i.style.color="dimgray",i.textContent="None";const R=document.createElement("div"),y=document.createElement("b");y.textContent="Reason: ",R.append(y),e.reason?R.append(e.reason):R.append(i),s.append(R);const o=document.createElement("div"),m=document.createElement("b");m.textContent="Source: ",o.append(m),e.source?o.append(e.source):o.append(i),s.append(o);const T=document.createElement("div"),k=document.createElement("b");k.textContent="Requester: ",T.append(k);const O=document.createElement("a");O.target="_blank",O.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),O.textContent=e.requester.name,T.append(O),s.append(T),t.append(s),t.append(document.createElement("hr"));const q=document.createElement("div");q.classList.add("afcrc-helper-request-responder");for(const a of e.pages){const b=document.createElement("div"),v=document.createElement("b");v.textContent=a+" \u2192 "+e.target,b.append(v);const d=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(c=>new OO.ui.RadioOptionWidget({data:c,label:c}))});d.selectItemByLabel("None"),d.on("choose",()=>{const c=d.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[e.target][a].action=c,["comment","close"].includes(c)){E.$element.show();const f=x.getValue().trim();f?this.actionsToTake[e.target][a].comment=f:delete this.actionsToTake[e.target][a].comment}else E.$element.hide(),delete this.actionsToTake[e.target][a].comment;switch(u.$element.hide(),h.$element.hide(),$.$element.hide(),c){case"accept":{u.$element.show(),this.actionsToTake[e.target][a].redirectTemplates=n.getValue();break}case"deny":{h.$element.show(),this.actionsToTake[e.target][a].denyReason=l.getValue();break}case"close":{$.$element.show();const f=p.getMenu().findSelectedItem();this.actionsToTake[e.target][a].closingReason={name:f.getLabel(),id:f.getData()};break}}});const n=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:this.redirectTemplateItems});n.getMenu().filterMode="substring",n.on("change",()=>{const c=n.getValue().sort((f,W)=>f.toLowerCase().localeCompare(W.toLowerCase()));n.getValue().join(";")!==c.join(";")&&n.setValue(c),this.actionsToTake[e.target][a].redirectTemplates=c});const u=new OO.ui.FieldLayout(n,{align:"inline",label:"Redirect templates"});u.$element.hide();const l=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([c,f])=>({data:`autofill:${c}`,label:`Autofilled text for ${f}`}))});l.getMenu().on("choose",()=>{this.actionsToTake[e.target][a].denyReason=l.getValue()}),l.setValue("autofill:unlikely"),l.getMenu().selectItemByData("autofill:unlikely");const h=new OO.ui.FieldLayout(l,{align:"inline",label:"Deny reason"});h.$element.hide();const p=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([c,f])=>new OO.ui.MenuOptionWidget({data:f,label:c}))}});p.getMenu().on("choose",()=>{const c=p.getMenu().findSelectedItem();this.actionsToTake[e.target][a].closingReason={name:c.getLabel(),id:c.getData()}}),p.getMenu().selectItemByLabel("No response");const $=new OO.ui.FieldLayout(p,{align:"inline",label:"Closing reason"});$.$element.hide();const x=new OO.ui.TextInputWidget;x.on("change",()=>{const c=x.getValue().trim();c?this.actionsToTake[e.target][a].comment=c:delete this.actionsToTake[e.target][a].comment});const E=new OO.ui.FieldLayout(x,{classes:["afcrc-comment-input"],align:"inline",label:"Comment"});E.$element.hide(),b.append(d.$element[0],u.$element[0],h.$element[0],$.$element[0],E.$element[0]),q.append(b)}t.append(q),this.$body.append(t)}else for(const e of this.parsedRequests){const t=document.createElement("details");t.classList.add("afcrc-helper-request");const g=document.createElement("summary");g.textContent=e.name,t.append(g),this.$body.append(t)}}async performActions(e){const t=e?"will be":"has been",g=new OO.ui.WindowManager;document.body.append(g.$element[0]);const r=new A;g.addWindows([r]),r.open();const s={accepted:0,denied:0,commented:0,closed:0};let i=this.beforeText+this.pageContent;if(this.requestPageType==="redirect")if(Object.values(this.actionsToTake).some(y=>Object.values(y).some(o=>o.action!=="none"))){for(const[o,m]of Object.entries(this.actionsToTake)){const T=Object.values(m).some(n=>n.action==="accept"||n.action==="deny"),k=Object.values(m).every(n=>n.action==="accept"||n.action==="deny"),O=Object.values(m).find(n=>n.action==="close")?.closingReason?.id,q=Object.values(m).every(n=>n.action==="close"&&n.closingReason?.id===O),a=[],b=[],v=[];for(const[n,u]of Object.entries(m)){const l=`The request to create "${n}" \u2192 "${o}" ${t} `,h=u.comment?" and commented on":"";switch(u.action){case"accept":{T&&!k?r.addLogEntry(`Not all requests to "${o}" were accepted or denied, the handling of "${n}" will be ignored.`):(r.addLogEntry(l+`accepted${h}.`),a.push(n),s.accepted++);break}case"deny":{T&&!k?r.addLogEntry(`Not all requests to "${o}" were accepted or denied, the handling of "${n}" is being ignored.`):(r.addLogEntry(l+"denied."),b.push([n,u.denyReason||"decline"]),s.denied++);break}case"comment":{u.comment?(r.addLogEntry(l+"commented on."),v.push(`[${n} \u2192 ${o}] ${u.comment}`),s.commented++):r.addLogEntry(l+"marked to be commented on, but no comment was provided.");break}case"close":{q?(r.addLogEntry(l+`closed as ${u.closingReason.name.toLowerCase()}${h}.`),s.closed++):r.addLogEntry(`Not all requests to "${o}" were closed with the same reason, the handling of "${n}" is being ignored.`);break}}}let d=Object.values(m)[0].originalText;if(v.length>0&&(d+=`
`+v.map(n=>`* {{AfC comment|1=${n}}} ~~~~`).join(`
`),i=i.replace(Object.values(m)[0].originalText,d)),T){let n;const u=d;if(a.length>0&&b.length>0){n="p";const l=a.map(p=>`* {{subst:AfC redirect}} [${p}] ~~~~`),h=b.map(([p,$])=>`* {{subst:AfC redirect|${$.startsWith("autofill:")?$.replace("autofill:",""):`decline|1=${$}`}}} [${p}] ~~~~`);if(!e)for(const p of a)this.handleAcceptedRedirect(p,m[p],o);d+=`
`+l.join(`
`)+`
`+h.join(`
`),i=i.replace(u,d)}else if(a.length>0){if(n="a",!e)for(const l of a)this.handleAcceptedRedirect(l,m[l],o);d+=`
* {{subst:AfC redirect${a.length>1?"|all":""}}} ~~~~`,i=i.replace(u,d)}else{n="d";const l=b.map(([h,p])=>`* {{subst:AfC redirect|${p.startsWith("autofill:")?p.replace("autofill:",""):`decline|1=${p}`}}}${b.length>1?` [${h}]`:""} ~~~~`);d+=`
`+l.join(`
`),i=i.replace(u,d)}i=i.replace(d,`{{AfC-c|${n}}}
${d}
{{AfC-c|b}}`)}else q&&(i=i.replace(d,`{{AfC-c|${O}}}
${d}
{{AfC-c|b}}`))}if(e||this.beforeText+this.pageContent===i)return;const y=Object.entries(s).filter(([,o])=>o>0).map(([o,m])=>`${o} ${m}`).join(", ");await this.api.edit(this.pageTitle,()=>({text:i,summary:`Handling AfC redirect requests (${y})${this.scriptMessage}`})),mw.notify(`Handled ${y} redirect requests, reloading...`),window.location.reload()}else r.addLogEntry(`No requests ${e?"will be":"have been"} handled!`)}handleAcceptedRedirect(e,t,g){const r=t.redirectTemplates&&t.redirectTemplates.length>0?t.redirectTemplates?.map(i=>`{{${i}}}`).join(`
`):null;this.api.create(e,{summary:`Creating redirect to [[${g}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},`#REDIRECT [[${g}]]${r?`

{{Redirect category shell|
${r}
}}`:""}`);const s=mw.Title.newFromText(e).getTalkPage().getPrefixedText();this.api.create(s,{summary:`Placing banner for [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] ${this.scriptMessage}`},`{{WikiProject banner shell|class=Redirect|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`)}}Object.assign(w.prototype,OO.ui.ProcessDialog.prototype)});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9hZmNyYy1oZWxwZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwaVF1ZXJ5UmV2aXNpb25zUGFyYW1zIH0gZnJvbSAndHlwZXMtbWVkaWF3aWtpL2FwaV9wYXJhbXMnO1xuaW1wb3J0IHsgUGFnZVJldmlzaW9uc1Jlc3VsdCB9IGZyb20gJy4uL2dsb2JhbC10eXBlcyc7XG5cbm13LmxvYWRlci51c2luZyhbJ21lZGlhd2lraS51dGlsJywgJ29vanMtdWktY29yZScsICdvb2pzLXVpLXdpZGdldHMnLCAnb29qcy11aS13aW5kb3dzJ10sICgpID0+IHtcbiAgICBjb25zdCBpc1JlZGlyZWN0UmVxdWVzdFBhZ2UgPSBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJykgPT09ICdXaWtpcGVkaWE6QXJ0aWNsZXNfZm9yX2NyZWF0aW9uL1JlZGlyZWN0cyc7XG4gICAgY29uc3QgaXNDYXRlZ29yeVJlcXVlc3RQYWdlID0gbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpID09PSAnV2lraXBlZGlhOkFydGljbGVzX2Zvcl9jcmVhdGlvbi9DYXRlZ29yaWVzJztcblxuICAgIGlmICghaXNSZWRpcmVjdFJlcXVlc3RQYWdlICYmICFpc0NhdGVnb3J5UmVxdWVzdFBhZ2UpIHJldHVybjtcblxuICAgIGNvbnN0IHJlcXVlc3RQYWdlVHlwZSA9IGlzUmVkaXJlY3RSZXF1ZXN0UGFnZSA/ICdyZWRpcmVjdCcgOiAnY2F0ZWdvcnknO1xuXG4gICAgY29uc3QgbGluayA9IG13LnV0aWwuYWRkUG9ydGxldExpbmsobXcuY29uZmlnLmdldCgnc2tpbicpID09PSAnbWluZXJ2YScgPyAncC10YicgOiAncC1jYWN0aW9ucycsICcjJywgYEhhbmRsZSAke3JlcXVlc3RQYWdlVHlwZX0gY3JlYXRpb24gcmVxdWVzdHNgLCAnYWZjcmMtaGVscGVyJykhO1xuXG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IHdpbmRvd01hbmFnZXIgPSBuZXcgT08udWkuV2luZG93TWFuYWdlcigpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh3aW5kb3dNYW5hZ2VyLiRlbGVtZW50WzBdKTtcblxuICAgICAgICBjb25zdCBhZmNyY0hlbHBlckRpYWxvZyA9IG5ldyBBZmNyY0hlbHBlckRpYWxvZyhyZXF1ZXN0UGFnZVR5cGUsIG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSk7XG5cbiAgICAgICAgd2luZG93TWFuYWdlci5hZGRXaW5kb3dzKFthZmNyY0hlbHBlckRpYWxvZ10pO1xuXG4gICAgICAgIGFmY3JjSGVscGVyRGlhbG9nLm9wZW4oKTtcbiAgICB9KTtcblxuICAgIGNsYXNzIFNob3dBY3Rpb25zRGlhbG9nIGV4dGVuZHMgT08udWkuRGlhbG9nIHtcbiAgICAgICAgcHJpdmF0ZSBjb250ZW50TGF5b3V0ITogT08udWkuUGFuZWxMYXlvdXQ7XG4gICAgICAgIHByaXZhdGUgbG9nT3V0cHV0ITogSFRNTERpdkVsZW1lbnQ7XG5cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlcih7IHNpemU6ICdtZWRpdW0nIH0pO1xuXG4gICAgICAgICAgICBTaG93QWN0aW9uc0RpYWxvZy5zdGF0aWMubmFtZSA9ICdTaG93QWN0aW9uc0RpYWxvZyc7XG4gICAgICAgICAgICBTaG93QWN0aW9uc0RpYWxvZy5zdGF0aWMudGl0bGUgPSAnQWN0aW9ucyc7XG4gICAgICAgIH1cblxuICAgICAgICBpbml0aWFsaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgT08udWkuRGlhbG9nLnByb3RvdHlwZS5pbml0aWFsaXplLmFwcGx5KHRoaXMpO1xuXG4gICAgICAgICAgICBtdy51dGlsLmFkZENTUyhgXG4uYWZjcmMtaGVscGVyLWFjdGlvbnMtY29udGFpbmVyIGRpdiB7XG4gICAgbWFyZ2luLWJsb2NrOiA4cHg7XG59YCk7XG5cbiAgICAgICAgICAgIHRoaXMuY29udGVudExheW91dCA9IG5ldyBPTy51aS5QYW5lbExheW91dCh7IHBhZGRlZDogdHJ1ZSwgZXhwYW5kZWQ6IGZhbHNlIH0pO1xuICAgICAgICAgICAgKHRoaXMgYXMgdW5rbm93biBhcyB7ICRib2R5OiBKUXVlcnkgfSkuJGJvZHkuYXBwZW5kKHRoaXMuY29udGVudExheW91dC4kZWxlbWVudCk7XG5cbiAgICAgICAgICAgIHRoaXMubG9nT3V0cHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0aGlzLmxvZ091dHB1dC5jbGFzc0xpc3QuYWRkKCdhZmNyYy1oZWxwZXItYWN0aW9ucy1jb250YWluZXInKTtcblxuICAgICAgICAgICAgY29uc3QgY2xvc2VCdXR0b24gPSBuZXcgT08udWkuQnV0dG9uV2lkZ2V0KHsgbGFiZWw6ICdDbG9zZScsIGZsYWdzOiBbJ3NhZmUnLCAnY2xvc2UnXSB9KTtcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uLm9uKCdjbGljaycsICgpID0+IHRoaXMuY2xvc2UoKSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29udGVudExheW91dC4kZWxlbWVudC5hcHBlbmQodGhpcy5sb2dPdXRwdXQsIGNsb3NlQnV0dG9uLiRlbGVtZW50KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgZ2V0Qm9keUhlaWdodCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRMYXlvdXQuJGVsZW1lbnQub3V0ZXJIZWlnaHQodHJ1ZSkhO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGEgbG9nIGVudHJ5IHRvIHRoZSBkaWFsb2cuXG4gICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGFkZC5cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhZGRMb2dFbnRyeShtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvZ0VudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBsb2dFbnRyeS50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG5cbiAgICAgICAgICAgIHRoaXMubG9nT3V0cHV0LmFwcGVuZChsb2dFbnRyeSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKFNob3dBY3Rpb25zRGlhbG9nLnByb3RvdHlwZSwgT08udWkuRGlhbG9nLnByb3RvdHlwZSk7XG5cbiAgICBpbnRlcmZhY2UgUmVkaXJlY3RSZXF1ZXN0RGF0YSB7XG4gICAgICAgIHBhZ2VzOiBzdHJpbmdbXTtcbiAgICAgICAgdGFyZ2V0OiBzdHJpbmc7XG4gICAgICAgIHJlYXNvbjogc3RyaW5nO1xuICAgICAgICBzb3VyY2U6IHN0cmluZztcbiAgICAgICAgcmVxdWVzdGVyOiB7IHR5cGU6ICd1c2VyJyB8ICdpcCc7IG5hbWU6IHN0cmluZyB9O1xuICAgIH1cblxuICAgIGludGVyZmFjZSBDYXRlZ29yeVJlcXVlc3REYXRhIHt9XG5cbiAgICB0eXBlIEFjdGlvblR5cGUgPSAnYWNjZXB0JyB8ICdkZW55JyB8ICdjb21tZW50JyB8ICdjbG9zZScgfCAnbm9uZSc7XG5cbiAgICBpbnRlcmZhY2UgQWN0aW9uIHtcbiAgICAgICAgb3JpZ2luYWxUZXh0OiBzdHJpbmc7XG4gICAgICAgIGFjdGlvbjogQWN0aW9uVHlwZTtcbiAgICAgICAgY29tbWVudD86IHN0cmluZztcbiAgICB9XG5cbiAgICB0eXBlIFJlZGlyZWN0QWN0aW9uID0gQWN0aW9uICYgeyByZWRpcmVjdFRlbXBsYXRlcz86IHN0cmluZ1tdOyBkZW55UmVhc29uPzogc3RyaW5nOyBjbG9zaW5nUmVhc29uPzogeyBuYW1lOiBzdHJpbmc7IGlkOiBzdHJpbmcgfSB9O1xuXG4gICAgdHlwZSBSZWRpcmVjdEFjdGlvbnMgPSBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBSZWRpcmVjdEFjdGlvbj4+O1xuXG4gICAgdHlwZSBDYXRlZ29yeUFjdGlvbnMgPSBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBBY3Rpb24+PjtcblxuICAgIC8qKlxuICAgICAqIEFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgaXMgYSBkaWFsb2cgdGhhdCBoYW5kbGVzIHJlZGlyZWN0IGFuZCBjYXRlZ29yeSByZXF1ZXN0cy5cbiAgICAgKi9cbiAgICBjbGFzcyBBZmNyY0hlbHBlckRpYWxvZyBleHRlbmRzIE9PLnVpLlByb2Nlc3NEaWFsb2cge1xuICAgICAgICBwcml2YXRlIGFwaSA9IG5ldyBtdy5BcGkoKTtcblxuICAgICAgICBwcml2YXRlIHNjcmlwdE1lc3NhZ2UgPSAnIChbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL2FmY3JjLWhlbHBlcnxhZmNyYy1oZWxwZXJdXSknO1xuXG4gICAgICAgIHByaXZhdGUgcmVxdWVzdFBhZ2VUeXBlOiAncmVkaXJlY3QnIHwgJ2NhdGVnb3J5JztcbiAgICAgICAgcHJpdmF0ZSBwYWdlVGl0bGUhOiBzdHJpbmc7XG5cbiAgICAgICAgcHJpdmF0ZSByZWRpcmVjdFRlbXBsYXRlSXRlbXMhOiB7IGRhdGE6IHN0cmluZzsgbGFiZWw6IHN0cmluZyB9W107XG5cbiAgICAgICAgcHJpdmF0ZSBiZWZvcmVUZXh0ITogc3RyaW5nO1xuICAgICAgICBwcml2YXRlIHBhZ2VDb250ZW50ITogc3RyaW5nO1xuXG4gICAgICAgIHByaXZhdGUgcGFyc2VkUmVxdWVzdHM6IFJlZGlyZWN0UmVxdWVzdERhdGFbXSB8IENhdGVnb3J5UmVxdWVzdERhdGFbXSA9IFtdO1xuICAgICAgICBwcml2YXRlIGFjdGlvbnNUb1Rha2U6IFJlZGlyZWN0QWN0aW9ucyB8IENhdGVnb3J5QWN0aW9ucyA9IHt9O1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHJlcXVlc3RQYWdlVHlwZTogJ3JlZGlyZWN0JyB8ICdjYXRlZ29yeScsIHBhZ2VUaXRsZTogc3RyaW5nKSB7XG4gICAgICAgICAgICBzdXBlcih7IHNpemU6ICdsYXJnZScgfSk7XG5cbiAgICAgICAgICAgIEFmY3JjSGVscGVyRGlhbG9nLnN0YXRpYy5uYW1lID0gJ0FmY3JjSGVscGVyRGlhbG9nJztcbiAgICAgICAgICAgIEFmY3JjSGVscGVyRGlhbG9nLnN0YXRpYy50aXRsZSA9ICdhZmNyYy1oZWxwZXInO1xuICAgICAgICAgICAgQWZjcmNIZWxwZXJEaWFsb2cuc3RhdGljLmFjdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdjYW5jZWwnLCBsYWJlbDogJ0Nsb3NlJywgZmxhZ3M6IFsnc2FmZScsICdjbG9zZSddIH0sXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdzaG93LWFjdGlvbnMnLCBsYWJlbDogJ1Nob3cgYWN0aW9ucyB0byB0YWtlJyB9LFxuICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnc2F2ZScsIGxhYmVsOiAnUnVuJywgZmxhZ3M6IFsncHJpbWFyeScsICdwcm9ncmVzc2l2ZSddIH0sXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICB0aGlzLnBhZ2VUaXRsZSA9IHBhZ2VUaXRsZTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFBhZ2VUeXBlID0gcmVxdWVzdFBhZ2VUeXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0U2V0dXBQcm9jZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgbXcudXRpbC5hZGRDU1MoYFxuLmFmY3JjLWhlbHBlci1yZXF1ZXN0IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBtYXJnaW46IDEwcHg7XG4gICAgcGFkZGluZzogNXB4O1xufVxuXG4uYWZjcmMtaGVscGVyLXJlcXVlc3Qgc3VtbWFyeSB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uYWZjcmMtaGVscGVyLXJlcXVlc3QtaW5mbywgLmFmY3JjLWhlbHBlci1yZXF1ZXN0LXJlc3BvbmRlciB7XG4gICAgbWFyZ2luOiA1cHg7XG59XG5cbi5hZmNyYy1oZWxwZXItcmVxdWVzdC1pbmZvID4gZGl2LCAuYWZjcmMtaGVscGVyLXJlcXVlc3QtcmVzcG9uZGVyID4gZGl2IHtcbiAgICBtYXJnaW4tYmxvY2s6IDhweDtcbn1cblxuLmFmY3JjLWhlbHBlci1yZXF1ZXN0LXJlc3BvbmRlciA+IGRpdjpsYXN0LW9mLXR5cGUge1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG59XG5cbi5hZmNyYy1oZWxwZXItcmVxdWVzdC1yZXNwb25kZXIgLm9vLXVpLWZpZWxkTGF5b3V0IHtcbiAgICBtYXJnaW4tbGVmdDogOHB4O1xufVxuXG4uYWZjcmMtaGVscGVyLWFjdGlvbi1yYWRpbyB7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xufVxuXG4uYWZjcmMtaGVscGVyLWFjdGlvbi1yYWRpbyAub28tdWktcmFkaW9PcHRpb25XaWRnZXQge1xuICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICBwYWRkaW5nOiA4cHg7XG59XG5cbi5hZmNyYy1jbG9zaW5nLXJlYXNvbi1pbnB1dCwgLmFmY3JjLWNvbW1lbnQtaW5wdXQge1xuICAgIG1heC13aWR0aDogNTAlO1xufWApO1xuXG4gICAgICAgICAgICByZXR1cm4gQWZjcmNIZWxwZXJEaWFsb2cuc3VwZXIucHJvdG90eXBlLmdldFNldHVwUHJvY2Vzc1xuICAgICAgICAgICAgICAgIC5jYWxsKHRoaXMpXG4gICAgICAgICAgICAgICAgLm5leHQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcGlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAnMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogJ3JldmlzaW9ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnZwcm9wOiAnY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnZzbG90czogJ21haW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlczogJ1VzZXI6RWVqaXQ0My9zY3JpcHRzL3JlZGlyZWN0LWhlbHBlci5qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gc2F0aXNmaWVzIEFwaVF1ZXJ5UmV2aXNpb25zUGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFRlbXBsYXRlSXRlbXMgPSBPYmplY3Qua2V5cyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZSgocmVzcG9uc2UgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdCkucXVlcnkucGFnZXM/LlswXT8ucmV2aXNpb25zPy5bMF0/LnNsb3RzPy5tYWluPy5jb250ZW50IHx8ICd7fScpIGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5tYXAoKHRhZykgPT4gKHsgZGF0YTogdGFnLCBsYWJlbDogdGFnIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm5leHQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcGlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAnMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogJ3JldmlzaW9ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnZwcm9wOiAnY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnZzbG90czogJ21haW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlczogdGhpcy5wYWdlVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9IHNhdGlzZmllcyBBcGlRdWVyeVJldmlzaW9uc1BhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZUNvbnRlbnQgPSAocmVzcG9uc2UgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdCkucXVlcnkucGFnZXNbMF0ucmV2aXNpb25zWzBdLnNsb3RzLm1haW4uY29udGVudC50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlUmVxdWVzdHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRJbnB1dEVsZW1lbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBnZXRBY3Rpb25Qcm9jZXNzID0gKGFjdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NhbmNlbCc6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPTy51aS5Qcm9jZXNzKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TWFuYWdlcigpLmNsb3NlV2luZG93KHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnc2hvdy1hY3Rpb25zJzoge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9PLnVpLlByb2Nlc3MoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJmb3JtQWN0aW9ucyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ3NhdmUnOiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgT08udWkuUHJvY2VzcygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1BY3Rpb25zKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFmY3JjSGVscGVyRGlhbG9nLnN1cGVyLnByb3RvdHlwZS5nZXRBY3Rpb25Qcm9jZXNzLmNhbGwodGhpcywgYWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZ2V0VGVhcmRvd25Qcm9jZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIEFmY3JjSGVscGVyRGlhbG9nLnN1cGVyLnByb3RvdHlwZS5nZXRUZWFyZG93blByb2Nlc3MuY2FsbCh0aGlzKS5uZXh0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAodGhpcyBhcyB1bmtub3duIGFzIHsgJGJvZHk6IEpRdWVyeSB9KS4kYm9keS5lbXB0eSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBhcnNlcyByZXF1ZXN0cyBmcm9tIHRoZSBwYWdlIGNvbnRlbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIHBhcnNlUmVxdWVzdHMoKSB7XG4gICAgICAgICAgICB0aGlzLmJlZm9yZVRleHQgPSB0aGlzLnBhZ2VDb250ZW50Lm1hdGNoKC9eKC4qPyk9PS9zKSFbMV07XG5cbiAgICAgICAgICAgIHRoaXMucGFnZUNvbnRlbnQgPSB0aGlzLnBhZ2VDb250ZW50LnJlcGxhY2UoL14uKj89PS9zLCAnPT0nKS5yZXBsYWNlQWxsKG5ldyBSZWdFeHAoYFxcXFxbaHR0cHM/OiR7bXcuY29uZmlnLmdldCgnd2dTZXJ2ZXInKX0vKC4qPyldYCwgJ2cnKSwgJ1tbJDFdXScpO1xuXG4gICAgICAgICAgICBjb25zdCBzZWN0aW9ucyA9IFsuLi50aGlzLnBhZ2VDb250ZW50Lm1hdGNoQWxsKC9ePT0uKj89PSQoXFxzKig/IT09W149XSkuKikqL2dpbSldLm1hcCgobWF0Y2gpID0+IG1hdGNoWzBdKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBzZWN0aW9uVGV4dCBvZiBzZWN0aW9ucykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2xvc2VkID0gL3t7YWZjLWNcXHwvaS50ZXN0KHNlY3Rpb25UZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNDbG9zZWQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdGlvbkhlYWRlciA9IHNlY3Rpb25UZXh0Lm1hdGNoKC9ePT0oLio/KT09JC9tKSFbMV0udHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RQYWdlVHlwZSA9PT0gJ3JlZGlyZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWREYXRhID0ge30gYXMgUmVkaXJlY3RSZXF1ZXN0RGF0YTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ZWRQYWdlcyA9IFsuLi5zZWN0aW9uSGVhZGVyLm1hdGNoQWxsKC9cXFtcXFsoLio/KV1dL2cpXS5tYXAoKG1hdGNoKSA9PiBtYXRjaFsxXS50cmltKCkucmVwbGFjZSgvXjovLCAnJykucmVwbGFjZUFsbCgnXycsICcgJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGEucGFnZXMgPSByZXF1ZXN0ZWRQYWdlcztcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRUYXJnZXQgPSBzZWN0aW9uVGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hdGNoKC9UYXJnZXQgb2YgcmVkaXJlY3Q6ID9cXFtcXFsoLio/KV1dLyk/LlsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL146LywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZUFsbCgnXycsICcgJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJzZWRUYXJnZXQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGEudGFyZ2V0ID0gcGFyc2VkVGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGEucmVhc29uID0gc2VjdGlvblRleHQubWF0Y2goL3JlYXNvbjogPyguKj8pXFwqc291cmNlKD86IFxcKGlmIGFwcGxpY2FibGVcXCkpPzovaXMpIVsxXS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0YS5zb3VyY2UgPSBzZWN0aW9uVGV4dC5tYXRjaCgvc291cmNlKD86IFxcKGlmIGFwcGxpY2FibGVcXCkpPzogPyguKj8pKD86PHJlZmVyZW5jZXMgXFwvPnxcXG4pL2lzKSFbMV0udHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlciA9IHNlY3Rpb25UZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAubWF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvblRleHQuaW5jbHVkZXMoJzxyZWZlcmVuY2VzIC8+JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAvPHJlZmVyZW5jZXMgXFwvPlxcbiguKikvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IFJlZ0V4cChgKD86PHJlZmVyZW5jZXMgXFxcXC8+JHtwYXJzZWREYXRhLnNvdXJjZSA/IGB8JHtwYXJzZWREYXRhLnNvdXJjZS5yZXBsYWNlQWxsKC9bXFxzIyQoKSorLC4/W1xcXFxcXF1ee3x9LV0vZywgJ1xcXFwkJicpfWAgOiAnJ30pXFxuKyguKilgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICkhWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGEucmVxdWVzdGVyID0geyB0eXBlOiByZXF1ZXN0ZXIuaW5jbHVkZXMoJ1tbVXNlcjonKSA/ICd1c2VyJyA6ICdpcCcsIG5hbWU6IHJlcXVlc3Rlci5tYXRjaCgvKD86U3BlY2lhbDpDb250cmlidXRpb25zXFwvfFVzZXI6KSguKj8pXFx8LykhWzFdLnRyaW0oKSB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VkUmVxdWVzdHMucHVzaChwYXJzZWREYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnNUb1Rha2VbcGFyc2VkRGF0YS50YXJnZXRdID0gT2JqZWN0LmZyb21FbnRyaWVzKHJlcXVlc3RlZFBhZ2VzLm1hcCgocGFnZSkgPT4gW3BhZ2UsIHsgb3JpZ2luYWxUZXh0OiBzZWN0aW9uVGV4dC5yZXBsYWNlKC9ePT0uKj89PSQvbSwgJycpLnRyaW0oKSwgYWN0aW9uOiAnbm9uZScgfV0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWREYXRhID0ge30gYXMgUmVkaXJlY3RSZXF1ZXN0RGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTG9hZHMgdGhlIGlucHV0IGVsZW1lbnRzIGluIHRoZSBkaWFsb2cuXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIGxvYWRJbnB1dEVsZW1lbnRzKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVxdWVzdFBhZ2VUeXBlID09PSAncmVkaXJlY3QnKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVxdWVzdCBvZiB0aGlzLnBhcnNlZFJlcXVlc3RzIGFzIFJlZGlyZWN0UmVxdWVzdERhdGFbXSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXRhaWxzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RldGFpbHMnKTtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsc0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYWZjcmMtaGVscGVyLXJlcXVlc3QnKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdW1tYXJ5RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N1bW1hcnknKTtcbiAgICAgICAgICAgICAgICAgICAgc3VtbWFyeUVsZW1lbnQuaW5uZXJIVE1MID0gcmVxdWVzdC5wYWdlcy5tYXAoKHBhZ2UpID0+IGA8Yj4ke3BhZ2V9PC9iPmApLmpvaW4oJywgJykgKyAnIFx1MjE5MiAnO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgICAgICBsaW5rRWxlbWVudC50YXJnZXQgPSAnX2JsYW5rJztcbiAgICAgICAgICAgICAgICAgICAgbGlua0VsZW1lbnQuaHJlZiA9IG13LnV0aWwuZ2V0VXJsKHJlcXVlc3QudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgbGlua0VsZW1lbnQudGV4dENvbnRlbnQgPSByZXF1ZXN0LnRhcmdldDtcblxuICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5RWxlbWVudC5hcHBlbmQobGlua0VsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHNFbGVtZW50LmFwcGVuZChzdW1tYXJ5RWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdEluZm9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJbmZvRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhZmNyYy1oZWxwZXItcmVxdWVzdC1pbmZvJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9uZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgICAgIG5vbmVFbGVtZW50LnN0eWxlLmNvbG9yID0gJ2RpbWdyYXknO1xuICAgICAgICAgICAgICAgICAgICBub25lRWxlbWVudC50ZXh0Q29udGVudCA9ICdOb25lJztcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWFzb25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWFzb25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2InKTtcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uTGFiZWwudGV4dENvbnRlbnQgPSAnUmVhc29uOiAnO1xuICAgICAgICAgICAgICAgICAgICByZWFzb25EaXYuYXBwZW5kKHJlYXNvbkxhYmVsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5yZWFzb24pIHJlYXNvbkRpdi5hcHBlbmQocmVxdWVzdC5yZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJlYXNvbkRpdi5hcHBlbmQobm9uZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJbmZvRWxlbWVudC5hcHBlbmQocmVhc29uRGl2KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2InKTtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTGFiZWwudGV4dENvbnRlbnQgPSAnU291cmNlOiAnO1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VEaXYuYXBwZW5kKHNvdXJjZUxhYmVsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5zb3VyY2UpIHNvdXJjZURpdi5hcHBlbmQocmVxdWVzdC5zb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHNvdXJjZURpdi5hcHBlbmQobm9uZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJbmZvRWxlbWVudC5hcHBlbmQoc291cmNlRGl2KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2InKTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVyTGFiZWwudGV4dENvbnRlbnQgPSAnUmVxdWVzdGVyOiAnO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZXJEaXYuYXBwZW5kKHJlcXVlc3RlckxhYmVsKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ZXJMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZXJMaW5rLnRhcmdldCA9ICdfYmxhbmsnO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZXJMaW5rLmhyZWYgPSByZXF1ZXN0LnJlcXVlc3Rlci50eXBlID09PSAndXNlcicgPyBtdy51dGlsLmdldFVybChgVXNlcjoke3JlcXVlc3QucmVxdWVzdGVyLm5hbWV9YCkgOiBtdy51dGlsLmdldFVybChgU3BlY2lhbDpDb250cmlidXRpb25zLyR7cmVxdWVzdC5yZXF1ZXN0ZXIubmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVyTGluay50ZXh0Q29udGVudCA9IHJlcXVlc3QucmVxdWVzdGVyLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlckRpdi5hcHBlbmQocmVxdWVzdGVyTGluayk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEluZm9FbGVtZW50LmFwcGVuZChyZXF1ZXN0ZXJEaXYpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHNFbGVtZW50LmFwcGVuZChyZXF1ZXN0SW5mb0VsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHNFbGVtZW50LmFwcGVuZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdocicpKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0UmVzcG9uZGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0UmVzcG9uZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhZmNyYy1oZWxwZXItcmVxdWVzdC1yZXNwb25kZXInKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlcXVlc3RlZFRpdGxlIG9mIHJlcXVlc3QucGFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlZFRpdGxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSByZXF1ZXN0ZWRUaXRsZSArICcgXHUyMTkyICcgKyByZXF1ZXN0LnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZFRpdGxlRGl2LmFwcGVuZChsYWJlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvblJhZGlvSW5wdXQgPSBuZXcgT08udWkuUmFkaW9TZWxlY3RXaWRnZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6IFsnYWZjcmMtaGVscGVyLWFjdGlvbi1yYWRpbyddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbJ0FjY2VwdCcsICdEZW55JywgJ0NvbW1lbnQnLCAnQ2xvc2UnLCAnTm9uZSddLm1hcCgobGFiZWwpID0+IG5ldyBPTy51aS5SYWRpb09wdGlvbldpZGdldCh7IGRhdGE6IGxhYmVsLCBsYWJlbCB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvblJhZGlvSW5wdXQuc2VsZWN0SXRlbUJ5TGFiZWwoJ05vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvblJhZGlvSW5wdXQub24oJ2Nob29zZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSAoKGFjdGlvblJhZGlvSW5wdXQuZmluZFNlbGVjdGVkSXRlbSgpIGFzIE9PLnVpLlJhZGlvT3B0aW9uV2lkZ2V0KS5nZXREYXRhKCkgYXMgc3RyaW5nKS50b0xvd2VyQ2FzZSgpIGFzIEFjdGlvblR5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnNUb1Rha2VbcmVxdWVzdC50YXJnZXRdW3JlcXVlc3RlZFRpdGxlXS5hY3Rpb24gPSBvcHRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydjb21tZW50JywgJ2Nsb3NlJ10uaW5jbHVkZXMob3B0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50SW5wdXRMYXlvdXQuJGVsZW1lbnQuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1lbnQgPSBjb21tZW50SW5wdXQuZ2V0VmFsdWUoKS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tZW50KSB0aGlzLmFjdGlvbnNUb1Rha2VbcmVxdWVzdC50YXJnZXRdW3JlcXVlc3RlZFRpdGxlXS5jb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBkZWxldGUgdGhpcy5hY3Rpb25zVG9UYWtlW3JlcXVlc3QudGFyZ2V0XVtyZXF1ZXN0ZWRUaXRsZV0uY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50SW5wdXRMYXlvdXQuJGVsZW1lbnQuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFjdGlvbnNUb1Rha2VbcmVxdWVzdC50YXJnZXRdW3JlcXVlc3RlZFRpdGxlXS5jb21tZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1NlbGVjdExheW91dC4kZWxlbWVudC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVueVJlYXNvbkxheW91dC4kZWxlbWVudC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2luZ1JlYXNvbkxheW91dC4kZWxlbWVudC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhY2NlcHQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdTZWxlY3RMYXlvdXQuJGVsZW1lbnQuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5hY3Rpb25zVG9UYWtlIGFzIFJlZGlyZWN0QWN0aW9ucylbcmVxdWVzdC50YXJnZXRdW3JlcXVlc3RlZFRpdGxlXS5yZWRpcmVjdFRlbXBsYXRlcyA9IHRhZ1NlbGVjdC5nZXRWYWx1ZSgpIGFzIHN0cmluZ1tdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkZW55Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVueVJlYXNvbkxheW91dC4kZWxlbWVudC5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmFjdGlvbnNUb1Rha2UgYXMgUmVkaXJlY3RBY3Rpb25zKVtyZXF1ZXN0LnRhcmdldF1bcmVxdWVzdGVkVGl0bGVdLmRlbnlSZWFzb24gPSBkZW55UmVhc29uLmdldFZhbHVlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Nsb3NlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2luZ1JlYXNvbkxheW91dC4kZWxlbWVudC5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gY2xvc2luZ1JlYXNvbi5nZXRNZW51KCkuZmluZFNlbGVjdGVkSXRlbSgpIGFzIE9PLnVpLk1lbnVPcHRpb25XaWRnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5hY3Rpb25zVG9UYWtlIGFzIFJlZGlyZWN0QWN0aW9ucylbcmVxdWVzdC50YXJnZXRdW3JlcXVlc3RlZFRpdGxlXS5jbG9zaW5nUmVhc29uID0geyBuYW1lOiBzZWxlY3RlZC5nZXRMYWJlbCgpIGFzIHN0cmluZywgaWQ6IHNlbGVjdGVkLmdldERhdGEoKSBhcyBzdHJpbmcgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnU2VsZWN0ID0gbmV3IE9PLnVpLk1lbnVUYWdNdWx0aXNlbGVjdFdpZGdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dBcmJpdHJhcnk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93UmVvcmRlcmluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5yZWRpcmVjdFRlbXBsYXRlSXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICh0YWdTZWxlY3QuZ2V0TWVudSgpIGFzIE9PLnVpLk1lbnVTZWxlY3RXaWRnZXQuQ29uZmlnT3B0aW9ucykuZmlsdGVyTW9kZSA9ICdzdWJzdHJpbmcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFnU2VsZWN0Lm9uKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29ydGVkVGFncyA9ICh0YWdTZWxlY3QuZ2V0VmFsdWUoKSBhcyBzdHJpbmdbXSkuc29ydCgoYSwgYikgPT4gYS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi50b0xvd2VyQ2FzZSgpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRhZ1NlbGVjdC5nZXRWYWx1ZSgpIGFzIHN0cmluZ1tdKS5qb2luKCc7JykgIT09IHNvcnRlZFRhZ3Muam9pbignOycpKSB0YWdTZWxlY3Quc2V0VmFsdWUoc29ydGVkVGFncyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5hY3Rpb25zVG9UYWtlIGFzIFJlZGlyZWN0QWN0aW9ucylbcmVxdWVzdC50YXJnZXRdW3JlcXVlc3RlZFRpdGxlXS5yZWRpcmVjdFRlbXBsYXRlcyA9IHNvcnRlZFRhZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnU2VsZWN0TGF5b3V0ID0gbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHRhZ1NlbGVjdCwgeyBhbGlnbjogJ2lubGluZScsIGxhYmVsOiAnUmVkaXJlY3QgdGVtcGxhdGVzJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1NlbGVjdExheW91dC4kZWxlbWVudC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbnlSZWFzb24gPSBuZXcgT08udWkuQ29tYm9Cb3hJbnB1dFdpZGdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlczogWydhZmNyYy1jbG9zaW5nLXJlYXNvbi1pbnB1dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnYXV0b2ZpbGw6dW5saWtlbHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydleGlzdHMnLCAnZXhpc3RpbmcgcGFnZXMnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydlbXB0eScsICdlbXB0eSBzdWJtaXNzaW9ucyddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ25vdGFyZ2V0JywgJ25vbmV4aXN0ZW50IG9yIG5vIHByb3ZpZGVkIHRhcmdldCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ25vdGl0bGUnLCAnbm8gdGl0bGUgcHJvdmlkZWQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyd1bmxpa2VseScsICd1bmxpa2VseSByZWRpcmVjdHMnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydleHRlcm5hbGxpbmsnLCAnZXh0ZXJuYWwgbGluayByZWRpcmVjdHMnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydlZGl0cmVxdWVzdCcsICdlZGl0IHJlcXVlc3RzJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnbm90ZW5nbGlzaCcsICdyZXF1ZXN0cyBub3QgaW4gRW5nbGlzaCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0ubWFwKChbdmFsdWUsIGxhYmVsXSkgPT4gKHsgZGF0YTogYGF1dG9maWxsOiR7dmFsdWV9YCwgbGFiZWw6IGBBdXRvZmlsbGVkIHRleHQgZm9yICR7bGFiZWx9YCB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbnlSZWFzb24uZ2V0TWVudSgpLm9uKCdjaG9vc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYWN0aW9uc1RvVGFrZSBhcyBSZWRpcmVjdEFjdGlvbnMpW3JlcXVlc3QudGFyZ2V0XVtyZXF1ZXN0ZWRUaXRsZV0uZGVueVJlYXNvbiA9IGRlbnlSZWFzb24uZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVueVJlYXNvbi5zZXRWYWx1ZSgnYXV0b2ZpbGw6dW5saWtlbHknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbnlSZWFzb24uZ2V0TWVudSgpLnNlbGVjdEl0ZW1CeURhdGEoJ2F1dG9maWxsOnVubGlrZWx5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbnlSZWFzb25MYXlvdXQgPSBuZXcgT08udWkuRmllbGRMYXlvdXQoZGVueVJlYXNvbiwgeyBhbGlnbjogJ2lubGluZScsIGxhYmVsOiAnRGVueSByZWFzb24nIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVueVJlYXNvbkxheW91dC4kZWxlbWVudC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb3NpbmdSZWFzb24gPSBuZXcgT08udWkuRHJvcGRvd25XaWRnZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6IFsnYWZjcmMtY2xvc2luZy1yZWFzb24taW5wdXQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ05vIHJlc3BvbnNlJywgJ3InXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnU3VjY2VlZGVkJywgJ3MnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnV2l0aGRyYXduJywgJ3cnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5tYXAoKFt0aXRsZSwgaWRdKSA9PiBuZXcgT08udWkuTWVudU9wdGlvbldpZGdldCh7IGRhdGE6IGlkLCBsYWJlbDogdGl0bGUgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NpbmdSZWFzb24uZ2V0TWVudSgpLm9uKCdjaG9vc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBjbG9zaW5nUmVhc29uLmdldE1lbnUoKS5maW5kU2VsZWN0ZWRJdGVtKCkgYXMgT08udWkuTWVudU9wdGlvbldpZGdldDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmFjdGlvbnNUb1Rha2UgYXMgUmVkaXJlY3RBY3Rpb25zKVtyZXF1ZXN0LnRhcmdldF1bcmVxdWVzdGVkVGl0bGVdLmNsb3NpbmdSZWFzb24gPSB7IG5hbWU6IHNlbGVjdGVkLmdldExhYmVsKCkgYXMgc3RyaW5nLCBpZDogc2VsZWN0ZWQuZ2V0RGF0YSgpIGFzIHN0cmluZyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zaW5nUmVhc29uLmdldE1lbnUoKS5zZWxlY3RJdGVtQnlMYWJlbCgnTm8gcmVzcG9uc2UnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xvc2luZ1JlYXNvbkxheW91dCA9IG5ldyBPTy51aS5GaWVsZExheW91dChjbG9zaW5nUmVhc29uLCB7IGFsaWduOiAnaW5saW5lJywgbGFiZWw6ICdDbG9zaW5nIHJlYXNvbicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zaW5nUmVhc29uTGF5b3V0LiRlbGVtZW50LmhpZGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudElucHV0ID0gbmV3IE9PLnVpLlRleHRJbnB1dFdpZGdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudElucHV0Lm9uKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudCA9IGNvbW1lbnRJbnB1dC5nZXRWYWx1ZSgpLnRyaW0oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tZW50KSB0aGlzLmFjdGlvbnNUb1Rha2VbcmVxdWVzdC50YXJnZXRdW3JlcXVlc3RlZFRpdGxlXS5jb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGRlbGV0ZSB0aGlzLmFjdGlvbnNUb1Rha2VbcmVxdWVzdC50YXJnZXRdW3JlcXVlc3RlZFRpdGxlXS5jb21tZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRJbnB1dExheW91dCA9IG5ldyBPTy51aS5GaWVsZExheW91dChjb21tZW50SW5wdXQsIHsgY2xhc3NlczogWydhZmNyYy1jb21tZW50LWlucHV0J10sIGFsaWduOiAnaW5saW5lJywgbGFiZWw6ICdDb21tZW50JyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRJbnB1dExheW91dC4kZWxlbWVudC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZFRpdGxlRGl2LmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25SYWRpb0lucHV0LiRlbGVtZW50WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1NlbGVjdExheW91dC4kZWxlbWVudFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW55UmVhc29uTGF5b3V0LiRlbGVtZW50WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NpbmdSZWFzb25MYXlvdXQuJGVsZW1lbnRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudElucHV0TGF5b3V0LiRlbGVtZW50WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFJlc3BvbmRlckVsZW1lbnQuYXBwZW5kKHJlcXVlc3RlZFRpdGxlRGl2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHNFbGVtZW50LmFwcGVuZChyZXF1ZXN0UmVzcG9uZGVyRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgKHRoaXMgYXMgdW5rbm93biBhcyB7ICRib2R5OiBKUXVlcnkgfSkuJGJvZHkuYXBwZW5kKGRldGFpbHNFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCByZXF1ZXN0IG9mIHRoaXMucGFyc2VkUmVxdWVzdHMgYXMgQ2F0ZWdvcnlSZXF1ZXN0RGF0YVtdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRldGFpbHNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGV0YWlscycpO1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhZmNyYy1oZWxwZXItcmVxdWVzdCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3VtbWFyeScpO1xuICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5RWxlbWVudC50ZXh0Q29udGVudCA9IHJlcXVlc3QubmFtZTtcblxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzRWxlbWVudC5hcHBlbmQoc3VtbWFyeUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICh0aGlzIGFzIHVua25vd24gYXMgeyAkYm9keTogSlF1ZXJ5IH0pLiRib2R5LmFwcGVuZChkZXRhaWxzRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBlcmZvcm1zIGFsbCBhY3Rpb25zIGFuZCBsb2dzIHRoZWlyIHJlc3VsdHMuXG4gICAgICAgICAqIEBwYXJhbSBkcnlSdW4gSWYgdHJ1ZSwgbm8gcGFnZXMgd2lsbCBiZSBlZGl0ZWQgb3IgY3JlYXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgYXN5bmMgcGVyZm9ybUFjdGlvbnMoZHJ5UnVuOiBib29sZWFuKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW5zZSA9IGRyeVJ1biA/ICd3aWxsIGJlJyA6ICdoYXMgYmVlbic7XG5cbiAgICAgICAgICAgIGNvbnN0IHdpbmRvd01hbmFnZXIgPSBuZXcgT08udWkuV2luZG93TWFuYWdlcigpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQod2luZG93TWFuYWdlci4kZWxlbWVudFswXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNob3dBY3Rpb25zRGlhbG9nID0gbmV3IFNob3dBY3Rpb25zRGlhbG9nKCk7XG4gICAgICAgICAgICB3aW5kb3dNYW5hZ2VyLmFkZFdpbmRvd3MoW3Nob3dBY3Rpb25zRGlhbG9nXSk7XG4gICAgICAgICAgICBzaG93QWN0aW9uc0RpYWxvZy5vcGVuKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvdW50cyA9IHsgYWNjZXB0ZWQ6IDAsIGRlbmllZDogMCwgY29tbWVudGVkOiAwLCBjbG9zZWQ6IDAgfTtcbiAgICAgICAgICAgIGxldCBuZXdQYWdlVGV4dCA9IHRoaXMuYmVmb3JlVGV4dCArIHRoaXMucGFnZUNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJlcXVlc3RQYWdlVHlwZSA9PT0gJ3JlZGlyZWN0Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFueVJlcXVlc3RIYW5kbGVkID0gT2JqZWN0LnZhbHVlcyh0aGlzLmFjdGlvbnNUb1Rha2UpLnNvbWUoKGFjdGlvbnMpID0+IE9iamVjdC52YWx1ZXMoYWN0aW9ucykuc29tZSgoYWN0aW9uKSA9PiBhY3Rpb24uYWN0aW9uICE9PSAnbm9uZScpKTtcblxuICAgICAgICAgICAgICAgIGlmIChhbnlSZXF1ZXN0SGFuZGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFt0YXJnZXQsIGFjdGlvbnNdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuYWN0aW9uc1RvVGFrZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvbWVSZXF1ZXN0QWNjZXB0ZWREZW5pZWQgPSBPYmplY3QudmFsdWVzKGFjdGlvbnMpLnNvbWUoKGFjdGlvbikgPT4gYWN0aW9uLmFjdGlvbiA9PT0gJ2FjY2VwdCcgfHwgYWN0aW9uLmFjdGlvbiA9PT0gJ2RlbnknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbFJlcXVlc3RzQWNjZXB0ZWREZW5pZWQgPSBPYmplY3QudmFsdWVzKGFjdGlvbnMpLmV2ZXJ5KChhY3Rpb24pID0+IGFjdGlvbi5hY3Rpb24gPT09ICdhY2NlcHQnIHx8IGFjdGlvbi5hY3Rpb24gPT09ICdkZW55Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2xvc2VSZWFzb24gPSBPYmplY3QudmFsdWVzKGFjdGlvbnMgYXMgUmVjb3JkPHN0cmluZywgUmVkaXJlY3RBY3Rpb24+KS5maW5kKChhY3Rpb24pID0+IGFjdGlvbi5hY3Rpb24gPT09ICdjbG9zZScpPy5jbG9zaW5nUmVhc29uPy5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbFJlcXVlc3RzQ2xvc2VkID0gT2JqZWN0LnZhbHVlcyhhY3Rpb25zIGFzIFJlY29yZDxzdHJpbmcsIFJlZGlyZWN0QWN0aW9uPikuZXZlcnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFjdGlvbikgPT4gYWN0aW9uLmFjdGlvbiA9PT0gJ2Nsb3NlJyAmJiBhY3Rpb24uY2xvc2luZ1JlYXNvbj8uaWQgPT09IGZpcnN0Q2xvc2VSZWFzb24sXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NlcHRlZFBhZ2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZW5pZWRQYWdlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudHMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbcmVxdWVzdGVkVGl0bGUsIGFjdGlvbl0gb2YgT2JqZWN0LmVudHJpZXMoYWN0aW9ucykgYXMgW3N0cmluZywgUmVkaXJlY3RBY3Rpb25dW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlUHJlZml4ID0gYFRoZSByZXF1ZXN0IHRvIGNyZWF0ZSBcIiR7cmVxdWVzdGVkVGl0bGV9XCIgXHUyMTkyIFwiJHt0YXJnZXR9XCIgJHt0ZW5zZX0gYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50ZWRNZXNzYWdlID0gYWN0aW9uLmNvbW1lbnQgPyAnIGFuZCBjb21tZW50ZWQgb24nIDogJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbi5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWNjZXB0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvbWVSZXF1ZXN0QWNjZXB0ZWREZW5pZWQgJiYgIWFsbFJlcXVlc3RzQWNjZXB0ZWREZW5pZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0FjdGlvbnNEaWFsb2cuYWRkTG9nRW50cnkoYE5vdCBhbGwgcmVxdWVzdHMgdG8gXCIke3RhcmdldH1cIiB3ZXJlIGFjY2VwdGVkIG9yIGRlbmllZCwgdGhlIGhhbmRsaW5nIG9mIFwiJHtyZXF1ZXN0ZWRUaXRsZX1cIiB3aWxsIGJlIGlnbm9yZWQuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93QWN0aW9uc0RpYWxvZy5hZGRMb2dFbnRyeShtZXNzYWdlUHJlZml4ICsgYGFjY2VwdGVkJHtjb21tZW50ZWRNZXNzYWdlfS5gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdGVkUGFnZXMucHVzaChyZXF1ZXN0ZWRUaXRsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRzLmFjY2VwdGVkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlbnknOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc29tZVJlcXVlc3RBY2NlcHRlZERlbmllZCAmJiAhYWxsUmVxdWVzdHNBY2NlcHRlZERlbmllZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93QWN0aW9uc0RpYWxvZy5hZGRMb2dFbnRyeShgTm90IGFsbCByZXF1ZXN0cyB0byBcIiR7dGFyZ2V0fVwiIHdlcmUgYWNjZXB0ZWQgb3IgZGVuaWVkLCB0aGUgaGFuZGxpbmcgb2YgXCIke3JlcXVlc3RlZFRpdGxlfVwiIGlzIGJlaW5nIGlnbm9yZWQuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93QWN0aW9uc0RpYWxvZy5hZGRMb2dFbnRyeShtZXNzYWdlUHJlZml4ICsgJ2RlbmllZC4nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbmllZFBhZ2VzLnB1c2goW3JlcXVlc3RlZFRpdGxlLCBhY3Rpb24uZGVueVJlYXNvbiEgfHwgJ2RlY2xpbmUnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRzLmRlbmllZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0FjdGlvbnNEaWFsb2cuYWRkTG9nRW50cnkobWVzc2FnZVByZWZpeCArICdjb21tZW50ZWQgb24uJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50cy5wdXNoKGBbJHtyZXF1ZXN0ZWRUaXRsZX0gXHUyMTkyICR7dGFyZ2V0fV0gJHthY3Rpb24uY29tbWVudH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHMuY29tbWVudGVkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugc2hvd0FjdGlvbnNEaWFsb2cuYWRkTG9nRW50cnkobWVzc2FnZVByZWZpeCArICdtYXJrZWQgdG8gYmUgY29tbWVudGVkIG9uLCBidXQgbm8gY29tbWVudCB3YXMgcHJvdmlkZWQuJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Nsb3NlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbFJlcXVlc3RzQ2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0FjdGlvbnNEaWFsb2cuYWRkTG9nRW50cnkobWVzc2FnZVByZWZpeCArIGBjbG9zZWQgYXMgJHthY3Rpb24uY2xvc2luZ1JlYXNvbiEubmFtZS50b0xvd2VyQ2FzZSgpfSR7Y29tbWVudGVkTWVzc2FnZX0uYCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHMuY2xvc2VkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugc2hvd0FjdGlvbnNEaWFsb2cuYWRkTG9nRW50cnkoYE5vdCBhbGwgcmVxdWVzdHMgdG8gXCIke3RhcmdldH1cIiB3ZXJlIGNsb3NlZCB3aXRoIHRoZSBzYW1lIHJlYXNvbiwgdGhlIGhhbmRsaW5nIG9mIFwiJHtyZXF1ZXN0ZWRUaXRsZX1cIiBpcyBiZWluZyBpZ25vcmVkLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWN0aW9uUmVwbGFjZVRleHQgPSBPYmplY3QudmFsdWVzKGFjdGlvbnMpWzBdLm9yaWdpbmFsVGV4dDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uUmVwbGFjZVRleHQgKz0gJ1xcbicgKyBjb21tZW50cy5tYXAoKGNvbW1lbnQpID0+IGAqIHt7QWZDIGNvbW1lbnR8MT0ke2NvbW1lbnR9fX0gfn5+fmApLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGFnZVRleHQgPSBuZXdQYWdlVGV4dC5yZXBsYWNlKE9iamVjdC52YWx1ZXMoYWN0aW9ucylbMF0ub3JpZ2luYWxUZXh0LCBzZWN0aW9uUmVwbGFjZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc29tZVJlcXVlc3RBY2NlcHRlZERlbmllZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjbG9zaW5nSWQ6IHN0cmluZztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25UZXh0QmVmb3JlID0gc2VjdGlvblJlcGxhY2VUZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGFnZXMubGVuZ3RoID4gMCAmJiBkZW5pZWRQYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NpbmdJZCA9ICdwJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXBwZWRBY2NlcHRlZFBhZ2VzID0gYWNjZXB0ZWRQYWdlcy5tYXAoKHBhZ2UpID0+IGAqIHt7c3Vic3Q6QWZDIHJlZGlyZWN0fX0gWyR7cGFnZX1dIH5+fn5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFwcGVkRGVuaWVkUGFnZXMgPSBkZW5pZWRQYWdlcy5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoW3BhZ2UsIHJlYXNvbl0pID0+IGAqIHt7c3Vic3Q6QWZDIHJlZGlyZWN0fCR7cmVhc29uLnN0YXJ0c1dpdGgoJ2F1dG9maWxsOicpID8gcmVhc29uLnJlcGxhY2UoJ2F1dG9maWxsOicsICcnKSA6IGBkZWNsaW5lfDE9JHtyZWFzb259YH19fSBbJHtwYWdlfV0gfn5+fmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkcnlSdW4pIGZvciAoY29uc3QgcGFnZSBvZiBhY2NlcHRlZFBhZ2VzKSB0aGlzLmhhbmRsZUFjY2VwdGVkUmVkaXJlY3QocGFnZSwgYWN0aW9uc1twYWdlXSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uUmVwbGFjZVRleHQgKz0gJ1xcbicgKyBtYXBwZWRBY2NlcHRlZFBhZ2VzLmpvaW4oJ1xcbicpICsgJ1xcbicgKyBtYXBwZWREZW5pZWRQYWdlcy5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGFnZVRleHQgPSBuZXdQYWdlVGV4dC5yZXBsYWNlKHNlY3Rpb25UZXh0QmVmb3JlLCBzZWN0aW9uUmVwbGFjZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWNjZXB0ZWRQYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NpbmdJZCA9ICdhJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRyeVJ1bikgZm9yIChjb25zdCBwYWdlIG9mIGFjY2VwdGVkUGFnZXMpIHRoaXMuaGFuZGxlQWNjZXB0ZWRSZWRpcmVjdChwYWdlLCBhY3Rpb25zW3BhZ2VdLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25SZXBsYWNlVGV4dCArPSBgXFxuKiB7e3N1YnN0OkFmQyByZWRpcmVjdCR7YWNjZXB0ZWRQYWdlcy5sZW5ndGggPiAxID8gJ3xhbGwnIDogJyd9fX0gfn5+fmA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1BhZ2VUZXh0ID0gbmV3UGFnZVRleHQucmVwbGFjZShzZWN0aW9uVGV4dEJlZm9yZSwgc2VjdGlvblJlcGxhY2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zaW5nSWQgPSAnZCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFwcGVkUmVhc29ucyA9IGRlbmllZFBhZ2VzLm1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChbcGFnZSwgcmVhc29uXSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgKiB7e3N1YnN0OkFmQyByZWRpcmVjdHwke3JlYXNvbi5zdGFydHNXaXRoKCdhdXRvZmlsbDonKSA/IHJlYXNvbi5yZXBsYWNlKCdhdXRvZmlsbDonLCAnJykgOiBgZGVjbGluZXwxPSR7cmVhc29ufWB9fX0ke2RlbmllZFBhZ2VzLmxlbmd0aCA+IDEgPyBgIFske3BhZ2V9XWAgOiAnJ30gfn5+fmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvblJlcGxhY2VUZXh0ICs9ICdcXG4nICsgbWFwcGVkUmVhc29ucy5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGFnZVRleHQgPSBuZXdQYWdlVGV4dC5yZXBsYWNlKHNlY3Rpb25UZXh0QmVmb3JlLCBzZWN0aW9uUmVwbGFjZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1BhZ2VUZXh0ID0gbmV3UGFnZVRleHQucmVwbGFjZShzZWN0aW9uUmVwbGFjZVRleHQsIGB7e0FmQy1jfCR7Y2xvc2luZ0lkfX19XFxuJHtzZWN0aW9uUmVwbGFjZVRleHR9XFxue3tBZkMtY3xifX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsUmVxdWVzdHNDbG9zZWQpIG5ld1BhZ2VUZXh0ID0gbmV3UGFnZVRleHQucmVwbGFjZShzZWN0aW9uUmVwbGFjZVRleHQsIGB7e0FmQy1jfCR7Zmlyc3RDbG9zZVJlYXNvbn19fVxcbiR7c2VjdGlvblJlcGxhY2VUZXh0fVxcbnt7QWZDLWN8Yn19YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJ5UnVuIHx8IHRoaXMuYmVmb3JlVGV4dCArIHRoaXMucGFnZUNvbnRlbnQgPT09IG5ld1BhZ2VUZXh0KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFwcGVkQ291bnRzID0gT2JqZWN0LmVudHJpZXMoY291bnRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoWywgY291bnRdKSA9PiBjb3VudCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKChbYWN0aW9uLCBjb3VudF0pID0+IGAke2FjdGlvbn0gJHtjb3VudH1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJywgJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcGkuZWRpdCh0aGlzLnBhZ2VUaXRsZSwgKCkgPT4gKHsgdGV4dDogbmV3UGFnZVRleHQsIHN1bW1hcnk6IGBIYW5kbGluZyBBZkMgcmVkaXJlY3QgcmVxdWVzdHMgKCR7bWFwcGVkQ291bnRzfSkke3RoaXMuc2NyaXB0TWVzc2FnZX1gIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEhhbmRsZWQgJHttYXBwZWRDb3VudHN9IHJlZGlyZWN0IHJlcXVlc3RzLCByZWxvYWRpbmcuLi5gKTtcblxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHNob3dBY3Rpb25zRGlhbG9nLmFkZExvZ0VudHJ5KGBObyByZXF1ZXN0cyAke2RyeVJ1biA/ICd3aWxsIGJlJyA6ICdoYXZlIGJlZW4nfSBoYW5kbGVkIWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBoYW5kbGVBY2NlcHRlZFJlZGlyZWN0KHBhZ2U6IHN0cmluZywgZGF0YTogUmVkaXJlY3RBY3Rpb24sIHRhcmdldDogc3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBtYXBwZWRUYWdzID0gZGF0YS5yZWRpcmVjdFRlbXBsYXRlcyAmJiBkYXRhLnJlZGlyZWN0VGVtcGxhdGVzLmxlbmd0aCA+IDAgPyBkYXRhLnJlZGlyZWN0VGVtcGxhdGVzPy5tYXAoKHRhZykgPT4gYHt7JHt0YWd9fX1gKS5qb2luKCdcXG4nKSA6IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuYXBpLmNyZWF0ZShcbiAgICAgICAgICAgICAgICBwYWdlLFxuICAgICAgICAgICAgICAgIHsgc3VtbWFyeTogYENyZWF0aW5nIHJlZGlyZWN0IHRvIFtbJHt0YXJnZXR9XV0gYXMgcmVxdWVzdGVkIGF0IFtbV1A6QUZDL1JdXSR7dGhpcy5zY3JpcHRNZXNzYWdlfWAgfSxcbiAgICAgICAgICAgICAgICBgI1JFRElSRUNUIFtbJHt0YXJnZXR9XV0ke21hcHBlZFRhZ3MgPyBgXFxuXFxue3tSZWRpcmVjdCBjYXRlZ29yeSBzaGVsbHxcXG4ke21hcHBlZFRhZ3N9XFxufX1gIDogJyd9YCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRhbGtOYW1lID0gbXcuVGl0bGUubmV3RnJvbVRleHQocGFnZSkhLmdldFRhbGtQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpO1xuXG4gICAgICAgICAgICB0aGlzLmFwaS5jcmVhdGUoXG4gICAgICAgICAgICAgICAgdGFsa05hbWUsXG4gICAgICAgICAgICAgICAgeyBzdW1tYXJ5OiBgUGxhY2luZyBiYW5uZXIgZm9yIFtbV2lraXBlZGlhOldpa2lQcm9qZWN0IEFydGljbGVzIGZvciBjcmVhdGlvbnxXaWtpUHJvamVjdCBBcnRpY2xlcyBmb3IgY3JlYXRpb25dXSAke3RoaXMuc2NyaXB0TWVzc2FnZX1gIH0sXG4gICAgICAgICAgICAgICAgYHt7V2lraVByb2plY3QgYmFubmVyIHNoZWxsfGNsYXNzPVJlZGlyZWN0fFxcbnt7V2lraVByb2plY3QgQXJ0aWNsZXMgZm9yIGNyZWF0aW9ufHRzPXt7c3Vic3Q6TE9DQUxUSU1FU1RBTVB9fXxyZXZpZXdlcj0ke213LmNvbmZpZy5nZXQoJ3dnVXNlck5hbWUnKX19fVxcbn19YCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKEFmY3JjSGVscGVyRGlhbG9nLnByb3RvdHlwZSwgT08udWkuUHJvY2Vzc0RpYWxvZy5wcm90b3R5cGUpO1xufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiYUFHQSxHQUFHLE9BQU8sTUFBTSxDQUFDLGlCQUFrQixlQUFnQixrQkFBbUIsaUJBQWlCLEVBQUcsSUFBTSxDQUM1RixNQUFNQSxFQUF3QixHQUFHLE9BQU8sSUFBSSxZQUFZLElBQU0sNENBQ3hEQyxFQUF3QixHQUFHLE9BQU8sSUFBSSxZQUFZLElBQU0sNkNBRTlELEdBQUksQ0FBQ0QsR0FBeUIsQ0FBQ0MsRUFBdUIsT0FFdEQsTUFBTUMsRUFBa0JGLEVBQXdCLFdBQWEsV0FFaEQsR0FBRyxLQUFLLGVBQWUsR0FBRyxPQUFPLElBQUksTUFBTSxJQUFNLFVBQVksT0FBUyxhQUFjLElBQUssVUFBVUUsQ0FBZSxxQkFBc0IsY0FBYyxFQUU5SixpQkFBaUIsUUFBVUMsR0FBVSxDQUN0Q0EsRUFBTSxlQUFlLEVBRXJCLE1BQU1DLEVBQWdCLElBQUksR0FBRyxHQUFHLGNBQ2hDLFNBQVMsS0FBSyxPQUFPQSxFQUFjLFNBQVMsQ0FBQyxDQUFDLEVBRTlDLE1BQU1DLEVBQW9CLElBQUlDLEVBQWtCSixFQUFpQixHQUFHLE9BQU8sSUFBSSxZQUFZLENBQUMsRUFFNUZFLEVBQWMsV0FBVyxDQUFDQyxDQUFpQixDQUFDLEVBRTVDQSxFQUFrQixLQUFLLENBQzNCLENBQUMsRUFFRCxNQUFNRSxVQUEwQixHQUFHLEdBQUcsTUFBTyxDQUl6QyxhQUFjLENBQ1YsTUFBTSxDQUFFLEtBQU0sUUFBUyxDQUFDLEVBTTVCLGdCQUFhLElBQU0sQ0FDZixHQUFHLEdBQUcsT0FBTyxVQUFVLFdBQVcsTUFBTSxJQUFJLEVBRTVDLEdBQUcsS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUFBLEVBR3pCLEVBRVUs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QUFJLEVBQUcsWUFBWSxFQUFHLGdCQUFnQixFQUU1RSxLQUFLLElBQUksT0FDTCtELEVBQ0EsQ0FBRSxRQUFTLHdHQUF3RyxLQUFLLGFBQWEsRUFBRyxFQUN4STtBQUFBLDJFQUF3SCxHQUFHLE9BQU8sSUFBSSxZQUFZLENBQUM7QUFBQSxHQUN2SixDQUNKLENBQ0osQ0FFQSxPQUFPLE9BQU9oRixFQUFrQixVQUFXLEdBQUcsR0FBRyxjQUFjLFNBQVMsQ0FDNUUsQ0FBQyIsCiAgIm5hbWVzIjogWyJpc1JlZGlyZWN0UmVxdWVzdFBhZ2UiLCAiaXNDYXRlZ29yeVJlcXVlc3RQYWdlIiwgInJlcXVlc3RQYWdlVHlwZSIsICJldmVudCIsICJ3aW5kb3dNYW5hZ2VyIiwgImFmY3JjSGVscGVyRGlhbG9nIiwgIkFmY3JjSGVscGVyRGlhbG9nIiwgIlNob3dBY3Rpb25zRGlhbG9nIiwgImNsb3NlQnV0dG9uIiwgIm1lc3NhZ2UiLCAibG9nRW50cnkiLCAicGFnZVRpdGxlIiwgInJlc3BvbnNlIiwgInRhZyIsICJhY3Rpb24iLCAic2VjdGlvbnMiLCAibWF0Y2giLCAic2VjdGlvblRleHQiLCAic2VjdGlvbkhlYWRlciIsICJwYXJzZWREYXRhIiwgInJlcXVlc3RlZFBhZ2VzIiwgInBhcnNlZFRhcmdldCIsICJyZXF1ZXN0ZXIiLCAicGFnZSIsICJyZXF1ZXN0IiwgImRldGFpbHNFbGVtZW50IiwgInN1bW1hcnlFbGVtZW50IiwgImxpbmtFbGVtZW50IiwgInJlcXVlc3RJbmZvRWxlbWVudCIsICJub25lRWxlbWVudCIsICJyZWFzb25EaXYiLCAicmVhc29uTGFiZWwiLCAic291cmNlRGl2IiwgInNvdXJjZUxhYmVsIiwgInJlcXVlc3RlckRpdiIsICJyZXF1ZXN0ZXJMYWJlbCIsICJyZXF1ZXN0ZXJMaW5rIiwgInJlcXVlc3RSZXNwb25kZXJFbGVtZW50IiwgInJlcXVlc3RlZFRpdGxlIiwgInJlcXVlc3RlZFRpdGxlRGl2IiwgImxhYmVsIiwgImFjdGlvblJhZGlvSW5wdXQiLCAib3B0aW9uIiwgImNvbW1lbnRJbnB1dExheW91dCIsICJjb21tZW50IiwgImNvbW1lbnRJbnB1dCIsICJ0YWdTZWxlY3RMYXlvdXQiLCAiZGVueVJlYXNvbkxheW91dCIsICJjbG9zaW5nUmVhc29uTGF5b3V0IiwgInRhZ1NlbGVjdCIsICJkZW55UmVhc29uIiwgInNlbGVjdGVkIiwgImNsb3NpbmdSZWFzb24iLCAic29ydGVkVGFncyIsICJhIiwgImIiLCAidmFsdWUiLCAidGl0bGUiLCAiaWQiLCAiZHJ5UnVuIiwgInRlbnNlIiwgInNob3dBY3Rpb25zRGlhbG9nIiwgImNvdW50cyIsICJuZXdQYWdlVGV4dCIsICJhY3Rpb25zIiwgInRhcmdldCIsICJzb21lUmVxdWVzdEFjY2VwdGVkRGVuaWVkIiwgImFsbFJlcXVlc3RzQWNjZXB0ZWREZW5pZWQiLCAiZmlyc3RDbG9zZVJlYXNvbiIsICJhbGxSZXF1ZXN0c0Nsb3NlZCIsICJhY2NlcHRlZFBhZ2VzIiwgImRlbmllZFBhZ2VzIiwgImNvbW1lbnRzIiwgIm1lc3NhZ2VQcmVmaXgiLCAiY29tbWVudGVkTWVzc2FnZSIsICJzZWN0aW9uUmVwbGFjZVRleHQiLCAiY2xvc2luZ0lkIiwgInNlY3Rpb25UZXh0QmVmb3JlIiwgIm1hcHBlZEFjY2VwdGVkUGFnZXMiLCAibWFwcGVkRGVuaWVkUGFnZXMiLCAicmVhc29uIiwgIm1hcHBlZFJlYXNvbnMiLCAibWFwcGVkQ291bnRzIiwgImNvdW50IiwgImRhdGEiLCAibWFwcGVkVGFncyIsICJ0YWxrTmFtZSJdCn0K
