"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const P=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",j=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!P&&!j)return;const L=P?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${L} creation requests`,"afcrc-helper").addEventListener("click",M=>{M.preventDefault();const C=new OO.ui.WindowManager;document.body.append(C.$element[0]);const e=new w(L,mw.config.get("wgPageName"));C.addWindows([e]),e.open()});class A extends OO.ui.Dialog{constructor(){super({size:"medium"});this.initialize=()=>{OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container");const e=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]});return e.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,e.$element),this};this.getBodyHeight=()=>this.contentLayout.$element.outerHeight(!0);A.static.name="ShowActionsDialog",A.static.title="Actions"}addLogEntry(e){const t=document.createElement("div");t.textContent=e,this.logOutput.append(t)}}Object.assign(A.prototype,OO.ui.Dialog.prototype);class w extends OO.ui.ProcessDialog{constructor(e,t){super({size:"large"});this.api=new mw.Api;this.scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";this.parsedRequests=[];this.actionsToTake={};this.getSetupProcess=()=>(mw.util.addCSS(`
.afcrc-helper-request {
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}`),w.super.prototype.getSetupProcess.call(this).next(()=>this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"}).then(e=>{this.redirectTemplateItems=Object.keys(JSON.parse(e.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")).map(t=>new OO.ui.MenuOptionWidget({data:t,label:t}))})).next(()=>this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle}).then(e=>{this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()})));this.getActionProcess=e=>{switch(e){case"cancel":return new OO.ui.Process(()=>{this.getManager().closeWindow(this)});case"show-actions":return new OO.ui.Process(()=>{this.performActions(!0)});case"save":return new OO.ui.Process(()=>{this.performActions(!1)});default:return w.super.prototype.getActionProcess.call(this,e)}};this.getTeardownProcess=()=>w.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});w.static.name="AfcrcHelperDialog",w.static.title="afcrc-helper",w.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"show-actions",label:"Show actions to take"},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=t,this.requestPageType=e}parseRequests(){this.beforeText=this.pageContent.match(/^(.*?)==/s)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==").replaceAll(new RegExp(`\\[https?:${mw.config.get("wgServer")}/(.*?)]`,"g"),"[[$1]]");const e=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(t=>t[0]);for(const t of e){if(/{{afc-c\|/i.test(t))continue;const r=t.match(/^==(.*?)==$/m)[1].trim();if(L==="redirect"){const s={},i=[...r.matchAll(/\[\[(.*?)]]/g)].map(o=>o[1].trim().replace(/^:/,"").replaceAll("_"," "));s.pages=i;const O=t.match(/Target of redirect: ?\[\[(.*?)]]/)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!O)continue;s.target=O,s.reason=t.match(/reason: ?(.*?)\*source(?: \(if applicable\))?:/is)[1].trim(),s.source=t.match(/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n)/is)[1].trim();const y=t.match(t.includes("<references />")?/<references \/>\n(.*)/:new RegExp(`(?:<references \\/>${s.source?`|${s.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))[1].trim();s.requester={type:y.includes("[[User:")?"user":"ip",name:y.match(/(?:Special:Contributions\/|User:)(.*?)\|/)[1].trim()},this.parsedRequests.push(s),this.actionsToTake[s.target]=Object.fromEntries(i.map(o=>[o,{originalText:t.replace(/^==.*?==$/m,"").trim(),action:"none"}]))}else{const s={}}}}loadInputElements(){if(this.requestPageType==="redirect")for(const e of this.parsedRequests){const t=document.createElement("details");t.classList.add("afcrc-helper-request");const g=document.createElement("summary");g.innerHTML=e.pages.map(a=>`<b>${a}</b>`).join(", ")+" \u2192 ";const r=document.createElement("a");r.target="_blank",r.href=mw.util.getUrl(e.target),r.textContent=e.target,g.append(r),t.append(g);const s=document.createElement("div");s.classList.add("afcrc-helper-request-info");const i=document.createElement("span");i.style.color="dimgray",i.textContent="None";const O=document.createElement("div"),y=document.createElement("b");y.textContent="Reason: ",O.append(y),e.reason?O.append(e.reason):O.append(i),s.append(O);const o=document.createElement("div"),m=document.createElement("b");m.textContent="Source: ",o.append(m),e.source?o.append(e.source):o.append(i),s.append(o);const $=document.createElement("div"),k=document.createElement("b");k.textContent="Requester: ",$.append(k);const T=document.createElement("a");T.target="_blank",T.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),T.textContent=e.requester.name,$.append(T),s.append($),t.append(s),t.append(document.createElement("hr"));const q=document.createElement("div");q.classList.add("afcrc-helper-request-responder");for(const a of e.pages){const b=document.createElement("div"),v=document.createElement("b");v.textContent=a+" \u2192 "+e.target,b.append(v);const d=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(c=>new OO.ui.RadioOptionWidget({data:c,label:c}))});d.selectItemByLabel("None"),d.on("choose",()=>{const c=d.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[e.target][a].action=c,["comment","close"].includes(c)){E.$element.show();const f=x.getValue().trim();f?this.actionsToTake[e.target][a].comment=f:delete this.actionsToTake[e.target][a].comment}else E.$element.hide(),delete this.actionsToTake[e.target][a].comment;switch(u.$element.hide(),h.$element.hide(),R.$element.hide(),c){case"accept":{u.$element.show(),this.actionsToTake[e.target][a].redirectTemplates=n.getValue();break}case"deny":{h.$element.show(),this.actionsToTake[e.target][a].denyReason=l.getValue();break}case"close":{R.$element.show();const f=p.getMenu().findSelectedItem();this.actionsToTake[e.target][a].closingReason={name:f.getLabel(),id:f.getData()};break}}});const n=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1});n.getMenu().addItems(this.redirectTemplateItems),n.getMenu().filterMode="substring",n.on("change",()=>{const c=n.getValue().sort((f,W)=>f.toLowerCase().localeCompare(W.toLowerCase()));n.getValue().join(";")!==c.join(";")&&n.setValue(c),this.actionsToTake[e.target][a].redirectTemplates=c});const u=new OO.ui.FieldLayout(n,{align:"inline",label:"Redirect templates"});u.$element.hide();const l=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([c,f])=>({data:`autofill:${c}`,label:`Autofilled text for ${f}`}))});l.getMenu().on("choose",()=>{this.actionsToTake[e.target][a].denyReason=l.getValue()}),l.setValue("autofill:unlikely"),l.getMenu().selectItemByData("autofill:unlikely");const h=new OO.ui.FieldLayout(l,{align:"inline",label:"Deny reason"});h.$element.hide();const p=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([c,f])=>new OO.ui.MenuOptionWidget({data:f,label:c}))}});p.getMenu().on("choose",()=>{const c=p.getMenu().findSelectedItem();this.actionsToTake[e.target][a].closingReason={name:c.getLabel(),id:c.getData()}}),p.getMenu().selectItemByLabel("No response");const R=new OO.ui.FieldLayout(p,{align:"inline",label:"Closing reason"});R.$element.hide();const x=new OO.ui.TextInputWidget;x.on("change",()=>{const c=x.getValue().trim();c?this.actionsToTake[e.target][a].comment=c:delete this.actionsToTake[e.target][a].comment});const E=new OO.ui.FieldLayout(x,{classes:["afcrc-comment-input"],align:"inline",label:"Comment"});E.$element.hide(),b.append(d.$element[0],u.$element[0],h.$element[0],R.$element[0],E.$element[0]),q.append(b)}t.append(q),this.$body.append(t)}else for(const e of this.parsedRequests){const t=document.createElement("details");t.classList.add("afcrc-helper-request");const g=document.createElement("summary");g.textContent=e.name,t.append(g),this.$body.append(t)}}async performActions(e){const t=e?"will be":"has been",g=new OO.ui.WindowManager;document.body.append(g.$element[0]);const r=new A;g.addWindows([r]),r.open();const s={accepted:0,denied:0,commented:0,closed:0};let i=this.beforeText+this.pageContent;if(this.requestPageType==="redirect")if(Object.values(this.actionsToTake).some(y=>Object.values(y).some(o=>o.action!=="none"))){for(const[o,m]of Object.entries(this.actionsToTake)){const $=Object.values(m).some(n=>n.action==="accept"||n.action==="deny"),k=Object.values(m).every(n=>n.action==="accept"||n.action==="deny"),T=Object.values(m).find(n=>n.action==="close")?.closingReason?.id,q=Object.values(m).every(n=>n.action==="close"&&n.closingReason?.id===T),a=[],b=[],v=[];for(const[n,u]of Object.entries(m)){const l=`The request to create "${n}" \u2192 "${o}" ${t} `,h=u.comment?" and commented on":"";switch(u.action){case"accept":{$&&!k?r.addLogEntry(`Not all requests to "${o}" were accepted or denied, the handling of "${n}" will be ignored.`):(r.addLogEntry(l+`accepted${h}.`),a.push(n),s.accepted++);break}case"deny":{$&&!k?r.addLogEntry(`Not all requests to "${o}" were accepted or denied, the handling of "${n}" is being ignored.`):(r.addLogEntry(l+"denied."),b.push([n,u.denyReason||"decline"]),s.denied++);break}case"comment":{u.comment?(r.addLogEntry(l+"commented on."),v.push(`[${n} \u2192 ${o}] ${u.comment}`),s.commented++):r.addLogEntry(l+"marked to be commented on, but no comment was provided.");break}case"close":{q?(r.addLogEntry(l+`closed as ${u.closingReason.name.toLowerCase()}${h}.`),s.closed++):r.addLogEntry(`Not all requests to "${o}" were closed with the same reason, the handling of "${n}" is being ignored.`);break}}}let d=Object.values(m)[0].originalText;if(v.length>0&&(d+=`
`+v.map(n=>`* {{AfC comment|1=${n}}} ~~~~`).join(`
`),i=i.replace(Object.values(m)[0].originalText,d)),$){let n;const u=d;if(a.length>0&&b.length>0){n="p";const l=a.map(p=>`* {{subst:AfC redirect}} [${p}] ~~~~`),h=b.map(([p,R])=>`* {{subst:AfC redirect|${R.startsWith("autofill:")?R.replace("autofill:",""):`decline|1=${R}`}}} [${p}] ~~~~`);if(!e)for(const p of a)this.handleAcceptedRedirect(p,m[p],o);d+=`
`+l.join(`
`)+`
`+h.join(`
`),i=i.replace(u,d)}else if(a.length>0){if(n="a",!e)for(const l of a)this.handleAcceptedRedirect(l,m[l],o);d+=`
* {{subst:AfC redirect${a.length>1?"|all":""}}} ~~~~`,i=i.replace(u,d)}else{n="d";const l=b.map(([h,p])=>`* {{subst:AfC redirect|${p.startsWith("autofill:")?p.replace("autofill:",""):`decline|1=${p}`}}}${b.length>1?` [${h}]`:""} ~~~~`);d+=`
`+l.join(`
`),i=i.replace(u,d)}i=i.replace(d,`{{AfC-c|${n}}}
${d}
{{AfC-c|b}}`)}else q&&(i=i.replace(d,`{{AfC-c|${T}}}
${d}
{{AfC-c|b}}`))}if(e||this.beforeText+this.pageContent===i)return;const y=Object.entries(s).filter(([,o])=>o>0).map(([o,m])=>`${o} ${m}`).join(", ");await this.api.edit(this.pageTitle,()=>({text:i,summary:`Handling AfC redirect requests (${y})${this.scriptMessage}`})),mw.notify(`Handled ${y} redirect requests, reloading...`),window.location.reload()}else r.addLogEntry(`No requests ${e?"will be":"have been"} handled!`)}handleAcceptedRedirect(e,t,g){const r=t.redirectTemplates&&t.redirectTemplates.length>0?t.redirectTemplates?.map(i=>`{{${i}}}`).join(`
`):null;this.api.create(e,{summary:`Creating redirect to [[${g}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},`#REDIRECT [[${g}]]${r?`

{{Redirect category shell|
${r}
}}`:""}`);const s=mw.Title.newFromText(e).getTalkPage().getPrefixedText();this.api.create(s,{summary:`Placing banner for [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] ${this.scriptMessage}`},`{{WikiProject banner shell|class=Redirect|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`)}}Object.assign(w.prototype,OO.ui.ProcessDialog.prototype)});
//# sourceMappingURL=data:application/json;base64,
