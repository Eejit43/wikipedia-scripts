// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper/afcrc-helper.ts

"use strict";(()=>{var ue=Object.defineProperty;var B=(f,e)=>()=>(f&&(e=f(f=0)),e);var ae=(f,e)=>{for(var t in e)ue(f,t,{get:e[t],enumerable:!0})};var z,se=B(()=>{"use strict";z=class f extends OO.ui.Dialog{contentLayout;logOutput;closeButton;constructor(){super({size:"large"}),f.static.name="ActionsDialog",f.static.title="Actions"}initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);addLogEntry(e,t="notice"){let n=new OO.ui.MessageWidget({type:t,inline:!0,label:new OO.ui.HtmlSnippet(e)});this.logOutput.append(n.$element[0]),this.updateSize(),this.closeButton.scrollElementIntoView()}showReload(){this.closeButton.$element.remove();let e=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});e.on("click",()=>window.location.reload()),this.contentLayout.$element.append(e.$element)}};Object.assign(z.prototype,OO.ui.Dialog.prototype)});var N,ee=B(()=>{"use strict";se();N=class f extends OO.ui.ProcessDialog{api=new mw.Api;scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";requestPageType;pageTitle;createdPageWatchMethod;beforeText;pageContent;parsedRequests;editsCreationsToMake=[];constructor(e,t,n){super({size:"large"}),f.static.name="AfcrcHelperDialog",f.static.title="afcrc-helper",f.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=t,this.requestPageType=e,this.createdPageWatchMethod=n&&["nochange","preferences","unwatch","watch"].includes(n)?n:"preferences",document.body.classList.add("afcrc-helper-open"),mw.util.addCSS(`
body.afcrc-helper-open #mw-teleport-target {
    z-index: 500;
}

.afcrc-helper-request {
    margin: 10px;
    border-radius: 5px;
    background-color: #eee;
    padding: 5px;
    color: #202122;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-target-editor {
    min-width: 1ch;
    max-width: calc(100% - 4ch);
    font-family: monospace;
}

.afcrc-helper-external-link {
    text-decoration: none !important;
}

.afcrc-helper-external-link svg {
    display: inline-block;
    width: 1em;
    height: 1em;
    fill: currentColor;
}

.afcrc-helper-request-info,
.afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div,
.afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout-header {
    width: max-content;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input,
.afcrc-comment-input {
    max-width: 50%;
}

.afcrc-helper-template-parameters-container,
.afcrc-helper-template-parameters-container details {
    margin-block: 10px;
    border: 1px solid #a2a9b1;
    border-radius: 2px;
    background-color: white;
    padding: 5px;
}

.afcrc-helper-template-parameters-container {
    margin-left: 8px;
}

.afcrc-helper-template-parameters-container summary {
    cursor: pointer;
    font-weight: bold;
}

.afcrc-helper-template-parameters-container details {
    margin-block: 5px;
    background-color: #e2e2e2;
}

#afcrc-helper-no-templates-message {
    padding: 5px;
}`)}getActionProcess=e=>!e||e==="cancel"?new OO.ui.Process(()=>{this.parsedRequests.length>0?OO.ui.confirm("Are you sure you want to close? All changes will be discarded.").then(t=>t?this.close():null):this.close()}):e==="save"?new OO.ui.Process(()=>{this.performActions()}):f.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>f.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty(),document.body.classList.remove("afcrc-helper-open")});async load(){let e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle});this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=/^(.*?)==/s.exec(this.pageContent)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==");let e=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(t=>t[0]);for(let t of e){if(/{{afc-c\|/i.test(t))continue;let o=/^==(.*?)==$/m.exec(t)[1].trim();this.parseSubtypeRequests(t,o)}}parseSubtypeRequests(e,t){throw new Error("Not implemented.")}loadInputElements(){if(this.parsedRequests.length>0){let e=0,t=()=>{let o=Math.min(e+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${e+1}-${o}/${this.parsedRequests.length} requests)`);for(let i=e;i<o;i++)this.loadSubtypeElements(i);o<this.parsedRequests.length?(e=o,setTimeout(t,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};t()}else{let e=new OO.ui.MessageWidget({type:"notice",label:"No valid requests to handle!"}),t=new OO.ui.PanelLayout({padded:!0,expanded:!1});t.$element.append(e.$element),this.$body.append(t.$element),this.updateSize()}}loadSubtypeElements(e){throw new Error("Not implemented.")}updateRequestColor(e,t){throw new Error("Not implemented.")}async performActions(){let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let t=new z;e.addWindows([t]),t.open();let n={accepted:0,denied:0,"commented on":0,closed:0},o=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();this.performSubtypeActions(t,n,o)}async performSubtypeActions(e,t,n){throw new Error("Not implemented.")}formatDeniedReason(e){let t=e.startsWith("autofill:")?/autofill:(\w+)/.exec(e)[1]:`decline|2=${e}`,n=e.includes(",")?" "+e.slice(e.indexOf(",")+1).trim():"";return`{{subst:AfC ${this.requestPageType}|${t}}}${n}`}mapDeniedReasons(e,t,n){if(t)return`* ${this.formatDeniedReason(e[0][1])} ~~~~`;let o={};for(let[s,a]of e)o[a]||(o[a]=[]),o[a].push(s);let i=Object.entries(o);return i.map(([s,a])=>`* ${this.formatDeniedReason(s)}${i.length>1||!n?` (${a.map(c=>`[[${c}]]`).join(", ")})`:""} ~~~~`).join(`
`)}mapComments(e,t,n){if(t)return`* {{AfC comment|1=${e[0][1]}}} ~~~~`;let o={};for(let[s,a]of e)o[a]||(o[a]=[]),o[a].push(s);let i=Object.entries(o);return i.map(([s,a])=>`* {{AfC comment|1=${s}}}${i.length>1||!n?` (${a.map(c=>`[[${c}]]`).join(", ")})`:""} ~~~~`).join(`
`)}modifySectionData(e,{prepend:t,append:n}){let{fullSectionText:o,sectionText:i}=e;return t&&(e.sectionText=t+`
`+e.sectionText),n&&(e.sectionText+=`
`+n),e.fullSectionText=e.fullSectionText.replace(i,e.sectionText),e.pageText=e.pageText.replace(o,e.fullSectionText),e}async makeAllEditsCreations(e){for(let t of this.editsCreationsToMake){let n=t.type==="edit"?this.api.edit(t.title,t.transform):this.api.create(t.title,{summary:t.summary,watchlist:this.createdPageWatchMethod},t.text),o=document.createElement("a");o.target="_blank",o.href=mw.util.getUrl(t.title,"isRedirect"in t&&t.isRedirect?{redirect:"no"}:void 0),o.textContent=t.title,e.addLogEntry(`${t.type==="edit"?"Editing":"Creating"} ${o.outerHTML}...`),await n.catch(async(i,s)=>{i==="ratelimited"?(e.addLogEntry(`Rate limited. Waiting for 70 seconds... (resuming at ${new Date(Date.now()+7e4).toLocaleTimeString()})`,"warning"),await new Promise(a=>setTimeout(a,7e4)),e.addLogEntry("Continuing...","success"),await n.catch((a,c)=>{e.addLogEntry(`Error ${t.type==="edit"?"editing":"creating"} ${o.outerHTML}: ${c?.error.info??"Unknown error"} (${a}).`,"error")})):e.addLogEntry(`Error ${t.type==="edit"?"editing":"creating"} ${o.outerHTML}: ${s?.error.info??"Unknown error"} (${i}).`,"error")})}}};Object.assign(N.prototype,OO.ui.ProcessDialog.prototype)});var oe={};ae(oe,{default:()=>Y});var Y,ie=B(()=>{"use strict";ee();Y=class extends N{redirectTemplates;parsedRequests=[];actionsToTake=[];async load(){let e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"});this.redirectTemplates=JSON.parse(e.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}"),super.load()}parseSubtypeRequests(e,t){let n={},o=[...t.matchAll(/\[\[(.*?)]]/g)].map(c=>c[1]?.trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);if(o.length===0)return;n.pages=o;let i=/Target of redirect: ?\[\[(.*?)]]/.exec(e)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!i)return;n.target=i,n.reason=/reason: ?(.*?)\*source(?: \(if applicable\))?:/is.exec(e)?.[1].trim()??"",n.source=/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is.exec(e)?.[1].trim()??"";let s=e.match(e.includes("<references />")?/<references \/>\n+(.*)/:new RegExp(`(?:<references \\/>${n.source?`|${n.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))?.[1].trim(),a=s?/(?:Special:Contributions\/|User(?: talk)?:)(.*?)\|/.exec(s)?.[1].trim():null;n.requester=s&&a?{type:/\[\[User( talk)?:/.test(s)?"user":"ip",name:a}:null,this.parsedRequests.push(n),this.actionsToTake.push({target:n.target,requests:Object.fromEntries(o.map(c=>[c,{originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"}]))})}loadSubtypeElements(e){let t=this.parsedRequests[e],n=document.createElement("details");n.classList.add("afcrc-helper-request"),n.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));let o=document.createElement("summary");o.innerHTML=t.pages.map(p=>`<b>${p}</b>`).join(", ")+" \u2192 ",o.addEventListener("keyup",p=>{document.activeElement?.tagName==="INPUT"&&p.key===" "&&p.preventDefault()});let i=document.createElement("input");i.classList.add("afcrc-helper-target-editor"),i.style.width=`${t.target.length}ch`,i.value=t.target,i.addEventListener("input",()=>{i.value=i.value.replaceAll("_"," "),i.style.width=`${i.value.length}ch`,this.actionsToTake[e].target=i.value,s.href=mw.util.getUrl(i.value)}),o.append(i);let s=document.createElement("a");s.classList.add("afcrc-helper-external-link"),s.target="_blank",s.href=mw.util.getUrl(t.target),s.innerHTML=`
<svg viewbox="0 0 48 48">
<path d="M36 24c-1.2 0-2 0.8-2 2v12c0 1.2-0.8 2-2 2h-22c-1.2
    0-2-0.8-2-2v-22c0-1.2 0.8-2 2-2h12c1.2 0 2-0.8 2-2s-0.8-2-2-2h-12c-3.4
    0-6 2.6-6 6v22c0 3.4 2.6 6 6 6h22c3.4 0 6-2.6
    6-6v-12c0-1.2-0.8-2-2-2z"></path>
<path d="M43.8 5.2c-0.2-0.4-0.6-0.8-1-1-0.2-0.2-0.6-0.2-0.8-0.2h-12c-1.2
    0-2 0.8-2 2s0.8 2 2 2h7.2l-18.6 18.6c-0.8 0.8-0.8 2 0 2.8 0.4 0.4 0.8
    0.6 1.4 0.6s1-0.2 1.4-0.6l18.6-18.6v7.2c0 1.2 0.8 2 2 2s2-0.8
    2-2v-12c0-0.2 0-0.6-0.2-0.8z"></path>
</svg>`,o.append(s),n.append(o);let a=document.createElement("div");a.classList.add("afcrc-helper-request-info");let c=document.createElement("span");c.style.color="dimgray",c.textContent="None";let g=document.createElement("span");g.style.color="dimgray",g.textContent="Unknown";let d=document.createElement("div"),R=document.createElement("b");R.textContent="Reason: ",d.append(R),t.reason?d.append(t.reason):d.append(c.cloneNode(!0)),a.append(d);let h=document.createElement("div"),A=document.createElement("b");A.textContent="Source: ",h.append(A),t.source?h.append(t.source):h.append(c.cloneNode(!0)),a.append(h);let T=document.createElement("div"),C=document.createElement("b");if(C.textContent="Requester: ",T.append(C),t.requester){let p=document.createElement("a");p.target="_blank",p.href=t.requester.type==="user"?mw.util.getUrl(`User:${t.requester.name}`):mw.util.getUrl(`Special:Contributions/${t.requester.name}`),p.textContent=t.requester.name,T.append(p)}else T.append(g.cloneNode(!0));a.append(T),n.append(a),n.append(document.createElement("hr"));let m=document.createElement("div");m.classList.add("afcrc-helper-request-responder");let l=[],b=[],j=[],k=[];for(let p of t.pages){let H=document.createElement("div"),V=document.createElement("b");V.textContent=p,H.append(V);let E,O,W=[],P=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(w=>new OO.ui.RadioOptionWidget({data:w,label:w}))});l.push(P),P.selectItemByLabel("None"),P.on("choose",w=>{setTimeout(()=>this.updateSize(),0);let U=w.getData().toLowerCase();if(this.actionsToTake[e].requests[p].action=U,!E||!O){let L=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.entries(this.redirectTemplates).map(([x,{redirect:I}])=>{if(!I)return{data:x,label:x};let S=new OO.ui.HtmlSnippet(`${x} <i>(redirect with possibilities)</i>`);return{data:x,label:S}})});L.getMenu().filterMode="substring",L.on("change",()=>{let x=L.getValue().sort((S,M)=>S.toLowerCase().localeCompare(M.toLowerCase()));L.getValue().join(";")!==x.join(";")&&L.setValue(x),this.actionsToTake[e].requests[p].redirectTemplates=x;for(let S of W)S.details.style.display="none";let I=0;for(let S of L.getValue()){let M=W.find(G=>G.name===S);M&&(M.details.style.display="block",I++)}X.textContent=`Template parameters (${I>0?`for ${I} template${I>1?"s":""}`:"none to show"})`,J.style.display=I>0?"none":"block"}),E=new OO.ui.FieldLayout(L,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates:"}),F.$element[0].before(E.$element[0]),O=document.createElement("details"),O.classList.add("afcrc-helper-template-parameters-container");let X=document.createElement("summary");X.textContent="Template parameters (none to show)",O.append(X);for(let[x,I]of Object.entries(this.redirectTemplates)){let S=Object.entries(I.parameters);if(S.length===0)continue;let M=document.createElement("details");M.style.display="none";let G=document.createElement("summary");G.textContent=x,M.append(G);let te={name:x,details:M,parameters:[]};for(let[Z,q]of S){let ne=new OO.ui.TextInputWidget({placeholder:q.default?.toString(),required:q.required}),de=new OO.ui.FieldLayout(ne,{label:new OO.ui.HtmlSnippet(`${Z}${!q.label||Z.toLowerCase()===q.label?.toLowerCase()?"":` (${q.label})`}${q.description?` (${q.description})`:""} (type: ${q.type}) ${q.suggested?" (suggested)":""}${q.example?` (example: "${q.example}")`:""}`),align:"inline"});M.append(de.$element[0]),te.parameters.push({name:Z,aliases:q.aliases,editor:ne})}O.append(M),W.push(te)}this.actionsToTake[e].requests[p].redirectTemplateParameters=W;let J=document.createElement("div");J.id="afcrc-helper-no-templates-message",J.textContent="No templates with parameters to display!",O.append(J),F.$element[0].before(O)}if(["accept","comment","close"].includes(U)){F.$element.show();let L=y.getValue().trim();L?this.actionsToTake[e].requests[p].comment=L:delete this.actionsToTake[e].requests[p].comment}else F.$element.hide(),delete this.actionsToTake[e].requests[p].comment;switch(this.updateRequestColor(n,e),E.$element.hide(),O.style.display="none",D.$element.hide(),u.$element.hide(),U){case"accept":{E.$element.show(),O.style.display="block";break}case"deny":{D.$element.show();break}case"close":{u.$element.show();break}}});let v=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["notredirect","article creation requests"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([w,U])=>({data:`autofill:${w}`,label:`Autofilled text for ${U}`}))});b.push(v),v.on("change",w=>{this.actionsToTake[e].requests[p].denyReason=w||"autofill:unlikely"}),v.setValue("autofill:unlikely"),v.getMenu().selectItemByData("autofill:unlikely");let D=new OO.ui.FieldLayout(v,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'});D.$element.hide();let r=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([w,U])=>new OO.ui.MenuOptionWidget({data:U,label:w}))}});j.push(r),r.getMenu().on("choose",w=>{this.actionsToTake[e].requests[p].closingReason={name:w.getLabel(),id:w.getData()},this.updateRequestColor(n,e)}),r.getMenu().selectItemByData("r"),p&&(this.actionsToTake[e].requests[p].closingReason={name:"No response",id:"r"});let u=new OO.ui.FieldLayout(r,{align:"inline",label:"Closing reason:"});u.$element.hide();let y=new OO.ui.TextInputWidget;k.push(y),y.on("change",()=>{let w=y.getValue().trim();w?this.actionsToTake[e].requests[p].comment=w:delete this.actionsToTake[e].requests[p].comment});let F=new OO.ui.FieldLayout(y,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});F.$element.hide(),H.append(P.$element[0],D.$element[0],u.$element[0],F.$element[0]),m.append(H)}n.append(m),this.$body.append(n),this.updateSize()}updateRequestColor(e,t){let n=Object.values(this.actionsToTake[t].requests),o=n.every(c=>c.action==="accept"||c.action==="deny"),i=n.find(c=>c.action==="close")?.closingReason?.id,s=n.every(c=>c.action==="close"&&c.closingReason?.id===i),a="";if(o){let c=n.filter(d=>d.action==="accept").length,g=n.filter(d=>d.action==="deny").length;c>0&&g>0?a="#fff17e":c>0?a="#a0ffa0":a="#ffcece"}else s&&(i==="r"?a="#ffcece":i==="s"?a="#90c090":a="#b8b8b8");e.style.backgroundColor=a}async performSubtypeActions(e,t,n){if(this.actionsToTake.some(i=>Object.values(i.requests).some(s=>s.action!=="none"))){for(let{target:s,requests:a}of this.actionsToTake){let c=Object.values(a).some(l=>l.action==="accept"||l.action==="deny"),g=Object.values(a).every(l=>l.action==="accept"||l.action==="deny"),d=Object.values(a).find(l=>l.action==="close")?.closingReason?.id,R=Object.values(a).every(l=>l.action==="close"&&l.closingReason?.id===d),h=[],A=[],T=[],C=Object.keys(a).length;for(let[l,b]of Object.entries(a))switch(b.action){case"accept":{c&&!g?e.addLogEntry(`Not all requests to "${s}" were accepted or denied, the handling of "${l}" will be ignored.`,"warning"):(h.push(l),b.comment&&T.push([l,b.comment]),t.accepted++);break}case"deny":{c&&!g?e.addLogEntry(`Not all requests to "${s}" were accepted or denied, the handling of "${l}" is being ignored.`,"warning"):(A.push([l,b.denyReason]),t.denied++);break}case"comment":{b.comment?(T.push([l,b.comment]),t["commented on"]++):e.addLogEntry(`The request to create "${l}" \u2192 "${s}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{R?(b.comment&&T.push([l,b.comment]),t.closed++):e.addLogEntry(`Not all requests to "${s}" were closed with the same reason, the handling of "${l}" is being ignored.`,"warning");break}}let m={pageText:n,...Object.values(a)[0].originalText};if(T.length>0&&(m=this.modifySectionData(m,{append:this.mapComments(T,C===1,T.length===C)})),g){let l;if(h.length>0&&A.length>0){l="p";let b=`* {{subst:AfC redirect}} (${h.map(k=>`[[${k}]]`).join(", ")}) ~~~~`,j=this.mapDeniedReasons(A,!1,!1);for(let k of h)this.handleAcceptedRedirect(k,a[k],s);m=this.modifySectionData(m,{append:`${b}
${j}`})}else if(h.length>0){l="a";for(let b of h)this.handleAcceptedRedirect(b,a[b],s);m=this.modifySectionData(m,{append:`* {{subst:AfC redirect${h.length>1?"|all":""}}} ~~~~`})}else l="d",m=this.modifySectionData(m,{append:this.mapDeniedReasons(A,C===1,!0)});m=this.modifySectionData(m,{prepend:`{{AfC-c|${l}}}`,append:"{{AfC-c|b}}"})}else R&&(m=this.modifySectionData(m,{prepend:`{{AfC-c|${d}}}`,append:"{{AfC-c|b}}"}));n=m.pageText}if(this.beforeText+this.pageContent===n)return e.addLogEntry("No requests have been handled (page content identical)!");let i=Object.entries(t).filter(([,s])=>s>0).map(([s,a])=>`${s} ${a}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:n,summary:`Handling AfC redirect requests (${i})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}handleAcceptedRedirect(e,t,n){let o=t.redirectTemplates&&t.redirectTemplates.length>0?t.redirectTemplates.map(s=>{let a=t.redirectTemplateParameters?.find(d=>d.name===s);if(!a)return`{{${s}}}`;let c=a.parameters.findLastIndex((d,R)=>d.name===(R+1).toString()&&d.editor.getValue().trim()),g=a.parameters.map((d,R)=>{let h=d.editor.getValue().trim();return!h&&R>c?null:`|${d.name===(R+1).toString()?"":`${d.name}=`}${h}`}).filter(Boolean).join("");return`{{${s}${g}}}`}):null,i=mw.Title.newFromText(e);this.editsCreationsToMake.push({type:"create",isRedirect:!0,title:i.getPrefixedText(),text:`#REDIRECT [[${n}]]${o?`

{{Redirect category shell|
${o.join(`
`)}
}}`:""}`,summary:`Creating redirect to [[${n}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:i.getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}}});var Q,re=B(()=>{"use strict";Q=class extends OO.ui.TextInputWidget{api=new mw.Api;constructor(e){super(e),OO.ui.mixin.LookupElement.call(this,e)}getLookupRequest=()=>{let e=this.getValue(),t=$.Deferred();e||t.resolve([]);let n=mw.Title.newFromText(e);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:n?.getMainText()??e,generator:"allpages",prop:"categories"}).catch(()=>null).then(o=>{if(o?.query?.pages){let i=o.query.pages.filter(s=>!s.categories?.some(a=>a.title==="Category:Wikipedia soft redirected categories")).map(s=>{let a=s.title.split(":")[1];return{data:a,label:a}});this.emit("showing-values",i),t.resolve(i)}else t.resolve([])}),t.promise({abort(){}})};getLookupCacheDataFromResponse=e=>e??[];getLookupMenuOptionsFromData=e=>e.map(({data:t,label:n})=>new OO.ui.MenuOptionWidget({data:t,label:n}))};Object.assign(Q.prototype,OO.ui.mixin.LookupElement.prototype)});var _,ce=B(()=>{"use strict";_=class extends OO.ui.TextInputWidget{api=new mw.Api;constructor(e){super(e),OO.ui.mixin.LookupElement.call(this,e)}getLookupRequest=()=>{let e=this.getValue(),t=$.Deferred();e||t.resolve([]);let n=mw.Title.newFromText(e);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:n?.getNamespaceId()??0,gapprefix:n?.getMainText()??e,generator:"allpages"}).catch(()=>null).then(o=>{if(o?.query?.pages){let i=o.query.pages.map(s=>({data:s.title,label:s.title}));this.emit("showing-values",i),t.resolve(i)}else t.resolve([])}),t.promise({abort(){}})};getLookupCacheDataFromResponse=e=>e??[];getLookupMenuOptionsFromData=e=>e.map(({data:t,label:n})=>new OO.ui.MenuOptionWidget({data:t,label:n}))};Object.assign(_.prototype,OO.ui.mixin.LookupElement.prototype)});var le={};ae(le,{default:()=>K});var K,pe=B(()=>{"use strict";ee();re();ce();K=class extends N{parsedRequests=[];actionsToTake=[];parseSubtypeRequests(e,t){let n={},o=/:?Category:(.*?)(]]|$)/.exec(t)?.[1].trim();if(!o)return;n.category=o.replaceAll("_"," "),n.examples=[...(/example pages which belong to this category:(.*?)(parent category\/categories:|\n\[\[(special:contributions\/|user:))/is.exec(e)?.[1]??"").matchAll(/\*\s*(?:\[\[)?(.*?)(\||]]|\s*?\n)/g)].map(g=>g[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[],n.parents=[...(/parent category\/categories:(.*?)(\n\n|\n\[\[(special:contributions\/|user:))/is.exec(e)?.[1]??"").matchAll(/(?<!\|)#?:?Category:(.*?)(\||]]|\s*?\n)/g)].map(g=>g[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[];let i=e.indexOf("[[User:"),s=e.indexOf("[[User talk:"),a=e.indexOf("[[Special:Contributions/"),c=Math.min(...[i,s,a].filter(g=>g!==-1));n.requester=c===Number.POSITIVE_INFINITY?null:c===a?{type:"ip",name:/\[\[Special:Contributions\/(.*?)(\||]])/.exec(e)[1].trim()}:{type:"user",name:/\[\[User(?: talk)?:(.*?)(\||]])/.exec(e)[1].trim()},n.requester?.name||(n.requester=null),this.parsedRequests.push(n),this.actionsToTake.push({category:n.category,examples:n.examples,parents:n.parents,originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"})}loadSubtypeElements(e){let t=this.parsedRequests[e],n=document.createElement("details");n.classList.add("afcrc-helper-request"),n.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));let o=document.createElement("summary");o.innerHTML=`<b>Category:${t.category}</b>`,n.append(o);let i=document.createElement("div");i.classList.add("afcrc-helper-request-info");let s=document.createElement("span");s.style.color="dimgray",s.textContent="None";let a=document.createElement("span");a.style.color="dimgray",a.textContent="Unknown";let c=document.createElement("div"),g=document.createElement("b");if(g.textContent="Examples: ",c.append(g),t.examples.length>0)for(let[r,u]of t.examples.entries()){let y=document.createElement("a");y.target="_blank",y.href=mw.util.getUrl(u),y.textContent=u,c.append(y),r!==t.examples.length-1&&c.append(", ")}else c.append(s.cloneNode(!0));i.append(c);let d=document.createElement("div"),R=document.createElement("b");if(R.textContent="Parents: ",d.append(R),t.parents.length>0)for(let[r,u]of t.parents.entries()){let y=document.createElement("a");y.target="_blank",y.href=mw.util.getUrl(`Category:${u}`),y.textContent=u,d.append(y),r!==t.parents.length-1&&d.append(", ")}else d.append(s.cloneNode(!0));i.append(d);let h=document.createElement("div"),A=document.createElement("b");if(A.textContent="Requester: ",h.append(A),t.requester){let r=document.createElement("a");r.target="_blank",r.href=t.requester.type==="user"?mw.util.getUrl(`User:${t.requester.name}`):mw.util.getUrl(`Special:Contributions/${t.requester.name}`),r.textContent=t.requester.name,h.append(r)}else h.append(a.cloneNode(!0));i.append(h),n.append(i),n.append(document.createElement("hr"));let T=document.createElement("div");T.classList.add("afcrc-helper-request-responder");let C=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(r=>new OO.ui.RadioOptionWidget({data:r,label:r}))});C.selectItemByLabel("None"),C.on("choose",()=>{setTimeout(()=>this.updateSize(),0);let r=C.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[e].action=r,["comment","close"].includes(r)){D.$element.show();let u=v.getValue().trim();u?this.actionsToTake[e].comment=u:delete this.actionsToTake[e].comment}else D.$element.hide(),delete this.actionsToTake[e].comment;switch(this.updateRequestColor(n,e),j.$element.hide(),V.$element.hide(),O.$element.hide(),P.$element.hide(),r){case"accept":{j.$element.show(),V.$element.show();break}case"deny":{O.$element.show();break}case"close":{P.$element.show();break}}});let m=new _({placeholder:"Add pages here"});m.on("change",()=>{let r=m.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^:/,""),r.length>0&&m.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),m.on("showing-values",r=>{for(let u of r)l.addAllowedValue(u.data)});let l=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:m});l.on("change",()=>{let r=l.getValue().sort((u,y)=>u.toLowerCase().localeCompare(y.toLowerCase()));l.getValue().join(";")!==r.join(";")&&l.setValue(r),this.actionsToTake[e].examples=r});let{examples:b}=this.actionsToTake[e];for(let r of b)l.addAllowedValue(r);l.setValue(b);let j=new OO.ui.FieldLayout(l,{align:"inline",label:"Pages to categorize:"});j.$element.hide();let k=new Q({placeholder:"Add categories here"});k.on("change",()=>{let r=k.getValue();r=r.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),r=r.replace(/^Category:/,""),r.length>0&&k.setValue(r[0].toUpperCase()+r.slice(1).replaceAll("_"," "))}),k.on("showing-values",r=>{for(let u of r)p.addAllowedValue(u.data)});let p=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:k});p.on("change",()=>{let r=p.getValue().sort((u,y)=>u.toLowerCase().localeCompare(y.toLowerCase()));p.getValue().join(";")!==r.join(";")&&p.setValue(r),this.actionsToTake[e].parents=r});let{parents:H}=this.actionsToTake[e];for(let r of H)p.addAllowedValue(r);p.setValue(H);let V=new OO.ui.FieldLayout(p,{align:"inline",label:"Categories:"});V.$element.hide();let E=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing categories"],["empty","empty submissions"],["unlikely","categories that are unlikely to have enough pages"],["notcategory","page creation requests"],["notenglish","requests not in English"]].map(([r,u])=>({data:`autofill:${r}`,label:`Autofilled text for ${u}`}))});E.on("change",()=>{this.actionsToTake[e].denyReason=E.getValue()||"autofill:unlikely"}),E.setValue("autofill:unlikely"),E.getMenu().selectItemByData("autofill:unlikely");let O=new OO.ui.FieldLayout(E,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'});O.$element.hide();let W=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([r,u])=>new OO.ui.MenuOptionWidget({data:u,label:r}))}});W.getMenu().on("choose",()=>{let r=W.getMenu().findSelectedItem();this.actionsToTake[e].closingReason={name:r.getLabel(),id:r.getData()},this.updateRequestColor(n,e)}),W.getMenu().selectItemByData("r"),this.actionsToTake[e].closingReason={name:"No response",id:"r"};let P=new OO.ui.FieldLayout(W,{align:"inline",label:"Closing reason:"});P.$element.hide();let v=new OO.ui.TextInputWidget;v.on("change",()=>{let r=v.getValue().trim();r?this.actionsToTake[e].comment=r:delete this.actionsToTake[e].comment});let D=new OO.ui.FieldLayout(v,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});D.$element.hide(),T.append(C.$element[0],j.$element[0],V.$element[0],O.$element[0],P.$element[0],D.$element[0]),n.append(T),this.$body.append(n),this.updateSize()}updateRequestColor(e,t){let{action:n}=this.actionsToTake[t],o="";n==="accept"?o="#a0ffa0":n==="deny"?o="#ffcece":n==="close"&&(this.actionsToTake[t].closingReason?.id==="r"?o="#ffcece":this.actionsToTake[t].closingReason?.id==="s"?o="#90c090":o="#b8b8b8"),e.style.backgroundColor=o}handleAcceptedCategory(e){this.editsCreationsToMake.push({type:"create",isRedirect:!1,title:`Category:${e.category}`,text:e.parents.map(t=>`[[Category:${t}]]`).join(`
`),summary:`Creating category as requested at [[WP:AFC/C]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:`Category talk:${e.category}`,text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`},...e.examples.map(t=>({type:"edit",title:t,transform:({content:n})=>({text:`${n}
[[Category:${e.category}]]`,summary:`Adding page to [[:Category:${e.category}]] as requested at [[WP:AFC/C]]${this.scriptMessage}`})})))}async performSubtypeActions(e,t,n){if(this.actionsToTake.some(i=>i.action!=="none")){for(let s of this.actionsToTake){let a={pageText:n,...s.originalText};switch(s.action){case"accept":{a=this.modifySectionData(a,{prepend:"{{AfC-c|a}}",append:`* {{subst:AfC category}} ~~~~
{{AfC-c|b}}`}),this.handleAcceptedCategory(s),t.accepted++;break}case"deny":{a=this.modifySectionData(a,{prepend:"{{AfC-c|d}}",append:`* ${this.formatDeniedReason(s.denyReason)} ~~~~
{{AfC-c|b}}`}),t.denied++;break}case"comment":{s.comment?(a=this.modifySectionData(a,{append:`* {{AfC comment|1=${s.comment}}} ~~~~`}),t["commented on"]++):e.addLogEntry(`The request to create "${s.category}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{a=this.modifySectionData(a,{prepend:`{{AfC-c|${s.closingReason.id}}}`,append:(s.comment?`* {{AfC comment|1=${s.comment}}} ~~~~`:"")+`
{{AfC-c|b}`}),t.closed++;break}}n=a.pageText}if(this.beforeText+this.pageContent===n)return e.addLogEntry("No requests have been handled (page content identical)!");let i=Object.entries(t).filter(([,s])=>s>0).map(([s,a])=>`${s} ${a}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:n,summary:`Handling AfC category requests (${i})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}}});mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],async()=>{let{default:f}=await Promise.resolve().then(()=>(ie(),oe)),{default:e}=await Promise.resolve().then(()=>(pe(),le)),t=mw.config.get("wgPageName").replaceAll("_"," "),n=t==="Wikipedia:Articles for creation/Redirects";if(!n&&!(t==="Wikipedia:Articles for creation/Categories"))return;let i=n?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${i} creation requests`,"afcrc-helper").addEventListener("click",a=>{a.preventDefault();let c=new OO.ui.WindowManager;document.body.append(c.$element[0]);let g=i==="redirect"?f:e,d=new g(i,t,window.afcrcConfiguration?.createdPageWatchMethod);c.addWindows([d]),d.open(),d.load()})});})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
