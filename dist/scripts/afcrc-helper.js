// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const x=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",M=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!x&&!M)return;const P=x?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${P} creation requests`,"afcrc-helper").addEventListener("click",j=>{j.preventDefault();const A=new OO.ui.WindowManager;document.body.append(A.$element[0]);const t=new q(P,mw.config.get("wgPageName"));A.addWindows([t]),t.open(),t.load()});class v extends OO.ui.Dialog{constructor(){super({size:"large"});this.initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);v.static.name="ShowActionsDialog",v.static.title="Actions"}addLogEntry(t,e="notice"){const s=new OO.ui.MessageWidget({type:e,inline:!0,label:t});this.logOutput.append(s.$element[0]),this.updateSize(),this.closeButton.scrollElementIntoView()}showReload(){this.closeButton.$element.remove();const t=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});t.on("click",()=>window.location.reload()),this.contentLayout.$element.append(t.$element)}}Object.assign(v.prototype,OO.ui.Dialog.prototype);class q extends OO.ui.ProcessDialog{constructor(t,e){super({size:"large"});this.api=new mw.Api;this.scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";this.parsedRequests=[];this.actionsToTake=[];this.editsCreationsToMake=[];this.getActionProcess=t=>t==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):t==="save"?new OO.ui.Process(()=>{this.performActions()}):q.super.prototype.getActionProcess.call(this,t);this.getTeardownProcess=()=>q.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});q.static.name="AfcrcHelperDialog",q.static.title="afcrc-helper",q.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=e,this.requestPageType=t,mw.util.addCSS(`
.afcrc-helper-request {
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}`)}async load(){const t=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"});this.redirectTemplateItems=Object.keys(JSON.parse(t.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")).map(s=>({data:s,label:s}));const e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle});this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=this.pageContent.match(/^(.*?)==/s)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==").replaceAll(new RegExp(`\\[https?:${mw.config.get("wgServer")}/(.*?)]`,"g"),"[[$1]]");const t=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(e=>e[0]);for(const e of t){if(/{{afc-c\|/i.test(e))continue;const n=e.match(/^==(.*?)==$/m)[1].trim();if(P==="redirect"){const o={},d=[...n.matchAll(/\[\[(.*?)]]/g)].map(f=>f[1].trim().replace(/^:/,"").replaceAll("_"," "));o.pages=d;const a=e.match(/Target of redirect: ?\[\[(.*?)]]/)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!a)continue;o.target=a,o.reason=e.match(/reason: ?(.*?)\*source(?: \(if applicable\))?:/is)[1].trim(),o.source=e.match(/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is)[1].trim();const i=e.match(e.includes("<references />")?/<references \/>\n(.*)/:new RegExp(`(?:<references \\/>${o.source?`|${o.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))[1].trim();o.requester={type:i.includes("[[User:")?"user":"ip",name:i.match(/(?:Special:Contributions\/|User:)(.*?)\|/)[1].trim()},this.parsedRequests.push(o),this.actionsToTake.push({target:o.target,requests:Object.fromEntries(d.map(f=>[f,{originalText:e.replace(/^==.*?==$/m,"").trim(),action:"none"}]))})}else{const o={}}}}loadInputElements(){if(this.parsedRequests.length<0){let t=0;const e=()=>{const n=Math.min(t+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${t+1}-${n}/${this.parsedRequests.length} requests)`);for(let o=t;o<n;o++)this.requestPageType==="redirect"?this.loadRedirectRequestElements(o):this.loadCategoryRequestElements(o);n<this.parsedRequests.length?(t=n,setTimeout(e,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};e()}else{const t=new OO.ui.MessageWidget({type:"notice",label:"No requests to handle!"}),e=new OO.ui.PanelLayout({padded:!0,expanded:!1});e.$element.append(t.$element),this.$body.append(e.$element),this.updateSize()}}loadRedirectRequestElements(t){const e=this.parsedRequests[t],s=document.createElement("details");s.classList.add("afcrc-helper-request"),s.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const n=document.createElement("summary");n.innerHTML=e.pages.map(c=>`<b>${c}</b>`).join(", ")+" \u2192 ";const o=document.createElement("a");o.target="_blank",o.href=mw.util.getUrl(e.target),o.textContent=e.target,n.append(o),s.append(n);const d=document.createElement("div");d.classList.add("afcrc-helper-request-info");const a=document.createElement("span");a.style.color="dimgray",a.textContent="None";const i=document.createElement("div"),f=document.createElement("b");f.textContent="Reason: ",i.append(f),e.reason?i.append(e.reason):i.append(a),d.append(i);const y=document.createElement("div"),C=document.createElement("b");C.textContent="Source: ",y.append(C),e.source?y.append(e.source):y.append(a),d.append(y);const O=document.createElement("div"),R=document.createElement("b");R.textContent="Requester: ",O.append(R);const b=document.createElement("a");b.target="_blank",b.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),b.textContent=e.requester.name,O.append(b),d.append(O),s.append(d),s.append(document.createElement("hr"));const w=document.createElement("div");w.classList.add("afcrc-helper-request-responder");for(const c of e.pages){const l=document.createElement("div"),r=document.createElement("b");r.textContent=c+" \u2192 "+e.target,l.append(r);const g=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(u=>new OO.ui.RadioOptionWidget({data:u,label:u}))});g.selectItemByLabel("None"),g.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const u=g.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].requests[c].action=u,["comment","close"].includes(u)){L.$element.show();const m=E.getValue().trim();m?this.actionsToTake[t].requests[c].comment=m:delete this.actionsToTake[t].requests[c].comment}else L.$element.hide(),delete this.actionsToTake[t].requests[c].comment;this.updateRequestColor(s,t);const k=l.querySelector(".afcrc-helper-tag-select-layout");switch(k&&k.remove(),T.$element.hide(),$.$element.hide(),u){case"accept":{const m=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:this.redirectTemplateItems});m.getMenu().filterMode="substring",m.on("change",()=>{const W=m.getValue().sort((S,I)=>S.toLowerCase().localeCompare(I.toLowerCase()));m.getValue().join(";")!==W.join(";")&&m.setValue(W),this.actionsToTake[t].requests[c].redirectTemplates=W}),m.setValue(this.actionsToTake[t].requests[c].redirectTemplates??[]);const D=new OO.ui.FieldLayout(m,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates"});l.append(D.$element[0]),this.actionsToTake[t].requests[c].redirectTemplates=m.getValue();break}case"deny":{T.$element.show(),this.actionsToTake[t].requests[c].denyReason=h.getValue();break}case"close":{$.$element.show();const m=p.getMenu().findSelectedItem();this.actionsToTake[t].requests[c].closingReason={name:m.getLabel(),id:m.getData()};break}}});const h=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([u,k])=>({data:`autofill:${u}`,label:`Autofilled text for ${k}`}))});h.getMenu().on("choose",()=>{this.actionsToTake[t].requests[c].denyReason=h.getValue()}),h.setValue("autofill:unlikely"),h.getMenu().selectItemByData("autofill:unlikely");const T=new OO.ui.FieldLayout(h,{align:"inline",label:"Deny reason"});T.$element.hide();const p=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([u,k])=>new OO.ui.MenuOptionWidget({data:k,label:u}))}});p.getMenu().on("choose",()=>{const u=p.getMenu().findSelectedItem();this.actionsToTake[t].requests[c].closingReason={name:u.getLabel(),id:u.getData()},this.updateRequestColor(s,t)}),p.getMenu().selectItemByData("r"),this.actionsToTake[t].requests[c].closingReason={name:"No response",id:"r"};const $=new OO.ui.FieldLayout(p,{align:"inline",label:"Closing reason"});$.$element.hide();const E=new OO.ui.TextInputWidget;E.on("change",()=>{const u=E.getValue().trim();u?this.actionsToTake[t].requests[c].comment=u:delete this.actionsToTake[t].requests[c].comment});const L=new OO.ui.FieldLayout(E,{classes:["afcrc-comment-input"],align:"inline",label:"Comment"});L.$element.hide(),l.append(g.$element[0],T.$element[0],$.$element[0],L.$element[0]),w.append(l)}s.append(w),this.$body.append(s),this.updateSize()}loadCategoryRequestElements(t){}updateRequestColor(t,e){const s=Object.values(this.actionsToTake[e].requests),n=s.every(i=>i.action==="accept"||i.action==="deny"),o=s.find(i=>i.action==="close")?.closingReason?.id,d=s.every(i=>i.action==="close"&&i.closingReason?.id===o);let a="";if(n){const i=s.filter(y=>y.action==="accept").length,f=s.filter(y=>y.action==="deny").length;i>0&&f>0?a="#fff17e":i>0?a="#a0ffa0":a="#ffcece"}else d&&(o==="r"?a="#ffcece":o==="s"?a="#90c090":a="#b8b8b8");t.style.backgroundColor=a}async performActions(){const t=new OO.ui.WindowManager;document.body.append(t.$element[0]);const e=new v;t.addWindows([e]),e.open();const s={accepted:0,denied:0,commented:0,closed:0};let n=this.beforeText+this.pageContent;if(this.requestPageType==="redirect")if(this.actionsToTake.some(d=>Object.values(d.requests).some(a=>a.action!=="none"))){for(const{target:a,requests:i}of this.actionsToTake){const f=Object.values(i).some(r=>r.action==="accept"||r.action==="deny"),y=Object.values(i).every(r=>r.action==="accept"||r.action==="deny"),C=Object.values(i).find(r=>r.action==="close")?.closingReason?.id,O=Object.values(i).every(r=>r.action==="close"&&r.closingReason?.id===C),R=[],b=[],w=[],c=Object.keys(i).length;for(const[r,g]of Object.entries(i))switch(g.action){case"accept":{f&&!y?e.addLogEntry(`Not all requests to "${a}" were accepted or denied, the handling of "${r}" will be ignored.`,"warning"):(R.push(r),s.accepted++);break}case"deny":{f&&!y?e.addLogEntry(`Not all requests to "${a}" were accepted or denied, the handling of "${r}" is being ignored.`,"warning"):(b.push([r,g.denyReason||"decline"]),s.denied++);break}case"comment":{g.comment?(w.push(`${g.comment}${c>1?` [${r}]`:""}`),s.commented++):e.addLogEntry(`The request to create "${r}" \u2192 "${a}" has been marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{O?(g.comment&&w.push(`${g.comment}${c>1?` [${r}]`:""}`),s.closed++):e.addLogEntry(`Not all requests to "${a}" were closed with the same reason, the handling of "${r}" is being ignored.`,"warning");break}}let l=Object.values(i)[0].originalText;if(w.length>0&&(l+=`
`+w.map(r=>`* {{AfC comment|1=${r}}} ~~~~`).join(`
`),n=n.replace(Object.values(i)[0].originalText,l)),f){let r;const g=l;if(R.length>0&&b.length>0){r="p";const h=R.map(p=>`* {{subst:AfC redirect}} [${p}] ~~~~`),T=b.map(([p,$])=>`* {{subst:AfC redirect|${$.startsWith("autofill:")?$.replace("autofill:",""):`decline|1=${$}`}}} [${p}] ~~~~`);for(const p of R)this.handleAcceptedRedirect(p,i[p],a);l+=`
`+h.join(`
`)+`
`+T.join(`
`),n=n.replace(g,l)}else if(R.length>0){r="a";for(const h of R)this.handleAcceptedRedirect(h,i[h],a);l+=`
* {{subst:AfC redirect${R.length>1?"|all":""}}} ~~~~`,n=n.replace(g,l)}else{r="d";const h=b.map(([T,p])=>`* {{subst:AfC redirect|${p.startsWith("autofill:")?p.replace("autofill:",""):`decline|1=${p}`}}}${b.length>1?` [${T}]`:""} ~~~~`);l+=`
`+h.join(`
`),n=n.replace(g,l)}n=n.replace(l,`{{AfC-c|${r}}}
${l}
{{AfC-c|b}}`)}else O&&(n=n.replace(l,`{{AfC-c|${C}}}
${l}
{{AfC-c|b}}`))}if(this.beforeText+this.pageContent===n)return e.addLogEntry("No requests have been handled!");const d=Object.entries(s).filter(([,a])=>a>0).map(([a,i])=>`${a} ${i}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:n,summary:`Handling AfC redirect requests (${d})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All redirect requests handled, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}handleAcceptedRedirect(t,e,s){const n=e.redirectTemplates&&e.redirectTemplates.length>0?e.redirectTemplates?.map(o=>`{{${o}}}`).join(`
`):null;this.editsCreationsToMake.push({type:"create",title:t,text:`#REDIRECT [[${s}]]${n?`

{{Redirect category shell|
${n}
}}`:""}`,summary:`Creating redirect to [[${s}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",title:mw.Title.newFromText(t).getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}async makeAllEditsCreations(t){for(const e of this.editsCreationsToMake){const s=e.type==="edit"?this.api.edit(e.title,e.transform):this.api.create(e.title,{summary:e.summary},e.text);t.addLogEntry(`${e.type==="edit"?"Editing":"Creating"} ${e.title}...`),await s.catch(async(n,o)=>{n==="ratelimited"?(t.addLogEntry("Rate limited. Waiting for 65 seconds..."),await new Promise(d=>setTimeout(d,65e3)),t.addLogEntry("Continuing..."),await s.catch((d,a)=>{t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${e.title}: ${a?.error.info??"Unknown error"} (${d})`)})):t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${e.title}: ${o?.error.info??"Unknown error"} (${n})`)})}}}Object.assign(q.prototype,OO.ui.ProcessDialog.prototype)});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
