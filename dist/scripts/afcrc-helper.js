// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const z=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",Y=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!z&&!Y)return;const F=z?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${F} creation requests`,"afcrc-helper").addEventListener("click",B=>{B.preventDefault();const t=new OO.ui.WindowManager;document.body.append(t.$element[0]);const e=new I(F,mw.config.get("wgPageName").replaceAll("_"," "),window.afcrcConfiguration?.createdPageWatchMethod);t.addWindows([e]),e.open(),e.load()});class N extends OO.ui.Dialog{contentLayout;logOutput;closeButton;constructor(){super({size:"large"}),N.static.name="ShowActionsDialog",N.static.title="Actions"}initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);addLogEntry(t,e="notice"){const a=new OO.ui.MessageWidget({type:e,inline:!0,label:new OO.ui.HtmlSnippet(t)});this.logOutput.append(a.$element[0]),this.updateSize(),this.closeButton.scrollElementIntoView()}showReload(){this.closeButton.$element.remove();const t=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});t.on("click",()=>window.location.reload()),this.contentLayout.$element.append(t.$element)}}Object.assign(N.prototype,OO.ui.Dialog.prototype);class _ extends OO.ui.TextInputWidget{api=new mw.Api;constructor(t){super(t),OO.ui.mixin.LookupElement.call(this,t)}getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const a=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:a?.getNamespaceId()??0,gapprefix:a?.getMainText()??t,generator:"allpages"}).catch(()=>null).then(o=>{if(o?.query?.pages){const i=o.query.pages.map(c=>({data:c.title,label:c.title}));this.emit("showing-values",i),e.resolve(i)}else e.resolve([])}),e.promise({abort(){}})};getLookupCacheDataFromResponse=t=>t??[];getLookupMenuOptionsFromData=t=>t.map(({data:e,label:a})=>new OO.ui.MenuOptionWidget({data:e,label:a}))}Object.assign(_.prototype,OO.ui.mixin.LookupElement.prototype);class Q extends OO.ui.TextInputWidget{api=new mw.Api;constructor(t){super(t),OO.ui.mixin.LookupElement.call(this,t)}getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const a=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:a?.getMainText()??t,generator:"allpages",prop:"categories"}).catch(()=>null).then(o=>{if(o?.query?.pages){const i=o.query.pages.filter(c=>!c.categories?.some(n=>n.title==="Category:Wikipedia soft redirected categories")).map(c=>{const n=c.title.split(":")[1];return{data:n,label:n}});this.emit("showing-values",i),e.resolve(i)}else e.resolve([])}),e.promise({abort(){}})};getLookupCacheDataFromResponse=t=>t??[];getLookupMenuOptionsFromData=t=>t.map(({data:e,label:a})=>new OO.ui.MenuOptionWidget({data:e,label:a}))}Object.assign(Q.prototype,OO.ui.mixin.LookupElement.prototype);class I extends OO.ui.ProcessDialog{api=new mw.Api;scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";requestPageType;pageTitle;createdPageWatchMethod;redirectTemplates;beforeText;pageContent;parsedRequests=[];actionsToTake=[];editsCreationsToMake=[];constructor(t,e,a){super({size:"large"}),I.static.name="AfcrcHelperDialog",I.static.title="afcrc-helper",I.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=e,this.requestPageType=t,this.createdPageWatchMethod=a&&["nochange","preferences","unwatch","watch"].includes(a)?a:"preferences",mw.util.addCSS(`
.afcrc-helper-request {
    color: #202122;
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-target-editor {
    font-family: monospace;
    min-width: 1ch;
    max-width: calc(100% - 4ch);
}

.afcrc-helper-external-link {
    text-decoration: none !important;
}

.afcrc-helper-external-link svg {
    display: inline-block;
    width: 1em;
    height: 1em;
    fill: currentColor;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout-header {
    width: max-content;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}

.afcrc-helper-template-parameters-container, .afcrc-helper-template-parameters-container details {
    background-color: #fff;
    border: 1px solid #a2a9b1;
    border-radius: 2px;
    margin-block: 10px;
    padding: 5px;
}

.afcrc-helper-template-parameters-container {
    margin-left: 8px;
}

.afcrc-helper-template-parameters-container summary {
    cursor: pointer;
    font-weight: bold;
}

.afcrc-helper-template-parameters-container details {
    background-color: #e2e2e2;
    margin-block: 5px;
}

#afcrc-helper-no-templates-message {
    padding: 5px;
}`)}getActionProcess=t=>t==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):t==="save"?new OO.ui.Process(()=>{this.performActions()}):I.super.prototype.getActionProcess.call(this,t);getTeardownProcess=()=>I.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});async load(){const t=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"});this.redirectTemplates=JSON.parse(t.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}");const e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle});this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=/^(.*?)==/s.exec(this.pageContent)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==");const t=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(e=>e[0]);for(const e of t){if(/{{afc-c\|/i.test(e))continue;const o=/^==(.*?)==$/m.exec(e)[1].trim();if(F==="redirect"){const i={},c=[...o.matchAll(/\[\[(.*?)]]/g)].map(d=>d[1]?.trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);if(c.length===0)continue;i.pages=c;const n=/Target of redirect: ?\[\[(.*?)]]/.exec(e)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!n)continue;i.target=n,i.reason=/reason: ?(.*?)\*source(?: \(if applicable\))?:/is.exec(e)?.[1].trim()??"",i.source=/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is.exec(e)?.[1].trim()??"";const r=e.match(e.includes("<references />")?/<references \/>\n+(.*)/:new RegExp(`(?:<references \\/>${i.source?`|${i.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))?.[1].trim(),h=r?/(?:Special:Contributions\/|User(?: talk)?:)(.*?)\|/.exec(r)?.[1].trim():null;i.requester=r&&h?{type:/\[\[User( talk)?:/.test(r)?"user":"ip",name:h}:null,this.parsedRequests.push(i),this.actionsToTake.push({target:i.target,requests:Object.fromEntries(c.map(d=>[d,{originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"}]))})}else{const i={},c=/:?Category:(.*?)(]]|$)/.exec(o)?.[1].trim();if(!c)continue;i.category=c.replaceAll("_"," "),i.examples=[...(/example pages which belong to this category:(.*?)(parent category\/categories:|\n\[\[(special:contributions\/|user:))/is.exec(e)?.[1]??"").matchAll(/\*\s*(?:\[\[)?(.*?)(\||]]|\s*?\n)/g)].map(f=>f[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[],i.parents=[...(/parent category\/categories:(.*?)(\n\n|\n\[\[(special:contributions\/|user:))/is.exec(e)?.[1]??"").matchAll(/(?<!\|)#?:?Category:(.*?)(\||]]|\s*?\n)/g)].map(f=>f[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[];const n=e.indexOf("[[User:"),r=e.indexOf("[[User talk:"),h=e.indexOf("[[Special:Contributions/"),d=Math.min(...[n,r,h].filter(f=>f!==-1));i.requester=d===Number.POSITIVE_INFINITY?null:d===h?{type:"ip",name:/\[\[Special:Contributions\/(.*?)(\||]])/.exec(e)[1].trim()}:{type:"user",name:/\[\[User(?: talk)?:(.*?)(\||]])/.exec(e)[1].trim()},i.requester?.name||(i.requester=null),this.parsedRequests.push(i),this.actionsToTake.push({category:i.category,examples:i.examples,parents:i.parents,originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"})}}}loadInputElements(){if(this.parsedRequests.length>0){let t=0;const e=()=>{const o=Math.min(t+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${t+1}-${o}/${this.parsedRequests.length} requests)`);for(let i=t;i<o;i++)this.requestPageType==="redirect"?this.loadRedirectRequestElements(i):this.loadCategoryRequestElements(i);o<this.parsedRequests.length?(t=o,setTimeout(e,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};e()}else{const t=new OO.ui.MessageWidget({type:"notice",label:"No valid requests to handle!"}),e=new OO.ui.PanelLayout({padded:!0,expanded:!1});e.$element.append(t.$element),this.$body.append(e.$element),this.updateSize()}}loadRedirectRequestElements(t){const e=this.parsedRequests[t],a=document.createElement("details");a.classList.add("afcrc-helper-request"),a.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const o=document.createElement("summary");o.innerHTML=e.pages.map(l=>`<b>${l}</b>`).join(", ")+" \u2192 ",o.addEventListener("keyup",l=>{document.activeElement?.tagName==="INPUT"&&l.key===" "&&l.preventDefault()});const i=document.createElement("input");i.classList.add("afcrc-helper-target-editor"),i.style.width=`${e.target.length}ch`,i.value=e.target,i.addEventListener("input",()=>{i.value=i.value.replaceAll("_"," "),i.style.width=`${i.value.length}ch`,this.actionsToTake[t].target=i.value,c.href=mw.util.getUrl(i.value)}),o.append(i);const c=document.createElement("a");c.classList.add("afcrc-helper-external-link"),c.target="_blank",c.href=mw.util.getUrl(e.target),c.innerHTML=`
<svg viewbox="0 0 48 48">
    <path d="M36 24c-1.2 0-2 0.8-2 2v12c0 1.2-0.8 2-2 2h-22c-1.2
        0-2-0.8-2-2v-22c0-1.2 0.8-2 2-2h12c1.2 0 2-0.8 2-2s-0.8-2-2-2h-12c-3.4
        0-6 2.6-6 6v22c0 3.4 2.6 6 6 6h22c3.4 0 6-2.6
        6-6v-12c0-1.2-0.8-2-2-2z"></path>
    <path d="M43.8 5.2c-0.2-0.4-0.6-0.8-1-1-0.2-0.2-0.6-0.2-0.8-0.2h-12c-1.2
        0-2 0.8-2 2s0.8 2 2 2h7.2l-18.6 18.6c-0.8 0.8-0.8 2 0 2.8 0.4 0.4 0.8
        0.6 1.4 0.6s1-0.2 1.4-0.6l18.6-18.6v7.2c0 1.2 0.8 2 2 2s2-0.8
        2-2v-12c0-0.2 0-0.6-0.2-0.8z"></path>
</svg>`,o.append(c),a.append(o);const n=document.createElement("div");n.classList.add("afcrc-helper-request-info");const r=document.createElement("span");r.style.color="dimgray",r.textContent="None";const h=document.createElement("span");h.style.color="dimgray",h.textContent="Unknown";const d=document.createElement("div"),f=document.createElement("b");f.textContent="Reason: ",d.append(f),e.reason?d.append(e.reason):d.append(r.cloneNode(!0)),n.append(d);const w=document.createElement("div"),b=document.createElement("b");b.textContent="Source: ",w.append(b),e.source?w.append(e.source):w.append(r.cloneNode(!0)),n.append(w);const O=document.createElement("div"),T=document.createElement("b");if(T.textContent="Requester: ",O.append(T),e.requester){const l=document.createElement("a");l.target="_blank",l.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),l.textContent=e.requester.name,O.append(l)}else O.append(h.cloneNode(!0));n.append(O),a.append(n),a.append(document.createElement("hr"));const C=document.createElement("div");C.classList.add("afcrc-helper-request-responder");for(const l of e.pages){const u=document.createElement("div"),g=document.createElement("b");g.textContent=l,u.append(g);let k,m;const j=[],L=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(s=>new OO.ui.RadioOptionWidget({data:s,label:s}))});L.selectItemByLabel("None"),L.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const s=L.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].requests[l].action=s,!k||!m){const p=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.entries(this.redirectTemplates).map(([x,{redirect:D}])=>{if(!D)return{data:x,label:x};const v=new OO.ui.HtmlSnippet(`${x} <i>(redirect with possibilities)</i>`);return{data:x,label:v}})});p.getMenu().filterMode="substring",p.on("change",()=>{const x=p.getValue().sort((v,E)=>v.toLowerCase().localeCompare(E.toLowerCase()));p.getValue().join(";")!==x.join(";")&&p.setValue(x),this.actionsToTake[t].requests[l].redirectTemplates=x;for(const v of j)v.details.style.display="none";let D=0;for(const v of p.getValue()){const E=j.find(U=>U.name===v);E&&(E.details.style.display="block",D++)}y.textContent=`Template parameters (${D>0?`for ${D} template${D>1?"s":""}`:"none to show"})`,V.style.display=D>0?"none":"block"}),k=new OO.ui.FieldLayout(p,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates:"}),A.$element[0].before(k.$element[0]),m=document.createElement("details"),m.classList.add("afcrc-helper-template-parameters-container");const y=document.createElement("summary");y.textContent="Template parameters (none to show)",m.append(y);for(const[x,D]of Object.entries(this.redirectTemplates)){const v=Object.entries(D.parameters);if(v.length===0)continue;const E=document.createElement("details");E.style.display="none";const U=document.createElement("summary");U.textContent=x,E.append(U);const J={name:x,details:E,parameters:[]};for(const[H,R]of v){const G=new OO.ui.TextInputWidget({placeholder:R.default?.toString(),required:R.required}),K=new OO.ui.FieldLayout(G,{label:new OO.ui.HtmlSnippet(`${H}${!R.label||H.toLowerCase()===R.label?.toLowerCase()?"":` (${R.label})`}${R.description?` (${R.description})`:""} (type: ${R.type}) ${R.suggested?" (suggested)":""}${R.example?` (example: "${R.example}")`:""}`),align:"inline"});E.append(K.$element[0]),J.parameters.push({name:H,aliases:R.aliases,editor:G})}m.append(E),j.push(J)}this.actionsToTake[t].requests[l].redirectTemplateParameters=j;const V=document.createElement("div");V.id="afcrc-helper-no-templates-message",V.textContent="No templates with parameters to display!",m.append(V),A.$element[0].before(m)}if(["accept","comment","close"].includes(s)){A.$element.show();const p=S.getValue().trim();p?this.actionsToTake[t].requests[l].comment=p:delete this.actionsToTake[t].requests[l].comment}else A.$element.hide(),delete this.actionsToTake[t].requests[l].comment;switch(this.updateRequestColor(a,t),k.$element.hide(),m.style.display="none",P.$element.hide(),W.$element.hide(),s){case"accept":{k.$element.show(),m.style.display="block";break}case"deny":{P.$element.show();break}case"close":{W.$element.show();break}}});const q=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["notredirect","article creation requests"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([s,p])=>({data:`autofill:${s}`,label:`Autofilled text for ${p}`}))});q.on("change",()=>{this.actionsToTake[t].requests[l].denyReason=q.getValue()||"autofill:unlikely"}),q.setValue("autofill:unlikely"),q.getMenu().selectItemByData("autofill:unlikely");const P=new OO.ui.FieldLayout(q,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'});P.$element.hide();const M=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([s,p])=>new OO.ui.MenuOptionWidget({data:p,label:s}))}});M.getMenu().on("choose",()=>{const s=M.getMenu().findSelectedItem();this.actionsToTake[t].requests[l].closingReason={name:s.getLabel(),id:s.getData()},this.updateRequestColor(a,t)}),M.getMenu().selectItemByData("r"),this.actionsToTake[t].requests[l].closingReason={name:"No response",id:"r"};const W=new OO.ui.FieldLayout(M,{align:"inline",label:"Closing reason:"});W.$element.hide();const S=new OO.ui.TextInputWidget;S.on("change",()=>{const s=S.getValue().trim();s?this.actionsToTake[t].requests[l].comment=s:delete this.actionsToTake[t].requests[l].comment});const A=new OO.ui.FieldLayout(S,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});A.$element.hide(),u.append(L.$element[0],P.$element[0],W.$element[0],A.$element[0]),C.append(u)}a.append(C),this.$body.append(a),this.updateSize()}loadCategoryRequestElements(t){const e=this.parsedRequests[t],a=document.createElement("details");a.classList.add("afcrc-helper-request"),a.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const o=document.createElement("summary");o.innerHTML=`<b>Category:${e.category}</b>`,a.append(o);const i=document.createElement("div");i.classList.add("afcrc-helper-request-info");const c=document.createElement("span");c.style.color="dimgray",c.textContent="None";const n=document.createElement("span");n.style.color="dimgray",n.textContent="Unknown";const r=document.createElement("div"),h=document.createElement("b");if(h.textContent="Examples: ",r.append(h),e.examples.length>0)for(const[s,p]of e.examples.entries()){const y=document.createElement("a");y.target="_blank",y.href=mw.util.getUrl(p),y.textContent=p,r.append(y),s!==e.examples.length-1&&r.append(", ")}else r.append(c.cloneNode(!0));i.append(r);const d=document.createElement("div"),f=document.createElement("b");if(f.textContent="Parents: ",d.append(f),e.parents.length>0)for(const[s,p]of e.parents.entries()){const y=document.createElement("a");y.target="_blank",y.href=mw.util.getUrl(`Category:${p}`),y.textContent=p,d.append(y),s!==e.parents.length-1&&d.append(", ")}else d.append(c.cloneNode(!0));i.append(d);const w=document.createElement("div"),b=document.createElement("b");if(b.textContent="Requester: ",w.append(b),e.requester){const s=document.createElement("a");s.target="_blank",s.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),s.textContent=e.requester.name,w.append(s)}else w.append(n.cloneNode(!0));i.append(w),a.append(i),a.append(document.createElement("hr"));const O=document.createElement("div");O.classList.add("afcrc-helper-request-responder");const T=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(s=>new OO.ui.RadioOptionWidget({data:s,label:s}))});T.selectItemByLabel("None"),T.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const s=T.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].action=s,["comment","close"].includes(s)){A.$element.show();const p=S.getValue().trim();p?this.actionsToTake[t].comment=p:delete this.actionsToTake[t].comment}else A.$element.hide(),delete this.actionsToTake[t].comment;switch(this.updateRequestColor(a,t),g.$element.hide(),L.$element.hide(),P.$element.hide(),W.$element.hide(),s){case"accept":{g.$element.show(),L.$element.show();break}case"deny":{P.$element.show();break}case"close":{W.$element.show();break}}});const C=new _({placeholder:"Add pages here"});C.on("change",()=>{let s=C.getValue();s=s.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),s=s.replace(/^:/,""),s.length>0&&C.setValue(s[0].toUpperCase()+s.slice(1).replaceAll("_"," "))}),C.on("showing-values",s=>{for(const p of s)l.addAllowedValue(p.data)});const l=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:C});l.on("change",()=>{const s=l.getValue().sort((p,y)=>p.toLowerCase().localeCompare(y.toLowerCase()));l.getValue().join(";")!==s.join(";")&&l.setValue(s),this.actionsToTake[t].examples=s});const{examples:u}=this.actionsToTake[t];for(const s of u)l.addAllowedValue(s);l.setValue(u);const g=new OO.ui.FieldLayout(l,{align:"inline",label:"Pages to categorize:"});g.$element.hide();const k=new Q({placeholder:"Add categories here"});k.on("change",()=>{let s=k.getValue();s=s.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),s=s.replace(/^Category:/,""),s.length>0&&k.setValue(s[0].toUpperCase()+s.slice(1).replaceAll("_"," "))}),k.on("showing-values",s=>{for(const p of s)m.addAllowedValue(p.data)});const m=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:k});m.on("change",()=>{const s=m.getValue().sort((p,y)=>p.toLowerCase().localeCompare(y.toLowerCase()));m.getValue().join(";")!==s.join(";")&&m.setValue(s),this.actionsToTake[t].parents=s});const{parents:j}=this.actionsToTake[t];for(const s of j)m.addAllowedValue(s);m.setValue(j);const L=new OO.ui.FieldLayout(m,{align:"inline",label:"Categories:"});L.$element.hide();const q=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing categories"],["empty","empty submissions"],["unlikely","categories that are unlikely to have enough pages"],["notcategory","page creation requests"],["notenglish","requests not in English"]].map(([s,p])=>({data:`autofill:${s}`,label:`Autofilled text for ${p}`}))});q.on("change",()=>{this.actionsToTake[t].denyReason=q.getValue()||"autofill:unlikely"}),q.setValue("autofill:unlikely"),q.getMenu().selectItemByData("autofill:unlikely");const P=new OO.ui.FieldLayout(q,{align:"inline",label:"Deny reason:",help:'Supports automatic reasoning, custom reasoning, or a combination of the two with "autofill:REASON, CUSTOM" format'});P.$element.hide();const M=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([s,p])=>new OO.ui.MenuOptionWidget({data:p,label:s}))}});M.getMenu().on("choose",()=>{const s=M.getMenu().findSelectedItem();this.actionsToTake[t].closingReason={name:s.getLabel(),id:s.getData()},this.updateRequestColor(a,t)}),M.getMenu().selectItemByData("r"),this.actionsToTake[t].closingReason={name:"No response",id:"r"};const W=new OO.ui.FieldLayout(M,{align:"inline",label:"Closing reason:"});W.$element.hide();const S=new OO.ui.TextInputWidget;S.on("change",()=>{const s=S.getValue().trim();s?this.actionsToTake[t].comment=s:delete this.actionsToTake[t].comment});const A=new OO.ui.FieldLayout(S,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});A.$element.hide(),O.append(T.$element[0],g.$element[0],L.$element[0],P.$element[0],W.$element[0],A.$element[0]),a.append(O),this.$body.append(a),this.updateSize()}updateRequestColor(t,e){if(this.requestPageType==="redirect"){const a=Object.values(this.actionsToTake[e].requests),o=a.every(r=>r.action==="accept"||r.action==="deny"),i=a.find(r=>r.action==="close")?.closingReason?.id,c=a.every(r=>r.action==="close"&&r.closingReason?.id===i);let n="";if(o){const r=a.filter(d=>d.action==="accept").length,h=a.filter(d=>d.action==="deny").length;r>0&&h>0?n="#fff17e":r>0?n="#a0ffa0":n="#ffcece"}else c&&(i==="r"?n="#ffcece":i==="s"?n="#90c090":n="#b8b8b8");t.style.backgroundColor=n}else{const{action:a}=this.actionsToTake[e];let o="";a==="accept"?o="#a0ffa0":a==="deny"?o="#ffcece":a==="close"&&(this.actionsToTake[e].closingReason?.id==="r"?o="#ffcece":this.actionsToTake[e].closingReason?.id==="s"?o="#90c090":o="#b8b8b8"),t.style.backgroundColor=o}}async performActions(){const t=new OO.ui.WindowManager;document.body.append(t.$element[0]);const e=new N;t.addWindows([e]),e.open();const a={accepted:0,denied:0,"commented on":0,closed:0};let o=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();if(this.requestPageType==="redirect")if(this.actionsToTake.some(c=>Object.values(c.requests).some(n=>n.action!=="none"))){for(const{target:n,requests:r}of this.actionsToTake){const h=Object.values(r).some(u=>u.action==="accept"||u.action==="deny"),d=Object.values(r).every(u=>u.action==="accept"||u.action==="deny"),f=Object.values(r).find(u=>u.action==="close")?.closingReason?.id,w=Object.values(r).every(u=>u.action==="close"&&u.closingReason?.id===f),b=[],O=[],T=[],C=Object.keys(r).length;for(const[u,g]of Object.entries(r))switch(g.action){case"accept":{h&&!d?e.addLogEntry(`Not all requests to "${n}" were accepted or denied, the handling of "${u}" will be ignored.`,"warning"):(b.push(u),g.comment&&T.push([u,g.comment]),a.accepted++);break}case"deny":{h&&!d?e.addLogEntry(`Not all requests to "${n}" were accepted or denied, the handling of "${u}" is being ignored.`,"warning"):(O.push([u,g.denyReason]),a.denied++);break}case"comment":{g.comment?(T.push([u,g.comment]),a["commented on"]++):e.addLogEntry(`The request to create "${u}" \u2192 "${n}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{w?(g.comment&&T.push([u,g.comment]),a.closed++):e.addLogEntry(`Not all requests to "${n}" were closed with the same reason, the handling of "${u}" is being ignored.`,"warning");break}}let l={pageText:o,...Object.values(r)[0].originalText};if(T.length>0&&(l=this.modifySectionData(l,{append:this.mapComments(T,C===1,T.length===C)})),d){let u;if(b.length>0&&O.length>0){u="p";const g=`* {{subst:AfC redirect}} (${b.map(m=>`[[${m}]]`).join(", ")}) ~~~~`,k=this.mapDeniedReasons(O,!1,!1);for(const m of b)this.handleAcceptedRedirect(m,r[m],n);l=this.modifySectionData(l,{append:`${g}
${k}`})}else if(b.length>0){u="a";for(const g of b)this.handleAcceptedRedirect(g,r[g],n);l=this.modifySectionData(l,{append:`* {{subst:AfC redirect${b.length>1?"|all":""}}} ~~~~`})}else u="d",l=this.modifySectionData(l,{append:this.mapDeniedReasons(O,C===1,!0)});l=this.modifySectionData(l,{prepend:`{{AfC-c|${u}}}`,append:"{{AfC-c|b}}"})}else w&&(l=this.modifySectionData(l,{prepend:`{{AfC-c|${f}}}`,append:"{{AfC-c|b}}"}));o=l.pageText}if(this.beforeText+this.pageContent===o)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(a).filter(([,n])=>n>0).map(([n,r])=>`${n} ${r}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:o,summary:`Handling AfC redirect requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!");else if(this.actionsToTake.some(c=>c.action!=="none")){for(const n of this.actionsToTake){let r={pageText:o,...n.originalText};switch(n.action){case"accept":{r=this.modifySectionData(r,{prepend:"{{AfC-c|a}}",append:`* {{subst:AfC category}} ~~~~
{{AfC-c|b}}`}),this.handleAcceptedCategory(n),a.accepted++;break}case"deny":{r=this.modifySectionData(r,{prepend:"{{AfC-c|d}}",append:`* ${this.formatDeniedReason(n.denyReason)} ~~~~
{{AfC-c|b}}`}),a.denied++;break}case"comment":{n.comment?(r=this.modifySectionData(r,{append:`* {{AfC comment|1=${n.comment}}} ~~~~`}),a["commented on"]++):e.addLogEntry(`The request to create "${n.category}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{r=this.modifySectionData(r,{prepend:`{{AfC-c|${n.closingReason.id}}}`,append:(n.comment?`* {{AfC comment|1=${n.comment}}} ~~~~`:"")+`
{{AfC-c|b}`}),a.closed++;break}}o=r.pageText}if(this.beforeText+this.pageContent===o)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(a).filter(([,n])=>n>0).map(([n,r])=>`${n} ${r}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:o,summary:`Handling AfC category requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}formatDeniedReason(t){const e=t.startsWith("autofill:")?/autofill:(\w+)/.exec(t)[1]:`decline|2=${t}`,a=t.includes(",")?" "+t.slice(t.indexOf(",")+1).trim():"";return`{{subst:AfC ${this.requestPageType}|${e}}}${a}`}mapDeniedReasons(t,e,a){if(e)return`* ${this.formatDeniedReason(t[0][1])} ~~~~`;const o={};for(const[c,n]of t)o[n]||(o[n]=[]),o[n].push(c);const i=Object.entries(o);return i.map(([c,n])=>`* ${this.formatDeniedReason(c)}${i.length>1||!a?` (${n.map(r=>`[[${r}]]`).join(", ")})`:""} ~~~~`).join(`
`)}mapComments(t,e,a){if(e)return`* {{AfC comment|1=${t[0][1]}}} ~~~~`;const o={};for(const[c,n]of t)o[n]||(o[n]=[]),o[n].push(c);const i=Object.entries(o);return i.map(([c,n])=>`* {{AfC comment|1=${c}}}${i.length>1||!a?` (${n.map(r=>`[[${r}]]`).join(", ")})`:""} ~~~~`).join(`
`)}modifySectionData(t,{prepend:e,append:a}){const{fullSectionText:o,sectionText:i}=t;return e&&(t.sectionText=e+`
`+t.sectionText),a&&(t.sectionText+=`
`+a),t.fullSectionText=t.fullSectionText.replace(i,t.sectionText),t.pageText=t.pageText.replace(o,t.fullSectionText),t}handleAcceptedRedirect(t,e,a){const o=e.redirectTemplates&&e.redirectTemplates.length>0?e.redirectTemplates.map(c=>{const n=e.redirectTemplateParameters?.find(d=>d.name===c);if(!n)return`{{${c}}}`;const r=n.parameters.findLastIndex((d,f)=>d.name===(f+1).toString()&&d.editor.getValue().trim()),h=n.parameters.map((d,f)=>{const w=d.editor.getValue().trim();return!w&&f>r?null:`|${d.name===(f+1).toString()?"":`${d.name}=`}${w}`}).filter(Boolean).join("");return`{{${c}${h}}}`}):null,i=mw.Title.newFromText(t);this.editsCreationsToMake.push({type:"create",isRedirect:!0,title:i.getPrefixedText(),text:`#REDIRECT [[${a}]]${o?`

{{Redirect category shell|
${o.join(`
`)}
}}`:""}`,summary:`Creating redirect to [[${a}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:i.getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}handleAcceptedCategory(t){this.editsCreationsToMake.push({type:"create",isRedirect:!1,title:`Category:${t.category}`,text:t.parents.map(e=>`[[Category:${e}]]`).join(`
`),summary:`Creating category as requested at [[WP:AFC/C]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:`Category talk:${t.category}`,text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`},...t.examples.map(e=>({type:"edit",title:e,transform:({content:a})=>({text:`${a}
[[Category:${t.category}]]`,summary:`Adding page to [[:Category:${t.category}]] as requested at [[WP:AFC/C]]${this.scriptMessage}`})})))}async makeAllEditsCreations(t){for(const e of this.editsCreationsToMake){const a=e.type==="edit"?this.api.edit(e.title,e.transform):this.api.create(e.title,{summary:e.summary,watchlist:this.createdPageWatchMethod},e.text),o=document.createElement("a");o.target="_blank",o.href=mw.util.getUrl(e.title,"isRedirect"in e&&e.isRedirect?{redirect:"no"}:void 0),o.textContent=e.title,t.addLogEntry(`${e.type==="edit"?"Editing":"Creating"} ${o.outerHTML}...`),await a.catch(async(i,c)=>{i==="ratelimited"?(t.addLogEntry(`Rate limited. Waiting for 70 seconds... (resuming at ${new Date(Date.now()+7e4).toLocaleTimeString()})`,"warning"),await new Promise(n=>setTimeout(n,7e4)),t.addLogEntry("Continuing...","success"),await a.catch((n,r)=>{t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${o.outerHTML}: ${r?.error.info??"Unknown error"} (${n}).`,"error")})):t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${o.outerHTML}: ${c?.error.info??"Unknown error"} (${i}).`,"error")})}}}Object.assign(I.prototype,OO.ui.ProcessDialog.prototype)});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
