// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/afcrc-helper.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{const j=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Redirects",U=mw.config.get("wgPageName")==="Wikipedia:Articles_for_creation/Categories";if(!j&&!U)return;const D=j?"redirect":"category";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#",`Handle ${D} creation requests`,"afcrc-helper").addEventListener("click",I=>{I.preventDefault();const W=new OO.ui.WindowManager;document.body.append(W.$element[0]);const t=new L(D,mw.config.get("wgPageName").replaceAll("_"," "));W.addWindows([t]),t.open(),t.load()});class M extends OO.ui.Dialog{constructor(){super({size:"large"});this.initialize=()=>(OO.ui.Dialog.prototype.initialize.apply(this),mw.util.addCSS(`
.afcrc-helper-actions-container div {
    margin-block: 8px;
}`),this.contentLayout=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.$body.append(this.contentLayout.$element),this.logOutput=document.createElement("div"),this.logOutput.classList.add("afcrc-helper-actions-container"),this.closeButton=new OO.ui.ButtonWidget({label:"Close",flags:["safe","close"]}),this.closeButton.on("click",()=>this.close()),this.contentLayout.$element.append(this.logOutput,this.closeButton.$element),this);M.static.name="ShowActionsDialog",M.static.title="Actions"}addLogEntry(t,e="notice"){const s=new OO.ui.MessageWidget({type:e,inline:!0,label:new OO.ui.HtmlSnippet(t)});this.logOutput.append(s.$element[0]),this.updateSize(),this.closeButton.scrollElementIntoView()}showReload(){this.closeButton.$element.remove();const t=new OO.ui.ButtonWidget({label:"Reload",flags:["primary"]});t.on("click",()=>window.location.reload()),this.contentLayout.$element.append(t.$element)}}Object.assign(M.prototype,OO.ui.Dialog.prototype);class N extends OO.ui.TextInputWidget{constructor(t){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const s=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:s?.getNamespaceId()??0,gapprefix:s?.getMainText()??t,generator:"allpages"}).catch(()=>null).then(a=>{if(a?.query?.pages){const i=a.query.pages.map(c=>({data:c.title,label:c.title}));this.emit("showing-values",i),e.resolve(i)}else e.resolve([])}),e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:s})=>new OO.ui.MenuOptionWidget({data:e,label:s}));OO.ui.mixin.LookupElement.call(this,t)}}Object.assign(N.prototype,OO.ui.mixin.LookupElement.prototype);class V extends OO.ui.TextInputWidget{constructor(t){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const s=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:s?.getMainText()??t,generator:"allpages",prop:"categories"}).catch(()=>null).then(a=>{if(a?.query?.pages){const i=a.query.pages.filter(c=>!c.categories?.some(n=>n.title==="Category:Wikipedia soft redirected categories")).map(c=>{const n=c.title.split(":")[1];return{data:n,label:n}});this.emit("showing-values",i),e.resolve(i)}else e.resolve([])}),e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:s})=>new OO.ui.MenuOptionWidget({data:e,label:s}));OO.ui.mixin.LookupElement.call(this,t)}}Object.assign(V.prototype,OO.ui.mixin.LookupElement.prototype);class L extends OO.ui.ProcessDialog{constructor(t,e){super({size:"large"});this.api=new mw.Api;this.scriptMessage=" ([[User:Eejit43/scripts/afcrc-helper|afcrc-helper]])";this.parsedRequests=[];this.actionsToTake=[];this.editsCreationsToMake=[];this.getActionProcess=t=>t==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):t==="save"?new OO.ui.Process(()=>{this.performActions()}):L.super.prototype.getActionProcess.call(this,t);this.getTeardownProcess=()=>L.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});L.static.name="AfcrcHelperDialog",L.static.title="afcrc-helper",L.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}],this.pageTitle=e,this.requestPageType=t,mw.util.addCSS(`
.afcrc-helper-request {
    background-color: #eee;
    border-radius: 5px;
    margin: 10px;
    padding: 5px;
}

.afcrc-helper-request summary {
    cursor: pointer;
}

.afcrc-helper-request-info, .afcrc-helper-request-responder {
    margin: 5px;
}

.afcrc-helper-request-info > div, .afcrc-helper-request-responder > div {
    margin-block: 8px;
}

.afcrc-helper-request-responder > div:last-of-type {
    margin-bottom: 0;
}

.afcrc-helper-request-responder .oo-ui-fieldLayout {
    margin-left: 8px;
}

.afcrc-helper-action-radio {
    margin-top: 8px;
}

.afcrc-helper-action-radio .oo-ui-radioOptionWidget {
    display: inline;
    padding: 8px;
}

.afcrc-closing-reason-input, .afcrc-comment-input {
    max-width: 50%;
}`)}async load(){const t=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"});this.redirectTemplateItems=Object.keys(JSON.parse(t.query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")).map(s=>({data:s,label:s}));const e=await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle});this.pageContent=e.query.pages[0].revisions[0].slots.main.content.trim(),this.parseRequests(),this.loadInputElements()}parseRequests(){this.beforeText=this.pageContent.match(/^(.*?)==/s)[1],this.pageContent=this.pageContent.replace(/^.*?==/s,"==").replaceAll(new RegExp(`\\[https?:${mw.config.get("wgServer")}/(.*?)]`,"g"),"[[$1]]");const t=[...this.pageContent.matchAll(/^==.*?==$(\s*(?!==[^=]).*)*/gim)].map(e=>e[0]);for(const e of t){if(/{{afc-c\|/i.test(e))continue;const a=e.match(/^==(.*?)==$/m)[1].trim();if(D==="redirect"){const i={},c=[...a.matchAll(/\[\[(.*?)]]/g)].map(h=>h[1]?.trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean);if(c.length===0)continue;i.pages=c;const n=e.match(/Target of redirect: ?\[\[(.*?)]]/)?.[1].trim().replace(/^:/,"").replaceAll("_"," ");if(!n)continue;i.target=n,i.reason=e.match(/reason: ?(.*?)\*source(?: \(if applicable\))?:/is)?.[1].trim()??"",i.source=e.match(/source(?: \(if applicable\))?: ?(.*?)(?:<references \/>|\n\n)/is)?.[1].trim()??"";const r=e.match(e.includes("<references />")?/<references \/>\n+(.*)/:new RegExp(`(?:<references \\/>${i.source?`|${i.source.replaceAll(/[\s#$()*+,.?[\\\]^{|}-]/g,"\\$&")}`:""})
+(.*)`))?.[1].trim();if(!r)continue;i.requester={type:/\[\[User( talk)?:/.test(r)?"user":"ip",name:r.match(/(?:Special:Contributions\/|User(?: talk)?:)(.*?)\|/)[1].trim()},this.parsedRequests.push(i),this.actionsToTake.push({target:i.target,requests:Object.fromEntries(c.map(h=>[h,{originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"}]))})}else{const i={},c=a.match(/:?Category:(.*?)(]]|$)/)?.[1].trim();if(!c)continue;i.category=c.replaceAll("_"," "),i.examples=[...e.match(/example pages which belong to this category:(.*?)parent category\/categories:/is)[1].matchAll(/\*\s*(?:\[\[)?(.*?)(\||]]|\s*?\n)/g)].map(T=>T[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[],i.parents=[...e.match(/parent category\/categories:(.*?)(\n\n|\n\[\[(special:contributions\/|user:))/is)[1].matchAll(/(?<!\|)#?:?Category:(.*?)(\||]]|\s*?\n)/g)].map(T=>T[1].trim().replace(/^:/,"").replaceAll("_"," ")).filter(Boolean)??[];const n=e.indexOf("[[User:"),r=e.indexOf("[[User talk:"),h=e.indexOf("[[Special:Contributions/"),f=Math.min(...[n,r,h].filter(T=>T!==-1));if(f===Number.POSITIVE_INFINITY||(i.requester=f===h?{type:"ip",name:e.match(/\[\[Special:Contributions\/(.*?)(\||]])/)[1].trim()}:{type:"user",name:e.match(/\[\[User(?: talk)?:(.*?)(\||]])/)[1].trim()},!i.requester.name))continue;this.parsedRequests.push(i),this.actionsToTake.push({category:i.category,examples:i.examples,parents:i.parents,originalText:{fullSectionText:e,sectionText:e.replace(/^==.*?==$/m,"").trim()},action:"none"})}}}loadInputElements(){if(this.parsedRequests.length>0){let t=0;const e=()=>{const a=Math.min(t+5,this.parsedRequests.length);this.title.setLabel(`afcrc-helper (loading ${t+1}-${a}/${this.parsedRequests.length} requests)`);for(let i=t;i<a;i++)this.requestPageType==="redirect"?this.loadRedirectRequestElements(i):this.loadCategoryRequestElements(i);a<this.parsedRequests.length?(t=a,setTimeout(e,0)):this.title.setLabel(`afcrc-helper (${this.parsedRequests.length} requests loaded)`)};e()}else{const t=new OO.ui.MessageWidget({type:"notice",label:"No valid requests to handle!"}),e=new OO.ui.PanelLayout({padded:!0,expanded:!1});e.$element.append(t.$element),this.$body.append(e.$element),this.updateSize()}}loadRedirectRequestElements(t){const e=this.parsedRequests[t],s=document.createElement("details");s.classList.add("afcrc-helper-request"),s.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const a=document.createElement("summary");a.innerHTML=e.pages.map(d=>`<b>${d}</b>`).join(", ")+" \u2192 ";const i=document.createElement("a");i.target="_blank",i.href=mw.util.getUrl(e.target),i.textContent=e.target,a.append(i),s.append(a);const c=document.createElement("div");c.classList.add("afcrc-helper-request-info");const n=document.createElement("span");n.style.color="dimgray",n.textContent="None";const r=document.createElement("div"),h=document.createElement("b");h.textContent="Reason: ",r.append(h),e.reason?r.append(e.reason):r.append(n.cloneNode(!0)),c.append(r);const f=document.createElement("div"),T=document.createElement("b");T.textContent="Source: ",f.append(T),e.source?f.append(e.source):f.append(n.cloneNode(!0)),c.append(f);const v=document.createElement("div"),w=document.createElement("b");w.textContent="Requester: ",v.append(w);const O=document.createElement("a");O.target="_blank",O.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),O.textContent=e.requester.name,v.append(O),c.append(v),s.append(c),s.append(document.createElement("hr"));const R=document.createElement("div");R.classList.add("afcrc-helper-request-responder");for(const d of e.pages){const p=document.createElement("div"),l=document.createElement("b");l.textContent=d+" \u2192 "+e.target,p.append(l);const g=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(m=>new OO.ui.RadioOptionWidget({data:m,label:m}))});g.selectItemByLabel("None"),g.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const m=g.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].requests[d].action=m,["comment","close"].includes(m)){E.$element.show();const b=A.getValue().trim();b?this.actionsToTake[t].requests[d].comment=b:delete this.actionsToTake[t].requests[d].comment}else E.$element.hide(),delete this.actionsToTake[t].requests[d].comment;this.updateRequestColor(s,t);const q=p.querySelector(".afcrc-helper-tag-select-layout");switch(q&&q.remove(),y.$element.hide(),x.$element.hide(),m){case"accept":{const b=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:this.redirectTemplateItems});b.getMenu().filterMode="substring",b.on("change",()=>{const o=b.getValue().sort((u,C)=>u.toLowerCase().localeCompare(C.toLowerCase()));b.getValue().join(";")!==o.join(";")&&b.setValue(o),this.actionsToTake[t].requests[d].redirectTemplates=o}),b.setValue(this.actionsToTake[t].requests[d].redirectTemplates??[]);const S=new OO.ui.FieldLayout(b,{classes:["afcrc-helper-tag-select-layout"],align:"inline",label:"Redirect templates:"});p.append(S.$element[0]);break}case"deny":{y.$element.show();break}case"close":{x.$element.show();break}}});const k=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing pages"],["empty","empty submissions"],["notarget","nonexistent or no provided target"],["notitle","no title provided"],["unlikely","unlikely redirects"],["notredirect","article creation requests"],["externallink","external link redirects"],["editrequest","edit requests"],["notenglish","requests not in English"]].map(([m,q])=>({data:`autofill:${m}`,label:`Autofilled text for ${q}`}))});k.on("change",()=>{this.actionsToTake[t].requests[d].denyReason=k.getValue()||"autofill:unlikely"}),k.setValue("autofill:unlikely"),k.getMenu().selectItemByData("autofill:unlikely");const y=new OO.ui.FieldLayout(k,{align:"inline",label:"Deny reason:"});y.$element.hide();const P=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([m,q])=>new OO.ui.MenuOptionWidget({data:q,label:m}))}});P.getMenu().on("choose",()=>{const m=P.getMenu().findSelectedItem();this.actionsToTake[t].requests[d].closingReason={name:m.getLabel(),id:m.getData()},this.updateRequestColor(s,t)}),P.getMenu().selectItemByData("r"),this.actionsToTake[t].requests[d].closingReason={name:"No response",id:"r"};const x=new OO.ui.FieldLayout(P,{align:"inline",label:"Closing reason:"});x.$element.hide();const A=new OO.ui.TextInputWidget;A.on("change",()=>{const m=A.getValue().trim();m?this.actionsToTake[t].requests[d].comment=m:delete this.actionsToTake[t].requests[d].comment});const E=new OO.ui.FieldLayout(A,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});E.$element.hide(),p.append(g.$element[0],y.$element[0],x.$element[0],E.$element[0]),R.append(p)}s.append(R),this.$body.append(s),this.updateSize()}loadCategoryRequestElements(t){const e=this.parsedRequests[t],s=document.createElement("details");s.classList.add("afcrc-helper-request"),s.addEventListener("click",()=>setTimeout(()=>this.updateSize(),0));const a=document.createElement("summary");a.innerHTML=`<b>Category:${e.category}</b>`,s.append(a);const i=document.createElement("div");i.classList.add("afcrc-helper-request-info");const c=document.createElement("span");c.style.color="dimgray",c.textContent="None";const n=document.createElement("div"),r=document.createElement("b");if(r.textContent="Examples: ",n.append(r),e.examples.length>0)for(const[o,u]of e.examples.entries()){const C=document.createElement("a");C.target="_blank",C.href=mw.util.getUrl(u),C.textContent=u,n.append(C),o!==e.examples.length-1&&n.append(", ")}else n.append(c.cloneNode(!0));i.append(n);const h=document.createElement("div"),f=document.createElement("b");if(f.textContent="Parents: ",h.append(f),e.parents.length>0)for(const[o,u]of e.parents.entries()){const C=document.createElement("a");C.target="_blank",C.href=mw.util.getUrl(`Category:${u}`),C.textContent=u,h.append(C),o!==e.parents.length-1&&h.append(", ")}else h.append(c.cloneNode(!0));i.append(h);const T=document.createElement("div"),v=document.createElement("b");v.textContent="Requester: ",T.append(v);const w=document.createElement("a");w.target="_blank",w.href=e.requester.type==="user"?mw.util.getUrl(`User:${e.requester.name}`):mw.util.getUrl(`Special:Contributions/${e.requester.name}`),w.textContent=e.requester.name,T.append(w),i.append(T),s.append(i),s.append(document.createElement("hr"));const O=document.createElement("div");O.classList.add("afcrc-helper-request-responder");const R=new OO.ui.RadioSelectWidget({classes:["afcrc-helper-action-radio"],items:["Accept","Deny","Comment","Close","None"].map(o=>new OO.ui.RadioOptionWidget({data:o,label:o}))});R.selectItemByLabel("None"),R.on("choose",()=>{setTimeout(()=>this.updateSize(),0);const o=R.findSelectedItem().getData().toLowerCase();if(this.actionsToTake[t].action=o,["comment","close"].includes(o)){S.$element.show();const u=b.getValue().trim();u?this.actionsToTake[t].comment=u:delete this.actionsToTake[t].comment}else S.$element.hide(),delete this.actionsToTake[t].comment;switch(this.updateRequestColor(s,t),g.$element.hide(),x.$element.hide(),E.$element.hide(),q.$element.hide(),o){case"accept":{g.$element.show(),x.$element.show();break}case"deny":{E.$element.show();break}case"close":{q.$element.show();break}}});const d=new N({placeholder:"Add pages here"});d.on("change",()=>{let o=d.getValue();o=o.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),o=o.replace(/^:/,""),o.length>0&&d.setValue(o[0].toUpperCase()+o.slice(1).replaceAll("_"," "))}),d.on("showing-values",o=>{for(const u of o)p.addAllowedValue(u.data)});const p=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:d});p.on("change",()=>{const o=p.getValue().sort((u,C)=>u.toLowerCase().localeCompare(C.toLowerCase()));p.getValue().join(";")!==o.join(";")&&p.setValue(o),this.actionsToTake[t].examples=o});const{examples:l}=this.actionsToTake[t];for(const o of l)p.addAllowedValue(o);p.setValue(l);const g=new OO.ui.FieldLayout(p,{align:"inline",label:"Pages to categorize:"});g.$element.hide();const k=new V({placeholder:"Add categories here"});k.on("change",()=>{let o=k.getValue();o=o.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),o=o.replace(/^Category:/,""),o.length>0&&k.setValue(o[0].toUpperCase()+o.slice(1).replaceAll("_"," "))}),k.on("showing-values",o=>{for(const u of o)y.addAllowedValue(u.data)});const y=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:k});y.on("change",()=>{const o=y.getValue().sort((u,C)=>u.toLowerCase().localeCompare(C.toLowerCase()));y.getValue().join(";")!==o.join(";")&&y.setValue(o),this.actionsToTake[t].parents=o});const{parents:P}=this.actionsToTake[t];for(const o of P)y.addAllowedValue(o);y.setValue(P);const x=new OO.ui.FieldLayout(y,{align:"inline",label:"Categories:"});x.$element.hide();const A=new OO.ui.ComboBoxInputWidget({classes:["afcrc-closing-reason-input"],placeholder:"autofill:unlikely",options:[["exists","existing categories"],["empty","empty submissions"],["unlikely","categories that are unlikely to have enough pages"],["notcategory","page creation requests"],["notenglish","requests not in English"]].map(([o,u])=>({data:`autofill:${o}`,label:`Autofilled text for ${u}`}))});A.on("change",()=>{this.actionsToTake[t].denyReason=A.getValue()||"autofill:unlikely"}),A.setValue("autofill:unlikely"),A.getMenu().selectItemByData("autofill:unlikely");const E=new OO.ui.FieldLayout(A,{align:"inline",label:"Deny reason:"});E.$element.hide();const m=new OO.ui.DropdownWidget({classes:["afcrc-closing-reason-input"],menu:{items:[["No response","r"],["Succeeded","s"],["Withdrawn","w"]].map(([o,u])=>new OO.ui.MenuOptionWidget({data:u,label:o}))}});m.getMenu().on("choose",()=>{const o=m.getMenu().findSelectedItem();this.actionsToTake[t].closingReason={name:o.getLabel(),id:o.getData()},this.updateRequestColor(s,t)}),m.getMenu().selectItemByData("r"),this.actionsToTake[t].closingReason={name:"No response",id:"r"};const q=new OO.ui.FieldLayout(m,{align:"inline",label:"Closing reason:"});q.$element.hide();const b=new OO.ui.TextInputWidget;b.on("change",()=>{const o=b.getValue().trim();o?this.actionsToTake[t].comment=o:delete this.actionsToTake[t].comment});const S=new OO.ui.FieldLayout(b,{classes:["afcrc-comment-input"],align:"inline",label:"Comment:"});S.$element.hide(),O.append(R.$element[0],g.$element[0],x.$element[0],E.$element[0],q.$element[0],S.$element[0]),s.append(O),this.$body.append(s),this.updateSize()}updateRequestColor(t,e){if(this.requestPageType==="redirect"){const s=Object.values(this.actionsToTake[e].requests),a=s.every(r=>r.action==="accept"||r.action==="deny"),i=s.find(r=>r.action==="close")?.closingReason?.id,c=s.every(r=>r.action==="close"&&r.closingReason?.id===i);let n="";if(a){const r=s.filter(f=>f.action==="accept").length,h=s.filter(f=>f.action==="deny").length;r>0&&h>0?n="#fff17e":r>0?n="#a0ffa0":n="#ffcece"}else c&&(i==="r"?n="#ffcece":i==="s"?n="#90c090":n="#b8b8b8");t.style.backgroundColor=n}else{const{action:s}=this.actionsToTake[e];let a="";s==="accept"?a="#a0ffa0":s==="deny"?a="#ffcece":s==="close"&&(this.actionsToTake[e].closingReason?.id==="r"?a="#ffcece":this.actionsToTake[e].closingReason?.id==="s"?a="#90c090":a="#b8b8b8"),t.style.backgroundColor=a}}async performActions(){const t=new OO.ui.WindowManager;document.body.append(t.$element[0]);const e=new M;t.addWindows([e]),e.open();const s={accepted:0,denied:0,"commented on":0,closed:0};let a=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();if(this.requestPageType==="redirect")if(this.actionsToTake.some(c=>Object.values(c.requests).some(n=>n.action!=="none"))){for(const{target:n,requests:r}of this.actionsToTake){const h=Object.values(r).some(l=>l.action==="accept"||l.action==="deny"),f=Object.values(r).every(l=>l.action==="accept"||l.action==="deny"),T=Object.values(r).find(l=>l.action==="close")?.closingReason?.id,v=Object.values(r).every(l=>l.action==="close"&&l.closingReason?.id===T),w=[],O=[],R=[],d=Object.keys(r).length;for(const[l,g]of Object.entries(r))switch(g.action){case"accept":{h&&!f?e.addLogEntry(`Not all requests to "${n}" were accepted or denied, the handling of "${l}" will be ignored.`,"warning"):(w.push(l),s.accepted++);break}case"deny":{h&&!f?e.addLogEntry(`Not all requests to "${n}" were accepted or denied, the handling of "${l}" is being ignored.`,"warning"):(O.push([l,g.denyReason]),s.denied++);break}case"comment":{g.comment?(R.push([l,g.comment]),s["commented on"]++):e.addLogEntry(`The request to create "${l}" \u2192 "${n}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{v?(g.comment&&R.push([l,g.comment]),s.closed++):e.addLogEntry(`Not all requests to "${n}" were closed with the same reason, the handling of "${l}" is being ignored.`,"warning");break}}let p={pageText:a,...Object.values(r)[0].originalText};if(R.length>0&&(p=this.modifySectionData(p,{append:this.mapComments(R,d===1,R.length===d)})),f){let l;if(w.length>0&&O.length>0){l="p";const g=`* {{subst:AfC redirect}} (${w.map(y=>`[[${y}]]`).join(", ")}) ~~~~`,k=this.mapDeniedReasons(O,!1,!1);for(const y of w)this.handleAcceptedRedirect(y,r[y],n);p=this.modifySectionData(p,{append:`${g}
${k}`})}else if(w.length>0){l="a";for(const g of w)this.handleAcceptedRedirect(g,r[g],n);p=this.modifySectionData(p,{append:`* {{subst:AfC redirect${w.length>1?"|all":""}}} ~~~~`})}else l="d",p=this.modifySectionData(p,{append:this.mapDeniedReasons(O,d===1,!0)});p=this.modifySectionData(p,{prepend:`{{AfC-c|${l}}}`,append:"{{AfC-c|b}}"})}else v&&(p=this.modifySectionData(p,{prepend:`{{AfC-c|${T}}}`,append:"{{AfC-c|b}}"}));a=p.pageText}if(this.beforeText+this.pageContent===a)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(s).filter(([,n])=>n>0).map(([n,r])=>`${n} ${r}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:a,summary:`Handling AfC redirect requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!");else if(this.actionsToTake.some(c=>c.action!=="none")){for(const n of this.actionsToTake){let r={pageText:a,...n.originalText};switch(n.action){case"accept":{r=this.modifySectionData(r,{prepend:"{{AfC-c|a}}",append:`* {{subst:AfC category}} ~~~~
{{AfC-c|b}}`}),this.handleAcceptedCategory(n),s.accepted++;break}case"deny":{r=this.modifySectionData(r,{prepend:"{{AfC-c|d}}",append:`* ${this.formatDeniedReason(n.denyReason)} ~~~~
{{AfC-c|b}}`}),s.denied++;break}case"comment":{n.comment?(r=this.modifySectionData(r,{append:`* {{AfC comment|1=${n.comment}}} ~~~~`}),s["commented on"]++):e.addLogEntry(`The request to create "${n.category}" was marked to be commented on, but no comment was provided so it will be skipped.`,"warning");break}case"close":{r=this.modifySectionData(r,{prepend:`{{AfC-c|${n.closingReason.id}}}`,append:(n.comment?`* {{AfC comment|1=${n.comment}}} ~~~~`:"")+`
{{AfC-c|b}`}),s.closed++;break}}a=r.pageText}if(this.beforeText+this.pageContent===a)return e.addLogEntry("No requests have been handled (page content identical)!");const c=Object.entries(s).filter(([,n])=>n>0).map(([n,r])=>`${n} ${r}`).join(", ");this.editsCreationsToMake.push({type:"edit",title:this.pageTitle,transform:()=>({text:a,summary:`Handling AfC category requests (${c})${this.scriptMessage}`})}),await this.makeAllEditsCreations(e),e.addLogEntry("All changes made, click below to reload!","success"),e.showReload()}else e.addLogEntry("No requests have been handled!")}formatDeniedReason(t){const e=t.startsWith("autofill:")?t.replace("autofill:",""):`decline|2=${t}`;return`{{subst:AfC ${this.requestPageType}|${e}}}`}mapDeniedReasons(t,e,s){if(e)return`* ${this.formatDeniedReason(t[0][1])} ~~~~`;const a={};for(const[c,n]of t)a[n]||(a[n]=[]),a[n].push(c);const i=Object.entries(a);return i.map(([c,n])=>`* ${this.formatDeniedReason(c)}${i.length>1||!s?` (${n.map(r=>`[[${r}]]`).join(", ")})`:""} ~~~~`).join(`
`)}mapComments(t,e,s){if(e)return`* {{AfC comment|1=${t[0][1]}}} ~~~~`;const a={};for(const[c,n]of t)a[n]||(a[n]=[]),a[n].push(c);const i=Object.entries(a);return i.map(([c,n])=>`* {{AfC comment|1=${c}}}${i.length>1||!s?` (${n.map(r=>`[[${r}]]`).join(", ")})`:""} ~~~~`).join(`
`)}modifySectionData(t,{prepend:e,append:s}){const{fullSectionText:a,sectionText:i}=t;return e&&(t.sectionText=e+`
`+t.sectionText),s&&(t.sectionText+=`
`+s),t.fullSectionText=t.fullSectionText.replace(i,t.sectionText),t.pageText=t.pageText.replace(a,t.fullSectionText),t}handleAcceptedRedirect(t,e,s){const a=e.redirectTemplates&&e.redirectTemplates.length>0?e.redirectTemplates?.map(i=>`{{${i}}}`).join(`
`):null;this.editsCreationsToMake.push({type:"create",isRedirect:!0,title:t,text:`#REDIRECT [[${s}]]${a?`

{{Redirect category shell|
${a}
}}`:""}`,summary:`Creating redirect to [[${s}]] as requested at [[WP:AFC/R]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:mw.Title.newFromText(t).getTalkPage().getPrefixedText(),text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`})}handleAcceptedCategory(t){this.editsCreationsToMake.push({type:"create",isRedirect:!1,title:`Category:${t.category}`,text:t.parents.map(e=>`[[Category:${e}]]`).join(`
`),summary:`Creating category as requested at [[WP:AFC/C]]${this.scriptMessage}`},{type:"create",isRedirect:!1,title:`Category talk:${t.category}`,text:`{{WikiProject banner shell|
{{WikiProject Articles for creation|ts={{subst:LOCALTIMESTAMP}}|reviewer=${mw.config.get("wgUserName")}}}
}}`,summary:`Adding [[Wikipedia:WikiProject Articles for creation|WikiProject Articles for creation]] banner${this.scriptMessage}`},...t.examples.map(e=>({type:"edit",title:e,transform:({content:s})=>({text:`${s}
[[Category:${t.category}]]`,summary:`Adding page to [[:Category:${t.category}]] as requested at [[WP:AFC/C]]${this.scriptMessage}`})})))}async makeAllEditsCreations(t){for(const e of this.editsCreationsToMake){const s=e.type==="edit"?this.api.edit(e.title,e.transform):this.api.create(e.title,{summary:e.summary},e.text),a=document.createElement("a");a.target="_blank",a.href=mw.util.getUrl(e.title,"isRedirect"in e&&e.isRedirect?{redirect:"no"}:void 0),a.textContent=e.title,t.addLogEntry(`${e.type==="edit"?"Editing":"Creating"} ${a.outerHTML}...`),await s.catch(async(i,c)=>{i==="ratelimited"?(t.addLogEntry(`Rate limited. Waiting for 70 seconds... (resuming at ${new Date(Date.now()+7e4).toLocaleTimeString()})`,"warning"),await new Promise(n=>setTimeout(n,7e4)),t.addLogEntry("Continuing...","success"),await s.catch((n,r)=>{t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${a.outerHTML}: ${r?.error.info??"Unknown error"} (${n}).`,"error")})):t.addLogEntry(`Error ${e.type==="edit"?"editing":"creating"} ${a.outerHTML}: ${c?.error.info??"Unknown error"} (${i}).`,"error")})}}}Object.assign(L.prototype,OO.ui.ProcessDialog.prototype)});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
