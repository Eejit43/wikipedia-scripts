// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/aligner.ts

"use strict";(()=>{if(mw.config.get("wgNamespaceNumber")<0||!mw.config.get("wgIsProbablyEditable"))return;const i=["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"];mw.loader.using(["mediawiki.util","mediawiki.notification","jquery.textSelection"],()=>{mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Align template parameters","align-parameters").addEventListener("click",o=>{o.preventDefault(),window.wikEd?.useWikEd&&window.wikEd.UpdateTextarea();const s=$("#wpTextbox1");if(!s)return mw.notification.notify("Edit box not found, are you in edit mode?",{type:"error",autoHideSeconds:"short"});const t=s.textSelection("getContents");if(!t)return mw.notification.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});let x=0;function y(e){if(e==="")return mw.notification.notify("Infobox not found!",{type:"error",autoHideSeconds:"short"});if(l!==0)return mw.notification.notify("Template was not properly closed!",{type:"error",autoHideSeconds:"short"});let r=0;const a=String(e),f=e.split(`
`),h=[];for(const w of f){const d=splitIntoParameters(w.trim());for(const u of d){const g=u.trim();if(!g.startsWith("|")||g.split("=").length!==2){h.push(g);continue}let[m,b]=splitParameter(g);m=m.slice(1).trim(),m.length>r&&(r=m.length),h.push("| "+m+"="+b)}}let c="";r+=2;for(let w of h){const d=splitParameter(w);if(d.length<2){c+=w+=`
`;continue}let u=d[0].trim();for(;u.length<r;)u+=" ";c+=u+" = "+d[1].trim()+`
`}c.endsWith(`
`)&&(c=c.slice(0,-1)),s.textSelection("setContents",s.textSelection("getContents").replace(a,c).replace(/\n+$/,"")),window.wikEd?.useWikEd&&window.wikEd.UpdateFrame()}let p="",l=0;for(let e=0;e<t.length;e++){let r=!1;for(let a of i){a="{{"+a;const f=a.length;t.length-e>f&&(t.slice(e,e+f).toLowerCase()===a||t.slice(e,e+f).toLowerCase()===a.replace(" ","_"))&&(l++,p+=t[e],r=!0)}l>=1&&!r&&(p+=t[e],t[e]==="{"?l++:t[e]==="}"&&(l--,l===0&&(x++,y(p),p="")))}mw.notification.notify(`Successfully aligned ${x} templates!`,{type:"success",autoHideSeconds:"short"})})})})();function splitParameter(i){const n=i.split("=");return n.length<=2?n:[n.shift(),n.join("=")]}function splitIntoParameters(i){if(i.startsWith("{{")&&i.endsWith("}}"))return i.includes("|")?["{{"+splitIntoParameters(i.slice(2,-2))[0],...splitIntoParameters(i.slice(2,-2)).slice(1),"}}"]:[i];const n=[];let o="",s=0;for(const t of i)o+=t,t==="{"||t==="["?s+=1:t===""||t==="]"?s--:t==="|"&&s===0&&o.trim()!=="|"&&(n.push(o.slice(0,-1).trim()),o="|");return n.push(o),n}

// </nowiki>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9hbGlnbmVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5pbnRlcmZhY2UgV2luZG93IHtcbiAgICB3aWtFZD86IHtcbiAgICAgICAgdXNlV2lrRWQ6IGJvb2xlYW47XG4gICAgICAgIFVwZGF0ZVRleHRhcmVhOiAoKSA9PiB2b2lkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgICAgICBVcGRhdGVGcmFtZTogKCkgPT4gdm9pZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgICB9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmludGVyZmFjZSBKUXVlcnk8VEVsZW1lbnQgZXh0ZW5kcyBOb2RlID0gSFRNTEVsZW1lbnQ+IGV4dGVuZHMgSXRlcmFibGU8VEVsZW1lbnQ+IHtcbiAgICB0ZXh0U2VsZWN0aW9uKG1ldGhvZE5hbWU6ICdzZXRDb250ZW50cycsIHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xufVxuXG4oKCkgPT4ge1xuICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpIDwgMCkgcmV0dXJuOyAvLyBEb24ndCBydW4gaW4gdmlydHVhbCBuYW1lc3BhY2VzXG4gICAgaWYgKCFtdy5jb25maWcuZ2V0KCd3Z0lzUHJvYmFibHlFZGl0YWJsZScpKSByZXR1cm47IC8vIERvbid0IHJ1biBpZiB1c2VyIGNhbid0IGVkaXQgcGFnZVxuXG4gICAgY29uc3Qgc2VhcmNoZXMgPSBbJ2luZm9ib3gnLCAnc3BlY2llc2JveCcsICd0YXhvYm94JywgJ2F1dG9tYXRpYyB0YXhvYm94JywgJ29zbSBsb2NhdGlvbiBtYXAnLCAnbW90b3JzcG9ydCBzZWFzb24nXTtcblxuICAgIG13LmxvYWRlci51c2luZyhbJ21lZGlhd2lraS51dGlsJywgJ21lZGlhd2lraS5ub3RpZmljYXRpb24nLCAnanF1ZXJ5LnRleHRTZWxlY3Rpb24nXSwgKCkgPT4ge1xuICAgICAgICBjb25zdCBsaW5rID0gbXcudXRpbC5hZGRQb3J0bGV0TGluayhtdy5jb25maWcuZ2V0KCdza2luJykgPT09ICdtaW5lcnZhJyA/ICdwLW5hdmlnYXRpb24nIDogJ3AtY2FjdGlvbnMnLCAnIycsICdBbGlnbiB0ZW1wbGF0ZSBwYXJhbWV0ZXJzJywgJ2FsaWduLXBhcmFtZXRlcnMnKSE7XG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGlmICh3aW5kb3cud2lrRWQ/LnVzZVdpa0VkKSB3aW5kb3cud2lrRWQuVXBkYXRlVGV4dGFyZWEoKTtcblxuICAgICAgICAgICAgY29uc3QgZWRpdEJveCA9ICQoJyN3cFRleHRib3gxJyk7XG5cbiAgICAgICAgICAgIGlmICghZWRpdEJveCkgcmV0dXJuIG13Lm5vdGlmaWNhdGlvbi5ub3RpZnkoJ0VkaXQgYm94IG5vdCBmb3VuZCwgYXJlIHlvdSBpbiBlZGl0IG1vZGU/JywgeyB0eXBlOiAnZXJyb3InLCBhdXRvSGlkZVNlY29uZHM6ICdzaG9ydCcgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBlZGl0Qm94LnRleHRTZWxlY3Rpb24oJ2dldENvbnRlbnRzJyk7XG5cbiAgICAgICAgICAgIGlmICghdGV4dCkgcmV0dXJuIG13Lm5vdGlmaWNhdGlvbi5ub3RpZnkoJ0VkaXQgYm94IHZhbHVlIG5vdCBmb3VuZCEnLCB7IHR5cGU6ICdlcnJvcicsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcblxuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGaW5pc2hlcyBwcm9jZXNzaW5nIGFuIGluZm9ib3ggYW5kIHVwZGF0ZXMgdGhlIGVkaXQgYm94IGNvbnRlbnRzLlxuICAgICAgICAgICAgICogQHBhcmFtIHRlbXBsYXRlIFRoZSB0ZW1wbGF0ZSBzdHJpbmcgdG8gcHJvY2Vzcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0luZm9ib3godGVtcGxhdGU6IHN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZSA9PT0gJycpIHJldHVybiBtdy5ub3RpZmljYXRpb24ubm90aWZ5KCdJbmZvYm94IG5vdCBmb3VuZCEnLCB7IHR5cGU6ICdlcnJvcicsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChvcGVuICE9PSAwKSByZXR1cm4gbXcubm90aWZpY2F0aW9uLm5vdGlmeSgnVGVtcGxhdGUgd2FzIG5vdCBwcm9wZXJseSBjbG9zZWQhJywgeyB0eXBlOiAnZXJyb3InLCBhdXRvSGlkZVNlY29uZHM6ICdzaG9ydCcgfSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgbWF4TGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdUZW1wbGF0ZSA9IFN0cmluZyh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSB0ZW1wbGF0ZS5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TGluZXMgPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzSW5MaW5lID0gc3BsaXRJbnRvUGFyYW1ldGVycyhsaW5lLnRyaW0oKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgcGFyYW1ldGVyc0luTGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHBhcmFtZXRlci50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxpbmUuc3RhcnRzV2l0aCgnfCcpIHx8IGxpbmUuc3BsaXQoJz0nKS5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdMaW5lcy5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgW2ZpcnN0UGFydCwgbGFzdFBhcnRdID0gc3BsaXRQYXJhbWV0ZXIobGluZSkgYXMgW3N0cmluZywgc3RyaW5nXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItY29uc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0UGFydCA9IGZpcnN0UGFydC5zbGljZSgxKS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdFBhcnQubGVuZ3RoID4gbWF4TGVuZ3RoKSBtYXhMZW5ndGggPSBmaXJzdFBhcnQubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaW5lcy5wdXNoKCd8ICcgKyBmaXJzdFBhcnQgKyAnPScgKyBsYXN0UGFydCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgb3V0cHV0ID0gJyc7XG5cbiAgICAgICAgICAgICAgICBtYXhMZW5ndGggKz0gMjsgLy8gdG8gaW5jbHVkZSAnfCAnXG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBsaW5lIG9mIG5ld0xpbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gc3BsaXRQYXJhbWV0ZXIobGluZSkgYXMgW3N0cmluZywgc3RyaW5nXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGxpbmUgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaXJzdFBhcnQgPSBwYXJ0c1swXS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGZpcnN0UGFydC5sZW5ndGggPCBtYXhMZW5ndGgpIGZpcnN0UGFydCArPSAnICc7XG5cbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGZpcnN0UGFydCArICcgPSAnICsgcGFydHNbMV0udHJpbSgpICsgJ1xcbic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dC5lbmRzV2l0aCgnXFxuJykpIG91dHB1dCA9IG91dHB1dC5zbGljZSgwLCAtMSk7XG5cbiAgICAgICAgICAgICAgICBlZGl0Qm94LnRleHRTZWxlY3Rpb24oJ3NldENvbnRlbnRzJywgZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdnZXRDb250ZW50cycpLnJlcGxhY2Uob3JpZ1RlbXBsYXRlLCBvdXRwdXQpLnJlcGxhY2UoL1xcbiskLywgJycpKTtcblxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cud2lrRWQ/LnVzZVdpa0VkKSB3aW5kb3cud2lrRWQuVXBkYXRlRnJhbWUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gJyc7XG4gICAgICAgICAgICBsZXQgb3BlbiA9IDA7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0ZXh0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGxldCBmb28gPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IHNlYXJjaCBvZiBzZWFyY2hlcykge1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2ggPSAne3snICsgc2VhcmNoO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWFyY2hMZW5ndGggPSBzZWFyY2gubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQubGVuZ3RoIC0gaW5kZXggPiBzZWFyY2hMZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0ZXh0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaExlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoIHx8IHRleHQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoTGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2gucmVwbGFjZSgnICcsICdfJykpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgKz0gdGV4dFtpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb28gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wZW4gPj0gMSAmJiAhZm9vKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlICs9IHRleHRbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0W2luZGV4XSA9PT0gJ3snKSBvcGVuKys7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRleHRbaW5kZXhdID09PSAnfScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4tLTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW4gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NJbmZvYm94KHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtdy5ub3RpZmljYXRpb24ubm90aWZ5KGBTdWNjZXNzZnVsbHkgYWxpZ25lZCAke2NvdW50fSB0ZW1wbGF0ZXMhYCwgeyB0eXBlOiAnc3VjY2VzcycsIGF1dG9IaWRlU2Vjb25kczogJ3Nob3J0JyB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpO1xuXG4vKipcbiAqIFNwbGl0cyBhIHN0cmluZyBpbnRvIGFuIEFycmF5IGNvbnRhaW5pbmcgdGhlIGtleSBhbmQgdmFsdWUuXG4gKiBAcGFyYW0gc3RyaW5nIFRoZSBmdWxsIHN0cmluZyB0byBzcGxpdC5cbiAqL1xuZnVuY3Rpb24gc3BsaXRQYXJhbWV0ZXIoc3RyaW5nOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzcGxpdCA9IHN0cmluZy5zcGxpdCgnPScpO1xuICAgIGlmIChzcGxpdC5sZW5ndGggPD0gMikgcmV0dXJuIHNwbGl0O1xuXG4gICAgY29uc3QgZmlyc3QgPSBzcGxpdC5zaGlmdCgpO1xuICAgIHJldHVybiBbZmlyc3QsIHNwbGl0LmpvaW4oJz0nKV07XG59XG5cbi8qKlxuICogU3BsaXRzIGEgdGVtcGxhdGUgaW50byBhbiBBcnJheSB3aXRoIGFsbCBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHN0cmluZyBUaGUgdGVtcGxhdGUgdG8gcHJvY2Vzcy5cbiAqL1xuZnVuY3Rpb24gc3BsaXRJbnRvUGFyYW1ldGVycyhzdHJpbmc6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBpZiAoc3RyaW5nLnN0YXJ0c1dpdGgoJ3t7JykgJiYgc3RyaW5nLmVuZHNXaXRoKCd9fScpKSB7XG4gICAgICAgIGlmICghc3RyaW5nLmluY2x1ZGVzKCd8JykpIHJldHVybiBbc3RyaW5nXTtcblxuICAgICAgICBjb25zdCByZXN1bHRzID0gc3BsaXRJbnRvUGFyYW1ldGVycyhzdHJpbmcuc2xpY2UoMiwgLTIpKTtcbiAgICAgICAgcmV0dXJuIFsne3snICsgcmVzdWx0c1swXSwgLi4uc3BsaXRJbnRvUGFyYW1ldGVycyhzdHJpbmcuc2xpY2UoMiwgLTIpKS5zbGljZSgxKSwgJ319J107XG4gICAgfVxuXG4gICAgY29uc3QgcGFyYW1ldGVycyA9IFtdO1xuICAgIGxldCB0ZW1wb3JhcnkgPSAnJztcbiAgICBsZXQgb3BlbiA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IGNoYXIgb2Ygc3RyaW5nKSB7XG4gICAgICAgIHRlbXBvcmFyeSArPSBjaGFyO1xuXG4gICAgICAgIGlmIChjaGFyID09PSAneycgfHwgY2hhciA9PT0gJ1snKSBvcGVuICs9IDE7XG4gICAgICAgIGVsc2UgaWYgKGNoYXIgPT09ICcnIHx8IGNoYXIgPT09ICddJykgb3Blbi0tO1xuICAgICAgICBlbHNlIGlmIChjaGFyID09PSAnfCcgJiYgb3BlbiA9PT0gMCAmJiB0ZW1wb3JhcnkudHJpbSgpICE9PSAnfCcpIHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMucHVzaCh0ZW1wb3Jhcnkuc2xpY2UoMCwgLTEpLnRyaW0oKSk7XG4gICAgICAgICAgICB0ZW1wb3JhcnkgPSAnfCc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJhbWV0ZXJzLnB1c2godGVtcG9yYXJ5KTtcblxuICAgIHJldHVybiBwYXJhbWV0ZXJzO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7O2NBY0MsSUFBTSxDQUVILEdBREksR0FBRyxPQUFPLElBQUksbUJBQW1CLEVBQUksR0FDckMsQ0FBQyxHQUFHLE9BQU8sSUFBSSxzQkFBc0IsRUFBRyxPQUU1QyxNQUFNQSxFQUFXLENBQUMsVUFBVyxhQUFjLFVBQVcsb0JBQXFCLG1CQUFvQixtQkFB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SUFBTUEsSUFBUyxJQUFLcEIsSUFDN0JvQixJQUFTLEtBQU9wQixJQUFTLEdBQUttQixFQUFVLEtBQUssSUFBTSxNQUN4REQsRUFBVyxLQUFLQyxFQUFVLE1BQU0sRUFBRyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQzdDQSxFQUFZLEtBSXBCLE9BQUFELEVBQVcsS0FBS0MsQ0FBUyxFQUVsQkQsQ0FDWCIsCiAgIm5hbWVzIjogWyJzZWFyY2hlcyIsICJldmVudCIsICJlZGl0Qm94IiwgInRleHQiLCAiY291bnQiLCAicHJvY2Vzc0luZm9ib3giLCAidGVtcGxhdGUiLCAib3BlbiIsICJtYXhMZW5ndGgiLCAib3JpZ1RlbXBsYXRlIiwgImxpbmVzIiwgIm5ld0xpbmVzIiwgImxpbmUiLCAicGFyYW1ldGVyc0luTGluZSIsICJwYXJhbWV0ZXIiLCAiZmlyc3RQYXJ0IiwgImxhc3RQYXJ0IiwgIm91dHB1dCIsICJwYXJ0cyIsICJpbmRleCIsICJmb28iLCAic2VhcmNoIiwgInNlYXJjaExlbmd0aCIsICJzdHJpbmciLCAic3BsaXQiLCAicGFyYW1ldGVycyIsICJ0ZW1wb3JhcnkiLCAiY2hhciJdCn0K
