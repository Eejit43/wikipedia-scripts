// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/aligner.ts

"use strict";(()=>{if(mw.config.get("wgNamespaceNumber")<0||!mw.config.get("wgIsProbablyEditable"))return;let e=!1;mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.hook("wikipage.content").add(o);function o(){if(e||$("#wpTextbox1").length===0)return;e=!0,mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Align template parameters","align-parameters").addEventListener("click",f=>{f.preventDefault();const n=$("#wpTextbox1"),i=n.textSelection("getContents");if(!i)return mw.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});let b=0;function y(t){if(t==="")return mw.notify("Infobox not found!",{type:"error",autoHideSeconds:"short"});if(a!==0)return mw.notify("Template was not properly closed!",{type:"error",autoHideSeconds:"short"});let r=0;const l=String(t),u=t.split(`
`),w=[];for(const d of u){const p=splitIntoParameters(d.trim());for(const m of p){const x=m.trim();if(!x.startsWith("|")||x.split("=").length!==2){w.push(x);continue}let[g,L]=splitParameter(x);g=g.slice(1).trim(),g.length>r&&(r=g.length),w.push("| "+g+"="+L)}}let c="";r+=2;for(let d of w){const p=splitParameter(d);if(p.length<2){c+=d+=`
`;continue}let m=p[0].trim();for(;m.length<r;)m+=" ";c+=m+" = "+p[1].trim()+`
`}c.endsWith(`
`)&&(c=c.slice(0,-1)),n.textSelection("setContents",n.textSelection("getContents").replace(l,c).replace(/\n+$/,"")),n.textSelection("setSelection",{start:0})}let h="",a=0;const S=["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"];for(let t=0;t<i.length;t++){let r=!1;for(let l of S){l="{{"+l;const u=l.length;i.length-t>u&&(i.slice(t,t+u).toLowerCase()===l||i.slice(t,t+u).toLowerCase()===l.replace(" ","_"))&&(a++,h+=i[t],r=!0)}a>=1&&!r&&(h+=i[t],i[t]==="{"?a++:i[t]==="}"&&(a--,a===0&&(b++,y(h),h="")))}mw.notify(`Successfully aligned ${b} templates!`,{type:"success",autoHideSeconds:"short"})})}})})();function splitParameter(e){const o=e.split("=");return o.length<=2?o:[o.shift(),o.join("=")]}function splitIntoParameters(e){if(e.startsWith("{{")&&e.endsWith("}}"))return e.includes("|")?["{{"+splitIntoParameters(e.slice(2,-2))[0],...splitIntoParameters(e.slice(2,-2)).slice(1),"}}"]:[e];const o=[];let s="",f=0;for(const n of e)s+=n,n==="{"||n==="["?f+=1:n===""||n==="]"?f--:n==="|"&&f===0&&s.trim()!=="|"&&(o.push(s.slice(0,-1).trim()),s="|");return o.push(s),o}

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
