// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/aligner.ts

"use strict";(()=>{if(mw.config.get("wgNamespaceNumber")<0||!mw.config.get("wgIsProbablyEditable"))return;let e=!1;mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.config.get("wgAction")==="edit"?i():mw.hook("wikipage.content").add(i);function i(){if(e||!$("#wpTextbox1")[0])return;e=!0,mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Align template parameters","align-parameters").addEventListener("click",f=>{f.preventDefault();const n=$("#wpTextbox1"),o=n.textSelection("getContents");if(!o)return mw.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});let b=0;function y(t){if(t==="")return mw.notify("Infobox not found!",{type:"error",autoHideSeconds:"short"});if(a!==0)return mw.notify("Template was not properly closed!",{type:"error",autoHideSeconds:"short"});let r=0;const l=String(t),u=t.split(`
`),x=[];for(const h of u){const p=splitIntoParameters(h.trim());for(const m of p){const w=m.trim();if(!w.startsWith("|")||w.split("=").length!==2){x.push(w);continue}let[g,L]=splitParameter(w);g=g.slice(1).trim(),g.length>r&&(r=g.length),x.push("| "+g+"="+L)}}let c="";r+=2;for(let h of x){const p=splitParameter(h);if(p.length<2){c+=h+=`
`;continue}let m=p[0].trim();for(;m.length<r;)m+=" ";c+=m+" = "+p[1].trim()+`
`}c.endsWith(`
`)&&(c=c.slice(0,-1)),n.textSelection("setContents",n.textSelection("getContents").replace(l,c).replace(/\n+$/,"")),n.textSelection("setSelection",{start:0})}let d="",a=0;const S=["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"];for(let t=0;t<o.length;t++){let r=!1;for(let l of S){l="{{"+l;const u=l.length;o.length-t>u&&(o.slice(t,t+u).toLowerCase()===l||o.slice(t,t+u).toLowerCase()===l.replace(" ","_"))&&(a++,d+=o[t],r=!0)}a>=1&&!r&&(d+=o[t],o[t]==="{"?a++:o[t]==="}"&&(a--,a===0&&(b++,y(d),d="")))}mw.notify(`Successfully aligned ${b} templates!`,{type:"success",autoHideSeconds:"short"})})}})})();function splitParameter(e){const i=e.split("=");return i.length<=2?i:[i.shift(),i.join("=")]}function splitIntoParameters(e){if(e.startsWith("{{")&&e.endsWith("}}"))return e.includes("|")?["{{"+splitIntoParameters(e.slice(2,-2))[0],...splitIntoParameters(e.slice(2,-2)).slice(1),"}}"]:[e];const i=[];let s="",f=0;for(const n of e)s+=n,n==="{"||n==="["?f+=1:n===""||n==="]"?f--:n==="|"&&f===0&&s.trim()!=="|"&&(i.push(s.slice(0,-1).trim()),s="|");return i.push(s),i}

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
