// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/aligner.ts

"use strict";(()=>{mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addCSS(`
#align-parameters {
    display: none;
}

#content:has(#wpTextbox1) #align-parameters {
    display: unset;
}`),mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Align template parameters","align-parameters").addEventListener("click",s=>{s.preventDefault();let n=$("#wpTextbox1");if(n.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});let e=n.textSelection("getContents");if(!e)return mw.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});let o=0;function S(t){if(t==="")return mw.notify("Infobox not found!",{type:"error",autoHideSeconds:"short"});if(a!==0)return mw.notify("Template was not properly closed!",{type:"error",autoHideSeconds:"short"});let r=0,l=String(t),f=t.split(`
`),w=[];for(let g of f){let u=x(g.trim());for(let p of u){let h=p.trim();if(!h.startsWith("|")||h.split("=").length!==2){w.push(h);continue}let[m,L]=y(h);m=m.slice(1).trim(),m.length>r&&(r=m.length),w.push("| "+m+"="+L)}}let c="";r+=2;for(let g of w){let u=y(g);if(u.length<2){c+=g+=`
`;continue}let p=u[0].trim();for(;p.length<r;)p+=" ";c+=p+" = "+u[1].trim()+`
`}c.endsWith(`
`)&&(c=c.slice(0,-1)),n.textSelection("setContents",n.textSelection("getContents").replace(l,c).replace(/\n+$/,"")),n.textSelection("setSelection",{start:0})}let d="",a=0,b=["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"];for(let t=0;t<e.length;t++){let r=!1;for(let l of b){l="{{"+l;let f=l.length;e.length-t>f&&(e.slice(t,t+f).toLowerCase()===l||e.slice(t,t+f).toLowerCase()===l.replace(" ","_"))&&(a++,d+=e[t],r=!0)}a>=1&&!r&&(d+=e[t],e[t]==="{"?a++:e[t]==="}"&&(a--,a===0&&(o++,S(d),d="")))}o===0?mw.notify("No templates found to align!",{type:"warn",autoHideSeconds:"short"}):mw.notify(`Successfully aligned ${o} template${o>1?"s":""}!`,{type:"success",autoHideSeconds:"short"})})});function y(i){let s=i.split("=");return s.length<=2?s:[s.shift(),s.join("=")]}function x(i){if(i.startsWith("{{")&&i.endsWith("}}"))return i.includes("|")?["{{"+x(i.slice(2,-2))[0],...x(i.slice(2,-2)).slice(1),"}}"]:[i];let s=[],n="",e=0;for(let o of i)n+=o,o==="{"||o==="["?e+=1:o===""||o==="]"?e--:o==="|"&&e===0&&n.trim()!=="|"&&(s.push(n.slice(0,-1).trim()),n="|");return s.push(n),s}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
