// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/aligner.ts

"use strict";mw.config.get("wgNamespaceNumber")<0||mw.config.get("wgIsProbablyEditable")&&mw.loader.using(["mediawiki.util","jquery.textSelection"],()=>{mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-navigation":"p-cactions","#","Align template parameters","align-parameters").addEventListener("click",i=>{i.preventDefault();const n=$("#wpTextbox1");if(n.length===0)return mw.notify("Edit box not found!",{type:"error",autoHideSeconds:"short"});const e=n.textSelection("getContents");if(!e)return mw.notify("Edit box value not found!",{type:"error",autoHideSeconds:"short"});let s=0;function w(t){if(t==="")return mw.notify("Infobox not found!",{type:"error",autoHideSeconds:"short"});if(a!==0)return mw.notify("Template was not properly closed!",{type:"error",autoHideSeconds:"short"});let r=0;const l=String(t),f=t.split(`
`),x=[];for(const h of f){const u=splitIntoParameters(h.trim());for(const p of u){const d=p.trim();if(!d.startsWith("|")||d.split("=").length!==2){x.push(d);continue}let[m,b]=splitParameter(d);m=m.slice(1).trim(),m.length>r&&(r=m.length),x.push("| "+m+"="+b)}}let c="";r+=2;for(let h of x){const u=splitParameter(h);if(u.length<2){c+=h+=`
`;continue}let p=u[0].trim();for(;p.length<r;)p+=" ";c+=p+" = "+u[1].trim()+`
`}c.endsWith(`
`)&&(c=c.slice(0,-1)),n.textSelection("setContents",n.textSelection("getContents").replace(l,c).replace(/\n+$/,"")),n.textSelection("setSelection",{start:0})}let g="",a=0;const y=["infobox","speciesbox","taxobox","automatic taxobox","osm location map","motorsport season"];for(let t=0;t<e.length;t++){let r=!1;for(let l of y){l="{{"+l;const f=l.length;e.length-t>f&&(e.slice(t,t+f).toLowerCase()===l||e.slice(t,t+f).toLowerCase()===l.replace(" ","_"))&&(a++,g+=e[t],r=!0)}a>=1&&!r&&(g+=e[t],e[t]==="{"?a++:e[t]==="}"&&(a--,a===0&&(s++,w(g),g="")))}mw.notify(`Successfully aligned ${s} templates!`,{type:"success",autoHideSeconds:"short"})})});function splitParameter(o){const i=o.split("=");return i.length<=2?i:[i.shift(),i.join("=")]}function splitIntoParameters(o){if(o.startsWith("{{")&&o.endsWith("}}"))return o.includes("|")?["{{"+splitIntoParameters(o.slice(2,-2))[0],...splitIntoParameters(o.slice(2,-2)).slice(1),"}}"]:[o];const i=[];let n="",e=0;for(const s of o)n+=s,s==="{"||s==="["?e+=1:s===""||s==="]"?e--:s==="|"&&e===0&&n.trim()!=="|"&&(i.push(n.slice(0,-1).trim()),n="|");return i.push(n),i}

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
