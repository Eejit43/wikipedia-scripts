"use strict";
(() => {
  if (mw.config.get("wgNamespaceNumber") < 0)
    return;
  if (!mw.config.get("wgIsProbablyEditable"))
    return;
  const searches = ["infobox", "speciesbox", "taxobox", "automatic taxobox", "osm location map", "motorsport season"];
  mw.loader.using(["mediawiki.util", "mediawiki.notification", "jquery.textSelection"], () => {
    const link = mw.util.addPortletLink(mw.config.get("skin") === "minerva" ? "p-navigation" : "p-cactions", "#", "Align template params", "align-params");
    link.addEventListener("click", (event) => {
      event.preventDefault();
      if (window.wikEd?.useWikEd)
        window.wikEd.UpdateTextarea();
      const editBox = $("#wpTextbox1");
      if (!editBox)
        return mw.notification.notify("Edit box not found, are you in edit mode?", { type: "error", autoHideSeconds: "short" });
      const text = editBox.textSelection("getContents");
      if (!text)
        return mw.notification.notify("Edit box value not found!", { type: "error", autoHideSeconds: "short" });
      let count = 0;
      function processInfobox(template2) {
        if (template2 === "")
          return mw.notification.notify("Infobox not found!", { type: "error", autoHideSeconds: "short" });
        if (open !== 0)
          return mw.notification.notify("Template was not properly closed!", { type: "error", autoHideSeconds: "short" });
        let maxLength = 0;
        const origTemplate = String(template2);
        const lines = template2.split("\n");
        const newLines = [];
        for (const line of lines) {
          const parametersInLine = splitIntoParameters(line.trim());
          for (const parameter of parametersInLine) {
            const line2 = parameter.trim();
            if (!line2.startsWith("|") || line2.split("=").length !== 2) {
              newLines.push(line2);
              continue;
            }
            let [firstPart, lastPart] = splitParameter(line2);
            firstPart = firstPart.slice(1).trim();
            if (firstPart.length > maxLength)
              maxLength = firstPart.length;
            newLines.push("| " + firstPart + "=" + lastPart);
          }
        }
        let output = "";
        maxLength += 2;
        for (let line of newLines) {
          const parts = splitParameter(line);
          if (parts.length < 2) {
            output += line += "\n";
            continue;
          }
          let firstPart = parts[0].trim();
          while (firstPart.length < maxLength)
            firstPart += " ";
          output += firstPart + " = " + parts[1].trim() + "\n";
        }
        if (output.endsWith("\n"))
          output = output.slice(0, -1);
        editBox.textSelection("setContents", editBox.textSelection("getContents").replace(origTemplate, output).replace(/\n+$/, ""));
        if (window.wikEd?.useWikEd)
          window.wikEd.UpdateFrame();
      }
      let template = "";
      let open = 0;
      for (let index = 0; index < text.length; index++) {
        let foo = false;
        for (let search of searches) {
          search = "{{" + search;
          const searchLength = search.length;
          if (text.length - index > searchLength && (text.slice(index, index + searchLength).toLowerCase() === search || text.slice(index, index + searchLength).toLowerCase() === search.replace(" ", "_"))) {
            open++;
            template += text[index];
            foo = true;
          }
        }
        if (open >= 1 && !foo) {
          template += text[index];
          if (text[index] === "{")
            open++;
          else if (text[index] === "}") {
            open--;
            if (open === 0) {
              count++;
              processInfobox(template);
              template = "";
            }
          }
        }
      }
      mw.notification.notify(`Successfully aligned ${count} templates!`, { type: "success", autoHideSeconds: "short" });
    });
  });
})();
function splitParameter(string) {
  const split = string.split("=");
  if (split.length <= 2)
    return split;
  const first = split.shift();
  return [first, split.join("=")];
}
function splitIntoParameters(string) {
  if (string.startsWith("{{") && string.endsWith("}}")) {
    if (!string.includes("|"))
      return [string];
    const results = splitIntoParameters(string.slice(2, -2));
    return ["{{" + results[0], ...splitIntoParameters(string.slice(2, -2)).slice(1), "}}"];
  }
  const parameters = [];
  let temporary = "";
  let open = 0;
  for (const char of string) {
    temporary += char;
    if (char === "{" || char === "[")
      open += 1;
    else if (char === "" || char === "]")
      open--;
    else if (char === "|" && open === 0 && temporary.trim() !== "|") {
      parameters.push(temporary.slice(0, -1).trim());
      temporary = "|";
    }
  }
  parameters.push(temporary);
  return parameters;
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9hbGlnbmVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5pbnRlcmZhY2UgV2luZG93IHtcbiAgICB3aWtFZD86IHtcbiAgICAgICAgdXNlV2lrRWQ6IGJvb2xlYW47XG4gICAgICAgIFVwZGF0ZVRleHRhcmVhOiAoKSA9PiB2b2lkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgICAgICBVcGRhdGVGcmFtZTogKCkgPT4gdm9pZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgICB9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmludGVyZmFjZSBKUXVlcnk8VEVsZW1lbnQgZXh0ZW5kcyBOb2RlID0gSFRNTEVsZW1lbnQ+IGV4dGVuZHMgSXRlcmFibGU8VEVsZW1lbnQ+IHtcbiAgICB0ZXh0U2VsZWN0aW9uKG1ldGhvZE5hbWU6ICdzZXRDb250ZW50cycsIHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xufVxuXG4oKCkgPT4ge1xuICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpIDwgMCkgcmV0dXJuOyAvLyBEb24ndCBydW4gaW4gdmlydHVhbCBuYW1lc3BhY2VzXG4gICAgaWYgKCFtdy5jb25maWcuZ2V0KCd3Z0lzUHJvYmFibHlFZGl0YWJsZScpKSByZXR1cm47IC8vIERvbid0IHJ1biBpZiB1c2VyIGNhbid0IGVkaXQgcGFnZVxuXG4gICAgY29uc3Qgc2VhcmNoZXMgPSBbJ2luZm9ib3gnLCAnc3BlY2llc2JveCcsICd0YXhvYm94JywgJ2F1dG9tYXRpYyB0YXhvYm94JywgJ29zbSBsb2NhdGlvbiBtYXAnLCAnbW90b3JzcG9ydCBzZWFzb24nXTtcblxuICAgIG13LmxvYWRlci51c2luZyhbJ21lZGlhd2lraS51dGlsJywgJ21lZGlhd2lraS5ub3RpZmljYXRpb24nLCAnanF1ZXJ5LnRleHRTZWxlY3Rpb24nXSwgKCkgPT4ge1xuICAgICAgICBjb25zdCBsaW5rID0gbXcudXRpbC5hZGRQb3J0bGV0TGluayhtdy5jb25maWcuZ2V0KCdza2luJykgPT09ICdtaW5lcnZhJyA/ICdwLW5hdmlnYXRpb24nIDogJ3AtY2FjdGlvbnMnLCAnIycsICdBbGlnbiB0ZW1wbGF0ZSBwYXJhbXMnLCAnYWxpZ24tcGFyYW1zJykhO1xuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBpZiAod2luZG93Lndpa0VkPy51c2VXaWtFZCkgd2luZG93Lndpa0VkLlVwZGF0ZVRleHRhcmVhKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGVkaXRCb3ggPSAkKCcjd3BUZXh0Ym94MScpO1xuXG4gICAgICAgICAgICBpZiAoIWVkaXRCb3gpIHJldHVybiBtdy5ub3RpZmljYXRpb24ubm90aWZ5KCdFZGl0IGJveCBub3QgZm91bmQsIGFyZSB5b3UgaW4gZWRpdCBtb2RlPycsIHsgdHlwZTogJ2Vycm9yJywgYXV0b0hpZGVTZWNvbmRzOiAnc2hvcnQnIH0pO1xuXG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdnZXRDb250ZW50cycpO1xuXG4gICAgICAgICAgICBpZiAoIXRleHQpIHJldHVybiBtdy5ub3RpZmljYXRpb24ubm90aWZ5KCdFZGl0IGJveCB2YWx1ZSBub3QgZm91bmQhJywgeyB0eXBlOiAnZXJyb3InLCBhdXRvSGlkZVNlY29uZHM6ICdzaG9ydCcgfSk7XG5cbiAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmluaXNoZXMgcHJvY2Vzc2luZyBhbiBpbmZvYm94IGFuZCB1cGRhdGVzIHRoZSBlZGl0IGJveCBjb250ZW50cy5cbiAgICAgICAgICAgICAqIEBwYXJhbSB0ZW1wbGF0ZSBUaGUgdGVtcGxhdGUgc3RyaW5nIHRvIHByb2Nlc3MuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NJbmZvYm94KHRlbXBsYXRlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVtcGxhdGUgPT09ICcnKSByZXR1cm4gbXcubm90aWZpY2F0aW9uLm5vdGlmeSgnSW5mb2JveCBub3QgZm91bmQhJywgeyB0eXBlOiAnZXJyb3InLCBhdXRvSGlkZVNlY29uZHM6ICdzaG9ydCcgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3BlbiAhPT0gMCkgcmV0dXJuIG13Lm5vdGlmaWNhdGlvbi5ub3RpZnkoJ1RlbXBsYXRlIHdhcyBub3QgcHJvcGVybHkgY2xvc2VkIScsIHsgdHlwZTogJ2Vycm9yJywgYXV0b0hpZGVTZWNvbmRzOiAnc2hvcnQnIH0pO1xuXG4gICAgICAgICAgICAgICAgbGV0IG1heExlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvcmlnVGVtcGxhdGUgPSBTdHJpbmcodGVtcGxhdGUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gdGVtcGxhdGUuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xpbmVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyc0luTGluZSA9IHNwbGl0SW50b1BhcmFtZXRlcnMobGluZS50cmltKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFyYW1ldGVyIG9mIHBhcmFtZXRlcnNJbkxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBwYXJhbWV0ZXIudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsaW5lLnN0YXJ0c1dpdGgoJ3wnKSB8fCBsaW5lLnNwbGl0KCc9JykubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IFtmaXJzdFBhcnQsIGxhc3RQYXJ0XSA9IHNwbGl0UGFyYW1ldGVyKGxpbmUpIGFzIFtzdHJpbmcsIHN0cmluZ107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWNvbnN0XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFBhcnQgPSBmaXJzdFBhcnQuc2xpY2UoMSkudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RQYXJ0Lmxlbmd0aCA+IG1heExlbmd0aCkgbWF4TGVuZ3RoID0gZmlyc3RQYXJ0Lmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGluZXMucHVzaCgnfCAnICsgZmlyc3RQYXJ0ICsgJz0nICsgbGFzdFBhcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IG91dHB1dCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoICs9IDI7IC8vIHRvIGluY2x1ZGUgJ3wgJ1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbGluZSBvZiBuZXdMaW5lcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IHNwbGl0UGFyYW1ldGVyKGxpbmUpIGFzIFtzdHJpbmcsIHN0cmluZ107XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBsaW5lICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3RQYXJ0ID0gcGFydHNbMF0udHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChmaXJzdFBhcnQubGVuZ3RoIDwgbWF4TGVuZ3RoKSBmaXJzdFBhcnQgKz0gJyAnO1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBmaXJzdFBhcnQgKyAnID0gJyArIHBhcnRzWzFdLnRyaW0oKSArICdcXG4nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQuZW5kc1dpdGgoJ1xcbicpKSBvdXRwdXQgPSBvdXRwdXQuc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgICAgICAgICAgZWRpdEJveC50ZXh0U2VsZWN0aW9uKCdzZXRDb250ZW50cycsIGVkaXRCb3gudGV4dFNlbGVjdGlvbignZ2V0Q29udGVudHMnKS5yZXBsYWNlKG9yaWdUZW1wbGF0ZSwgb3V0cHV0KS5yZXBsYWNlKC9cXG4rJC8sICcnKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAod2luZG93Lndpa0VkPy51c2VXaWtFZCkgd2luZG93Lndpa0VkLlVwZGF0ZUZyYW1lKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB0ZW1wbGF0ZSA9ICcnO1xuICAgICAgICAgICAgbGV0IG9wZW4gPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGV4dC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgZm9vID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBzZWFyY2ggb2Ygc2VhcmNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoID0gJ3t7JyArIHNlYXJjaDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VhcmNoTGVuZ3RoID0gc2VhcmNoLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Lmxlbmd0aCAtIGluZGV4ID4gc2VhcmNoTGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodGV4dC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2hMZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IHNlYXJjaCB8fCB0ZXh0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaExlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoLnJlcGxhY2UoJyAnLCAnXycpKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4rKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlICs9IHRleHRbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9vID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvcGVuID49IDEgJiYgIWZvbykge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSArPSB0ZXh0W2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dFtpbmRleF0gPT09ICd7Jykgb3BlbisrO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0ZXh0W2luZGV4XSA9PT0gJ30nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuLS07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzSW5mb2JveCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbXcubm90aWZpY2F0aW9uLm5vdGlmeShgU3VjY2Vzc2Z1bGx5IGFsaWduZWQgJHtjb3VudH0gdGVtcGxhdGVzIWAsIHsgdHlwZTogJ3N1Y2Nlc3MnLCBhdXRvSGlkZVNlY29uZHM6ICdzaG9ydCcgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoKTtcblxuLyoqXG4gKiBTcGxpdHMgYSBzdHJpbmcgaW50byBhbiBBcnJheSBjb250YWluaW5nIHRoZSBrZXkgYW5kIHZhbHVlLlxuICogQHBhcmFtIHN0cmluZyBUaGUgZnVsbCBzdHJpbmcgdG8gc3BsaXQuXG4gKi9cbmZ1bmN0aW9uIHNwbGl0UGFyYW1ldGVyKHN0cmluZzogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3BsaXQgPSBzdHJpbmcuc3BsaXQoJz0nKTtcbiAgICBpZiAoc3BsaXQubGVuZ3RoIDw9IDIpIHJldHVybiBzcGxpdDtcblxuICAgIGNvbnN0IGZpcnN0ID0gc3BsaXQuc2hpZnQoKTtcbiAgICByZXR1cm4gW2ZpcnN0LCBzcGxpdC5qb2luKCc9JyldO1xufVxuXG4vKipcbiAqIFNwbGl0cyBhIHRlbXBsYXRlIGludG8gYW4gQXJyYXkgd2l0aCBhbGwgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBzdHJpbmcgVGhlIHRlbXBsYXRlIHRvIHByb2Nlc3MuXG4gKi9cbmZ1bmN0aW9uIHNwbGl0SW50b1BhcmFtZXRlcnMoc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgaWYgKHN0cmluZy5zdGFydHNXaXRoKCd7eycpICYmIHN0cmluZy5lbmRzV2l0aCgnfX0nKSkge1xuICAgICAgICBpZiAoIXN0cmluZy5pbmNsdWRlcygnfCcpKSByZXR1cm4gW3N0cmluZ107XG5cbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHNwbGl0SW50b1BhcmFtZXRlcnMoc3RyaW5nLnNsaWNlKDIsIC0yKSk7XG4gICAgICAgIHJldHVybiBbJ3t7JyArIHJlc3VsdHNbMF0sIC4uLnNwbGl0SW50b1BhcmFtZXRlcnMoc3RyaW5nLnNsaWNlKDIsIC0yKSkuc2xpY2UoMSksICd9fSddO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBbXTtcbiAgICBsZXQgdGVtcG9yYXJ5ID0gJyc7XG4gICAgbGV0IG9wZW4gPSAwO1xuXG4gICAgZm9yIChjb25zdCBjaGFyIG9mIHN0cmluZykge1xuICAgICAgICB0ZW1wb3JhcnkgKz0gY2hhcjtcblxuICAgICAgICBpZiAoY2hhciA9PT0gJ3snIHx8IGNoYXIgPT09ICdbJykgb3BlbiArPSAxO1xuICAgICAgICBlbHNlIGlmIChjaGFyID09PSAnJyB8fCBjaGFyID09PSAnXScpIG9wZW4tLTtcbiAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJ3wnICYmIG9wZW4gPT09IDAgJiYgdGVtcG9yYXJ5LnRyaW0oKSAhPT0gJ3wnKSB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzLnB1c2godGVtcG9yYXJ5LnNsaWNlKDAsIC0xKS50cmltKCkpO1xuICAgICAgICAgICAgdGVtcG9yYXJ5ID0gJ3wnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyYW1ldGVycy5wdXNoKHRlbXBvcmFyeSk7XG5cbiAgICByZXR1cm4gcGFyYW1ldGVycztcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Q0FjQyxNQUFNO0FBQ0gsTUFBSSxHQUFHLE9BQU8sSUFBSSxtQkFBbUIsSUFBSTtBQUFHO0FBQzVDLE1BQUksQ0FBQyxHQUFHLE9BQU8sSUFBSSxzQkFBc0I7QUFBRztBQUU1QyxRQUFNLFdBQVcsQ0FBQyxXQUFXLGNBQWMsV0FBVyxxQkFBcUIsb0JBQW9CLG1CQUFt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WUFBWSxFQUFFLFlBQVksTUFBTSxVQUFVLEtBQUssTUFBTSxPQUFPLFFBQVEsWUFBWSxFQUFFLFlBQVksTUFBTSxPQUFPLFFBQVEsS0FBSyxHQUFHLElBQ3hKO0FBQ0U7QUFDQSx3QkFBWSxLQUFLLEtBQUs7QUFDdEIsa0JBQU07QUFBQSxVQUNWO0FBQUEsUUFDSjtBQUVBLFlBQUksUUFBUSxLQUFLLENBQUMsS0FBSztBQUNuQixzQkFBWSxLQUFLLEtBQUs7QUFFdEIsY0FBSSxLQUFLLEtBQUssTUFBTTtBQUFLO0FBQUEsbUJBQ2hCLEtBQUssS0FBSyxNQUFNLEtBQUs7QUFDMUI7QUFFQSxnQkFBSSxTQUFTLEdBQUc7QUFDWjtBQUNBLDZCQUFlLFFBQVE7QUFDdkIseUJBQVc7QUFBQSxZQUNmO0FBQUEsVUFDSjtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBRUEsU0FBRyxhQUFhLE9BQU8sd0JBQXdCLEtBQUssZUFBZSxFQUFFLE1BQU0sV0FBVyxpQkFBaUIsUUFBUSxDQUFDO0FBQUEsSUFDcEgsQ0FBQztBQUFBLEVBQ0wsQ0FBQztBQUNMLEdBQUc7QUFNSCxTQUFTLGVBQWUsUUFBZ0I7QUFDcEMsUUFBTSxRQUFRLE9BQU8sTUFBTSxHQUFHO0FBQzlCLE1BQUksTUFBTSxVQUFVO0FBQUcsV0FBTztBQUU5QixRQUFNLFFBQVEsTUFBTSxNQUFNO0FBQzFCLFNBQU8sQ0FBQyxPQUFPLE1BQU0sS0FBSyxHQUFHLENBQUM7QUFDbEM7QUFNQSxTQUFTLG9CQUFvQixRQUEwQjtBQUNuRCxNQUFJLE9BQU8sV0FBVyxJQUFJLEtBQUssT0FBTyxTQUFTLElBQUksR0FBRztBQUNsRCxRQUFJLENBQUMsT0FBTyxTQUFTLEdBQUc7QUFBRyxhQUFPLENBQUMsTUFBTTtBQUV6QyxVQUFNLFVBQVUsb0JBQW9CLE9BQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUN2RCxXQUFPLENBQUMsT0FBTyxRQUFRLENBQUMsR0FBRyxHQUFHLG9CQUFvQixPQUFPLE1BQU0sR0FBRyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJO0FBQUEsRUFDekY7QUFFQSxRQUFNLGFBQWEsQ0FBQztBQUNwQixNQUFJLFlBQVk7QUFDaEIsTUFBSSxPQUFPO0FBRVgsYUFBVyxRQUFRLFFBQVE7QUFDdkIsaUJBQWE7QUFFYixRQUFJLFNBQVMsT0FBTyxTQUFTO0FBQUssY0FBUTtBQUFBLGFBQ2pDLFNBQVMsTUFBTSxTQUFTO0FBQUs7QUFBQSxhQUM3QixTQUFTLE9BQU8sU0FBUyxLQUFLLFVBQVUsS0FBSyxNQUFNLEtBQUs7QUFDN0QsaUJBQVcsS0FBSyxVQUFVLE1BQU0sR0FBRyxFQUFFLEVBQUUsS0FBSyxDQUFDO0FBQzdDLGtCQUFZO0FBQUEsSUFDaEI7QUFBQSxFQUNKO0FBRUEsYUFBVyxLQUFLLFNBQVM7QUFFekIsU0FBTztBQUNYOyIsCiAgIm5hbWVzIjogWyJ0ZW1wbGF0ZSIsICJsaW5lIl0KfQo=
