// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/redirect-helper.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows","oojs-ui.styles.icons-content","oojs-ui.styles.icons-editing-core","oojs-ui.styles.icons-accessibility"],()=>{class w extends OO.ui.TextInputWidget{constructor(t,e){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();if(!t)e.resolve([]);else if(t.includes("#")){const s=t.split("#")[0];this.api.get({action:"parse",page:s,prop:"sections",redirects:!0}).catch(()=>null).then(r=>{if(r){const a=r.parse.sections.filter(o=>o.line.toLowerCase().replaceAll(/<\/?i>/g,"").startsWith(t.split("#")[1].toLowerCase()));e.resolve(a.map(o=>({data:`${r.parse.title}#${o.line.replaceAll(/<\/?i>/g,"")}`,label:`${r.parse.title}#${o.line.replaceAll(/<\/?i>/g,"")}`})))}else e.resolve([])})}else{const s=mw.Title.newFromText(t);this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:s?.getNamespaceId()??0,gapprefix:s?.getMainText()??t,generator:"allpages",prop:["info","pageprops"]}).catch(()=>null).then(r=>{r?e.resolve(r.query?.pages?r.query.pages.filter(a=>a.title!==this.pageTitleParsed.toString()).map(a=>({data:a.title,label:new OO.ui.HtmlSnippet(`${a.title}${a.pageprops&&"disambiguation"in a.pageprops?" <i>(disambiguation)</i>":""}${"redirect"in a?" <i>(redirect)</i>":""}`)})):[]):e.resolve([])})}return e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:s})=>new OO.ui.MenuOptionWidget({data:e,label:s}));OO.ui.mixin.LookupElement.call(this,t),this.pageTitleParsed=e}}Object.assign(w.prototype,OO.ui.mixin.LookupElement.prototype);class b extends OO.ui.TextInputWidget{constructor(t){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const s=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:s?.getMainText()??t,generator:"allpages",prop:"categories"}).catch(()=>null).then(r=>{if(r?.query?.pages){const a=r.query.pages.filter(o=>!(o.categories&&o.categories.some(n=>n.title==="Category:Wikipedia soft redirected categories"))).map(o=>{const n=o.title.split(":")[1];return{data:n,label:n}});this.emit("showing-values",a),e.resolve(a)}else e.resolve([])}),e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:s})=>new OO.ui.MenuOptionWidget({data:e,label:s}));OO.ui.mixin.LookupElement.call(this,t)}}Object.assign(b.prototype,OO.ui.mixin.LookupElement.prototype);class c extends OO.ui.ProcessDialog{constructor(t,e){super(t);this.api=new mw.Api;this.getSetupProcess=()=>c.super.prototype.getSetupProcess.call(this).next(()=>this.api.post({action:"parse",formatversion:"2",contentmodel:"wikitext",prop:["text","categorieshtml"],title:this.pageTitleParsed.getPrefixedDb(),text:`{{Redirect category shell|${this.getData().map(t=>`{{${t}}}`).join("")}}}`}).then(t=>{const e=t.parse.text,s=t.parse.categorieshtml,r=new OO.ui.PanelLayout({padded:!0,expanded:!1});r.$element.append(e,s),this.$body.append(r.$element)}));this.getActionProcess=t=>t?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):c.super.prototype.getActionProcess.call(this,t);this.getTeardownProcess=()=>c.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});this.pageTitleParsed=e,c.static.name="TemplatePreviewDialog",c.static.title="Redirect categorization templates preview",c.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]}]}}Object.assign(c.prototype,OO.ui.ProcessDialog.prototype);class u extends OO.ui.ProcessDialog{constructor(t){super(t);this.api=new mw.Api;this.getSetupProcess=()=>u.super.prototype.getSetupProcess.call(this).next(()=>{const[t,e]=this.getData();return this.api.post({action:"compare",formatversion:"2",prop:["diff"],fromslots:"main","fromtext-main":t,"fromcontentmodel-main":"wikitext",toslots:"main","totext-main":e,"tocontentmodel-main":"wikitext"}).then(s=>{const r=s.compare.body,a=new OO.ui.MessageWidget({type:"warning",label:"No changes to make!"}),o=new OO.ui.PanelLayout({padded:!0,expanded:!1});o.$element.append(r?`
<table class="diff diff-editfont-monospace">
    <colgroup>
        <col class="diff-marker">
        <col class="diff-content">
        <col class="diff-marker">
        <col class="diff-content">
    </colgroup>
    <tbody>
        ${r}
    </tbody>
</table>`:a.$element[0]),this.$body.append(o.$element)})});this.getActionProcess=t=>t?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):u.super.prototype.getActionProcess.call(this,t);this.getTeardownProcess=()=>u.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});u.static.name="ShowChangesDialog",u.static.title="Changes to be made",u.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]}]}}Object.assign(u.prototype,OO.ui.ProcessDialog.prototype);class O{constructor(){this.api=new mw.Api}async run(){if(this.passesPreChecks()){if(this.redirectTemplates=await this.fetchRedirectTemplates(),this.contentText=document.querySelector("#mw-content-text"),!this.contentText)return mw.notify("redirect-helper: Failed to find content text element!",{type:"error"});if(this.pageTitle=mw.config.get("wgPageName"),this.pageTitleParsed=mw.Title.newFromText(this.pageTitle),!this.pageTitleParsed)return mw.notify("redirect-helper: Failed to parse page title!",{type:"error"});await this.checkPageAndLoad()}}passesPreChecks(){return[mw.config.get("wgNamespaceNumber")>=0,mw.config.get("wgIsProbablyEditable"),mw.config.get("wgIsArticle"),mw.config.get("wgAction")==="view",mw.config.get("wgRevisionId")===mw.config.get("wgCurRevisionId"),!mw.config.get("wgDiffOldId")].every(Boolean)}async fetchRedirectTemplates(){return JSON.parse((await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"})).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")}async checkPageAndLoad(){const i=await this.api.get({action:"query",formatversion:"2",prop:"info",titles:this.pageTitle}),t={redirectTemplates:this.redirectTemplates,contentText:this.contentText,pageTitle:this.pageTitle,pageTitleParsed:this.pageTitleParsed};if(i.query.pages[0].missing){mw.util.addCSS(`
#create-redirect-button {
    margin-bottom: 20px;
}`);const e=new OO.ui.ButtonWidget({id:"create-redirect-button",label:"Create redirect",icon:"articleRedirect",flags:["progressive"]});e.on("click",()=>{e.$element[0].remove(),new f(t,!1).load()}),this.contentText.prepend(e.$element[0])}else if(i.query.pages[0].redirect)new f(t,!0).load();else{const e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Redirect page","redirect-helper");e.addEventListener("click",s=>{s.preventDefault(),new f(t,!1).load(),window.scrollTo({top:0,behavior:"smooth"}),e.remove()})}}}class f{constructor({redirectTemplates:i,contentText:t,pageTitle:e,pageTitleParsed:s},r){this.api=new mw.Api;this.redirectRegex=/^#redirect:?\s*\[\[\s*:?([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i;this.scriptAdvert=" (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";this.needsCheck=!0;this.pageContent="";this.redirectTemplates=i,this.contentText=t,this.pageTitle=e,this.pageTitleParsed=s,this.exists=r}async load(){mw.util.addCSS(`
#create-redirect-button {
    margin-bottom: 20px;
}

#redirect-helper-box {
    background-color: whitesmoke;
    width: 700px;
    max-width: calc(100% - 50px);
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 25px !important;
}

.redirect-input-layout label {
    font-weight: bold;
}

#redirect-helper-summary-layout {
    padding-top: 10px;
    margin-top: 15px;
    border-top: 1px solid gray;
}

#redirect-helper-submit-layout {
    margin-top: 10px;
}

#redirect-helper-submit-layout > * {
    margin-bottom: 0;
}

.redirect-helper-warning {
    margin-top: 8px;
}`),mw.loader.addLinkTag("https://www.mediawiki.org/w/load.php?modules=mediawiki.diff.styles&only=styles"),this.editorBox=new OO.ui.PanelLayout({id:"redirect-helper-box",padded:!0,expanded:!1,framed:!0}),this.pageTitleParsed.isTalkPage()&&(await this.api.get({action:"query",formatversion:"2",prop:"info",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].redirect&&await this.loadSyncWithMainButton(),this.loadInputElements(),await this.loadSubmitElements(),this.editorBox.$element[0].append(...[this.syncWithMainButton?.$element?.[0],this.redirectInputLayout.$element[0],this.tagSelectLayout.$element[0],this.defaultSortInputLayout.$element[0],this.categorySelectLayout.$element[0],this.summaryInputLayout.$element[0],this.submitLayout.$element[0]].filter(Boolean)),this.contentText.prepend(this.editorBox.$element[0]),this.exists&&this.loadExistingData()}async loadSyncWithMainButton(){const i=await this.getPageContent(this.pageTitleParsed.getSubjectPage().getPrefixedText());this.syncWithMainButton=new OO.ui.ButtonWidget({label:"Sync with main page",icon:"link",flags:["progressive"]}),this.syncWithMainButton.on("click",()=>{const t=this.redirectRegex.exec(i)?.[1];if(!t)return mw.notify("Failed to parse main page content!",{type:"error"});this.redirectInput.setValue(mw.Title.newFromText(t)?.getTalkPage()?.toString()??""),["R from move",...this.redirectTemplates["R from move"]].some(s=>new RegExp(`{{\\s*[${s[0].toLowerCase()}${s[0]}]${s.slice(1)}\\s*(\\||}})`).test(i))&&this.tagSelect.setValue(["R from move"])})}loadInputElements(){this.redirectInput=new w({placeholder:"Target page name",required:!0},this.pageTitleParsed),this.redirectInput.on("change",()=>{let e=this.redirectInput.getValue();e=e.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),e=e.replace(/^:/,""),e.length>0?(this.redirectInput.setValue(e[0].toUpperCase()+e.slice(1).replaceAll("_"," ")),this.defaultSortSuggestButton.setDisabled(!1),this.submitButton.setDisabled(!1),this.showChangesButton.setDisabled(!1)):(this.defaultSortSuggestButton.setDisabled(!0),this.submitButton.setDisabled(!0),this.showChangesButton.setDisabled(!0)),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.redirectInputLayout=new OO.ui.FieldLayout(this.redirectInput,{label:"Redirect target:",classes:["redirect-input-layout"],align:"top"}),this.tagSelect=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.keys(this.redirectTemplates).map(e=>({data:e,label:e}))}),this.tagSelect.getMenu().filterMode="substring",this.tagSelect.on("change",()=>{const e=this.tagSelect.getValue().sort((s,r)=>s.toLowerCase().localeCompare(r.toLowerCase()));this.tagSelect.getValue().join(";")!==e.join(";")&&this.tagSelect.setValue(e),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0,this.tagSelect.getValue().length>0?this.previewButton.setDisabled(!1):this.previewButton.setDisabled(!0)});const i=new OO.ui.WindowManager;document.body.append(i.$element[0]);const t=new c({size:"large"},this.pageTitleParsed);i.addWindows([t]),this.previewButton=new OO.ui.ButtonWidget({icon:"eye",label:"Preview",disabled:!0}),this.previewButton.on("click",()=>{t.setData(this.tagSelect.getValue()),t.open()}),this.tagSelectLayout=new OO.ui.ActionFieldLayout(this.tagSelect,this.previewButton,{label:"Redirect categorization templates:",classes:["redirect-input-layout"],align:"top"}),this.defaultSortInput=new OO.ui.TextInputWidget,this.defaultSortInput.on("change",()=>{const e=this.defaultSortInput.getValue();e.length>0&&this.defaultSortInput.setValue(e.replaceAll("_"," ")),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.defaultSortSuggestButton=new OO.ui.ButtonWidget({icon:"robot",label:"Suggest",disabled:!0}),this.defaultSortSuggestButton.on("click",()=>{let e=this.pageTitleParsed.getMainText().replace(/ \(.*\)$/,"");if(this.tagSelect.getValue().includes("R from person")){if(!e.includes(" "))return;let s="";if(/ (?:[JS]r.?|[IVX]+)$/.test(e)&&(s=e.slice(e.lastIndexOf(" ")),e=e.slice(0,e.lastIndexOf(" ")),!e.includes(" ")))return e+s;const r=e.slice(e.lastIndexOf(" ")+1).replace(/,$/,"").replace(/O'/,"O"),a=e.slice(0,e.lastIndexOf(" "));this.defaultSortInput.setValue(r+", "+a+s)}else{let s=e.replaceAll("Mr.","Mister").replaceAll("&","And");for(const r of["An","A","The"])if(s.startsWith(r+" ")){s=s.slice(r.length+1)+", "+r;break}s===e?mw.notify("redirect-helper wasn't able to find a sort key different from the current page title!",{type:"warn"}):this.defaultSortInput.setValue(s)}}),this.defaultSortInputLayout=new OO.ui.ActionFieldLayout(this.defaultSortInput,this.defaultSortSuggestButton,{label:new OO.ui.HtmlSnippet(`Default sort key (DEFAULTSORT) (see <a href="${mw.util.getUrl("Wikipedia:Categorization#Sort keys")}" target="_blank">guideline</a>):`),classes:["redirect-input-layout"],align:"top"}),this.categorySelectInput=new b({placeholder:"Add categories here"}),this.categorySelectInput.on("change",()=>{let e=this.categorySelectInput.getValue();e=e.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),e=e.replace(/^Category:/,""),e.length>0&&this.categorySelectInput.setValue(e[0].toUpperCase()+e.slice(1).replaceAll("_"," "))}),this.categorySelectInput.on("showing-values",e=>{for(const s of e)this.categorySelect.addAllowedValue(s.data)}),this.categorySelect=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:this.categorySelectInput}),this.categorySelect.on("change",()=>{const e=this.categorySelect.getValue().sort((s,r)=>s.toLowerCase().localeCompare(r.toLowerCase()));this.categorySelect.getValue().join(";")!==e.join(";")&&this.categorySelect.setValue(e),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.categorySelectLayout=new OO.ui.FieldLayout(this.categorySelect,{label:"Categories:",classes:["redirect-input-layout"],align:"top"}),this.summaryInput=new OO.ui.ComboBoxInputWidget({options:[{data:"Resolve double redirect"},{data:"Resolve self redirect"},{data:"Remove incorrect rcats"}]}),this.summaryInputLayout=new OO.ui.FieldLayout(this.summaryInput,{id:"redirect-helper-summary-layout",label:"Summary:",classes:["redirect-input-layout"],align:"top"})}async loadSubmitElements(){this.submitButton=new OO.ui.ButtonWidget({label:"Submit",disabled:!0,flags:["progressive"]}),this.submitButton.on("click",()=>this.handleSubmitButtonClick()),this.exists&&(this.pageContent=await this.getPageContent(this.pageTitle));const i=new OO.ui.WindowManager;document.body.append(i.$element[0]);const t=new u({size:"large"});i.addWindows([t]),this.showChangesButton=new OO.ui.ButtonWidget({label:"Show changes",disabled:!0}),this.showChangesButton.on("click",()=>{t.setData([this.pageContent,this.createOutput(this.redirectInput.getValue(),this.tagSelect.getValue(),this.oldStrayText,this.defaultSortInput.getValue(),this.categorySelect.getValue())]),t.open()}),this.pageTitleParsed.isTalkPage()||(this.talkData=await this.api.get({action:"query",formatversion:"2",prop:"info",titles:this.pageTitleParsed.getTalkPage().getPrefixedText()}),this.syncTalkCheckbox=new OO.ui.CheckboxInputWidget({selected:!!this.talkData.query.pages[0].redirect}),this.syncTalkCheckboxLayout=new OO.ui.Widget({content:[new OO.ui.FieldLayout(this.syncTalkCheckbox,{label:"Sync talk page",align:"inline"})]})),await this.checkShouldPromptPatrol()&&(this.patrolCheckbox=new OO.ui.CheckboxInputWidget({selected:!0}),this.patrolCheckboxLayout=new OO.ui.Widget({content:[new OO.ui.FieldLayout(this.patrolCheckbox,{label:"Mark as patrolled",align:"inline"})]})),this.submitLayout=new OO.ui.HorizontalLayout({id:"redirect-helper-submit-layout",items:[this.submitButton,this.showChangesButton,this.syncTalkCheckboxLayout,this.patrolCheckboxLayout].filter(Boolean)})}async checkShouldPromptPatrol(){const i=document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");if(i?.click(),i?.click(),mw.config.get("wgNamespaceNumber")!==0)return!1;if(document.querySelector(".patrollink"))return!0;if(document.querySelector("#mwe-pt-mark-as-reviewed-button"))return!0;if(document.querySelector("#mwe-pt-mark-as-unreviewed-button"))return!1;{if(!mw.config.get("wgArticleId")||!(await this.api.get({action:"query",meta:"userinfo",uiprop:"rights"})).query.userinfo.rights.includes("patrol"))return!1;const e=await this.api.get({action:"pagetriagelist",page_id:mw.config.get("wgArticleId")});return e.pagetriagelist.pages[0]?.user_name===mw.config.get("wgUserName")||e.pagetriagelist.result!=="success"||e.pagetriagelist.pages.length===0?!1:!Number.parseInt(e.pagetriagelist.pages[0]?.patrol_status)}}updateSummary(){const i=this.redirectInput.getValue().trim();if(!i)this.summaryInput.$tabIndexed[0].placeholder="";else if(this.exists){const t=i!==this.oldRedirectTarget?.replaceAll("_"," "),e=this.tagSelect.getValue().some(o=>!this.oldRedirectTags.includes(o))||this.oldRedirectTags.some(o=>!this.tagSelect.getValue().includes(o)),s=this.defaultSortInput.getValue().trim()!==this.oldDefaultSort.replaceAll("_"," "),r=this.categorySelect.getValue().some(o=>!this.oldCategories.includes(o))||this.oldCategories.some(o=>!this.categorySelect.getValue().includes(o)),a=[];t&&a.push(`retarget to [[${i}]]`),e&&a.push("change categorization templates"),s&&a.push("change default sort key"),r&&a.push("change categories"),a.length===0&&a.push("perform redirect cleanup"),a[0]=a[0][0].toUpperCase()+a[0].slice(1),a.length>1&&(a[a.length-1]=`and ${a.at(-1)}`),this.summaryInput.$tabIndexed[0].placeholder=a.join(a.length>2?", ":" ")}else this.summaryInput.$tabIndexed[0].placeholder=`Create redirect to [[${i}]]`}loadExistingData(){this.oldRedirectTarget=this.redirectRegex.exec(this.pageContent)?.[1],this.oldRedirectTags=Object.entries(this.redirectTemplates).map(([t,e])=>[t,...e].some(s=>new RegExp(`{{\\s*[${s[0].toLowerCase()}${s[0]}]${s.slice(1)}\\s*(\\||}})`).test(this.pageContent))?t:null).filter(Boolean).sort((t,e)=>t.toLowerCase().localeCompare(e.toLowerCase()));const i=Object.entries(this.redirectTemplates).flatMap(([t,e])=>[t,...e]).map(t=>new RegExp(`{{\\s*[${t[0].toLowerCase()}${t[0]}]${t.slice(1)}\\s*(\\||}})`).test(this.pageContent)?t:null).filter(Boolean);this.oldRedirectTagData=Object.fromEntries(i.map(t=>{const e=new RegExp(`{{\\s*[${t[0].toLowerCase()}${t[0]}]${t.slice(1)}\\|?(.*?)\\s*}}`).exec(this.pageContent),s=Object.entries(this.redirectTemplates).find(([r,a])=>[r,...a].includes(t))?.[0];return e?[s,e[1]]:null}).filter(Boolean)),this.oldDefaultSort=this.pageContent.match(/{{DEFAULTSORT:.*?}}/g)?.at(-1)?.slice(14,-2)?.trim()??"",this.oldCategories=this.pageContent.match(/\[\[[Cc]ategory:.+?]]/g)?.map(t=>t.slice(11,-2))??[],this.oldStrayText=[this.pageContent.match(/{{short description\|.*?}}/i)?.[0],this.pageContent.match(/{{DISPLAYTITLE:.*?}}/)?.[0],this.pageContent.match(/{{italic title\|?.*?}}/i)?.[0],this.pageContent.match(/{{title language\|.*?}}/)?.[0]].filter(Boolean).join(`
`),this.oldRedirectTarget?this.redirectInput.setValue(this.oldRedirectTarget.replaceAll("_"," ")):mw.notify("Could not find redirect target!",{type:"error"}),this.tagSelect.setValue(this.oldRedirectTags),this.oldDefaultSort&&this.defaultSortInput.setValue(this.oldDefaultSort);for(const t of this.oldCategories)this.categorySelect.addAllowedValue(t);this.categorySelect.setValue(this.oldCategories.map(t=>({data:t,label:t}))),this.updateSummary()}async validateSubmission(){const i=[],t=this.redirectInput.getValue().trim(),e=this.tagSelect.getValue();/^\s*[^[\]{|}]+\s*$/.test(t)||i.push({title:t,message:"is not a valid page title!"});try{this.parsedDestination=mw.Title.newFromText(t)}catch{i.length===0&&i.push({title:t,message:"is not a valid page title!"})}!this.parsedDestination&&i.length===0&&i.push({title:t,message:"is not a valid page title!"}),this.parsedDestination?.toString()===this.pageTitleParsed.toString()&&i.push({message:"cannot redirect to itself!"});const s=await this.api.get({action:"query",formatversion:"2",prop:["pageprops","categories"],titles:t}).catch(l=>(l==="missingtitle"?i.push({title:t,message:"does not exist!"}):i.push({title:t,message:`was not able to be fetched from the API (${l})!`}),null)),r=await this.api.get({action:"parse",page:t,prop:"sections",redirects:!0});if(r.parse.redirects?.[0]){const l=r.parse.redirects[0].to+(r.parse.redirects[0].tofragment?`#${r.parse.redirects[0].tofragment}`:"");i.push({title:t,message:`is a redirect to <a href="${mw.util.getUrl(l)}" target="_blank">${l}</a>. Retarget to that page instead, as double redirects aren't allowed.`})}if(t.split("#").length>1)if(r.parse.sections.find(p=>p.line.replaceAll(/<\/?i>/g,"")===t.split("#")[1]))e.includes("R to anchor")&&i.push({message:"is tagged as a redirect to an anchor, but it is actually a redirect to a section!"}),e.includes("R to section")||i.push({message:"is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!"});else{const p=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.parsedDestination.toString()})).query.pages[0].revisions[0].slots.main.content;[...p.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map(d=>d.split("|").map(h=>h.trim()))?.flat()??[],...p.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(d=>d.split("|").map(h=>h.trim()).filter(h=>!/^text\s*?=/.test(h)))?.flat()??[],...p.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map(d=>d.trim())??[]].includes(t.split("#")[1])?(e.includes("R to section")&&i.push({message:"is tagged as a redirect to a section, but it is actually a redirect to an anchor!"}),e.includes("R to anchor")||i.push({message:"is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!"})):i.push({message:`is a redirect to <a href="${mw.util.getUrl(t)}" target="_blank">${t}</a>, but that section or anchor does not exist!`})}t.split("#").length===1&&(e.includes("R to section")||e.includes("R to anchor"))&&i.push({message:"is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!"});const a=!!(s.query.pages[0].pageprops&&"disambiguation"in s.query.pages[0].pageprops),o=!!(s.query.pages[0].categories&&s.query.pages[0].categories.some(l=>l.title==="Category:Surnames")),n=["R to disambiguation page","R from incomplete disambiguation"],g=["R from ambiguous sort name","R from ambiguous term"],m=n.some(l=>e.includes(l)),T=g.some(l=>e.includes(l));a&&!m&&!T&&i.push({message:"is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!"}),s.query.pages[0].pageprops&&!a&&(m&&i.push({message:"is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!"}),o&&!T&&i.push({message:"is a redirect to a surname list, but it is not tagged with a correct disambiguation categorization template!"})),a&&e.includes("R to disambiguation page")&&!this.pageTitleParsed.getMainText().endsWith(" (disambiguation)")&&i.push({message:'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'});for(const l of["R semi-protected","R extended-protected","R template-protected","R fully protected"])e.includes(l)&&i.push({message:`is tagged with unnecessarily tagged with <code>{{${l}}}</code> which will be duplicated by the redirect category shell!`});return mw.config.get("wgWikibaseItemId")&&!e.includes("R with Wikidata item")&&i.push({message:"is linked to a Wikidata item but it isn't tagged with <code>{{R with Wikidata item}}</code>!"}),e.includes("R with Wikidata item")&&!mw.config.get("wgWikibaseItemId")&&i.push({message:"is tagged with <code>{{R with Wikidata item}}</code> but it is not actually linked to a Wikidata item!"}),this.syncTalkCheckbox?.isSelected()&&!this.talkData.query.pages[0].missing&&!this.talkData.query.pages[0].redirect&&i.push({title:this.pageTitleParsed.getTalkPage().getPrefixedText(),message:"exists, but is not a redirect!"}),i}async handleSubmitButtonClick(){const i=[this.redirectInput,this.tagSelect,this.defaultSortInput,this.categorySelect,this.summaryInput,this.submitButton,this.previewButton,this.syncTalkCheckbox,this.patrolCheckbox].filter(Boolean);for(const a of i)a.setDisabled(!0);this.submitButton.setLabel("Checking target validity...");let t=[];if(this.needsCheck?t=await this.validateSubmission():this.parsedDestination=mw.Title.newFromText(this.redirectInput.getValue()),t.length>0){for(const a of document.querySelectorAll(".redirect-helper-warning"))a.remove();for(const{title:a,message:o}of t){const n=new OO.ui.HtmlSnippet(`${a?`<a href="${mw.util.getUrl(a)}" target="_blank">${a}</a>`:"This page"} ${o} Click again without making changes to submit anyway.`),g=new OO.ui.MessageWidget({type:"error",classes:["redirect-helper-warning"],inline:!0,label:n});this.editorBox.$element[0].append(g.$element[0])}for(const a of i)a.setDisabled(!1);this.tagSelect.getValue().length>0&&this.previewButton.setDisabled(!1),this.submitButton.setLabel("Submit anyway"),this.needsCheck=!1;return}this.submitButton.setLabel(`${this.exists?"Editing":"Creating"} redirect...`);const e=this.createOutput(this.redirectInput.getValue(),this.tagSelect.getValue(),this.oldStrayText,this.defaultSortInput.getValue(),this.categorySelect.getValue()),s=(this.summaryInput.getValue()||this.summaryInput.$tabIndexed[0].placeholder)+this.scriptAdvert;if(await this.editOrCreate(this.pageTitle,e,s)){if(mw.notify(`Redirect ${this.exists?"edited":"created"} successfully!`,{type:"success"}),this.syncTalkCheckbox?.isSelected()){this.submitButton.setLabel("Editing talk page...");const a=this.tagSelect.getValue().includes("R from move"),o=this.createOutput(this.parsedDestination.getTalkPage().getPrefixedText(),a?["R from move"]:[],void 0,void 0,[]);if(!await this.editOrCreate(this.pageTitleParsed.getTalkPage().getPrefixedText(),o,"Syncing redirect from main page"+this.scriptAdvert))return;mw.notify("Talk page synced successfully!",{type:"success"})}if(this.patrolCheckbox?.isSelected()){this.submitButton.setLabel("Patrolling redirect...");const a=document.querySelector(".patrollink a"),o=document.querySelector("#mwe-pt-mark-as-reviewed-button");a?await this.api.postWithToken("patrol",{action:"patrol",rcid:new URL(a.href).searchParams.get("rcid")}).catch((g,m)=>(mw.notify(`Error patrolling ${this.pageTitle} via API: ${m?.error.info??"Unknown error"} (${g})`,{type:"error"}),null))&&mw.notify("Redirect patrolled successfully!",{type:"success"}):o?(o.click(),mw.notify("Redirect patrolled successfully!",{type:"success"})):mw.notify("Page curation toolbar not found, redirect cannot be patrolled!",{type:"error"})}this.submitButton.setLabel("Complete, reloading..."),window.location.href=mw.util.getUrl(this.pageTitle,{redirect:"no"})}}createOutput(i,t,e,s,r){const a=mw.Title.newFromText(i),o=a?`${a.getNamespaceId()===14?":":""}${a.getPrefixedText()}${a.getFragment()?`#${a.getFragment()}`:""}`:i.trim();return this.pageTitleParsed.getMainText().toLocaleLowerCase().normalize("NFD").replaceAll(/[\u0300-\u036F]/g,"")===s?.toLowerCase().normalize("NFD").replaceAll(/[\u0300-\u036F]/g,"")&&(s=void 0),[`#REDIRECT [[${o}]]
`,t.length>0?`{{Redirect category shell|
${t.map(n=>`{{${n}${this.oldRedirectTagData?.[n]?`|${this.oldRedirectTagData[n]}`:""}}}`).join(`
`)}
}}
`:null,e?e+`
`:null,s?`{{DEFAULTSORT:${s.trim()}}}`:null,r.length>0?r.map(n=>`[[Category:${n}]]`).join(`
`):null].filter(Boolean).join(`
`)}async getPageContent(i){return(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:i})).query.pages[0].revisions[0].slots.main.content.trim()}async editOrCreate(i,t,e){return await this.api.edit(i,()=>({text:t,summary:e})).catch((s,r)=>s==="nocreate-missing"?this.api.create(i,{summary:e},t).catch((a,o)=>{mw.notify(`Error creating ${i}: ${o?.error.info??"Unknown error"} (${a})`,{type:"error"})}):(mw.notify(`Error editing or creating ${i}: ${r?.error.info??"Unknown error"} (${s})`,{type:"error"}),null))}}new O().run()});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
