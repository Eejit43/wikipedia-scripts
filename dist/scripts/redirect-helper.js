"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows","oojs-ui.styles.icons-content","oojs-ui.styles.icons-editing-core"],()=>{class p extends OO.ui.TextInputWidget{constructor(e,t){super(e),OO.ui.mixin.LookupElement.call(this,e),this.pageTitleParsed=t}getLookupRequest(){const e=this.getValue(),t=$.Deferred();if(!e)t.resolve([]);else if(e.includes("#")){const i=e.split("#")[0];new mw.Api().get({action:"parse",page:i,prop:"sections",redirects:"1"}).catch(()=>null).then(a=>{if(a){const s=a.parse.sections.filter(r=>r.line.toLowerCase().startsWith(e.split("#")[1].toLowerCase()));t.resolve(s.map(r=>({data:`${a.parse.title}#${r.line}`,label:`${a.parse.title}#${r.line}`})))}else t.resolve([])})}else{const i=mw.Title.newFromText(e);new mw.Api().get({action:"query",formatversion:2,gaplimit:20,gapnamespace:i?.getNamespaceId()??0,gapprefix:i?.getMainText()??e,generator:"allpages",prop:"info|pageprops"}).catch(()=>null).then(a=>{a?t.resolve(a.query?.pages?a.query.pages.filter(s=>s.title!==this.pageTitleParsed.toString()).map(s=>({data:s.title,label:new OO.ui.HtmlSnippet(`${s.title}${s.pageprops&&"disambiguation"in s.pageprops?" <i>(disambiguation)</i>":""}${"redirect"in s?" <i>(redirect)</i>":""}`)})):[]):t.resolve([])})}return t.promise({abort(){}})}getLookupCacheDataFromResponse(e){return e??[]}getLookupMenuOptionsFromData(e){e.map(({data:t,label:i})=>new OO.ui.MenuOptionWidget({data:t,label:i}))}}Object.assign(p.prototype,OO.ui.mixin.LookupElement.prototype);class l extends OO.ui.ProcessDialog{constructor(e,t){super(e),this.pageTitleParsed=t,l.static.name="TemplatePreviewDialog",l.static.title="Redirect categorization templates preview",l.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]}]}getSetupProcess(){return l.super.prototype.getSetupProcess.call(this).next(()=>{const e={action:"parse",formatversion:"2",contentmodel:"wikitext",title:this.pageTitleParsed.getPrefixedDb(),text:`{{Redirect category shell|${this.getData().map(t=>`{{${t}}}`).join("")}}}`};return new mw.Api().post(e).then(t=>{const i=t.parse.text,a=new OO.ui.PanelLayout({padded:!0,expanded:!1});a.$element.append(i),this.$body.append(a.$element)})})}getActionProcess(e){return e?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):l.super.prototype.getActionProcess.call(this,e)}}Object.assign(l.prototype,OO.ui.ProcessDialog.prototype),l.prototype.getTeardownProcess=function(){return l.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()})};class d{async run(){if(this.passesPreChecks()){if(this.redirectTemplates=await this.fetchRedirectTemplates(),this.contentText=document.querySelector("#mw-content-text"),!this.contentText)return mw.notify("redirect-helper: Failed to find content text element!",{type:"error"});if(this.pageTitle=mw.config.get("wgPageName"),this.pageTitleParsed=mw.Title.newFromText(this.pageTitle),!this.pageTitleParsed)return mw.notify("redirect-helper: Failed to parse page title!",{type:"error"});await this.checkPageAndLoad()}}passesPreChecks(){return[mw.config.get("wgNamespaceNumber")>=0,mw.config.get("wgIsProbablyEditable"),mw.config.get("wgIsArticle"),mw.config.get("wgAction")==="view",mw.config.get("wgRevisionId")===mw.config.get("wgCurRevisionId"),!mw.config.get("wgDiffOldId")].every(Boolean)}async fetchRedirectTemplates(){return JSON.parse((await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:"User:Eejit43/scripts/redirect-helper.json"})).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")}async checkPageAndLoad(){const e=await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitle}),t={redirectTemplates:this.redirectTemplates,contentText:this.contentText,pageTitle:this.pageTitle,pageTitleParsed:this.pageTitleParsed};if(e.query.pages[0].missing){const i=new OO.ui.ButtonWidget({id:"create-redirect-button",label:"Create redirect",icon:"articleRedirect",flags:["progressive"]});i.on("click",()=>{i.$element[0].remove(),new u(t,!1).load()}),this.contentText.prepend(i.$element[0])}else if(e.query.pages[0].redirect)new u(t,!0).load();else{const i=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Redirect page","redirect-helper");i.addEventListener("click",a=>{a.preventDefault(),new u(t,!1).load(),window.scrollTo({top:0,behavior:"smooth"}),i.remove()})}}}class u{constructor({redirectTemplates:e,contentText:t,pageTitle:i,pageTitleParsed:a},s){this.needsCheck=!0;this.redirectTemplates=e,this.contentText=t,this.pageTitle=i,this.pageTitleParsed=a,this.exists=s}async load(){mw.util.addCSS(`
#create-redirect-button {
    margin-bottom: 20px;
}

#redirect-helper-box {
    background-color: whitesmoke;
    width: 700px;
    max-width: calc(100% - 50px);
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 20px;
}

#submit-layout {
    margin-top: 10px;
}

#submit-layout > * {
    margin-bottom: 0;
}

.redirect-helper-warning {
    margin-top: 8px;
}`),this.editorBox=new OO.ui.PanelLayout({id:"redirect-helper-box",padded:!0,expanded:!1,framed:!0}),this.pageTitleParsed.isTalkPage()&&(await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].redirect&&this.loadSyncWithMainButton(),this.loadInputElements(),await this.loadSubmitElements(),this.editorBox.$element[0].append(...[this.syncWithMainButton?.$element?.[0],this.redirectInputLayout.$element[0],this.tagSelectLayout.$element[0],this.summaryInputLayout.$element[0],this.submitLayout.$element[0]].filter(Boolean)),this.contentText.prepend(this.editorBox.$element[0]),this.exists&&this.loadExistingData()}async loadSyncWithMainButton(){const e=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].revisions[0].slots.main.content.trim();this.syncWithMainButton=new OO.ui.ButtonWidget({label:"Sync with main page",icon:"link",flags:["progressive"]}),this.syncWithMainButton.on("click",()=>{const t=/^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(e)?.[1];if(!t)return mw.notify("Failed to parse main page content!",{type:"error"});this.redirectInput.setValue(mw.Title.newFromText(t)?.getTalkPage()?.toString()??""),["R from move",...this.redirectTemplates["R from move"]].some(a=>new RegExp(`{{\\s*[${a[0].toLowerCase()}${a[0]}]${a.slice(1)}\\s*(\\||}})`).test(e))&&this.tagSelect.setValue(["R from move"])})}loadInputElements(){this.redirectInput=new p({placeholder:"Target page name",required:!0},this.pageTitleParsed),this.redirectInput.on("change",()=>{let e=this.redirectInput.getValue();e=e.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),e=e.replace(/^:/,""),e.length>0?(this.redirectInput.setValue(e[0].toUpperCase()+e.slice(1).replaceAll("_"," ")),this.submitButton.setDisabled(!1)):this.submitButton.setDisabled(!0),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.redirectInputLayout=new OO.ui.FieldLayout(this.redirectInput,{label:new OO.ui.HtmlSnippet("<b>Redirect target:</b>"),align:"top"}),this.tagSelect=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.keys(this.redirectTemplates).map(e=>({data:e,label:e}))}),this.tagSelect.getMenu().filterMode="substring",this.tagSelect.on("change",()=>{const e=this.tagSelect.getValue().sort((t,i)=>t.toLowerCase().localeCompare(i.toLowerCase()));this.tagSelect.getValue().join(";")!==e.join(";")&&this.tagSelect.setValue(e),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0,this.tagSelect.getValue().length>0?this.previewButton.setDisabled(!1):this.previewButton.setDisabled(!0)}),this.tagSelectLayout=new OO.ui.FieldLayout(this.tagSelect,{label:new OO.ui.HtmlSnippet("<b>Redirect categorization template(s):</b>"),align:"top"}),this.summaryInput=new OO.ui.ComboBoxInputWidget({options:[{data:"Resolve double redirect"},{data:"Resolve self redirect"},{data:"Remove incorrect rcats"}]}),this.summaryInputLayout=new OO.ui.FieldLayout(this.summaryInput,{label:new OO.ui.HtmlSnippet("<b>Summary:</b>"),align:"top"})}async loadSubmitElements(){this.submitButton=new OO.ui.ButtonWidget({classes:["redirect-helper-bottom-element"],label:"Submit",disabled:!0,flags:["progressive"]}),this.submitButton.on("click",()=>this.handleSubmitButtonClick());const e=new OO.ui.WindowManager;document.body.append(e.$element[0]);const t=new l({size:"large"},this.pageTitleParsed);e.addWindows([t]),this.previewButton=new OO.ui.ButtonWidget({classes:["redirect-helper-bottom-element"],label:"Preview templates",disabled:!0}),this.previewButton.on("click",()=>{t.setData(this.tagSelect.getValue()),t.open()}),this.pageTitleParsed.isTalkPage()||(this.talkData=await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitleParsed.getTalkPage().getPrefixedText()}),this.syncTalkCheckbox=new OO.ui.CheckboxInputWidget({selected:!!this.talkData.query.pages[0].redirect}),this.syncTalkCheckboxLayout=new OO.ui.Widget({classes:["redirect-helper-bottom-element"],content:[new OO.ui.FieldLayout(this.syncTalkCheckbox,{label:"Sync talk page",align:"inline"})]})),await this.checkShouldPromptPatrol()&&(this.patrolCheckbox=new OO.ui.CheckboxInputWidget({selected:!0}),this.patrolCheckboxLayout=new OO.ui.Widget({classes:["redirect-helper-bottom-element"],content:[new OO.ui.FieldLayout(this.patrolCheckbox,{label:"Mark as patrolled",align:"inline"})]})),this.submitLayout=new OO.ui.HorizontalLayout({id:"submit-layout",items:[this.submitButton,this.previewButton,this.syncTalkCheckboxLayout,this.patrolCheckboxLayout].filter(Boolean)})}async checkShouldPromptPatrol(){const e=document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");if(e?.click(),e?.click(),mw.config.get("wgNamespaceNumber")!==0)return!1;if(document.querySelector(".patrollink"))return!0;if(document.querySelector("#mwe-pt-mark-as-reviewed-button"))return!0;if(document.querySelector("#mwe-pt-mark-as-unreviewed-button"))return!1;{if(!mw.config.get("wgArticleId")||!(await new mw.Api().get({action:"query",meta:"userinfo",uiprop:"rights"})).query.userinfo.rights.includes("patrol"))return!1;const i=await new mw.Api().get({action:"pagetriagelist",page_id:mw.config.get("wgArticleId")});return i.pagetriagelist.pages[0]?.user_name===mw.config.get("wgUserName")||i.pagetriagelist.result!=="success"||i.pagetriagelist.pages.length===0?!1:!Number.parseInt(i.pagetriagelist.pages[0]?.patrol_status)}}updateSummary(){const e=this.redirectInput.getValue().trim();if(!e)this.summaryInput.$tabIndexed[0].placeholder="";else if(this.exists){const t=e!==this.oldRedirectTarget?.replaceAll("_"," "),i=this.tagSelect.getValue().join(";")!==this.oldRedirectTags?.join(";");t&&i?this.summaryInput.$tabIndexed[0].placeholder=`Retarget redirect to [[${e}]] and change categorization templates`:t?this.summaryInput.$tabIndexed[0].placeholder=`Retarget redirect to [[${e}]]`:i?this.summaryInput.$tabIndexed[0].placeholder="Change categorization templates":this.summaryInput.$tabIndexed[0].placeholder="Perform redirect cleanup"}else this.summaryInput.$tabIndexed[0].placeholder=`Create redirect to [[${e}]]`}async loadExistingData(){const e=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();this.oldRedirectTarget=/^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(e)?.[1],this.oldRedirectTags=Object.entries(this.redirectTemplates).map(([i,a])=>[i,...a].some(s=>new RegExp(`{{\\s*[${s[0].toLowerCase()}${s[0]}]${s.slice(1)}\\s*(\\||}})`).test(e))?i:null).filter(Boolean).sort((i,a)=>i.toLowerCase().localeCompare(a.toLowerCase()));const t=Object.entries(this.redirectTemplates).flatMap(([i,a])=>[i,...a]).map(i=>new RegExp(`{{\\s*[${i[0].toLowerCase()}${i[0]}]${i.slice(1)}\\s*(\\||}})`).test(e)?i:null).filter(Boolean);this.oldRedirectTagData=Object.fromEntries(t.map(i=>{const a=new RegExp(`{{\\s*[${i[0].toLowerCase()}${i[0]}]${i.slice(1)}\\|?(.*?)\\s*}}`).exec(e),s=Object.entries(this.redirectTemplates).find(([r,n])=>[r,...n].includes(i))?.[0];return a?[s,a[1]]:null}).filter(Boolean)),this.oldStrayText=[e.match(/{{short description\|.*?}}/i)?.[0],e.match(/{{DISPLAYTITLE:.*?}}/)?.[0],e.match(/{{italic title\|?.*?}}/i)?.[0],e.match(/{{DEFAULTSORT:.*?}}/)?.[0],e.match(/{{title language\|.*?}}/)?.[0],...e.match(/\[\[[Cc]ategory:.+?]]/g)??[]].filter(Boolean).join(`
`),this.oldRedirectTarget?this.redirectInput.setValue(this.oldRedirectTarget.replaceAll("_"," ")):mw.notify("Could not find redirect target!",{type:"error"}),this.tagSelect.setValue(this.oldRedirectTags),this.updateSummary()}async validateSubmission(){const e=[],t=this.redirectInput.getValue().trim();/^\s*[^[\]{|}]+\s*$/.test(t)||e.push({title:t,message:"is not a valid page title!"});try{this.parsedDestination=mw.Title.newFromText(t)}catch{e.length===0&&e.push({title:t,message:"is not a valid page title!"})}!this.parsedDestination&&e.length===0&&e.push({title:t,message:"is not a valid page title!"}),this.parsedDestination?.toString()===this.pageTitleParsed.toString()&&e.push({message:"cannot redirect to itself!"});const i=await new mw.Api().get({action:"query",formatversion:2,prop:"pageprops",titles:t}).catch(s=>(s==="missingtitle"?e.push({title:t,message:"does not exist!"}):e.push({title:t,message:`was not able to be fetched from the API (${s})!`}),null)),a=await new mw.Api().get({action:"parse",page:t,prop:"sections",redirects:"1"});if(a.parse.redirects?.[0]){const s=a.parse.redirects[0].to+(a.parse.redirects[0].tofragment?`#${a.parse.redirects[0].tofragment}`:"");e.push({title:t,message:`is a redirect to <a href="${mw.util.getUrl(s)}" target="_blank">${s}</a>. Retarget to that page instead, as double redirects aren't allowed.`})}if(t.split("#").length>1)if(a.parse.sections.find(r=>r.line===t.split("#")[1]))this.tagSelect.getValue().includes("R to anchor")&&e.push({message:"is tagged as a redirect to an anchor, but it is actually a redirect to a section!"}),this.tagSelect.getValue().includes("R to section")||e.push({message:"is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!"});else{const r=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.parsedDestination.toString()})).query.pages[0].revisions[0].slots.main.content;[...r.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map(o=>o.split("|").map(c=>c.trim()))?.flat()??[],...r.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(o=>o.split("|").map(c=>c.trim()).filter(c=>!/^text\s*?=/.test(c)))?.flat()??[],...r.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map(o=>o.trim())??[]].includes(t.split("#")[1])?(this.tagSelect.getValue().includes("R to section")&&e.push({message:"is tagged as a redirect to a section, but it is actually a redirect to an anchor!"}),this.tagSelect.getValue().includes("R to anchor")||e.push({message:"is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!"})):e.push({message:`is a redirect to <a href="${mw.util.getUrl(t)}" target="_blank">${t}</a>, but that section or anchor does not exist!`})}t.split("#").length===1&&(this.tagSelect.getValue().includes("R to section")||this.tagSelect.getValue().includes("R to anchor"))&&e.push({message:"is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!"}),i.query.pages[0].pageprops&&"disambiguation"in i.query.pages[0].pageprops&&!["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation","R from incorrect disambiguation","R from other disambiguation"].some(s=>this.tagSelect.getValue().includes(s))&&e.push({message:"is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!"}),i.query.pages[0].pageprops&&!("disambiguation"in i.query.pages[0].pageprops)&&["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation"].some(s=>this.tagSelect.getValue().includes(s))&&e.push({message:"is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!"}),this.tagSelect.getValue().includes("R to disambiguation page")&&!this.pageTitleParsed.getMainText().endsWith(" (disambiguation)")&&e.push({message:'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'});for(const s of["R semi-protected","R extended-protected","R template-protected","R fully protected"])this.tagSelect.getValue().includes(s)&&e.push({message:`is tagged with unnecessarily tagged with <code>{{${s}}}</code> which will be duplicated by the redirect category shell!`});return this.syncTalkCheckbox?.isSelected()&&!this.talkData.query.pages[0].missing&&!this.talkData.query.pages[0].redirect&&e.push({title:this.pageTitleParsed.getTalkPage().getPrefixedText(),message:"exists, but is not a redirect!"}),e}async handleSubmitButtonClick(){for(const s of[this.redirectInput,this.tagSelect,this.summaryInput,this.submitButton,this.previewButton,this.syncTalkCheckbox,this.patrolCheckbox].filter(Boolean))s.setDisabled(!0);this.submitButton.setLabel("Checking target validity...");let e=[];if(this.needsCheck?e=await this.validateSubmission():this.parsedDestination=mw.Title.newFromText(this.redirectInput.getValue()),e.length>0){for(const s of document.querySelectorAll(".redirect-helper-warning"))s.remove();for(const{title:s,message:r}of e){const n=new OO.ui.HtmlSnippet(`${s?`<a href="${mw.util.getUrl(s)}" target="_blank">${s}</a>`:"This page"} ${r} Click again without making changes to submit anyway.`),o=new OO.ui.MessageWidget({type:"error",classes:["redirect-helper-warning"],inline:!0,label:n});this.editorBox.$element[0].append(o.$element[0])}for(const s of[this.redirectInput,this.tagSelect,this.summaryInput,this.submitButton,this.syncTalkCheckbox,this.patrolCheckbox].filter(Boolean))s.setDisabled(!1);this.tagSelect.getValue().length>0&&this.previewButton.setDisabled(!1),this.submitButton.setLabel("Submit anyway"),this.needsCheck=!1;return}this.submitButton.setLabel(`${this.exists?"Editing":"Creating"} redirect...`);const t=[`#REDIRECT [[${this.redirectInput.getValue().trim()}]]`,this.tagSelect.getValue().length>0?`{{Redirect category shell|
${this.tagSelect.getValue().map(s=>`{{${s}${this.oldRedirectTagData?.[s]?`|${this.oldRedirectTagData[s]}`:""}}}`).join(`
`)}
}}`:null,this.oldStrayText].filter(Boolean).join(`

`),i=(this.summaryInput.getValue()||this.summaryInput.$tabIndexed[0].placeholder)+" (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";if(await new mw.Api().edit(this.pageTitle,()=>({text:t,summary:i})).catch((s,r)=>s==="nocreate-missing"?new mw.Api().create(this.pageTitle,{summary:i},t).catch((n,o)=>{mw.notify(`Error creating ${this.pageTitle}: ${o?.error.info??"Unknown error"} (${n})`,{type:"error"})}):(mw.notify(`Error editing or creating ${this.pageTitle}: ${r?.error.info??"Unknown error"} (${s})`,{type:"error"}),null))){if(mw.notify(`Redirect ${this.exists?"edited":"created"} successfully!`,{type:"success"}),this.syncTalkCheckbox?.isSelected()){this.submitButton.setLabel("Editing talk page...");const s=this.tagSelect.getValue().includes("R from move"),r=[`#REDIRECT [[${this.parsedDestination.getTalkPage().getPrefixedText()}]]`,s?`{{Redirect category shell|
{{R from move}}
}}`:null].filter(Boolean).join(`

`),n=this.pageTitleParsed.getTalkPage().getPrefixedText();if(!await new mw.Api().edit(n,()=>({text:r,summary:"Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])"})).catch((c,m)=>c==="nocreate-missing"?new mw.Api().create(n,{summary:"Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])"},r).catch((h,f)=>{mw.notify(`Error creating ${n}: ${f?.error.info??"Unknown error"} (${h})`,{type:"error"})}):(mw.notify(`Error editing or creating ${n}: ${m?.error.info??"Unknown error"} (${c})`,{type:"error"}),null)))return;mw.notify("Talk page synced successfully!",{type:"success"})}if(this.patrolCheckbox?.isSelected()){this.submitButton.setLabel("Patrolling redirect...");const s=document.querySelector(".patrollink a"),r=document.querySelector("#mwe-pt-mark-as-reviewed-button");s?await new mw.Api().postWithToken("patrol",{action:"patrol",rcid:new URL(s.href).searchParams.get("rcid")}).catch((o,c)=>(mw.notify(`Error patrolling ${this.pageTitle} via API: ${c?.error.info??"Unknown error"} (${o})`,{type:"error"}),null))&&mw.notify("Redirect patrolled successfully!",{type:"success"}):r?(r.click(),mw.notify("Redirect patrolled successfully!",{type:"success"})):mw.notify("Page curation toolbar not found, redirect cannot be patrolled!",{type:"error"})}this.submitButton.setLabel("Complete, reloading..."),window.location.href=mw.util.getUrl(this.pageTitle,{redirect:"no"})}}}new d().run()});
//# sourceMappingURL=data:application/json;base64,
