// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/redirect-helper.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows","oojs-ui.styles.icons-content","oojs-ui.styles.icons-editing-core"],()=>{class O extends OO.ui.TextInputWidget{constructor(t,e){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();if(!t)e.resolve([]);else if(t.includes("#")){const i=t.split("#")[0];this.api.get({action:"parse",page:i,prop:"sections",redirects:!0}).catch(()=>null).then(n=>{if(n){const s=n.parse.sections.filter(r=>r.line.toLowerCase().replaceAll(/<\/?i>/g,"").startsWith(t.split("#")[1].toLowerCase()));e.resolve(s.map(r=>({data:`${n.parse.title}#${r.line.replaceAll(/<\/?i>/g,"")}`,label:`${n.parse.title}#${r.line.replaceAll(/<\/?i>/g,"")}`})))}else e.resolve([])})}else{const i=mw.Title.newFromText(t);this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:i?.getNamespaceId()??0,gapprefix:i?.getMainText()??t,generator:"allpages",prop:["info","pageprops"]}).catch(()=>null).then(n=>{n?e.resolve(n.query?.pages?n.query.pages.filter(s=>s.title!==this.pageTitleParsed.toString()).map(s=>({data:s.title,label:new OO.ui.HtmlSnippet(`${s.title}${s.pageprops&&"disambiguation"in s.pageprops?" <i>(disambiguation)</i>":""}${"redirect"in s?" <i>(redirect)</i>":""}`)})):[]):e.resolve([])})}return e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:i})=>new OO.ui.MenuOptionWidget({data:e,label:i}));OO.ui.mixin.LookupElement.call(this,t),this.pageTitleParsed=e}}Object.assign(O.prototype,OO.ui.mixin.LookupElement.prototype);class x extends OO.ui.TextInputWidget{constructor(t){super(t);this.api=new mw.Api;this.getLookupRequest=()=>{const t=this.getValue(),e=$.Deferred();t||e.resolve([]);const i=mw.Title.newFromText(t);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:i?.getMainText()??t,generator:"allpages",prop:"categories"}).catch(()=>null).then(n=>{if(n?.query?.pages){const s=n.query.pages.filter(r=>!r.categories?.some(o=>o.title==="Category:Wikipedia soft redirected categories")).map(r=>{const o=r.title.split(":")[1];return{data:o,label:o}});this.emit("showing-values",s),e.resolve(s)}else e.resolve([])}),e.promise({abort(){}})};this.getLookupCacheDataFromResponse=t=>t??[];this.getLookupMenuOptionsFromData=t=>t.map(({data:e,label:i})=>new OO.ui.MenuOptionWidget({data:e,label:i}));OO.ui.mixin.LookupElement.call(this,t)}}Object.assign(x.prototype,OO.ui.mixin.LookupElement.prototype);class h extends OO.ui.ProcessDialog{constructor(t,e){super(t);this.api=new mw.Api;this.getSetupProcess=()=>h.super.prototype.getSetupProcess.call(this).next(()=>this.api.post({action:"parse",formatversion:"2",contentmodel:"wikitext",prop:["text","categorieshtml"],title:this.pageTitleParsed.getPrefixedDb(),text:this.getData()}).then(t=>{const e=t.parse.text,i=t.parse.categorieshtml,n=new OO.ui.PanelLayout({padded:!0,expanded:!1});n.$element.append(e,i),this.$body.append(n.$element)}));this.getActionProcess=t=>t?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):h.super.prototype.getActionProcess.call(this,t);this.getTeardownProcess=()=>h.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});this.pageTitleParsed=e,h.static.name="TemplatePreviewDialog",h.static.title="Redirect categorization templates preview",h.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]}]}}Object.assign(h.prototype,OO.ui.ProcessDialog.prototype);class f extends OO.ui.ProcessDialog{constructor(t){super(t);this.api=new mw.Api;this.getSetupProcess=()=>f.super.prototype.getSetupProcess.call(this).next(()=>{const[t,e]=this.getData();return this.api.post({action:"compare",formatversion:"2",prop:["diff"],fromslots:"main","fromtext-main":t,"fromcontentmodel-main":"wikitext",toslots:"main","totext-main":e,"tocontentmodel-main":"wikitext"}).then(i=>{const n=i.compare.body,s=new OO.ui.MessageWidget({type:"warning",label:"No changes to make!"}),r=new OO.ui.PanelLayout({padded:!0,expanded:!1});r.$element.append(n?`
<table class="diff diff-editfont-monospace">
    <colgroup>
        <col class="diff-marker">
        <col class="diff-content">
        <col class="diff-marker">
        <col class="diff-content">
    </colgroup>
    <tbody>
        ${n}
    </tbody>
</table>`:s.$element[0]),this.$body.append(r.$element)})});this.getActionProcess=t=>t?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):f.super.prototype.getActionProcess.call(this,t);this.getTeardownProcess=()=>f.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});f.static.name="ShowChangesDialog",f.static.title="Changes to be made",f.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]}]}}Object.assign(f.prototype,OO.ui.ProcessDialog.prototype);class P{constructor(){this.api=new mw.Api}async run(){if(this.passesPreChecks()){if(this.redirectTemplates=await this.fetchRedirectTemplates(),this.contentText=document.querySelector("#mw-content-text"),!this.contentText)return mw.notify("redirect-helper: Failed to find content text element!",{type:"error"});if(this.pageTitle=mw.config.get("wgPageName"),this.pageTitleParsed=mw.Title.newFromText(this.pageTitle),!this.pageTitleParsed)return mw.notify("redirect-helper: Failed to parse page title!",{type:"error"});await this.checkPageAndLoad()}}passesPreChecks(){return[mw.config.get("wgNamespaceNumber")>=0,mw.config.get("wgIsProbablyEditable"),mw.config.get("wgIsArticle"),mw.config.get("wgAction")==="view",mw.config.get("wgRevisionId")===mw.config.get("wgCurRevisionId"),!mw.config.get("wgDiffOldId")].every(Boolean)}async fetchRedirectTemplates(){return JSON.parse((await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"})).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")}async checkPageAndLoad(){const a=await this.api.get({action:"query",formatversion:"2",prop:"info",titles:this.pageTitle}),t={redirectTemplates:this.redirectTemplates,contentText:this.contentText,pageTitle:this.pageTitle,pageTitleParsed:this.pageTitleParsed};if(a.query.pages[0].missing){mw.util.addCSS(`
#create-redirect-button {
    margin-bottom: 20px;
}`);const e=new OO.ui.ButtonWidget({id:"create-redirect-button",label:"Create redirect",icon:"articleRedirect",flags:["progressive"]});e.on("click",()=>{e.$element[0].remove(),new b(t,!1).load()}),this.contentText.prepend(e.$element[0])}else if(a.query.pages[0].redirect)new b(t,!0).load();else{const e=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Redirect page","redirect-helper");e.addEventListener("click",i=>{i.preventDefault(),new b(t,!1).load(),window.scrollTo({top:0,behavior:"smooth"}),e.remove()})}}}class b{constructor({redirectTemplates:a,contentText:t,pageTitle:e,pageTitleParsed:i},n){this.api=new mw.Api;this.redirectRegex=/^#redirect:?\s*\[\[\s*:?([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i;this.scriptAdvert=" (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";this.needsCheck=!0;this.templateEditorsInfo=[];this.pageContent="";this.redirectTemplates=a,this.contentText=t,this.pageTitle=e,this.pageTitleParsed=i,this.exists=n}async load(){mw.util.addCSS(`
#create-redirect-button {
    margin-bottom: 20px;
}

#redirect-helper-box {
    background-color: whitesmoke;
    width: 700px;
    max-width: calc(100% - 50px);
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 25px !important;
}

.redirect-input-layout label {
    font-weight: bold;
}

.redirect-helper-template-parameters-container, .redirect-helper-template-parameters-container details {
    background-color: #e2e2e2;
    border-radius: 5px;
    margin-block: 10px;
    padding: 5px;
}

.redirect-helper-template-parameters-container summary {
    cursor: pointer;
    font-weight: bold;
}

.redirect-helper-template-parameters-container details {
    background-color: #d1cece;
    margin-block: 5px;
}

#redirect-helper-no-templates-message {
    padding: 5px;
}

#redirect-helper-summary-layout {
    padding-top: 10px;
    margin-top: 15px;
    border-top: 1px solid gray;
}

#redirect-helper-submit-layout {
    margin-top: 10px;
}

#redirect-helper-submit-layout > * {
    margin-bottom: 0;
}

.redirect-helper-warning {
    margin-top: 8px;
}`),mw.loader.addLinkTag("https://www.mediawiki.org/w/load.php?modules=mediawiki.diff.styles&only=styles"),this.editorBox=new OO.ui.PanelLayout({id:"redirect-helper-box",padded:!0,expanded:!1,framed:!0}),this.pageTitleParsed.isTalkPage()&&(await this.api.get({action:"query",formatversion:"2",prop:"info",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].redirect&&await this.loadSyncWithMainButton(),this.loadInputElements(),await this.loadSubmitElements(),this.editorBox.$element[0].append(...[this.syncWithMainButton?.$element?.[0],this.redirectInputLayout.$element[0],this.tagSelectLayout.$element[0],this.templateParametersEditor,this.defaultSortInputLayout.$element[0],this.categorySelectLayout.$element[0],this.summaryInputLayout.$element[0],this.submitLayout.$element[0]].filter(Boolean)),this.contentText.prepend(this.editorBox.$element[0]),this.exists&&this.loadExistingData()}async loadSyncWithMainButton(){const a=await this.getPageContent(this.pageTitleParsed.getSubjectPage().getPrefixedText());this.syncWithMainButton=new OO.ui.ButtonWidget({label:"Sync with main page",icon:"link",flags:["progressive"]}),this.syncWithMainButton.on("click",()=>{const t=this.redirectRegex.exec(a)?.[1];if(!t)return mw.notify("Failed to parse main page content!",{type:"error"});this.redirectInput.setValue(mw.Title.newFromText(t)?.getTalkPage()?.toString()??""),["R from move",...this.redirectTemplates["R from move"].aliases].some(i=>new RegExp(`{{\\s*[${i[0].toLowerCase()}${i[0]}]${i.slice(1)}\\s*(\\||}})`).test(a))&&this.tagSelect.setValue(["R from move"])})}loadInputElements(){this.redirectInput=new O({placeholder:"Target page name",required:!0},this.pageTitleParsed),this.redirectInput.on("change",()=>{let e=this.redirectInput.getValue();e=e.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),e=e.replace(/^:/,""),e.length>0?(this.redirectInput.setValue(e[0].toUpperCase()+e.slice(1).replaceAll("_"," ")),this.defaultSortSuggestButton.setDisabled(!1),this.submitButton.setDisabled(!1),this.showPreviewButton.setDisabled(!1),this.showChangesButton.setDisabled(!1)):(this.defaultSortSuggestButton.setDisabled(!0),this.submitButton.setDisabled(!0),this.showPreviewButton.setDisabled(!0),this.showChangesButton.setDisabled(!0)),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.redirectInputLayout=new OO.ui.FieldLayout(this.redirectInput,{label:"Redirect target:",classes:["redirect-input-layout"],align:"top"}),this.tagSelect=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.keys(this.redirectTemplates).map(e=>({data:e,label:e}))}),this.tagSelect.getMenu().filterMode="substring",this.tagSelect.on("change",()=>{const e=this.tagSelect.getValue().sort((n,s)=>n.toLowerCase().localeCompare(s.toLowerCase()));this.tagSelect.getValue().join(";")!==e.join(";")&&this.tagSelect.setValue(e),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0;for(const n of this.templateEditorsInfo)n.details.style.display="none";let i=0;for(const n of this.tagSelect.getValue()){const s=this.templateEditorsInfo.find(r=>r.name===n);s&&(s.details.style.display="block",i++)}a.textContent=`Template parameters (${i>0?`for ${i} template${i>1?"s":""}`:"none to show"})`,t.style.display=i>0?"none":"block"}),this.tagSelectLayout=new OO.ui.FieldLayout(this.tagSelect,{label:"Redirect categorization templates:",classes:["redirect-input-layout"],align:"top"}),this.templateParametersEditor=document.createElement("details"),this.templateParametersEditor.classList.add("redirect-helper-template-parameters-container");const a=document.createElement("summary");a.textContent="Template parameters (none to show)",this.templateParametersEditor.append(a);for(const[e,i]of Object.entries(this.redirectTemplates)){const n=Object.entries(i.parameters);if(n.length===0)continue;const s=document.createElement("details");s.style.display="none";const r=document.createElement("summary");r.textContent=e,s.append(r);const o={name:e,details:s,parameters:[]};for(const[c,u]of n){const y=new OO.ui.TextInputWidget({placeholder:u.default?.toString(),required:u.required});y.on("change",()=>{this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0});const l=new OO.ui.FieldLayout(y,{label:new OO.ui.HtmlSnippet(`${c}${!u.label||c.toLowerCase()===u.label?.toLowerCase()?"":` (${u.label})`}${u.description?` (${u.description})`:""} (type: ${u.type}) ${u.suggested?" (suggested)":""}${u.example?` (example: "${u.example}")`:""}`),align:"inline"});s.append(l.$element[0]),o.parameters.push({name:c,aliases:u.aliases,editor:y})}this.templateParametersEditor.append(s),this.templateEditorsInfo.push(o)}const t=document.createElement("div");t.id="redirect-helper-no-templates-message",t.textContent="No templates with parameters to display!",this.templateParametersEditor.append(t),this.defaultSortInput=new OO.ui.TextInputWidget,this.defaultSortInput.on("change",()=>{const e=this.defaultSortInput.getValue();e.length>0&&this.defaultSortInput.setValue(e.replaceAll("_"," ")),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.defaultSortSuggestButton=new OO.ui.ButtonWidget({icon:"robot",label:"Suggest",disabled:!0}),this.defaultSortSuggestButton.on("click",()=>{let e=this.pageTitleParsed.getMainText().replace(/ \(.*\)$/,"");if(["R from person","R from birth name","R from fictional character"].some(i=>this.tagSelect.getValue().includes(i))){if(!e.includes(" "))return;let i="";if(/ (?:[JS]r.?|[IVX]+)$/.test(e)&&(i=e.slice(e.lastIndexOf(" ")),e=e.slice(0,e.lastIndexOf(" ")),!e.includes(" ")))return e+i;const n=e.slice(e.lastIndexOf(" ")+1).replace(/,$/,"").replace(/O'/,"O"),s=e.slice(0,e.lastIndexOf(" "));this.defaultSortInput.setValue(n+", "+s+i)}else{let i=e.replaceAll("Mr.","Mister").replaceAll("&","And");for(const n of["An","A","The"])if(i.startsWith(n+" ")){i=i.slice(n.length+1)+", "+n;break}i===e?mw.notify("redirect-helper wasn't able to determine a sort key different from the current page title!",{type:"warn"}):this.defaultSortInput.setValue(i)}}),this.defaultSortInputLayout=new OO.ui.ActionFieldLayout(this.defaultSortInput,this.defaultSortSuggestButton,{label:new OO.ui.HtmlSnippet(`Default sort key (DEFAULTSORT) (see <a href="${mw.util.getUrl("Wikipedia:Categorization#Sort keys")}" target="_blank">guideline</a>):`),classes:["redirect-input-layout"],align:"top"}),this.categorySelectInput=new x({placeholder:"Add categories here"}),this.categorySelectInput.on("change",()=>{let e=this.categorySelectInput.getValue();e=e.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),e=e.replace(/^Category:/,""),e.length>0&&this.categorySelectInput.setValue(e[0].toUpperCase()+e.slice(1).replaceAll("_"," "))}),this.categorySelectInput.on("showing-values",e=>{for(const i of e)this.categorySelect.addAllowedValue(i.data)}),this.categorySelect=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:this.categorySelectInput}),this.categorySelect.on("change",()=>{const e=this.categorySelect.getValue().sort((i,n)=>i.toLowerCase().localeCompare(n.toLowerCase()));this.categorySelect.getValue().join(";")!==e.join(";")&&this.categorySelect.setValue(e),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.categorySelectLayout=new OO.ui.FieldLayout(this.categorySelect,{label:"Categories:",classes:["redirect-input-layout"],align:"top"}),this.summaryInput=new OO.ui.ComboBoxInputWidget({options:[{data:"Resolve double redirect"},{data:"Resolve self redirect"},{data:"Remove incorrect rcats"}]}),this.summaryInputLayout=new OO.ui.FieldLayout(this.summaryInput,{id:"redirect-helper-summary-layout",label:"Summary:",classes:["redirect-input-layout"],align:"top"})}async loadSubmitElements(){const a=new OO.ui.WindowManager;document.body.append(a.$element[0]),this.submitButton=new OO.ui.ButtonWidget({label:"Submit",disabled:!0,flags:["progressive"]}),this.submitButton.on("click",()=>this.handleSubmitButtonClick());const t=new h({size:"large"},this.pageTitleParsed);a.addWindows([t]),this.showPreviewButton=new OO.ui.ButtonWidget({label:"Show preview",disabled:!0}),this.showPreviewButton.on("click",()=>{t.setData(this.createOutput(this.redirectInput.getValue(),this.tagSelect.getValue(),this.oldStrayText,this.defaultSortInput.getValue(),this.categorySelect.getValue())),t.open()});const e=new f({size:"large"});a.addWindows([e]),this.showChangesButton=new OO.ui.ButtonWidget({label:"Show changes",disabled:!0}),this.showChangesButton.on("click",async()=>{this.exists&&(this.pageContent=await this.getPageContent(this.pageTitle)),e.setData([this.pageContent,this.createOutput(this.redirectInput.getValue(),this.tagSelect.getValue(),this.oldStrayText,this.defaultSortInput.getValue(),this.categorySelect.getValue())]),e.open()}),this.pageTitleParsed.isTalkPage()||(this.talkData=await this.api.get({action:"query",formatversion:"2",prop:"info",titles:this.pageTitleParsed.getTalkPage().getPrefixedText()}),this.syncTalkCheckbox=new OO.ui.CheckboxInputWidget({selected:!!this.talkData.query.pages[0].redirect}),this.syncTalkCheckboxLayout=new OO.ui.Widget({content:[new OO.ui.FieldLayout(this.syncTalkCheckbox,{label:"Sync talk page",align:"inline"})]})),await this.checkShouldPromptPatrol()&&(this.patrolCheckbox=new OO.ui.CheckboxInputWidget({selected:!0}),this.patrolCheckboxLayout=new OO.ui.Widget({content:[new OO.ui.FieldLayout(this.patrolCheckbox,{label:"Mark as patrolled",align:"inline"})]})),this.submitLayout=new OO.ui.HorizontalLayout({id:"redirect-helper-submit-layout",items:[this.submitButton,this.showPreviewButton,this.showChangesButton,this.syncTalkCheckboxLayout,this.patrolCheckboxLayout].filter(Boolean)})}async checkShouldPromptPatrol(){const a=document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");if(a?.click(),a?.click(),mw.config.get("wgNamespaceNumber")!==0)return!1;if(document.querySelector(".patrollink"))return!0;if(document.querySelector("#mwe-pt-mark-as-reviewed-button"))return!0;if(document.querySelector("#mwe-pt-mark-as-unreviewed-button"))return!1;{if(!mw.config.get("wgArticleId")||!(await this.api.get({action:"query",meta:"userinfo",uiprop:"rights"})).query.userinfo.rights.includes("patrol"))return!1;const e=await this.api.get({action:"pagetriagelist",page_id:mw.config.get("wgArticleId")});return e.pagetriagelist.pages[0]?.user_name===mw.config.get("wgUserName")||e.pagetriagelist.result!=="success"||e.pagetriagelist.pages.length===0?!1:!Number.parseInt(e.pagetriagelist.pages[0]?.patrol_status)}}updateSummary(){const a=this.redirectInput.getValue().trim();if(!a)this.summaryInput.$tabIndexed[0].placeholder="";else if(this.exists){const t=a!==this.oldRedirectTarget?.replaceAll("_"," "),e=this.tagSelect.getValue().some(o=>!this.oldRedirectTags.includes(o))||this.oldRedirectTags.some(o=>!this.tagSelect.getValue().includes(o));let i=!1;if(this.oldRedirectTagData){const o=Object.entries(this.redirectTemplates).filter(([,c])=>Object.entries(c.parameters).length>0);for(const[c,u]of o){if(!this.oldRedirectTags.includes(c)||!this.tagSelect.getValue().includes(c))continue;const l=this.oldRedirectTagData[c]??Object.entries(u.parameters).map(([p])=>[p,""]),g=this.templateEditorsInfo.find(p=>p.name===c);for(const p of g.parameters){const m=l.find(w=>w[0]===p.name)?.[1]??"",d=p.editor.getValue().trim();if(console.log(m,d,m!==d),m!==d){i=!0;break}}if(i)break}}const n=this.defaultSortInput.getValue().trim()!==this.oldDefaultSort.replaceAll("_"," "),s=this.categorySelect.getValue().some(o=>!this.oldCategories.includes(o))||this.oldCategories.some(o=>!this.categorySelect.getValue().includes(o)),r=[];t&&r.push(`retarget to [[${a}]]`),e&&r.push("change categorization templates"),i&&r.push("change categorization template arguments"),n&&r.push("change default sort key"),s&&r.push("change categories"),r.length===0&&r.push("perform redirect cleanup"),r[0]=r[0][0].toUpperCase()+r[0].slice(1),r.length>1&&(r[r.length-1]=`and ${r.at(-1)}`),this.summaryInput.$tabIndexed[0].placeholder=r.join(r.length>2?", ":" ")}else this.summaryInput.$tabIndexed[0].placeholder=`Create redirect to [[${a}]]`}async loadExistingData(){this.exists&&(this.pageContent=await this.getPageContent(this.pageTitle)),this.oldRedirectTarget=this.redirectRegex.exec(this.pageContent)?.[1],this.oldRedirectTags=Object.entries(this.redirectTemplates).map(([t,e])=>[t,...e.aliases].some(i=>new RegExp(`{{\\s*[${i[0].toLowerCase()}${i[0]}]${i.slice(1)}\\s*(\\||}})`).test(this.pageContent))?t:null).filter(Boolean).sort((t,e)=>t.toLowerCase().localeCompare(e.toLowerCase()));const a=Object.entries(this.redirectTemplates).flatMap(([t,e])=>[t,...e.aliases]).map(t=>new RegExp(`{{\\s*[${t[0].toLowerCase()}${t[0]}]${t.slice(1)}\\s*(\\||}})`).test(this.pageContent)?t:null).filter(Boolean);this.oldRedirectTagData=Object.fromEntries(a.map(t=>{const e=new RegExp(`{{\\s*[${t[0].toLowerCase()}${t[0]}]${t.slice(1)}\\|?(.*?)\\s*}}`).exec(this.pageContent),i=Object.entries(this.redirectTemplates).find(([r,o])=>[r,...o.aliases].includes(t))?.[0];if(!e?.[1])return null;const s=e[1].split("|").map((r,o)=>{if(!r.includes("="))return[(o+1).toString(),r.trim()];const[c,u]=r.split("=");return[c.trim(),u.trim()]});return[i,s]}).filter(Boolean)),this.oldDefaultSort=this.pageContent.match(/{{DEFAULTSORT:.*?}}/g)?.at(-1)?.slice(14,-2)?.trim()??"",this.oldCategories=this.pageContent.match(/\[\[[Cc]ategory:.+?]]/g)?.map(t=>t.slice(11,-2))??[],this.oldStrayText=[this.pageContent.match(/{{short description\|.*?}}/i)?.[0],this.pageContent.match(/{{DISPLAYTITLE:.*?}}/)?.[0],this.pageContent.match(/{{italic title\|?.*?}}/i)?.[0],this.pageContent.match(/{{title language\|.*?}}/)?.[0]].filter(Boolean).join(`
`),this.oldRedirectTarget?this.redirectInput.setValue(this.oldRedirectTarget.replaceAll("_"," ")):mw.notify("Could not find redirect target!",{type:"error"}),this.tagSelect.setValue(this.oldRedirectTags);for(const[t,e]of Object.entries(this.oldRedirectTagData)){const i=this.templateEditorsInfo.find(n=>n.name===t);if(i)for(const[n,s]of e){const r=i.parameters.find(o=>[o.name,...o.aliases].includes(n));r&&r.editor.setValue(s)}}this.oldDefaultSort&&this.defaultSortInput.setValue(this.oldDefaultSort);for(const t of this.oldCategories)this.categorySelect.addAllowedValue(t);this.categorySelect.setValue(this.oldCategories.map(t=>({data:t,label:t}))),this.updateSummary()}async validateSubmission(){const a=[],t=this.redirectInput.getValue().trim(),e=this.tagSelect.getValue();/^\s*[^[\]{|}]+\s*$/.test(t)||a.push({title:t,message:"is not a valid page title!"});try{this.parsedDestination=mw.Title.newFromText(t)}catch{a.length===0&&a.push({title:t,message:"is not a valid page title!"})}!this.parsedDestination&&a.length===0&&a.push({title:t,message:"is not a valid page title!"}),this.parsedDestination?.toString()===this.pageTitleParsed.toString()&&a.push({message:"cannot redirect to itself!"});const i=await this.api.get({action:"query",formatversion:"2",prop:["pageprops","categories"],titles:t}).catch(l=>(l==="missingtitle"?a.push({title:t,message:"does not exist!"}):a.push({title:t,message:`was not able to be fetched from the API (${l})!`}),null)),n=await this.api.get({action:"parse",page:t,prop:"sections",redirects:!0});if(n.parse.redirects?.[0]){const l=n.parse.redirects[0].to+(n.parse.redirects[0].tofragment?`#${n.parse.redirects[0].tofragment}`:"");a.push({title:t,message:`is a redirect to <a href="${mw.util.getUrl(l)}" target="_blank">${l}</a>. Retarget to that page instead, as double redirects aren't allowed.`})}if(t.split("#").length>1)if(n.parse.sections.find(g=>g.line.replaceAll(/<\/?i>/g,"")===t.split("#")[1]))e.includes("R to anchor")&&a.push({message:"is tagged as a redirect to an anchor, but it is actually a redirect to a section!"}),e.includes("R to section")||a.push({message:"is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!"});else{const g=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.parsedDestination.toString()})).query.pages[0].revisions[0].slots.main.content;[...g.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map(m=>m.split("|").map(d=>d.trim()))?.flat()??[],...g.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(m=>m.split("|").map(d=>d.trim()).filter(d=>!/^text\s*?=/.test(d)))?.flat()??[],...g.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map(m=>m.trim())??[]].includes(t.split("#")[1])?(e.includes("R to section")&&a.push({message:"is tagged as a redirect to a section, but it is actually a redirect to an anchor!"}),e.includes("R to anchor")||a.push({message:"is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!"})):a.push({message:`is a redirect to <a href="${mw.util.getUrl(t)}" target="_blank">${t}</a>, but that section or anchor does not exist!`})}t.split("#").length===1&&(e.includes("R to section")||e.includes("R to anchor"))&&a.push({message:"is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!"});const s=!!(i.query.pages[0].pageprops&&"disambiguation"in i.query.pages[0].pageprops),r=!!i.query.pages[0].categories?.some(l=>l.title==="Category:Surnames"),o=["R to disambiguation page","R from incomplete disambiguation"],c=["R from ambiguous sort name","R from ambiguous term"],u=o.some(l=>e.includes(l)),y=c.some(l=>e.includes(l));s&&!u&&!y&&a.push({message:"is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!"}),i.query.pages[0].pageprops&&!s&&(u&&a.push({message:"is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!"}),r&&!y&&a.push({message:"is a redirect to a surname list, but it is not tagged with a correct disambiguation categorization template!"})),s&&e.includes("R to disambiguation page")&&!this.pageTitleParsed.getMainText().endsWith(" (disambiguation)")&&a.push({message:'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'});for(const l of["R semi-protected","R extended-protected","R template-protected","R fully protected"])e.includes(l)&&a.push({message:`is tagged with unnecessarily tagged with <code>{{${l}}}</code> which will be duplicated by the redirect category shell!`});mw.config.get("wgWikibaseItemId")&&!e.includes("R with Wikidata item")&&a.push({message:"is linked to a Wikidata item but it isn't tagged with <code>{{R with Wikidata item}}</code>!"}),e.includes("R with Wikidata item")&&!mw.config.get("wgWikibaseItemId")&&a.push({message:"is tagged with <code>{{R with Wikidata item}}</code> but it is not actually linked to a Wikidata item!"});for(const l of e){const g=this.redirectTemplates[l];if(g)for(const[p,m]of Object.entries(g.parameters)){const d=this.templateEditorsInfo.find(w=>w.name===l)?.parameters.find(w=>[w.name,...w.aliases].includes(p));d&&m.required&&!d.editor.getValue().trim()&&a.push({message:`is tagged with <code>{{${l}}}</code> but it is missing the required parameter <code>${p}</code>!`})}}return this.syncTalkCheckbox?.isSelected()&&!this.talkData.query.pages[0].missing&&!this.talkData.query.pages[0].redirect&&a.push({title:this.pageTitleParsed.getTalkPage().getPrefixedText(),message:"exists, but is not a redirect!"}),a}async handleSubmitButtonClick(){const a=[this.redirectInput,this.tagSelect,...this.templateEditorsInfo.flatMap(s=>s.parameters.map(r=>r.editor)),this.defaultSortInput,this.defaultSortSuggestButton,this.categorySelect,this.summaryInput,this.submitButton,this.showPreviewButton,this.showChangesButton,this.syncTalkCheckbox,this.patrolCheckbox].filter(Boolean);for(const s of a)s.setDisabled(!0);this.submitButton.setLabel("Checking target validity...");let t=[];if(this.needsCheck?t=await this.validateSubmission():this.parsedDestination=mw.Title.newFromText(this.redirectInput.getValue()),t.length>0){for(const s of document.querySelectorAll(".redirect-helper-warning"))s.remove();for(const{title:s,message:r}of t){const o=new OO.ui.HtmlSnippet(`${s?`<a href="${mw.util.getUrl(s)}" target="_blank">${s}</a>`:"This page"} ${r} Click again without making changes to submit anyway.`),c=new OO.ui.MessageWidget({type:"error",classes:["redirect-helper-warning"],inline:!0,label:o});this.editorBox.$element[0].append(c.$element[0])}for(const s of a)s.setDisabled(!1);this.submitButton.setLabel("Submit anyway"),this.needsCheck=!1;return}this.submitButton.setLabel(`${this.exists?"Editing":"Creating"} redirect...`);const e=this.createOutput(this.redirectInput.getValue(),this.tagSelect.getValue(),this.oldStrayText,this.defaultSortInput.getValue(),this.categorySelect.getValue()),i=(this.summaryInput.getValue()||this.summaryInput.$tabIndexed[0].placeholder)+this.scriptAdvert;if(await this.editOrCreate(this.pageTitle,e,i)){if(mw.notify(`Redirect ${this.exists?"edited":"created"} successfully!`,{type:"success"}),this.syncTalkCheckbox?.isSelected()){this.submitButton.setLabel("Editing talk page...");const s=this.tagSelect.getValue().includes("R from move"),r=this.createOutput(this.parsedDestination.getTalkPage().getPrefixedText(),s?["R from move"]:[],void 0,void 0,[]);if(!await this.editOrCreate(this.pageTitleParsed.getTalkPage().getPrefixedText(),r,"Syncing redirect from main page"+this.scriptAdvert))return;mw.notify("Talk page synced successfully!",{type:"success"})}if(this.patrolCheckbox?.isSelected()){this.submitButton.setLabel("Patrolling redirect...");const s=document.querySelector(".patrollink a"),r=document.querySelector("#mwe-pt-mark-as-reviewed-button");s?await this.api.postWithToken("patrol",{action:"patrol",rcid:new URL(s.href).searchParams.get("rcid")}).catch((c,u)=>(mw.notify(`Error patrolling ${this.pageTitle} via API: ${u?.error.info??"Unknown error"} (${c})`,{type:"error"}),null))&&mw.notify("Redirect patrolled successfully!",{type:"success"}):r?(r.click(),mw.notify("Redirect patrolled successfully!",{type:"success"})):mw.notify("Page curation toolbar not found, redirect cannot be patrolled!",{type:"error"})}this.submitButton.setLabel("Complete, reloading..."),window.location.href=mw.util.getUrl(this.pageTitle,{redirect:"no"})}}createOutput(a,t,e,i,n){const s=mw.Title.newFromText(a),r=s?`${s.getNamespaceId()===14?":":""}${s.getPrefixedText()}${s.getFragment()?`#${s.getFragment()}`:""}`:a.trim();this.pageTitleParsed.getMainText().toLocaleLowerCase().normalize("NFD").replaceAll(/[\u0300-\u036F]/g,"")===i?.toLowerCase().normalize("NFD").replaceAll(/[\u0300-\u036F]/g,"")&&(i=void 0);const o=t.map(c=>{const u=this.templateEditorsInfo.find(l=>l.name===c);if(!u)return`{{${c}}}`;const y=u.parameters.map((l,g)=>{const p=l.editor.getValue().trim();return p?`|${l.name===(g+1).toString()?"":`${l.name}=`}${p}`:null}).filter(Boolean).join("");return`{{${c}${y}}}`});return[`#REDIRECT [[${r}]]
`,t.length>0?`{{Redirect category shell|
${o.join(`
`)}
}}
`:null,e?e+`
`:null,i?`{{DEFAULTSORT:${i.trim()}}}`:null,n.length>0?n.map(c=>`[[Category:${c}]]`).join(`
`):null].filter(Boolean).join(`
`)}async getPageContent(a){return(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:a})).query.pages[0].revisions[0].slots.main.content.trim()}async editOrCreate(a,t,e){return await this.api.edit(a,()=>({text:t,summary:e})).catch((i,n)=>i==="nocreate-missing"?this.api.create(a,{summary:e},t).catch((s,r)=>{mw.notify(`Error creating ${a}: ${r?.error.info??"Unknown error"} (${s})`,{type:"error"})}):(mw.notify(`Error editing or creating ${a}: ${n?.error.info??"Unknown error"} (${i})`,{type:"error"}),null))}}new P().run()});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
