"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows","oojs-ui.styles.icons-content","oojs-ui.styles.icons-editing-core"],()=>{class p extends OO.ui.TextInputWidget{constructor(i,t){super(i);this.getLookupRequest=()=>{const i=this.getValue(),t=$.Deferred();if(!i)t.resolve([]);else if(i.includes("#")){const a=i.split("#")[0];new mw.Api().get({action:"parse",page:a,prop:"sections",redirects:"1"}).catch(()=>null).then(s=>{if(s){const r=s.parse.sections.filter(n=>n.line.toLowerCase().startsWith(i.split("#")[1].toLowerCase()));t.resolve(r.map(n=>({data:`${s.parse.title}#${n.line}`,label:`${s.parse.title}#${n.line}`})))}else t.resolve([])})}else{const a=mw.Title.newFromText(i);new mw.Api().get({action:"query",formatversion:2,gaplimit:20,gapnamespace:a?.getNamespaceId()??0,gapprefix:a?.getMainText()??i,generator:"allpages",prop:"info|pageprops"}).catch(()=>null).then(s=>{s?t.resolve(s.query?.pages?s.query.pages.filter(r=>r.title!==this.pageTitleParsed.toString()).map(r=>({data:r.title,label:new OO.ui.HtmlSnippet(`${r.title}${r.pageprops&&"disambiguation"in r.pageprops?" <i>(disambiguation)</i>":""}${"redirect"in r?" <i>(redirect)</i>":""}`)})):[]):t.resolve([])})}return t.promise({abort(){}})};this.getLookupCacheDataFromResponse=i=>i??[];this.getLookupMenuOptionsFromData=i=>i.map(({data:t,label:a})=>new OO.ui.MenuOptionWidget({data:t,label:a}));OO.ui.mixin.LookupElement.call(this,i),this.pageTitleParsed=t}}Object.assign(p.prototype,OO.ui.mixin.LookupElement.prototype);class c extends OO.ui.ProcessDialog{constructor(i,t){super(i);this.getSetupProcess=()=>c.super.prototype.getSetupProcess.call(this).next(()=>{const i={action:"parse",formatversion:"2",contentmodel:"wikitext",prop:["text","categorieshtml"],title:this.pageTitleParsed.getPrefixedDb(),text:`{{Redirect category shell|${this.getData().map(t=>`{{${t}}}`).join("")}}}`};return new mw.Api().post(i).then(t=>{const a=t.parse.text,s=t.parse.categorieshtml,r=new OO.ui.PanelLayout({padded:!0,expanded:!1});r.$element.append(a,s),this.$body.append(r.$element)})});this.getActionProcess=i=>i?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):c.super.prototype.getActionProcess.call(this,i);this.getTeardownProcess=()=>c.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});this.pageTitleParsed=t,c.static.name="TemplatePreviewDialog",c.static.title="Redirect categorization templates preview",c.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]}]}}Object.assign(c.prototype,OO.ui.ProcessDialog.prototype);class d{async run(){if(this.passesPreChecks()){if(this.redirectTemplates=await this.fetchRedirectTemplates(),this.contentText=document.querySelector("#mw-content-text"),!this.contentText)return mw.notify("redirect-helper: Failed to find content text element!",{type:"error"});if(this.pageTitle=mw.config.get("wgPageName"),this.pageTitleParsed=mw.Title.newFromText(this.pageTitle),!this.pageTitleParsed)return mw.notify("redirect-helper: Failed to parse page title!",{type:"error"});await this.checkPageAndLoad()}}passesPreChecks(){return[mw.config.get("wgNamespaceNumber")>=0,mw.config.get("wgIsProbablyEditable"),mw.config.get("wgIsArticle"),mw.config.get("wgAction")==="view",mw.config.get("wgRevisionId")===mw.config.get("wgCurRevisionId"),!mw.config.get("wgDiffOldId")].every(Boolean)}async fetchRedirectTemplates(){return JSON.parse((await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:"User:Eejit43/scripts/redirect-helper.json"})).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")}async checkPageAndLoad(){const e=await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitle}),i={redirectTemplates:this.redirectTemplates,contentText:this.contentText,pageTitle:this.pageTitle,pageTitleParsed:this.pageTitleParsed};if(e.query.pages[0].missing){const t=new OO.ui.ButtonWidget({id:"create-redirect-button",label:"Create redirect",icon:"articleRedirect",flags:["progressive"]});t.on("click",()=>{t.$element[0].remove(),new u(i,!1).load()}),this.contentText.prepend(t.$element[0])}else if(e.query.pages[0].redirect)new u(i,!0).load();else{const t=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Redirect page","redirect-helper");t.addEventListener("click",a=>{a.preventDefault(),new u(i,!1).load(),window.scrollTo({top:0,behavior:"smooth"}),t.remove()})}}}class u{constructor({redirectTemplates:e,contentText:i,pageTitle:t,pageTitleParsed:a},s){this.needsCheck=!0;this.redirectTemplates=e,this.contentText=i,this.pageTitle=t,this.pageTitleParsed=a,this.exists=s}async load(){mw.util.addCSS(`
#create-redirect-button {
    margin-bottom: 20px;
}

#redirect-helper-box {
    background-color: whitesmoke;
    width: 700px;
    max-width: calc(100% - 50px);
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 20px;
}

#submit-layout {
    margin-top: 10px;
}

#submit-layout > * {
    margin-bottom: 0;
}

.redirect-helper-warning {
    margin-top: 8px;
}`),this.editorBox=new OO.ui.PanelLayout({id:"redirect-helper-box",padded:!0,expanded:!1,framed:!0}),this.pageTitleParsed.isTalkPage()&&(await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].redirect&&this.loadSyncWithMainButton(),this.loadInputElements(),await this.loadSubmitElements(),this.editorBox.$element[0].append(...[this.syncWithMainButton?.$element?.[0],this.redirectInputLayout.$element[0],this.tagSelectLayout.$element[0],this.summaryInputLayout.$element[0],this.submitLayout.$element[0]].filter(Boolean)),this.contentText.prepend(this.editorBox.$element[0]),this.exists&&this.loadExistingData()}async loadSyncWithMainButton(){const e=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].revisions[0].slots.main.content.trim();this.syncWithMainButton=new OO.ui.ButtonWidget({label:"Sync with main page",icon:"link",flags:["progressive"]}),this.syncWithMainButton.on("click",()=>{const i=/^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(e)?.[1];if(!i)return mw.notify("Failed to parse main page content!",{type:"error"});this.redirectInput.setValue(mw.Title.newFromText(i)?.getTalkPage()?.toString()??""),["R from move",...this.redirectTemplates["R from move"]].some(a=>new RegExp(`{{\\s*[${a[0].toLowerCase()}${a[0]}]${a.slice(1)}\\s*(\\||}})`).test(e))&&this.tagSelect.setValue(["R from move"])})}loadInputElements(){this.redirectInput=new p({placeholder:"Target page name",required:!0},this.pageTitleParsed),this.redirectInput.on("change",()=>{let e=this.redirectInput.getValue();e=e.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),e=e.replace(/^:/,""),e.length>0?(this.redirectInput.setValue(e[0].toUpperCase()+e.slice(1).replaceAll("_"," ")),this.submitButton.setDisabled(!1)):this.submitButton.setDisabled(!0),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.redirectInputLayout=new OO.ui.FieldLayout(this.redirectInput,{label:new OO.ui.HtmlSnippet("<b>Redirect target:</b>"),align:"top"}),this.tagSelect=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.keys(this.redirectTemplates).map(e=>({data:e,label:e}))}),this.tagSelect.getMenu().filterMode="substring",this.tagSelect.on("change",()=>{const e=this.tagSelect.getValue().sort((i,t)=>i.toLowerCase().localeCompare(t.toLowerCase()));this.tagSelect.getValue().join(";")!==e.join(";")&&this.tagSelect.setValue(e),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0,this.tagSelect.getValue().length>0?this.previewButton.setDisabled(!1):this.previewButton.setDisabled(!0)}),this.tagSelectLayout=new OO.ui.FieldLayout(this.tagSelect,{label:new OO.ui.HtmlSnippet("<b>Redirect categorization template(s):</b>"),align:"top"}),this.summaryInput=new OO.ui.ComboBoxInputWidget({options:[{data:"Resolve double redirect"},{data:"Resolve self redirect"},{data:"Remove incorrect rcats"}]}),this.summaryInputLayout=new OO.ui.FieldLayout(this.summaryInput,{label:new OO.ui.HtmlSnippet("<b>Summary:</b>"),align:"top"})}async loadSubmitElements(){this.submitButton=new OO.ui.ButtonWidget({classes:["redirect-helper-bottom-element"],label:"Submit",disabled:!0,flags:["progressive"]}),this.submitButton.on("click",()=>this.handleSubmitButtonClick());const e=new OO.ui.WindowManager;document.body.append(e.$element[0]);const i=new c({size:"large"},this.pageTitleParsed);e.addWindows([i]),this.previewButton=new OO.ui.ButtonWidget({classes:["redirect-helper-bottom-element"],label:"Preview templates",disabled:!0}),this.previewButton.on("click",()=>{i.setData(this.tagSelect.getValue()),i.open()}),this.pageTitleParsed.isTalkPage()||(this.talkData=await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitleParsed.getTalkPage().getPrefixedText()}),this.syncTalkCheckbox=new OO.ui.CheckboxInputWidget({selected:!!this.talkData.query.pages[0].redirect}),this.syncTalkCheckboxLayout=new OO.ui.Widget({classes:["redirect-helper-bottom-element"],content:[new OO.ui.FieldLayout(this.syncTalkCheckbox,{label:"Sync talk page",align:"inline"})]})),await this.checkShouldPromptPatrol()&&(this.patrolCheckbox=new OO.ui.CheckboxInputWidget({selected:!0}),this.patrolCheckboxLayout=new OO.ui.Widget({classes:["redirect-helper-bottom-element"],content:[new OO.ui.FieldLayout(this.patrolCheckbox,{label:"Mark as patrolled",align:"inline"})]})),this.submitLayout=new OO.ui.HorizontalLayout({id:"submit-layout",items:[this.submitButton,this.previewButton,this.syncTalkCheckboxLayout,this.patrolCheckboxLayout].filter(Boolean)})}async checkShouldPromptPatrol(){const e=document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");if(e?.click(),e?.click(),mw.config.get("wgNamespaceNumber")!==0)return!1;if(document.querySelector(".patrollink"))return!0;if(document.querySelector("#mwe-pt-mark-as-reviewed-button"))return!0;if(document.querySelector("#mwe-pt-mark-as-unreviewed-button"))return!1;{if(!mw.config.get("wgArticleId")||!(await new mw.Api().get({action:"query",meta:"userinfo",uiprop:"rights"})).query.userinfo.rights.includes("patrol"))return!1;const t=await new mw.Api().get({action:"pagetriagelist",page_id:mw.config.get("wgArticleId")});return t.pagetriagelist.pages[0]?.user_name===mw.config.get("wgUserName")||t.pagetriagelist.result!=="success"||t.pagetriagelist.pages.length===0?!1:!Number.parseInt(t.pagetriagelist.pages[0]?.patrol_status)}}updateSummary(){const e=this.redirectInput.getValue().trim();if(!e)this.summaryInput.$tabIndexed[0].placeholder="";else if(this.exists){const i=e!==this.oldRedirectTarget?.replaceAll("_"," "),t=this.tagSelect.getValue().join(";")!==this.oldRedirectTags?.join(";");i&&t?this.summaryInput.$tabIndexed[0].placeholder=`Retarget redirect to [[${e}]] and change categorization templates`:i?this.summaryInput.$tabIndexed[0].placeholder=`Retarget redirect to [[${e}]]`:t?this.summaryInput.$tabIndexed[0].placeholder="Change categorization templates":this.summaryInput.$tabIndexed[0].placeholder="Perform redirect cleanup"}else this.summaryInput.$tabIndexed[0].placeholder=`Create redirect to [[${e}]]`}async loadExistingData(){const e=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();this.oldRedirectTarget=/^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(e)?.[1],this.oldRedirectTags=Object.entries(this.redirectTemplates).map(([t,a])=>[t,...a].some(s=>new RegExp(`{{\\s*[${s[0].toLowerCase()}${s[0]}]${s.slice(1)}\\s*(\\||}})`).test(e))?t:null).filter(Boolean).sort((t,a)=>t.toLowerCase().localeCompare(a.toLowerCase()));const i=Object.entries(this.redirectTemplates).flatMap(([t,a])=>[t,...a]).map(t=>new RegExp(`{{\\s*[${t[0].toLowerCase()}${t[0]}]${t.slice(1)}\\s*(\\||}})`).test(e)?t:null).filter(Boolean);this.oldRedirectTagData=Object.fromEntries(i.map(t=>{const a=new RegExp(`{{\\s*[${t[0].toLowerCase()}${t[0]}]${t.slice(1)}\\|?(.*?)\\s*}}`).exec(e),s=Object.entries(this.redirectTemplates).find(([r,n])=>[r,...n].includes(t))?.[0];return a?[s,a[1]]:null}).filter(Boolean)),this.oldStrayText=[e.match(/{{short description\|.*?}}/i)?.[0],e.match(/{{DISPLAYTITLE:.*?}}/)?.[0],e.match(/{{italic title\|?.*?}}/i)?.[0],e.match(/{{DEFAULTSORT:.*?}}/)?.[0],e.match(/{{title language\|.*?}}/)?.[0],...e.match(/\[\[[Cc]ategory:.+?]]/g)??[]].filter(Boolean).join(`
`),this.oldRedirectTarget?this.redirectInput.setValue(this.oldRedirectTarget.replaceAll("_"," ")):mw.notify("Could not find redirect target!",{type:"error"}),this.tagSelect.setValue(this.oldRedirectTags),this.updateSummary()}async validateSubmission(){const e=[],i=this.redirectInput.getValue().trim();/^\s*[^[\]{|}]+\s*$/.test(i)||e.push({title:i,message:"is not a valid page title!"});try{this.parsedDestination=mw.Title.newFromText(i)}catch{e.length===0&&e.push({title:i,message:"is not a valid page title!"})}!this.parsedDestination&&e.length===0&&e.push({title:i,message:"is not a valid page title!"}),this.parsedDestination?.toString()===this.pageTitleParsed.toString()&&e.push({message:"cannot redirect to itself!"});const t=await new mw.Api().get({action:"query",formatversion:2,prop:"pageprops",titles:i}).catch(s=>(s==="missingtitle"?e.push({title:i,message:"does not exist!"}):e.push({title:i,message:`was not able to be fetched from the API (${s})!`}),null)),a=await new mw.Api().get({action:"parse",page:i,prop:"sections",redirects:"1"});if(a.parse.redirects?.[0]){const s=a.parse.redirects[0].to+(a.parse.redirects[0].tofragment?`#${a.parse.redirects[0].tofragment}`:"");e.push({title:i,message:`is a redirect to <a href="${mw.util.getUrl(s)}" target="_blank">${s}</a>. Retarget to that page instead, as double redirects aren't allowed.`})}if(i.split("#").length>1)if(a.parse.sections.find(r=>r.line===i.split("#")[1]))this.tagSelect.getValue().includes("R to anchor")&&e.push({message:"is tagged as a redirect to an anchor, but it is actually a redirect to a section!"}),this.tagSelect.getValue().includes("R to section")||e.push({message:"is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!"});else{const r=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.parsedDestination.toString()})).query.pages[0].revisions[0].slots.main.content;[...r.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map(o=>o.split("|").map(l=>l.trim()))?.flat()??[],...r.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(o=>o.split("|").map(l=>l.trim()).filter(l=>!/^text\s*?=/.test(l)))?.flat()??[],...r.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map(o=>o.trim())??[]].includes(i.split("#")[1])?(this.tagSelect.getValue().includes("R to section")&&e.push({message:"is tagged as a redirect to a section, but it is actually a redirect to an anchor!"}),this.tagSelect.getValue().includes("R to anchor")||e.push({message:"is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!"})):e.push({message:`is a redirect to <a href="${mw.util.getUrl(i)}" target="_blank">${i}</a>, but that section or anchor does not exist!`})}i.split("#").length===1&&(this.tagSelect.getValue().includes("R to section")||this.tagSelect.getValue().includes("R to anchor"))&&e.push({message:"is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!"}),t.query.pages[0].pageprops&&"disambiguation"in t.query.pages[0].pageprops&&!["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation","R from incorrect disambiguation","R from other disambiguation"].some(s=>this.tagSelect.getValue().includes(s))&&e.push({message:"is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!"}),t.query.pages[0].pageprops&&!("disambiguation"in t.query.pages[0].pageprops)&&["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation"].some(s=>this.tagSelect.getValue().includes(s))&&e.push({message:"is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!"}),this.tagSelect.getValue().includes("R to disambiguation page")&&!this.pageTitleParsed.getMainText().endsWith(" (disambiguation)")&&e.push({message:'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'});for(const s of["R semi-protected","R extended-protected","R template-protected","R fully protected"])this.tagSelect.getValue().includes(s)&&e.push({message:`is tagged with unnecessarily tagged with <code>{{${s}}}</code> which will be duplicated by the redirect category shell!`});return this.syncTalkCheckbox?.isSelected()&&!this.talkData.query.pages[0].missing&&!this.talkData.query.pages[0].redirect&&e.push({title:this.pageTitleParsed.getTalkPage().getPrefixedText(),message:"exists, but is not a redirect!"}),e}async handleSubmitButtonClick(){for(const s of[this.redirectInput,this.tagSelect,this.summaryInput,this.submitButton,this.previewButton,this.syncTalkCheckbox,this.patrolCheckbox].filter(Boolean))s.setDisabled(!0);this.submitButton.setLabel("Checking target validity...");let e=[];if(this.needsCheck?e=await this.validateSubmission():this.parsedDestination=mw.Title.newFromText(this.redirectInput.getValue()),e.length>0){for(const s of document.querySelectorAll(".redirect-helper-warning"))s.remove();for(const{title:s,message:r}of e){const n=new OO.ui.HtmlSnippet(`${s?`<a href="${mw.util.getUrl(s)}" target="_blank">${s}</a>`:"This page"} ${r} Click again without making changes to submit anyway.`),o=new OO.ui.MessageWidget({type:"error",classes:["redirect-helper-warning"],inline:!0,label:n});this.editorBox.$element[0].append(o.$element[0])}for(const s of[this.redirectInput,this.tagSelect,this.summaryInput,this.submitButton,this.syncTalkCheckbox,this.patrolCheckbox].filter(Boolean))s.setDisabled(!1);this.tagSelect.getValue().length>0&&this.previewButton.setDisabled(!1),this.submitButton.setLabel("Submit anyway"),this.needsCheck=!1;return}this.submitButton.setLabel(`${this.exists?"Editing":"Creating"} redirect...`);const i=[`#REDIRECT [[${this.redirectInput.getValue().trim()}]]`,this.tagSelect.getValue().length>0?`{{Redirect category shell|
${this.tagSelect.getValue().map(s=>`{{${s}${this.oldRedirectTagData?.[s]?`|${this.oldRedirectTagData[s]}`:""}}}`).join(`
`)}
}}`:null,this.oldStrayText].filter(Boolean).join(`

`),t=(this.summaryInput.getValue()||this.summaryInput.$tabIndexed[0].placeholder)+" (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";if(await new mw.Api().edit(this.pageTitle,()=>({text:i,summary:t})).catch((s,r)=>s==="nocreate-missing"?new mw.Api().create(this.pageTitle,{summary:t},i).catch((n,o)=>{mw.notify(`Error creating ${this.pageTitle}: ${o?.error.info??"Unknown error"} (${n})`,{type:"error"})}):(mw.notify(`Error editing or creating ${this.pageTitle}: ${r?.error.info??"Unknown error"} (${s})`,{type:"error"}),null))){if(mw.notify(`Redirect ${this.exists?"edited":"created"} successfully!`,{type:"success"}),this.syncTalkCheckbox?.isSelected()){this.submitButton.setLabel("Editing talk page...");const s=this.tagSelect.getValue().includes("R from move"),r=[`#REDIRECT [[${this.parsedDestination.getTalkPage().getPrefixedText()}]]`,s?`{{Redirect category shell|
{{R from move}}
}}`:null].filter(Boolean).join(`

`),n=this.pageTitleParsed.getTalkPage().getPrefixedText();if(!await new mw.Api().edit(n,()=>({text:r,summary:"Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])"})).catch((l,m)=>l==="nocreate-missing"?new mw.Api().create(n,{summary:"Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])"},r).catch((h,f)=>{mw.notify(`Error creating ${n}: ${f?.error.info??"Unknown error"} (${h})`,{type:"error"})}):(mw.notify(`Error editing or creating ${n}: ${m?.error.info??"Unknown error"} (${l})`,{type:"error"}),null)))return;mw.notify("Talk page synced successfully!",{type:"success"})}if(this.patrolCheckbox?.isSelected()){this.submitButton.setLabel("Patrolling redirect...");const s=document.querySelector(".patrollink a"),r=document.querySelector("#mwe-pt-mark-as-reviewed-button");s?await new mw.Api().postWithToken("patrol",{action:"patrol",rcid:new URL(s.href).searchParams.get("rcid")}).catch((o,l)=>(mw.notify(`Error patrolling ${this.pageTitle} via API: ${l?.error.info??"Unknown error"} (${o})`,{type:"error"}),null))&&mw.notify("Redirect patrolled successfully!",{type:"success"}):r?(r.click(),mw.notify("Redirect patrolled successfully!",{type:"success"})):mw.notify("Page curation toolbar not found, redirect cannot be patrolled!",{type:"error"})}this.submitButton.setLabel("Complete, reloading..."),window.location.href=mw.util.getUrl(this.pageTitle,{redirect:"no"})}}}new d().run()});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9yZWRpcmVjdC1oZWxwZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwaVBhcnNlUGFyYW1zIH0gZnJvbSAndHlwZXMtbWVkaWF3aWtpL2FwaV9wYXJhbXMnO1xuaW1wb3J0IHsgQWxsUGFnZXNHZW5lcmF0b3JSZXN1bHQsIE1lZGlhV2lraURhdGFFcnJvciwgUGFnZUluZm9SZXN1bHQsIFBhZ2VQYXJzZVJlc3VsdCwgUGFnZVJldmlzaW9uc1Jlc3VsdCwgUGFnZVRyaWFnZUxpc3RSZXNwb25zZSwgUGFnZXByb3BzUmVzdWx0LCBVc2VyUGVybWlzc2lvbnNSZXNwb25zZSB9IGZyb20gJy4uL2dsb2JhbC10eXBlcyc7XG5cbm13LmxvYWRlci51c2luZyhbJ21lZGlhd2lraS51dGlsJywgJ29vanMtdWktY29yZScsICdvb2pzLXVpLXdpZGdldHMnLCAnb29qcy11aS13aW5kb3dzJywgJ29vanMtdWkuc3R5bGVzLmljb25zLWNvbnRlbnQnLCAnb29qcy11aS5zdHlsZXMuaWNvbnMtZWRpdGluZy1jb3JlJ10sICgpID0+IHtcbiAgICAvLyBTZXR1cCBSZWRpcmVjdElucHV0V2lkZ2V0XG4gICAgaW50ZXJmYWNlIFJlZGlyZWN0SW5wdXRXaWRnZXRDb25maWcgZXh0ZW5kcyBPTy51aS5UZXh0SW5wdXRXaWRnZXQuQ29uZmlnT3B0aW9ucywgT08udWkubWl4aW4uTG9va3VwRWxlbWVudC5Db25maWdPcHRpb25zIHt9XG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGlzIGEgdGl0bGUgbG9va3VwIGVsZW1lbnQuXG4gICAgICovXG4gICAgY2xhc3MgUmVkaXJlY3RJbnB1dFdpZGdldCBleHRlbmRzIE9PLnVpLlRleHRJbnB1dFdpZGdldCB7XG4gICAgICAgIHByaXZhdGUgcGFnZVRpdGxlUGFyc2VkOiBtdy5UaXRsZTtcblxuICAgICAgICBjb25zdHJ1Y3Rvcihjb25maWc6IFJlZGlyZWN0SW5wdXRXaWRnZXRDb25maWcsIHBhZ2VUaXRsZVBhcnNlZDogbXcuVGl0bGUpIHtcbiAgICAgICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgICAgICAgICBPTy51aS5taXhpbi5Mb29rdXBFbGVtZW50LmNhbGwodGhpcyBhcyB1bmtub3duIGFzIE9PLnVpLm1peGluLkxvb2t1cEVsZW1lbnQsIGNvbmZpZyk7XG5cbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlUGFyc2VkID0gcGFnZVRpdGxlUGFyc2VkO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0TG9va3VwUmVxdWVzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgY29uc3QgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG5cbiAgICAgICAgICAgIGlmICghdmFsdWUpIGRlZmVycmVkLnJlc29sdmUoW10pO1xuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUuaW5jbHVkZXMoJyMnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gdmFsdWUuc3BsaXQoJyMnKVswXTtcblxuICAgICAgICAgICAgICAgIG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0KHsgYWN0aW9uOiAncGFyc2UnLCBwYWdlOiB0aXRsZSwgcHJvcDogJ3NlY3Rpb25zJywgcmVkaXJlY3RzOiAnMScgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQ6IFBhZ2VQYXJzZVJlc3VsdCB8IG51bGwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVkU2VjdGlvbnMgPSByZXN1bHQucGFyc2Uuc2VjdGlvbnMuZmlsdGVyKChzZWN0aW9uKSA9PiBzZWN0aW9uLmxpbmUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHZhbHVlLnNwbGl0KCcjJylbMV0udG9Mb3dlckNhc2UoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUobWF0Y2hlZFNlY3Rpb25zLm1hcCgoc2VjdGlvbikgPT4gKHsgZGF0YTogYCR7cmVzdWx0LnBhcnNlLnRpdGxlfSMke3NlY3Rpb24ubGluZX1gLCBsYWJlbDogYCR7cmVzdWx0LnBhcnNlLnRpdGxlfSMke3NlY3Rpb24ubGluZX1gIH0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZGVmZXJyZWQucmVzb2x2ZShbXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRUaXRsZSA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAgICAgLmdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FwbGltaXQ6IDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FwbmFtZXNwYWNlOiBwYXJzZWRUaXRsZT8uZ2V0TmFtZXNwYWNlSWQoKSA/PyAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FwcHJlZml4OiBwYXJzZWRUaXRsZT8uZ2V0TWFpblRleHQoKSA/PyB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRvcjogJ2FsbHBhZ2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6ICdpbmZvfHBhZ2Vwcm9wcycsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBudWxsKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0OiBBbGxQYWdlc0dlbmVyYXRvclJlc3VsdCB8IG51bGwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnF1ZXJ5Py5wYWdlcyAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQucXVlcnkucGFnZXMgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHBhZ2UpID0+IHBhZ2UudGl0bGUgIT09IHRoaXMucGFnZVRpdGxlUGFyc2VkLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChwYWdlKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBhZ2UudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5ldyBPTy51aS5IdG1sU25pcHBldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7cGFnZS50aXRsZX0ke3BhZ2UucGFnZXByb3BzICYmICdkaXNhbWJpZ3VhdGlvbicgaW4gcGFnZS5wYWdlcHJvcHMgPyAnIDxpPihkaXNhbWJpZ3VhdGlvbik8L2k+JyA6ICcnfSR7J3JlZGlyZWN0JyBpbiBwYWdlID8gJyA8aT4ocmVkaXJlY3QpPC9pPicgOiAnJ31gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgZGVmZXJyZWQucmVzb2x2ZShbXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSh7IGFib3J0KCkge30gfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgZ2V0TG9va3VwQ2FjaGVEYXRhRnJvbVJlc3BvbnNlID0gPFQ+KHJlc3BvbnNlOiBUW10gfCBudWxsIHwgdW5kZWZpbmVkKSA9PiByZXNwb25zZSA/PyBbXTtcblxuICAgICAgICBnZXRMb29rdXBNZW51T3B0aW9uc0Zyb21EYXRhID0gKGRhdGE6IHsgZGF0YTogc3RyaW5nOyBsYWJlbDogc3RyaW5nIH1bXSkgPT4gZGF0YS5tYXAoKHsgZGF0YSwgbGFiZWwgfSkgPT4gbmV3IE9PLnVpLk1lbnVPcHRpb25XaWRnZXQoeyBkYXRhLCBsYWJlbCB9KSk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihSZWRpcmVjdElucHV0V2lkZ2V0LnByb3RvdHlwZSwgT08udWkubWl4aW4uTG9va3VwRWxlbWVudC5wcm90b3R5cGUpO1xuXG4gICAgLy8gU2V0dXAgVGVtcGxhdGVQcmV2aWV3RGlhbG9nXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGlzIGEgZGlhbG9nIHVzZWQgZm9yIHByZXZpZXdpbmcgdGVtcGxhdGVzLlxuICAgICAqL1xuICAgIGNsYXNzIFRlbXBsYXRlUHJldmlld0RpYWxvZyBleHRlbmRzIE9PLnVpLlByb2Nlc3NEaWFsb2cge1xuICAgICAgICBwcml2YXRlIHBhZ2VUaXRsZVBhcnNlZDogbXcuVGl0bGU7XG5cbiAgICAgICAgY29uc3RydWN0b3IoY29uZmlnOiBPTy51aS5Qcm9jZXNzRGlhbG9nLkNvbmZpZ09wdGlvbnMsIHBhZ2VUaXRsZVBhcnNlZDogbXcuVGl0bGUpIHtcbiAgICAgICAgICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlUGFyc2VkID0gcGFnZVRpdGxlUGFyc2VkO1xuXG4gICAgICAgICAgICBUZW1wbGF0ZVByZXZpZXdEaWFsb2cuc3RhdGljLm5hbWUgPSAnVGVtcGxhdGVQcmV2aWV3RGlhbG9nJztcbiAgICAgICAgICAgIFRlbXBsYXRlUHJldmlld0RpYWxvZy5zdGF0aWMudGl0bGUgPSAnUmVkaXJlY3QgY2F0ZWdvcml6YXRpb24gdGVtcGxhdGVzIHByZXZpZXcnO1xuICAgICAgICAgICAgVGVtcGxhdGVQcmV2aWV3RGlhbG9nLnN0YXRpYy5hY3Rpb25zID0gW3sgYWN0aW9uOiAnY2FuY2VsJywgbGFiZWw6ICdDbG9zZScsIGZsYWdzOiBbJ3NhZmUnLCAnY2xvc2UnXSB9XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFNldHVwUHJvY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBUZW1wbGF0ZVByZXZpZXdEaWFsb2cuc3VwZXIucHJvdG90eXBlLmdldFNldHVwUHJvY2Vzcy5jYWxsKHRoaXMpLm5leHQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc3RDb25maWc6IEFwaVBhcnNlUGFyYW1zICYgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHN0cmluZ1tdIHwgbnVtYmVyW10+ID0ge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdwYXJzZScsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHZlcnNpb246ICcyJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudG1vZGVsOiAnd2lraXRleHQnLFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiBbJ3RleHQnLCAnY2F0ZWdvcmllc2h0bWwnXSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMucGFnZVRpdGxlUGFyc2VkLmdldFByZWZpeGVkRGIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogYHt7UmVkaXJlY3QgY2F0ZWdvcnkgc2hlbGx8JHsodGhpcy5nZXREYXRhKCkgYXMgc3RyaW5nW10pLm1hcCgodGFnKSA9PiBge3ske3RhZ319fWApLmpvaW4oJycpfX19YCxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBtdy5BcGkoKS5wb3N0KHBvc3RDb25maWcpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWdzQ29udGVudCA9IChyZXN1bHQgYXMgeyBwYXJzZTogeyB0ZXh0OiBzdHJpbmcgfSB9KS5wYXJzZS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXRlZ29yaWVzQ29udGVudCA9IChyZXN1bHQgYXMgeyBwYXJzZTogeyBjYXRlZ29yaWVzaHRtbDogc3RyaW5nIH0gfSkucGFyc2UuY2F0ZWdvcmllc2h0bWw7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFuZWxMYXlvdXQgPSBuZXcgT08udWkuUGFuZWxMYXlvdXQoeyBwYWRkZWQ6IHRydWUsIGV4cGFuZGVkOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcGFuZWxMYXlvdXQuJGVsZW1lbnQuYXBwZW5kKHRhZ3NDb250ZW50LCBjYXRlZ29yaWVzQ29udGVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgKHRoaXMgYXMgdW5rbm93biBhcyB7ICRib2R5OiBKUXVlcnkgfSkuJGJvZHkuYXBwZW5kKHBhbmVsTGF5b3V0LiRlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGdldEFjdGlvblByb2Nlc3MgPSAoYWN0aW9uOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb25cbiAgICAgICAgICAgICAgICA/IG5ldyBPTy51aS5Qcm9jZXNzKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldE1hbmFnZXIoKS5jbG9zZVdpbmRvdyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgOiBUZW1wbGF0ZVByZXZpZXdEaWFsb2cuc3VwZXIucHJvdG90eXBlLmdldEFjdGlvblByb2Nlc3MuY2FsbCh0aGlzLCBhY3Rpb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGdldFRlYXJkb3duUHJvY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBUZW1wbGF0ZVByZXZpZXdEaWFsb2cuc3VwZXIucHJvdG90eXBlLmdldFRlYXJkb3duUHJvY2Vzcy5jYWxsKHRoaXMpLm5leHQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICh0aGlzIGFzIHVua25vd24gYXMgeyAkYm9keTogSlF1ZXJ5IH0pLiRib2R5LmVtcHR5KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKFRlbXBsYXRlUHJldmlld0RpYWxvZy5wcm90b3R5cGUsIE9PLnVpLlByb2Nlc3NEaWFsb2cucHJvdG90eXBlKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgaGFuZGxlcyB0aGUgZW50aXJlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHJlZGlyZWN0LWhlbHBlciBzY3JpcHQuXG4gICAgICovXG4gICAgY2xhc3MgUmVkaXJlY3RIZWxwZXIge1xuICAgICAgICBwcml2YXRlIHJlZGlyZWN0VGVtcGxhdGVzITogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+O1xuICAgICAgICBwcml2YXRlIGNvbnRlbnRUZXh0ITogSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIHByaXZhdGUgcGFnZVRpdGxlITogc3RyaW5nO1xuICAgICAgICBwcml2YXRlIHBhZ2VUaXRsZVBhcnNlZCE6IG13LlRpdGxlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSdW5zIHRoZSByZWRpcmVjdCBoZWxwZXIuXG4gICAgICAgICAqL1xuICAgICAgICBhc3luYyBydW4oKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFzc2VzUHJlQ2hlY2tzKCkpIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFRlbXBsYXRlcyA9IGF3YWl0IHRoaXMuZmV0Y2hSZWRpcmVjdFRlbXBsYXRlcygpO1xuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213LWNvbnRlbnQtdGV4dCcpIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRUZXh0KSByZXR1cm4gbXcubm90aWZ5KCdyZWRpcmVjdC1oZWxwZXI6IEZhaWxlZCB0byBmaW5kIGNvbnRlbnQgdGV4dCBlbGVtZW50IScsIHsgdHlwZTogJ2Vycm9yJyB9KTtcblxuICAgICAgICAgICAgdGhpcy5wYWdlVGl0bGUgPSBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyk7XG5cbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlUGFyc2VkID0gbXcuVGl0bGUubmV3RnJvbVRleHQodGhpcy5wYWdlVGl0bGUpITtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYWdlVGl0bGVQYXJzZWQpIHJldHVybiBtdy5ub3RpZnkoJ3JlZGlyZWN0LWhlbHBlcjogRmFpbGVkIHRvIHBhcnNlIHBhZ2UgdGl0bGUhJywgeyB0eXBlOiAnZXJyb3InIH0pO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoZWNrUGFnZUFuZExvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3MgaWYgdGhlIHBhZ2UgcGFzc2VzIHByZSBjaGVja3MuXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIHBhc3Nlc1ByZUNoZWNrcygpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgbXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA+PSAwLCAvLyBJcyBub3QgdmlydHVhbCBuYW1lc3BhY2VcbiAgICAgICAgICAgICAgICBtdy5jb25maWcuZ2V0KCd3Z0lzUHJvYmFibHlFZGl0YWJsZScpLCAvLyBQYWdlIGlzIGVkaXRhYmxlXG4gICAgICAgICAgICAgICAgbXcuY29uZmlnLmdldCgnd2dJc0FydGljbGUnKSwgLy8gVmlld2luZyB0aGUgY29udGVudCBvZiBhIHBhZ2VcbiAgICAgICAgICAgICAgICBtdy5jb25maWcuZ2V0KCd3Z0FjdGlvbicpID09PSAndmlldycsIC8vIFZpZXdpbmcgdGhlIHBhZ2UgKG5vdCBlZGl0aW5nKVxuICAgICAgICAgICAgICAgIG13LmNvbmZpZy5nZXQoJ3dnUmV2aXNpb25JZCcpID09PSBtdy5jb25maWcuZ2V0KCd3Z0N1clJldmlzaW9uSWQnKSwgLy8gVmlld2luZyB0aGUgY3VycmVudCByZXZpc2lvblxuICAgICAgICAgICAgICAgICFtdy5jb25maWcuZ2V0KCd3Z0RpZmZPbGRJZCcpLCAvLyBOb3Qgdmlld2luZyBhIGRpZmZcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIHJldHVybiBjb25kaXRpb25zLmV2ZXJ5KEJvb2xlYW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoZXMgdGhlIHJlZGlyZWN0IHRlbXBsYXRlcy5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgYXN5bmMgZmV0Y2hSZWRpcmVjdFRlbXBsYXRlcygpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnZwcm9wOiAnY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBydnNsb3RzOiAnKicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZXM6ICdVc2VyOkVlaml0NDMvc2NyaXB0cy9yZWRpcmVjdC1oZWxwZXIuanNvbicsXG4gICAgICAgICAgICAgICAgICAgIH0pKSBhcyBQYWdlUmV2aXNpb25zUmVzdWx0XG4gICAgICAgICAgICAgICAgKS5xdWVyeS5wYWdlcz8uWzBdPy5yZXZpc2lvbnM/LlswXT8uc2xvdHM/Lm1haW4/LmNvbnRlbnQgfHwgJ3t9JyxcbiAgICAgICAgICAgICkgYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nW10+O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrcyBhIHBhZ2UncyBzdGF0dXMgYW5kIGxvYWRzIHRoZSBoZWxwZXIgYXBwcm9wcmlhdGVseS5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgYXN5bmMgY2hlY2tQYWdlQW5kTG9hZCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2VJbmZvID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIGZvcm1hdHZlcnNpb246IDIsIHByb3A6ICdpbmZvJywgdGl0bGVzOiB0aGlzLnBhZ2VUaXRsZSB9KSkgYXMgUGFnZUluZm9SZXN1bHQ7XG5cbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZ0luZm8gPSB7IHJlZGlyZWN0VGVtcGxhdGVzOiB0aGlzLnJlZGlyZWN0VGVtcGxhdGVzLCBjb250ZW50VGV4dDogdGhpcy5jb250ZW50VGV4dCwgcGFnZVRpdGxlOiB0aGlzLnBhZ2VUaXRsZSwgcGFnZVRpdGxlUGFyc2VkOiB0aGlzLnBhZ2VUaXRsZVBhcnNlZCB9O1xuXG4gICAgICAgICAgICBpZiAocGFnZUluZm8ucXVlcnkucGFnZXNbMF0ubWlzc2luZykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IG5ldyBPTy51aS5CdXR0b25XaWRnZXQoeyBpZDogJ2NyZWF0ZS1yZWRpcmVjdC1idXR0b24nLCBsYWJlbDogJ0NyZWF0ZSByZWRpcmVjdCcsIGljb246ICdhcnRpY2xlUmVkaXJlY3QnLCBmbGFnczogWydwcm9ncmVzc2l2ZSddIH0pO1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi4kZWxlbWVudFswXS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJlZGlyZWN0SGVscGVyRGlhbG9nKGRpYWxvZ0luZm8sIGZhbHNlKS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRUZXh0LnByZXBlbmQoYnV0dG9uLiRlbGVtZW50WzBdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFnZUluZm8ucXVlcnkucGFnZXNbMF0ucmVkaXJlY3QpIG5ldyBSZWRpcmVjdEhlbHBlckRpYWxvZyhkaWFsb2dJbmZvLCB0cnVlKS5sb2FkKCk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3J0bGV0TGluayA9IG13LnV0aWwuYWRkUG9ydGxldExpbmsobXcuY29uZmlnLmdldCgnc2tpbicpID09PSAnbWluZXJ2YScgPyAncC10YicgOiAncC1jYWN0aW9ucycsICcjJywgJ1JlZGlyZWN0IHBhZ2UnLCAncmVkaXJlY3QtaGVscGVyJykhO1xuICAgICAgICAgICAgICAgIHBvcnRsZXRMaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFJlZGlyZWN0SGVscGVyRGlhbG9nKGRpYWxvZ0luZm8sIGZhbHNlKS5sb2FkKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKHsgdG9wOiAwLCBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcG9ydGxldExpbmsucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGhhbmRsZXMgdGhlIGRpYWxvZyBwb3J0aW9uIG9mIHJlZGlyZWN0LWhlbHBlciBzY3JpcHQuXG4gICAgICovXG4gICAgY2xhc3MgUmVkaXJlY3RIZWxwZXJEaWFsb2cge1xuICAgICAgICAvLyBDcmVhdGVkIGluIGNvbnN0cnVjdG9yXG4gICAgICAgIHByaXZhdGUgcmVkaXJlY3RUZW1wbGF0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPjtcbiAgICAgICAgcHJpdmF0ZSBjb250ZW50VGV4dDogSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIHByaXZhdGUgcGFnZVRpdGxlOiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgcGFnZVRpdGxlUGFyc2VkOiBtdy5UaXRsZTtcblxuICAgICAgICBwcml2YXRlIGV4aXN0czogYm9vbGVhbjtcblxuICAgICAgICAvLyBVc2VkIGR1cmluZyBydW4oKVxuICAgICAgICBwcml2YXRlIG5lZWRzQ2hlY2sgPSB0cnVlO1xuXG4gICAgICAgIHByaXZhdGUgZWRpdG9yQm94ITogT08udWkuUGFuZWxMYXlvdXQ7XG4gICAgICAgIHByaXZhdGUgc3luY1dpdGhNYWluQnV0dG9uPzogT08udWkuQnV0dG9uV2lkZ2V0O1xuICAgICAgICBwcml2YXRlIHJlZGlyZWN0SW5wdXQhOiBSZWRpcmVjdElucHV0V2lkZ2V0O1xuICAgICAgICBwcml2YXRlIHJlZGlyZWN0SW5wdXRMYXlvdXQhOiBPTy51aS5GaWVsZExheW91dDtcbiAgICAgICAgcHJpdmF0ZSB0YWdTZWxlY3QhOiBPTy51aS5NZW51VGFnTXVsdGlzZWxlY3RXaWRnZXQ7XG4gICAgICAgIHByaXZhdGUgdGFnU2VsZWN0TGF5b3V0ITogT08udWkuRmllbGRMYXlvdXQ7XG4gICAgICAgIHByaXZhdGUgc3VtbWFyeUlucHV0ITogT08udWkuQ29tYm9Cb3hJbnB1dFdpZGdldDtcbiAgICAgICAgcHJpdmF0ZSBzdW1tYXJ5SW5wdXRMYXlvdXQhOiBPTy51aS5GaWVsZExheW91dDtcbiAgICAgICAgcHJpdmF0ZSBzdWJtaXRCdXR0b24hOiBPTy51aS5CdXR0b25XaWRnZXQ7XG4gICAgICAgIHByaXZhdGUgcHJldmlld0J1dHRvbiE6IE9PLnVpLkJ1dHRvbldpZGdldDtcbiAgICAgICAgcHJpdmF0ZSBzeW5jVGFsa0NoZWNrYm94PzogT08udWkuQ2hlY2tib3hJbnB1dFdpZGdldDtcbiAgICAgICAgcHJpdmF0ZSBzeW5jVGFsa0NoZWNrYm94TGF5b3V0PzogT08udWkuV2lkZ2V0O1xuICAgICAgICBwcml2YXRlIHBhdHJvbENoZWNrYm94PzogT08udWkuQ2hlY2tib3hJbnB1dFdpZGdldDtcbiAgICAgICAgcHJpdmF0ZSBwYXRyb2xDaGVja2JveExheW91dD86IE9PLnVpLldpZGdldDtcbiAgICAgICAgcHJpdmF0ZSBzdWJtaXRMYXlvdXQhOiBPTy51aS5Ib3Jpem9udGFsTGF5b3V0O1xuXG4gICAgICAgIHByaXZhdGUgdGFsa0RhdGE/OiBQYWdlSW5mb1Jlc3VsdDtcblxuICAgICAgICBwcml2YXRlIG9sZFJlZGlyZWN0VGFyZ2V0Pzogc3RyaW5nO1xuICAgICAgICBwcml2YXRlIG9sZFJlZGlyZWN0VGFncz86IHN0cmluZ1tdO1xuICAgICAgICBwcml2YXRlIG9sZFJlZGlyZWN0VGFnRGF0YT86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gICAgICAgIHByaXZhdGUgb2xkU3RyYXlUZXh0Pzogc3RyaW5nO1xuXG4gICAgICAgIHByaXZhdGUgcGFyc2VkRGVzdGluYXRpb24hOiBtdy5UaXRsZSB8IG51bGw7XG5cbiAgICAgICAgY29uc3RydWN0b3IoXG4gICAgICAgICAgICB7IHJlZGlyZWN0VGVtcGxhdGVzLCBjb250ZW50VGV4dCwgcGFnZVRpdGxlLCBwYWdlVGl0bGVQYXJzZWQgfTogeyByZWRpcmVjdFRlbXBsYXRlczogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+OyBjb250ZW50VGV4dDogSFRNTERpdkVsZW1lbnQ7IHBhZ2VUaXRsZTogc3RyaW5nOyBwYWdlVGl0bGVQYXJzZWQ6IG13LlRpdGxlIH0sXG4gICAgICAgICAgICBleGlzdHM6IGJvb2xlYW4sXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFRlbXBsYXRlcyA9IHJlZGlyZWN0VGVtcGxhdGVzO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50VGV4dCA9IGNvbnRlbnRUZXh0O1xuICAgICAgICAgICAgdGhpcy5wYWdlVGl0bGUgPSBwYWdlVGl0bGU7XG4gICAgICAgICAgICB0aGlzLnBhZ2VUaXRsZVBhcnNlZCA9IHBhZ2VUaXRsZVBhcnNlZDtcblxuICAgICAgICAgICAgdGhpcy5leGlzdHMgPSBleGlzdHM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTG9hZHMgdGhlIHJlZGlyZWN0LWhlbHBlciBkaWFsb2cgaW50byB0aGUgcGFnZS5cbiAgICAgICAgICovXG4gICAgICAgIGFzeW5jIGxvYWQoKSB7XG4gICAgICAgICAgICBtdy51dGlsLmFkZENTUyhgXG4jY3JlYXRlLXJlZGlyZWN0LWJ1dHRvbiB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbn1cblxuI3JlZGlyZWN0LWhlbHBlci1ib3gge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XG4gICAgd2lkdGg6IDcwMHB4O1xuICAgIG1heC13aWR0aDogY2FsYygxMDAlIC0gNTBweCk7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG59XG5cbiNzdWJtaXQtbGF5b3V0IHtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4jc3VibWl0LWxheW91dCA+ICoge1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG59XG5cbi5yZWRpcmVjdC1oZWxwZXItd2FybmluZyB7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xufWApO1xuXG4gICAgICAgICAgICAvKiBMb2FkIGVsZW1lbnRzICovXG4gICAgICAgICAgICB0aGlzLmVkaXRvckJveCA9IG5ldyBPTy51aS5QYW5lbExheW91dCh7IGlkOiAncmVkaXJlY3QtaGVscGVyLWJveCcsIHBhZGRlZDogdHJ1ZSwgZXhwYW5kZWQ6IGZhbHNlLCBmcmFtZWQ6IHRydWUgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBhZ2VUaXRsZVBhcnNlZC5pc1RhbGtQYWdlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYWluUGFnZURhdGEgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3F1ZXJ5JywgZm9ybWF0dmVyc2lvbjogMiwgcHJvcDogJ2luZm8nLCB0aXRsZXM6IHRoaXMucGFnZVRpdGxlUGFyc2VkLmdldFN1YmplY3RQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpIH0pKSBhcyBQYWdlSW5mb1Jlc3VsdDtcblxuICAgICAgICAgICAgICAgIGlmIChtYWluUGFnZURhdGEucXVlcnkucGFnZXNbMF0ucmVkaXJlY3QpIHRoaXMubG9hZFN5bmNXaXRoTWFpbkJ1dHRvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxvYWRJbnB1dEVsZW1lbnRzKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRTdWJtaXRFbGVtZW50cygpO1xuXG4gICAgICAgICAgICAvKiBBZGQgZWxlbWVudHMgdG8gc2NyZWVuIGFuZCBsb2FkIGRhdGEgKGlmIGFwcGxpY2FibGUpICovXG4gICAgICAgICAgICB0aGlzLmVkaXRvckJveC4kZWxlbWVudFswXS5hcHBlbmQoXG4gICAgICAgICAgICAgICAgLi4uKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW5jV2l0aE1haW5CdXR0b24/LiRlbGVtZW50Py5bMF0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVkaXJlY3RJbnB1dExheW91dC4kZWxlbWVudFswXSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YWdTZWxlY3RMYXlvdXQuJGVsZW1lbnRbMF0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3VtbWFyeUlucHV0TGF5b3V0LiRlbGVtZW50WzBdLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdExheW91dC4kZWxlbWVudFswXSxcbiAgICAgICAgICAgICAgICBdLmZpbHRlcihCb29sZWFuKSBhcyBIVE1MRWxlbWVudFtdKSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuY29udGVudFRleHQucHJlcGVuZCh0aGlzLmVkaXRvckJveC4kZWxlbWVudFswXSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmV4aXN0cykgdGhpcy5sb2FkRXhpc3RpbmdEYXRhKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGFzeW5jIGxvYWRTeW5jV2l0aE1haW5CdXR0b24oKSB7XG4gICAgICAgICAgICBjb25zdCBtYWluUGFnZUNvbnRlbnQgPSAoXG4gICAgICAgICAgICAgICAgKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoe1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHZlcnNpb246IDIsXG4gICAgICAgICAgICAgICAgICAgIHByb3A6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgICAgICAgICBydnByb3A6ICdjb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgcnZzbG90czogJyonLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZXM6IHRoaXMucGFnZVRpdGxlUGFyc2VkLmdldFN1YmplY3RQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpLFxuICAgICAgICAgICAgICAgIH0pKSBhcyBQYWdlUmV2aXNpb25zUmVzdWx0XG4gICAgICAgICAgICApLnF1ZXJ5LnBhZ2VzWzBdLnJldmlzaW9uc1swXS5zbG90cy5tYWluLmNvbnRlbnQudHJpbSgpO1xuICAgICAgICAgICAgdGhpcy5zeW5jV2l0aE1haW5CdXR0b24gPSBuZXcgT08udWkuQnV0dG9uV2lkZ2V0KHsgbGFiZWw6ICdTeW5jIHdpdGggbWFpbiBwYWdlJywgaWNvbjogJ2xpbmsnLCBmbGFnczogWydwcm9ncmVzc2l2ZSddIH0pO1xuICAgICAgICAgICAgdGhpcy5zeW5jV2l0aE1haW5CdXR0b24ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IC9eI3JlZGlyZWN0Oj9cXHMqXFxbXFxbXFxzKihbXltcXF17fH1dKz8pXFxzKig/OlxcfFteW1xcXXt8fV0rPyk/XV1cXHMqL2kuZXhlYyhtYWluUGFnZUNvbnRlbnQpPy5bMV07XG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHJldHVybiBtdy5ub3RpZnkoJ0ZhaWxlZCB0byBwYXJzZSBtYWluIHBhZ2UgY29udGVudCEnLCB7IHR5cGU6ICdlcnJvcicgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlZGlyZWN0SW5wdXQuc2V0VmFsdWUobXcuVGl0bGUubmV3RnJvbVRleHQodGFyZ2V0KT8uZ2V0VGFsa1BhZ2UoKT8udG9TdHJpbmcoKSA/PyAnJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbU1vdmUgPSBbJ1IgZnJvbSBtb3ZlJywgLi4udGhpcy5yZWRpcmVjdFRlbXBsYXRlc1snUiBmcm9tIG1vdmUnXV0uc29tZSgodGFnT3JSZWRpcmVjdCkgPT5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChge3tcXFxccypbJHt0YWdPclJlZGlyZWN0WzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdPclJlZGlyZWN0WzBdfV0ke3RhZ09yUmVkaXJlY3Quc2xpY2UoMSl9XFxcXHMqKFxcXFx8fH19KWApLnRlc3QobWFpblBhZ2VDb250ZW50KSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChmcm9tTW92ZSkgdGhpcy50YWdTZWxlY3Quc2V0VmFsdWUoWydSIGZyb20gbW92ZSddKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvYWRzIHRoZSBpbnB1dCBlbGVtZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgbG9hZElucHV0RWxlbWVudHMoKSB7XG4gICAgICAgICAgICAvKiBSZWRpcmVjdCB0YXJnZXQgaW5wdXQgKi9cbiAgICAgICAgICAgIHRoaXMucmVkaXJlY3RJbnB1dCA9IG5ldyBSZWRpcmVjdElucHV0V2lkZ2V0KHsgcGxhY2Vob2xkZXI6ICdUYXJnZXQgcGFnZSBuYW1lJywgcmVxdWlyZWQ6IHRydWUgfSwgdGhpcy5wYWdlVGl0bGVQYXJzZWQpO1xuICAgICAgICAgICAgdGhpcy5yZWRpcmVjdElucHV0Lm9uKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5yZWRpcmVjdElucHV0LmdldFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoYF4oaHR0cHM/Oik/L3syfT8ke213LmNvbmZpZy5nZXQoJ3dnU2VydmVyJykucmVwbGFjZSgvXlxcL3syfS8sICcnKX0vd2lraS9gKSwgJycpO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXjovLCAnJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZGlyZWN0SW5wdXQuc2V0VmFsdWUodmFsdWVbMF0udG9VcHBlckNhc2UoKSArIHZhbHVlLnNsaWNlKDEpLnJlcGxhY2VBbGwoJ18nLCAnICcpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24uc2V0RGlzYWJsZWQoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN1Ym1pdEJ1dHRvbi5zZXREaXNhYmxlZCh0cnVlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3VtbWFyeSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnNldExhYmVsKCdTdWJtaXQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRzQ2hlY2sgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMucmVkaXJlY3RJbnB1dExheW91dCA9IG5ldyBPTy51aS5GaWVsZExheW91dCh0aGlzLnJlZGlyZWN0SW5wdXQsIHsgbGFiZWw6IG5ldyBPTy51aS5IdG1sU25pcHBldCgnPGI+UmVkaXJlY3QgdGFyZ2V0OjwvYj4nKSwgYWxpZ246ICd0b3AnIH0pO1xuXG4gICAgICAgICAgICAvKiBSZWRpcmVjdCBjYXRlZ29yaXphdGlvbiB0ZW1wbGF0ZSBzZWxlY3Rpb24gKi9cbiAgICAgICAgICAgIHRoaXMudGFnU2VsZWN0ID0gbmV3IE9PLnVpLk1lbnVUYWdNdWx0aXNlbGVjdFdpZGdldCh7XG4gICAgICAgICAgICAgICAgYWxsb3dBcmJpdHJhcnk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbG93UmVvcmRlcmluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogT2JqZWN0LmtleXModGhpcy5yZWRpcmVjdFRlbXBsYXRlcykubWFwKCh0YWcpID0+ICh7IGRhdGE6IHRhZywgbGFiZWw6IHRhZyB9KSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICh0aGlzLnRhZ1NlbGVjdC5nZXRNZW51KCkgYXMgT08udWkuTWVudVNlbGVjdFdpZGdldC5Db25maWdPcHRpb25zKS5maWx0ZXJNb2RlID0gJ3N1YnN0cmluZyc7XG4gICAgICAgICAgICB0aGlzLnRhZ1NlbGVjdC5vbignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvcnRlZFRhZ3MgPSAodGhpcy50YWdTZWxlY3QuZ2V0VmFsdWUoKSBhcyBzdHJpbmdbXSkuc29ydCgoYSwgYikgPT4gYS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi50b0xvd2VyQ2FzZSgpKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoKHRoaXMudGFnU2VsZWN0LmdldFZhbHVlKCkgYXMgc3RyaW5nW10pLmpvaW4oJzsnKSAhPT0gc29ydGVkVGFncy5qb2luKCc7JykpIHRoaXMudGFnU2VsZWN0LnNldFZhbHVlKHNvcnRlZFRhZ3MpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdW1tYXJ5KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24uc2V0TGFiZWwoJ1N1Ym1pdCcpO1xuICAgICAgICAgICAgICAgIHRoaXMubmVlZHNDaGVjayA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YWdTZWxlY3QuZ2V0VmFsdWUoKS5sZW5ndGggPiAwKSB0aGlzLnByZXZpZXdCdXR0b24uc2V0RGlzYWJsZWQoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5wcmV2aWV3QnV0dG9uLnNldERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMudGFnU2VsZWN0TGF5b3V0ID0gbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHRoaXMudGFnU2VsZWN0LCB7IGxhYmVsOiBuZXcgT08udWkuSHRtbFNuaXBwZXQoJzxiPlJlZGlyZWN0IGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlKHMpOjwvYj4nKSwgYWxpZ246ICd0b3AnIH0pO1xuXG4gICAgICAgICAgICAvKiBTdW1tYXJ5IGlucHV0ICovXG4gICAgICAgICAgICB0aGlzLnN1bW1hcnlJbnB1dCA9IG5ldyBPTy51aS5Db21ib0JveElucHV0V2lkZ2V0KHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgZGF0YTogJ1Jlc29sdmUgZG91YmxlIHJlZGlyZWN0JyB9LCAvL1xuICAgICAgICAgICAgICAgICAgICB7IGRhdGE6ICdSZXNvbHZlIHNlbGYgcmVkaXJlY3QnIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgZGF0YTogJ1JlbW92ZSBpbmNvcnJlY3QgcmNhdHMnIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnN1bW1hcnlJbnB1dExheW91dCA9IG5ldyBPTy51aS5GaWVsZExheW91dCh0aGlzLnN1bW1hcnlJbnB1dCwgeyBsYWJlbDogbmV3IE9PLnVpLkh0bWxTbmlwcGV0KCc8Yj5TdW1tYXJ5OjwvYj4nKSwgYWxpZ246ICd0b3AnIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvYWRzIHRoZSBlbGVtZW50cyBpbiB0aGUgc3VibWl0IGJ1dHRvbiByb3cuXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIGFzeW5jIGxvYWRTdWJtaXRFbGVtZW50cygpIHtcbiAgICAgICAgICAgIC8qIFNldHVwIHN1Ym1pdCBidXR0b24gKi9cbiAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uID0gbmV3IE9PLnVpLkJ1dHRvbldpZGdldCh7IGNsYXNzZXM6IFsncmVkaXJlY3QtaGVscGVyLWJvdHRvbS1lbGVtZW50J10sIGxhYmVsOiAnU3VibWl0JywgZGlzYWJsZWQ6IHRydWUsIGZsYWdzOiBbJ3Byb2dyZXNzaXZlJ10gfSk7XG4gICAgICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi5vbignY2xpY2snLCAoKSA9PiB0aGlzLmhhbmRsZVN1Ym1pdEJ1dHRvbkNsaWNrKCkpO1xuXG4gICAgICAgICAgICAvKiBTZXR1cCBwcmV2aWV3IGJ1dHRvbiAqL1xuICAgICAgICAgICAgY29uc3Qgd2luZG93TWFuYWdlciA9IG5ldyBPTy51aS5XaW5kb3dNYW5hZ2VyKCk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh3aW5kb3dNYW5hZ2VyLiRlbGVtZW50WzBdKTtcblxuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGVQcmV2aWV3RGlhbG9nID0gbmV3IFRlbXBsYXRlUHJldmlld0RpYWxvZyh7IHNpemU6ICdsYXJnZScgfSwgdGhpcy5wYWdlVGl0bGVQYXJzZWQpO1xuICAgICAgICAgICAgd2luZG93TWFuYWdlci5hZGRXaW5kb3dzKFt0ZW1wbGF0ZVByZXZpZXdEaWFsb2ddKTtcblxuICAgICAgICAgICAgdGhpcy5wcmV2aWV3QnV0dG9uID0gbmV3IE9PLnVpLkJ1dHRvbldpZGdldCh7IGNsYXNzZXM6IFsncmVkaXJlY3QtaGVscGVyLWJvdHRvbS1lbGVtZW50J10sIGxhYmVsOiAnUHJldmlldyB0ZW1wbGF0ZXMnLCBkaXNhYmxlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHRoaXMucHJldmlld0J1dHRvbi5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVQcmV2aWV3RGlhbG9nLnNldERhdGEodGhpcy50YWdTZWxlY3QuZ2V0VmFsdWUoKSk7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVQcmV2aWV3RGlhbG9nLm9wZW4oKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiBTZXR1cCBzeW5jIHRhbGsgY2hlY2tib3ggKi9cbiAgICAgICAgICAgIGlmICghdGhpcy5wYWdlVGl0bGVQYXJzZWQuaXNUYWxrUGFnZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWxrRGF0YSA9IChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHsgYWN0aW9uOiAncXVlcnknLCBmb3JtYXR2ZXJzaW9uOiAyLCBwcm9wOiAnaW5mbycsIHRpdGxlczogdGhpcy5wYWdlVGl0bGVQYXJzZWQuZ2V0VGFsa1BhZ2UoKSEuZ2V0UHJlZml4ZWRUZXh0KCkgfSkpIGFzIFBhZ2VJbmZvUmVzdWx0O1xuICAgICAgICAgICAgICAgIHRoaXMuc3luY1RhbGtDaGVja2JveCA9IG5ldyBPTy51aS5DaGVja2JveElucHV0V2lkZ2V0KHsgc2VsZWN0ZWQ6ICEhdGhpcy50YWxrRGF0YS5xdWVyeS5wYWdlc1swXS5yZWRpcmVjdCB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuc3luY1RhbGtDaGVja2JveExheW91dCA9IG5ldyBPTy51aS5XaWRnZXQoe1xuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzOiBbJ3JlZGlyZWN0LWhlbHBlci1ib3R0b20tZWxlbWVudCddLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBbbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHRoaXMuc3luY1RhbGtDaGVja2JveCwgeyBsYWJlbDogJ1N5bmMgdGFsayBwYWdlJywgYWxpZ246ICdpbmxpbmUnIH0pXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogU2V0dXAgcGF0cm9sIGNoZWNrYm94ICovXG4gICAgICAgICAgICBpZiAoYXdhaXQgdGhpcy5jaGVja1Nob3VsZFByb21wdFBhdHJvbCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXRyb2xDaGVja2JveCA9IG5ldyBPTy51aS5DaGVja2JveElucHV0V2lkZ2V0KHsgc2VsZWN0ZWQ6IHRydWUgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBhdHJvbENoZWNrYm94TGF5b3V0ID0gbmV3IE9PLnVpLldpZGdldCh7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6IFsncmVkaXJlY3QtaGVscGVyLWJvdHRvbS1lbGVtZW50J10sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFtuZXcgT08udWkuRmllbGRMYXlvdXQodGhpcy5wYXRyb2xDaGVja2JveCwgeyBsYWJlbDogJ01hcmsgYXMgcGF0cm9sbGVkJywgYWxpZ246ICdpbmxpbmUnIH0pXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogU2V0dXAgbGF5b3V0ICovXG4gICAgICAgICAgICB0aGlzLnN1Ym1pdExheW91dCA9IG5ldyBPTy51aS5Ib3Jpem9udGFsTGF5b3V0KHtcbiAgICAgICAgICAgICAgICBpZDogJ3N1Ym1pdC1sYXlvdXQnLFxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbdGhpcy5zdWJtaXRCdXR0b24sIHRoaXMucHJldmlld0J1dHRvbiwgdGhpcy5zeW5jVGFsa0NoZWNrYm94TGF5b3V0LCB0aGlzLnBhdHJvbENoZWNrYm94TGF5b3V0XS5maWx0ZXIoQm9vbGVhbikgYXMgT08udWkuV2lkZ2V0W10sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSB1c2VyIHNob3VsZCBiZSBwcm9tcHRlZCB0byBwYXRyb2wgdGhlIHBhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIGFzeW5jIGNoZWNrU2hvdWxkUHJvbXB0UGF0cm9sKCkge1xuICAgICAgICAgICAgY29uc3QgcGFnZVRyaWFnZU1hcmtCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXdlLXB0LW1hcmsgLm13ZS1wdC10b29sLWljb24nKSBhcyBIVE1MSW1hZ2VFbGVtZW50IHwgbnVsbDtcbiAgICAgICAgICAgIHBhZ2VUcmlhZ2VNYXJrQnV0dG9uPy5jbGljaygpO1xuICAgICAgICAgICAgcGFnZVRyaWFnZU1hcmtCdXR0b24/LmNsaWNrKCk7XG5cbiAgICAgICAgICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpICE9PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBlbHNlIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGF0cm9sbGluaycpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtd2UtcHQtbWFyay1hcy1yZXZpZXdlZC1idXR0b24nKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXdlLXB0LW1hcmstYXMtdW5yZXZpZXdlZC1idXR0b24nKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtdy5jb25maWcuZ2V0KCd3Z0FydGljbGVJZCcpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlclBlcm1pc3Npb25zID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIG1ldGE6ICd1c2VyaW5mbycsIHVpcHJvcDogJ3JpZ2h0cycgfSkpIGFzIFVzZXJQZXJtaXNzaW9uc1Jlc3BvbnNlO1xuICAgICAgICAgICAgICAgIGlmICghdXNlclBlcm1pc3Npb25zLnF1ZXJ5LnVzZXJpbmZvLnJpZ2h0cy5pbmNsdWRlcygncGF0cm9sJykpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdHJvbFJlc3BvbnNlID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdwYWdldHJpYWdlbGlzdCcsIHBhZ2VfaWQ6IG13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykgfSkpIGFzIFBhZ2VUcmlhZ2VMaXN0UmVzcG9uc2U7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5cbiAgICAgICAgICAgICAgICBpZiAocGF0cm9sUmVzcG9uc2UucGFnZXRyaWFnZWxpc3QucGFnZXNbMF0/LnVzZXJfbmFtZSA9PT0gbXcuY29uZmlnLmdldCgnd2dVc2VyTmFtZScpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGF0cm9sUmVzcG9uc2UucGFnZXRyaWFnZWxpc3QucmVzdWx0ICE9PSAnc3VjY2VzcycgfHwgcGF0cm9sUmVzcG9uc2UucGFnZXRyaWFnZWxpc3QucGFnZXMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gIU51bWJlci5wYXJzZUludChwYXRyb2xSZXNwb25zZS5wYWdldHJpYWdlbGlzdC5wYWdlc1swXT8ucGF0cm9sX3N0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgc3VtbWFyeSBpbnB1dCBwbGFjZWhvbGRlci5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgdXBkYXRlU3VtbWFyeSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0VmFsdWUgPSB0aGlzLnJlZGlyZWN0SW5wdXQuZ2V0VmFsdWUoKS50cmltKCk7XG5cbiAgICAgICAgICAgIGlmICghcmVkaXJlY3RWYWx1ZSkgKHRoaXMuc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gJyc7XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmV4aXN0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldENoYW5nZWQgPSByZWRpcmVjdFZhbHVlICE9PSB0aGlzLm9sZFJlZGlyZWN0VGFyZ2V0Py5yZXBsYWNlQWxsKCdfJywgJyAnKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWdzQ2hhbmdlZCA9IHRoaXMudGFnU2VsZWN0LmdldFZhbHVlKCkuam9pbignOycpICE9PSB0aGlzLm9sZFJlZGlyZWN0VGFncz8uam9pbignOycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldENoYW5nZWQgJiYgdGFnc0NoYW5nZWQpICh0aGlzLnN1bW1hcnlJbnB1dC4kdGFiSW5kZXhlZFswXSBhcyBIVE1MSW5wdXRFbGVtZW50KS5wbGFjZWhvbGRlciA9IGBSZXRhcmdldCByZWRpcmVjdCB0byBbWyR7cmVkaXJlY3RWYWx1ZX1dXSBhbmQgY2hhbmdlIGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlc2A7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGFyZ2V0Q2hhbmdlZCkgKHRoaXMuc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gYFJldGFyZ2V0IHJlZGlyZWN0IHRvIFtbJHtyZWRpcmVjdFZhbHVlfV1dYDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0YWdzQ2hhbmdlZCkgKHRoaXMuc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gJ0NoYW5nZSBjYXRlZ29yaXphdGlvbiB0ZW1wbGF0ZXMnO1xuICAgICAgICAgICAgICAgIGVsc2UgKHRoaXMuc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gJ1BlcmZvcm0gcmVkaXJlY3QgY2xlYW51cCc7XG4gICAgICAgICAgICB9IGVsc2UgKHRoaXMuc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gYENyZWF0ZSByZWRpcmVjdCB0byBbWyR7cmVkaXJlY3RWYWx1ZX1dXWA7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTG9hZHMgZXhpc3RpbmcgcGFnZSB0YXJnZXQsIHRhZ3MsIGFuZCBzdHJheSB0ZXh0LlxuICAgICAgICAgKi9cbiAgICAgICAgcHJpdmF0ZSBhc3luYyBsb2FkRXhpc3RpbmdEYXRhKCkge1xuICAgICAgICAgICAgY29uc3QgcGFnZUNvbnRlbnQgPSAoXG4gICAgICAgICAgICAgICAgKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIGZvcm1hdHZlcnNpb246IDIsIHByb3A6ICdyZXZpc2lvbnMnLCBydnByb3A6ICdjb250ZW50JywgcnZzbG90czogJyonLCB0aXRsZXM6IHRoaXMucGFnZVRpdGxlIH0pKSBhcyBQYWdlUmV2aXNpb25zUmVzdWx0XG4gICAgICAgICAgICApLnF1ZXJ5LnBhZ2VzWzBdLnJldmlzaW9uc1swXS5zbG90cy5tYWluLmNvbnRlbnQudHJpbSgpO1xuXG4gICAgICAgICAgICB0aGlzLm9sZFJlZGlyZWN0VGFyZ2V0ID0gL14jcmVkaXJlY3Q6P1xccypcXFtcXFtcXHMqKFteW1xcXXt8fV0rPylcXHMqKD86XFx8W15bXFxde3x9XSs/KT9dXVxccyovaS5leGVjKHBhZ2VDb250ZW50KT8uWzFdO1xuICAgICAgICAgICAgdGhpcy5vbGRSZWRpcmVjdFRhZ3MgPSAoXG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5yZWRpcmVjdFRlbXBsYXRlcylcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoW3RhZywgcmVkaXJlY3RzXSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFt0YWcsIC4uLnJlZGlyZWN0c10uc29tZSgodGFnT3JSZWRpcmVjdCkgPT4gbmV3IFJlZ0V4cChge3tcXFxccypbJHt0YWdPclJlZGlyZWN0WzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdPclJlZGlyZWN0WzBdfV0ke3RhZ09yUmVkaXJlY3Quc2xpY2UoMSl9XFxcXHMqKFxcXFx8fH19KWApLnRlc3QocGFnZUNvbnRlbnQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGFnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbikgYXMgc3RyaW5nW11cbiAgICAgICAgICAgICkuc29ydCgoYSwgYikgPT4gYS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi50b0xvd2VyQ2FzZSgpKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsUmVkaXJlY3RUYWdzID0gT2JqZWN0LmVudHJpZXModGhpcy5yZWRpcmVjdFRlbXBsYXRlcylcbiAgICAgICAgICAgICAgICAuZmxhdE1hcCgoW3RhZywgcmVkaXJlY3RzXSkgPT4gW3RhZywgLi4ucmVkaXJlY3RzXSlcbiAgICAgICAgICAgICAgICAubWFwKCh0YWdPclJlZGlyZWN0KSA9PiAobmV3IFJlZ0V4cChge3tcXFxccypbJHt0YWdPclJlZGlyZWN0WzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdPclJlZGlyZWN0WzBdfV0ke3RhZ09yUmVkaXJlY3Quc2xpY2UoMSl9XFxcXHMqKFxcXFx8fH19KWApLnRlc3QocGFnZUNvbnRlbnQpID8gdGFnT3JSZWRpcmVjdCA6IG51bGwpKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbikgYXMgc3RyaW5nW107XG5cbiAgICAgICAgICAgIHRoaXMub2xkUmVkaXJlY3RUYWdEYXRhID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsUmVkaXJlY3RUYWdzXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHRhZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBuZXcgUmVnRXhwKGB7e1xcXFxzKlske3RhZ1swXS50b0xvd2VyQ2FzZSgpfSR7dGFnWzBdfV0ke3RhZy5zbGljZSgxKX1cXFxcfD8oLio/KVxcXFxzKn19YCkuZXhlYyhwYWdlQ29udGVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RhZyA9IE9iamVjdC5lbnRyaWVzKHRoaXMucmVkaXJlY3RUZW1wbGF0ZXMpLmZpbmQoKFt0ZW1wbGF0ZSwgcmVkaXJlY3RzXSkgPT4gW3RlbXBsYXRlLCAuLi5yZWRpcmVjdHNdLmluY2x1ZGVzKHRhZykpPy5bMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaCA/IFtuZXdUYWcsIG1hdGNoWzFdXSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbikgYXMgW3N0cmluZywgc3RyaW5nXVtdLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5vbGRTdHJheVRleHQgPSBbXG4gICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQubWF0Y2goL3t7c2hvcnQgZGVzY3JpcHRpb25cXHwuKj99fS9pKT8uWzBdLFxuICAgICAgICAgICAgICAgIHBhZ2VDb250ZW50Lm1hdGNoKC97e0RJU1BMQVlUSVRMRTouKj99fS8pPy5bMF0sXG4gICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQubWF0Y2goL3t7aXRhbGljIHRpdGxlXFx8Py4qP319L2kpPy5bMF0sXG4gICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQubWF0Y2goL3t7REVGQVVMVFNPUlQ6Lio/fX0vKT8uWzBdLFxuICAgICAgICAgICAgICAgIHBhZ2VDb250ZW50Lm1hdGNoKC97e3RpdGxlIGxhbmd1YWdlXFx8Lio/fX0vKT8uWzBdLFxuICAgICAgICAgICAgICAgIC4uLihwYWdlQ29udGVudC5tYXRjaCgvXFxbXFxbW0NjXWF0ZWdvcnk6Lis/XV0vZykgPz8gW10pLFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAuam9pbignXFxuJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9sZFJlZGlyZWN0VGFyZ2V0KSB0aGlzLnJlZGlyZWN0SW5wdXQuc2V0VmFsdWUodGhpcy5vbGRSZWRpcmVjdFRhcmdldC5yZXBsYWNlQWxsKCdfJywgJyAnKSk7XG4gICAgICAgICAgICBlbHNlIG13Lm5vdGlmeSgnQ291bGQgbm90IGZpbmQgcmVkaXJlY3QgdGFyZ2V0IScsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgIHRoaXMudGFnU2VsZWN0LnNldFZhbHVlKHRoaXMub2xkUmVkaXJlY3RUYWdzKTtcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVTdW1tYXJ5KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGFzeW5jIHZhbGlkYXRlU3VibWlzc2lvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IHRoaXMucmVkaXJlY3RJbnB1dC5nZXRWYWx1ZSgpLnRyaW0oKTtcblxuICAgICAgICAgICAgLyogSW52YWxpZCBjaGFyYWN0ZXJzICovXG4gICAgICAgICAgICBpZiAoIS9eXFxzKlteW1xcXXt8fV0rXFxzKiQvLnRlc3QoZGVzdGluYXRpb24pKSBlcnJvcnMucHVzaCh7IHRpdGxlOiBkZXN0aW5hdGlvbiwgbWVzc2FnZTogJ2lzIG5vdCBhIHZhbGlkIHBhZ2UgdGl0bGUhJyB9KTtcblxuICAgICAgICAgICAgLyogRmFpbGVkIGR1cmluZyB0aXRsZSBwYXJzaW5nICovXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VkRGVzdGluYXRpb24gPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChkZXN0aW5hdGlvbik7XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMCkgZXJyb3JzLnB1c2goeyB0aXRsZTogZGVzdGluYXRpb24sIG1lc3NhZ2U6ICdpcyBub3QgYSB2YWxpZCBwYWdlIHRpdGxlIScgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyc2VkRGVzdGluYXRpb24gJiYgZXJyb3JzLmxlbmd0aCA9PT0gMCkgZXJyb3JzLnB1c2goeyB0aXRsZTogZGVzdGluYXRpb24sIG1lc3NhZ2U6ICdpcyBub3QgYSB2YWxpZCBwYWdlIHRpdGxlIScgfSk7XG5cbiAgICAgICAgICAgIC8qIFNlbGYgcmVkaXJlY3RzICovXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJzZWREZXN0aW5hdGlvbj8udG9TdHJpbmcoKSA9PT0gdGhpcy5wYWdlVGl0bGVQYXJzZWQudG9TdHJpbmcoKSkgZXJyb3JzLnB1c2goeyBtZXNzYWdlOiAnY2Fubm90IHJlZGlyZWN0IHRvIGl0c2VsZiEnIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvbkRhdGEgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3F1ZXJ5JywgZm9ybWF0dmVyc2lvbjogMiwgcHJvcDogJ3BhZ2Vwcm9wcycsIHRpdGxlczogZGVzdGluYXRpb24gfSkuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgLyogTm9uZXhpc3RlbnQgZGVzdGluYXRpb24gKi8gaWYgKGVycm9yQ29kZSA9PT0gJ21pc3Npbmd0aXRsZScpIGVycm9ycy5wdXNoKHsgdGl0bGU6IGRlc3RpbmF0aW9uLCBtZXNzYWdlOiAnZG9lcyBub3QgZXhpc3QhJyB9KTtcbiAgICAgICAgICAgICAgICAvKiBPdGhlciBBUEkgZXJyb3IgKi8gZWxzZSBlcnJvcnMucHVzaCh7IHRpdGxlOiBkZXN0aW5hdGlvbiwgbWVzc2FnZTogYHdhcyBub3QgYWJsZSB0byBiZSBmZXRjaGVkIGZyb20gdGhlIEFQSSAoJHtlcnJvckNvZGV9KSFgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSkpIGFzIFBhZ2Vwcm9wc1Jlc3VsdCB8IG51bGw7XG4gICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBhcnNlUmVzdWx0ID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdwYXJzZScsIHBhZ2U6IGRlc3RpbmF0aW9uLCBwcm9wOiAnc2VjdGlvbnMnLCByZWRpcmVjdHM6ICcxJyB9KSkgYXMgUGFnZVBhcnNlUmVzdWx0O1xuXG4gICAgICAgICAgICAvKiBEb3VibGUgcmVkaXJlY3RzICovXG4gICAgICAgICAgICBpZiAoZGVzdGluYXRpb25QYXJzZVJlc3VsdC5wYXJzZS5yZWRpcmVjdHM/LlswXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUmVkaXJlY3QgPVxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvblBhcnNlUmVzdWx0LnBhcnNlLnJlZGlyZWN0c1swXS50byArIChkZXN0aW5hdGlvblBhcnNlUmVzdWx0LnBhcnNlLnJlZGlyZWN0c1swXS50b2ZyYWdtZW50ID8gYCMke2Rlc3RpbmF0aW9uUGFyc2VSZXN1bHQucGFyc2UucmVkaXJlY3RzWzBdLnRvZnJhZ21lbnR9YCA6ICcnKTtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkZXN0aW5hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYGlzIGEgcmVkaXJlY3QgdG8gPGEgaHJlZj1cIiR7bXcudXRpbC5nZXRVcmwoXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvblJlZGlyZWN0LFxuICAgICAgICAgICAgICAgICAgICApfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGVzdGluYXRpb25SZWRpcmVjdH08L2E+LiBSZXRhcmdldCB0byB0aGF0IHBhZ2UgaW5zdGVhZCwgYXMgZG91YmxlIHJlZGlyZWN0cyBhcmVuJ3QgYWxsb3dlZC5gLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBOb25leGlzdGVudCBzZWN0aW9uICovXG4gICAgICAgICAgICBpZiAoZGVzdGluYXRpb24uc3BsaXQoJyMnKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRTZWN0aW9uID0gZGVzdGluYXRpb25QYXJzZVJlc3VsdC5wYXJzZS5zZWN0aW9ucy5maW5kKChzZWN0aW9uKSA9PiBzZWN0aW9uLmxpbmUgPT09IGRlc3RpbmF0aW9uLnNwbGl0KCcjJylbMV0pO1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZFNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgdG8gYW5jaG9yJykpIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2lzIHRhZ2dlZCBhcyBhIHJlZGlyZWN0IHRvIGFuIGFuY2hvciwgYnV0IGl0IGlzIGFjdHVhbGx5IGEgcmVkaXJlY3QgdG8gYSBzZWN0aW9uIScgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiB0byBzZWN0aW9uJykpIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2lzIGEgcmVkaXJlY3QgdG8gYSBzZWN0aW9uLCBidXQgaXQgaXMgbm90IHRhZ2dlZCB3aXRoIDxjb2RlPnt7UiB0byBzZWN0aW9ufX08L2NvZGU+IScgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb25Db250ZW50ID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ2c2xvdHM6ICcqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZXM6IHRoaXMucGFyc2VkRGVzdGluYXRpb24hLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdFxuICAgICAgICAgICAgICAgICAgICApLnF1ZXJ5LnBhZ2VzWzBdLnJldmlzaW9uc1swXS5zbG90cy5tYWluLmNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLihkZXN0aW5hdGlvbkNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWF0Y2goLyg/PD17e1xccyo/W0FhXSg/Om5jaG9ycz98bmNob3IgZm9yIHJlZGlyZWN0fG5rZXJ8TkNIT1J8bmMpXFxzKj9cXHwpLis/KD89fX0pL2cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5tYXAoKGFuY2hvcjogc3RyaW5nKSA9PiBhbmNob3Iuc3BsaXQoJ3wnKS5tYXAoKHBhcnQpID0+IHBhcnQudHJpbSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmZsYXQoKSA/PyBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4oZGVzdGluYXRpb25Db250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hdGNoKC8oPzw9e3tcXHMqPyg/OltWdl0oPzppc2libGUgYW5jaG9ycz98aXNhbmN8QW5jaHxhbmNob3J8aXNpYmxlYW5jaG9yfGEpfFtBYV0oPzpuY2hvcmR8Y2hvcmVkfG5jaG9yXFwrKXxbVHRdZXh0IGFuY2hvcilcXHMqP1xcfCkuKz8oPz0oPzwhIXw9KX19KS9nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ubWFwKChhbmNob3I6IHN0cmluZykgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJ3wnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgocGFydCkgPT4gcGFydC50cmltKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChwYXJ0KSA9PiAhL150ZXh0XFxzKj89Ly50ZXN0KHBhcnQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5mbGF0KCkgPz8gW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGRlc3RpbmF0aW9uQ29udGVudC5tYXRjaCgvKD88PWlkPSlcIj8uKz8oPz1cInw+fFxcfCkvZyk/Lm1hcCgoYW5jaG9yOiBzdHJpbmcpID0+IGFuY2hvci50cmltKCkpID8/IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvcnMuaW5jbHVkZXMoZGVzdGluYXRpb24uc3BsaXQoJyMnKVsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIHNlY3Rpb24nKSkgZXJyb3JzLnB1c2goeyBtZXNzYWdlOiAnaXMgdGFnZ2VkIGFzIGEgcmVkaXJlY3QgdG8gYSBzZWN0aW9uLCBidXQgaXQgaXMgYWN0dWFsbHkgYSByZWRpcmVjdCB0byBhbiBhbmNob3IhJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiB0byBhbmNob3InKSkgZXJyb3JzLnB1c2goeyBtZXNzYWdlOiAnaXMgYSByZWRpcmVjdCB0byBhbiBhbmNob3IsIGJ1dCBpdCBpcyBub3QgdGFnZ2VkIHdpdGggPGNvZGU+e3tSIGZyb20gYW5jaG9yfX08L2NvZGU+IScgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6IGBpcyBhIHJlZGlyZWN0IHRvIDxhIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKGRlc3RpbmF0aW9uKX1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2Rlc3RpbmF0aW9ufTwvYT4sIGJ1dCB0aGF0IHNlY3Rpb24gb3IgYW5jaG9yIGRvZXMgbm90IGV4aXN0IWAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBJbXByb3Blcmx5IHRhZ2dlZCBhcyByZWRpcmVjdCB0byBzZWN0aW9uL2FuY2hvciAqL1xuICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uLnNwbGl0KCcjJykubGVuZ3RoID09PSAxICYmICh0aGlzLnRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIHNlY3Rpb24nKSB8fCB0aGlzLnRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIGFuY2hvcicpKSlcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyBub3QgYSByZWRpcmVjdCB0byBhIHNlY3Rpb24vYW5jaG9yLCBidXQgaXQgaXMgdGFnZ2VkIHdpdGggPGNvZGU+e3tSIGZyb20gc2VjdGlvbn19PC9jb2RlPiBvciA8Y29kZT57e1IgZnJvbSBhbmNob3J9fTwvY29kZT4hJyB9KTtcblxuICAgICAgICAgICAgLyogUmVkaXJlY3QgdG8gZGlzYW1iaWd1YXRpb24gcGFnZSB3aXRob3V0IHRlbXBsYXRlICovXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25EYXRhIS5xdWVyeS5wYWdlc1swXS5wYWdlcHJvcHMgJiZcbiAgICAgICAgICAgICAgICAnZGlzYW1iaWd1YXRpb24nIGluIGRlc3RpbmF0aW9uRGF0YSEucXVlcnkucGFnZXNbMF0ucGFnZXByb3BzICYmXG4gICAgICAgICAgICAgICAgIVtcbiAgICAgICAgICAgICAgICAgICAgJ1IgZnJvbSBhbWJpZ3VvdXMgc29ydCBuYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgJ1IgZnJvbSBhbWJpZ3VvdXMgdGVybScsXG4gICAgICAgICAgICAgICAgICAgICdSIHRvIGRpc2FtYmlndWF0aW9uIHBhZ2UnLFxuICAgICAgICAgICAgICAgICAgICAnUiBmcm9tIGluY29tcGxldGUgZGlzYW1iaWd1YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAnUiBmcm9tIGluY29ycmVjdCBkaXNhbWJpZ3VhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICdSIGZyb20gb3RoZXIgZGlzYW1iaWd1YXRpb24nLFxuICAgICAgICAgICAgICAgIF0uc29tZSgodGVtcGxhdGUpID0+IHRoaXMudGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXModGVtcGxhdGUpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2lzIGEgcmVkaXJlY3QgdG8gYSBkaXNhbWJpZ3VhdGlvbiBwYWdlLCBidXQgaXQgaXMgbm90IHRhZ2dlZCB3aXRoIGEgZGlzYW1iaWd1YXRpb24gY2F0ZWdvcml6YXRpb24gdGVtcGxhdGUhJyB9KTtcblxuICAgICAgICAgICAgLyogSW1wcm9wZXJseSB0YWdnZWQgYXMgcmVkaXJlY3QgdG8gZGlzYW1iaWd1YXRpb24gcGFnZSAqL1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uRGF0YSEucXVlcnkucGFnZXNbMF0ucGFnZXByb3BzICYmXG4gICAgICAgICAgICAgICAgISgnZGlzYW1iaWd1YXRpb24nIGluIGRlc3RpbmF0aW9uRGF0YSEucXVlcnkucGFnZXNbMF0ucGFnZXByb3BzKSAmJlxuICAgICAgICAgICAgICAgIFsnUiBmcm9tIGFtYmlndW91cyBzb3J0IG5hbWUnLCAnUiBmcm9tIGFtYmlndW91cyB0ZXJtJywgJ1IgdG8gZGlzYW1iaWd1YXRpb24gcGFnZScsICdSIGZyb20gaW5jb21wbGV0ZSBkaXNhbWJpZ3VhdGlvbiddLnNvbWUoKHRlbXBsYXRlKSA9PiB0aGlzLnRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKHRlbXBsYXRlKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyBub3QgYSByZWRpcmVjdCB0byBhIGRpc2FtYmlndWF0aW9uIHBhZ2UsIGJ1dCBpdCBpcyB0YWdnZWQgd2l0aCBhIGRpc2FtYmlndWF0aW9uIGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlIScgfSk7XG5cbiAgICAgICAgICAgIC8qIHt7UiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlfX0gd2l0aG91dCBcIiAoZGlzYW1iaWd1YXRpb24pXCIgYXQgZW5kIG9mIHRpdGxlICovXG4gICAgICAgICAgICBpZiAodGhpcy50YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlJykgJiYgIXRoaXMucGFnZVRpdGxlUGFyc2VkLmdldE1haW5UZXh0KCkuZW5kc1dpdGgoJyAoZGlzYW1iaWd1YXRpb24pJykpXG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAgICAgICAgICAgJ2lzIHRhZ2dlZCB3aXRoIDxjb2RlPnt7UiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlfX08L2NvZGU+LCBidXQgdGhpcyB0aXRsZSBkb2VzIG5vdCBlbmQgd2l0aCBcIiAoZGlzYW1iaWd1YXRpb24pXCIuIFVzZSA8Y29kZT57e1IgZnJvbSBhbWJpZ3VvdXMgdGVybX19PC9jb2RlPiBvciBhIHNpbWlsYXIgY2F0ZWdvcml6YXRpb24gdGVtcGxhdGUgaW5zdGVhZCEnLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiBUYWdnZWQgd2l0aCBhIHByb3RlY3Rpb24gdGVtcGxhdGUgKi9cbiAgICAgICAgICAgIGZvciAoY29uc3QgdGVtcGxhdGUgb2YgWydSIHNlbWktcHJvdGVjdGVkJywgJ1IgZXh0ZW5kZWQtcHJvdGVjdGVkJywgJ1IgdGVtcGxhdGUtcHJvdGVjdGVkJywgJ1IgZnVsbHkgcHJvdGVjdGVkJ10pXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXModGVtcGxhdGUpKVxuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6IGBpcyB0YWdnZWQgd2l0aCB1bm5lY2Vzc2FyaWx5IHRhZ2dlZCB3aXRoIDxjb2RlPnt7JHt0ZW1wbGF0ZX19fTwvY29kZT4gd2hpY2ggd2lsbCBiZSBkdXBsaWNhdGVkIGJ5IHRoZSByZWRpcmVjdCBjYXRlZ29yeSBzaGVsbCFgIH0pO1xuXG4gICAgICAgICAgICAvKiBTeW5jaW5nIHRhbGsgcGFnZSBidXQgdGFsayBwYWdlIGV4aXN0cyBhbmQgaXNuJ3QgYSByZWRpcmVjdCAqL1xuICAgICAgICAgICAgaWYgKHRoaXMuc3luY1RhbGtDaGVja2JveD8uaXNTZWxlY3RlZCgpICYmICF0aGlzLnRhbGtEYXRhIS5xdWVyeS5wYWdlc1swXS5taXNzaW5nICYmICF0aGlzLnRhbGtEYXRhIS5xdWVyeS5wYWdlc1swXS5yZWRpcmVjdClcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IHRpdGxlOiB0aGlzLnBhZ2VUaXRsZVBhcnNlZC5nZXRUYWxrUGFnZSgpIS5nZXRQcmVmaXhlZFRleHQoKSwgbWVzc2FnZTogJ2V4aXN0cywgYnV0IGlzIG5vdCBhIHJlZGlyZWN0IScgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGFzeW5jIGhhbmRsZVN1Ym1pdEJ1dHRvbkNsaWNrKCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIFt0aGlzLnJlZGlyZWN0SW5wdXQsIHRoaXMudGFnU2VsZWN0LCB0aGlzLnN1bW1hcnlJbnB1dCwgdGhpcy5zdWJtaXRCdXR0b24sIHRoaXMucHJldmlld0J1dHRvbiwgdGhpcy5zeW5jVGFsa0NoZWNrYm94LCB0aGlzLnBhdHJvbENoZWNrYm94XS5maWx0ZXIoQm9vbGVhbikpXG4gICAgICAgICAgICAgICAgKGVsZW1lbnQgYXMgT08udWkuV2lkZ2V0KS5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnNldExhYmVsKCdDaGVja2luZyB0YXJnZXQgdmFsaWRpdHkuLi4nKTtcblxuICAgICAgICAgICAgbGV0IGVycm9yczogQXdhaXRlZDxSZXR1cm5UeXBlPHR5cGVvZiB0aGlzLnZhbGlkYXRlU3VibWlzc2lvbj4+ID0gW107XG4gICAgICAgICAgICBpZiAodGhpcy5uZWVkc0NoZWNrKSBlcnJvcnMgPSBhd2FpdCB0aGlzLnZhbGlkYXRlU3VibWlzc2lvbigpO1xuICAgICAgICAgICAgZWxzZSB0aGlzLnBhcnNlZERlc3RpbmF0aW9uID0gbXcuVGl0bGUubmV3RnJvbVRleHQodGhpcy5yZWRpcmVjdElucHV0LmdldFZhbHVlKCkpO1xuXG4gICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJlZGlyZWN0LWhlbHBlci13YXJuaW5nJykpIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IHRpdGxlLCBtZXNzYWdlIH0gb2YgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gbmV3IE9PLnVpLkh0bWxTbmlwcGV0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGl0bGUgPyBgPGEgaHJlZj1cIiR7bXcudXRpbC5nZXRVcmwodGl0bGUpfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7dGl0bGV9PC9hPmAgOiAnVGhpcyBwYWdlJ30gJHttZXNzYWdlfSBDbGljayBhZ2FpbiB3aXRob3V0IG1ha2luZyBjaGFuZ2VzIHRvIHN1Ym1pdCBhbnl3YXkuYCxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2FybmluZ01lc3NhZ2UgPSBuZXcgT08udWkuTWVzc2FnZVdpZGdldCh7IHR5cGU6ICdlcnJvcicsIGNsYXNzZXM6IFsncmVkaXJlY3QtaGVscGVyLXdhcm5pbmcnXSwgaW5saW5lOiB0cnVlLCBsYWJlbCB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvckJveC4kZWxlbWVudFswXS5hcHBlbmQod2FybmluZ01lc3NhZ2UuJGVsZW1lbnRbMF0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbdGhpcy5yZWRpcmVjdElucHV0LCB0aGlzLnRhZ1NlbGVjdCwgdGhpcy5zdW1tYXJ5SW5wdXQsIHRoaXMuc3VibWl0QnV0dG9uLCB0aGlzLnN5bmNUYWxrQ2hlY2tib3gsIHRoaXMucGF0cm9sQ2hlY2tib3hdLmZpbHRlcihCb29sZWFuKSlcbiAgICAgICAgICAgICAgICAgICAgKGVsZW1lbnQgYXMgT08udWkuV2lkZ2V0KS5zZXREaXNhYmxlZChmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YWdTZWxlY3QuZ2V0VmFsdWUoKS5sZW5ndGggPiAwKSB0aGlzLnByZXZpZXdCdXR0b24uc2V0RGlzYWJsZWQoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24uc2V0TGFiZWwoJ1N1Ym1pdCBhbnl3YXknKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRzQ2hlY2sgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogRWRpdC9jcmVhdGUgcmVkaXJlY3QgKi9cbiAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnNldExhYmVsKGAke3RoaXMuZXhpc3RzID8gJ0VkaXRpbmcnIDogJ0NyZWF0aW5nJ30gcmVkaXJlY3QuLi5gKTtcblxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gW1xuICAgICAgICAgICAgICAgIGAjUkVESVJFQ1QgW1ske3RoaXMucmVkaXJlY3RJbnB1dC5nZXRWYWx1ZSgpLnRyaW0oKX1dXWAsIC8vXG4gICAgICAgICAgICAgICAgdGhpcy50YWdTZWxlY3QuZ2V0VmFsdWUoKS5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgID8gYHt7UmVkaXJlY3QgY2F0ZWdvcnkgc2hlbGx8XFxuJHsodGhpcy50YWdTZWxlY3QuZ2V0VmFsdWUoKSBhcyBzdHJpbmdbXSkubWFwKCh0YWcpID0+IGB7eyR7dGFnfSR7dGhpcy5vbGRSZWRpcmVjdFRhZ0RhdGE/Llt0YWddID8gYHwke3RoaXMub2xkUmVkaXJlY3RUYWdEYXRhW3RhZ119YCA6ICcnfX19YCkuam9pbignXFxuJyl9XFxufX1gXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICB0aGlzLm9sZFN0cmF5VGV4dCxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcblxcbicpO1xuXG4gICAgICAgICAgICBjb25zdCBzdW1tYXJ5ID0gKHRoaXMuc3VtbWFyeUlucHV0LmdldFZhbHVlKCkgfHwgKHRoaXMuc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyKSArICcgKHZpYSBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL3JlZGlyZWN0LWhlbHBlcnxyZWRpcmVjdC1oZWxwZXJdXSknO1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAuZWRpdCh0aGlzLnBhZ2VUaXRsZSwgKCkgPT4gKHsgdGV4dDogb3V0cHV0LCBzdW1tYXJ5IH0pKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9ySW5mbzogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdub2NyZWF0ZS1taXNzaW5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbXcuQXBpKCkuY3JlYXRlKHRoaXMucGFnZVRpdGxlLCB7IHN1bW1hcnkgfSwgb3V0cHV0KS5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9ySW5mbzogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBjcmVhdGluZyAke3RoaXMucGFnZVRpdGxlfTogJHtlcnJvckluZm8/LmVycm9yLmluZm8gPz8gJ1Vua25vd24gZXJyb3InfSAoJHtlcnJvckNvZGV9KWAsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgRXJyb3IgZWRpdGluZyBvciBjcmVhdGluZyAke3RoaXMucGFnZVRpdGxlfTogJHtlcnJvckluZm8/LmVycm9yLmluZm8gPz8gJ1Vua25vd24gZXJyb3InfSAoJHtlcnJvckNvZGV9KWAsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghcmVzdWx0KSByZXR1cm47XG5cbiAgICAgICAgICAgIG13Lm5vdGlmeShgUmVkaXJlY3QgJHt0aGlzLmV4aXN0cyA/ICdlZGl0ZWQnIDogJ2NyZWF0ZWQnfSBzdWNjZXNzZnVsbHkhYCwgeyB0eXBlOiAnc3VjY2VzcycgfSk7XG5cbiAgICAgICAgICAgIC8qIFN5bmMgdGFsayBwYWdlIGNoZWNrYm94IGhhbmRsZXIgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnN5bmNUYWxrQ2hlY2tib3g/LmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnNldExhYmVsKCdFZGl0aW5nIHRhbGsgcGFnZS4uLicpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbU1vdmUgPSB0aGlzLnRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIGZyb20gbW92ZScpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gW1xuICAgICAgICAgICAgICAgICAgICBgI1JFRElSRUNUIFtbJHt0aGlzLnBhcnNlZERlc3RpbmF0aW9uIS5nZXRUYWxrUGFnZSgpIS5nZXRQcmVmaXhlZFRleHQoKX1dXWAsIC8vXG4gICAgICAgICAgICAgICAgICAgIGZyb21Nb3ZlID8gJ3t7UmVkaXJlY3QgY2F0ZWdvcnkgc2hlbGx8XFxue3tSIGZyb20gbW92ZX19XFxufX0nIDogbnVsbCxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJ1xcblxcbicpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdGFsa1BhZ2UgPSB0aGlzLnBhZ2VUaXRsZVBhcnNlZC5nZXRUYWxrUGFnZSgpIS5nZXRQcmVmaXhlZFRleHQoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRhbGtSZXN1bHQgPSBhd2FpdCBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAgICAgLmVkaXQodGFsa1BhZ2UsICgpID0+ICh7IHRleHQ6IG91dHB1dCwgc3VtbWFyeTogJ1N5bmNpbmcgcmVkaXJlY3QgZnJvbSBtYWluIHBhZ2UgKHZpYSBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL3JlZGlyZWN0LWhlbHBlcnxyZWRpcmVjdC1oZWxwZXJdXSknIH0pKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCBlcnJvckluZm86IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ25vY3JlYXRlLW1pc3NpbmcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZSh0YWxrUGFnZSwgeyBzdW1tYXJ5OiAnU3luY2luZyByZWRpcmVjdCBmcm9tIG1haW4gcGFnZSAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvcmVkaXJlY3QtaGVscGVyfHJlZGlyZWN0LWhlbHBlcl1dKScgfSwgb3V0cHV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCBlcnJvckluZm86IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBjcmVhdGluZyAke3RhbGtQYWdlfTogJHtlcnJvckluZm8/LmVycm9yLmluZm8gPz8gJ1Vua25vd24gZXJyb3InfSAoJHtlcnJvckNvZGV9KWAsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEVycm9yIGVkaXRpbmcgb3IgY3JlYXRpbmcgJHt0YWxrUGFnZX06ICR7ZXJyb3JJbmZvPy5lcnJvci5pbmZvID8/ICdVbmtub3duIGVycm9yJ30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0YWxrUmVzdWx0KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBtdy5ub3RpZnkoJ1RhbGsgcGFnZSBzeW5jZWQgc3VjY2Vzc2Z1bGx5IScsIHsgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBQYXRyb2wgY2hlY2tib3ggaGFuZGxlciAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucGF0cm9sQ2hlY2tib3g/LmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnNldExhYmVsKCdQYXRyb2xsaW5nIHJlZGlyZWN0Li4uJyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXRyb2xMaW5rOiBIVE1MQW5jaG9yRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGF0cm9sbGluayBhJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFya1Jldmlld2VkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213ZS1wdC1tYXJrLWFzLXJldmlld2VkLWJ1dHRvbicpIGFzIEhUTUxCdXR0b25FbGVtZW50IHwgbnVsbDtcblxuICAgICAgICAgICAgICAgIGlmIChwYXRyb2xMaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdHJvbFJlc3VsdCA9IGF3YWl0IG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBvc3RXaXRoVG9rZW4oJ3BhdHJvbCcsIHsgYWN0aW9uOiAncGF0cm9sJywgcmNpZDogbmV3IFVSTChwYXRyb2xMaW5rLmhyZWYpLnNlYXJjaFBhcmFtcy5nZXQoJ3JjaWQnKSEgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9ySW5mbzogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBwYXRyb2xsaW5nICR7dGhpcy5wYWdlVGl0bGV9IHZpYSBBUEk6ICR7ZXJyb3JJbmZvPy5lcnJvci5pbmZvID8/ICdVbmtub3duIGVycm9yJ30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdHJvbFJlc3VsdCkgbXcubm90aWZ5KCdSZWRpcmVjdCBwYXRyb2xsZWQgc3VjY2Vzc2Z1bGx5IScsIHsgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWFya1Jldmlld2VkQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtSZXZpZXdlZEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoJ1JlZGlyZWN0IHBhdHJvbGxlZCBzdWNjZXNzZnVsbHkhJywgeyB0eXBlOiAnc3VjY2VzcycgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIG13Lm5vdGlmeSgnUGFnZSBjdXJhdGlvbiB0b29sYmFyIG5vdCBmb3VuZCwgcmVkaXJlY3QgY2Fubm90IGJlIHBhdHJvbGxlZCEnLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnNldExhYmVsKCdDb21wbGV0ZSwgcmVsb2FkaW5nLi4uJyk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbXcudXRpbC5nZXRVcmwodGhpcy5wYWdlVGl0bGUsIHsgcmVkaXJlY3Q6ICdubycgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXcgUmVkaXJlY3RIZWxwZXIoKS5ydW4oKTtcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogImFBR0EsR0FBRyxPQUFPLE1BQU0sQ0FBQyxpQkFBa0IsZUFBZ0Isa0JBQW1CLGtCQUFtQiwrQkFBZ0MsbUNBQW1DLEVBQUcsSUFBTSxDQU9qSyxNQUFNQSxVQUE0QixHQUFHLEdBQUcsZUFBZ0IsQ0FHcEQsWUFBWUMsRUFBbUNDLEVBQTJCLENBQ3RFLE1BQU1ELENBQU0sRUFNaEIsc0JBQW1CLElBQU0sQ0FDckIsTUFBTUUsRUFBUSxLQUFLLFNBQVMsRUFDdEJDLEVBQVcsRUFBRSxTQUFTLEVBRTVCLEdBQUksQ0FBQ0QsRUFBT0MsRUFBUyxRQUFRLENBQUMsQ0FBQyxV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ZWN0SW5wdXRXaWRnZXQiLCAiY29uZmlnIiwgInBhZ2VUaXRsZVBhcnNlZCIsICJ2YWx1ZSIsICJkZWZlcnJlZCIsICJ0aXRsZSIsICJyZXN1bHQiLCAibWF0Y2hlZFNlY3Rpb25zIiwgInNlY3Rpb24iLCAicGFyc2VkVGl0bGUiLCAicGFnZSIsICJyZXNwb25zZSIsICJkYXRhIiwgImxhYmVsIiwgIlRlbXBsYXRlUHJldmlld0RpYWxvZyIsICJwb3N0Q29uZmlnIiwgInRhZyIsICJ0YWdzQ29udGVudCIsICJjYXRlZ29yaWVzQ29udGVudCIsICJwYW5lbExheW91dCIsICJhY3Rpb24iLCAiUmVkaXJlY3RIZWxwZXIiLCAicGFnZUluZm8iLCAiZGlhbG9nSW5mbyIsICJidXR0b24iLCAiUmVkaXJlY3RIZWxwZXJEaWFsb2ciLCAicG9ydGxldExpbmsiLCAiZXZlbnQiLCAicmVkaXJlY3RUZW1wbGF0ZXMiLCAiY29udGVudFRleHQiLCAicGFnZVRpdGxlIiwgImV4aXN0cyIsICJtYWluUGFnZUNvbnRlbnQiLCAidGFyZ2V0IiwgInRhZ09yUmVkaXJlY3QiLCAic29ydGVkVGFncyIsICJhIiwgImIiLCAid2luZG93TWFuYWdlciIsICJ0ZW1wbGF0ZVByZXZpZXdEaWFsb2ciLCAicGFnZVRyaWFnZU1hcmtCdXR0b24iLCAicGF0cm9sUmVzcG9uc2UiLCAicmVkaXJlY3RWYWx1ZSIsICJ0YXJnZXRDaGFuZ2VkIiwgInRhZ3NDaGFuZ2VkIiwgInBhZ2VDb250ZW50IiwgInJlZGlyZWN0cyIsICJvcmlnaW5hbFJlZGlyZWN0VGFncyIsICJtYXRjaCIsICJuZXdUYWciLCAidGVtcGxhdGUiLCAiZXJyb3JzIiwgImRlc3RpbmF0aW9uIiwgImRlc3RpbmF0aW9uRGF0YSIsICJlcnJvckNvZGUiLCAiZGVzdGluYXRpb25QYXJzZVJlc3VsdCIsICJkZXN0aW5hdGlvblJlZGlyZWN0IiwgImRlc3RpbmF0aW9uQ29udGVudCIsICJhbmNob3IiLCAicGFydCIsICJlbGVtZW50IiwgIm1lc3NhZ2UiLCAid2FybmluZ01lc3NhZ2UiLCAib3V0cHV0IiwgInN1bW1hcnkiLCAiZXJyb3JJbmZvIiwgImZyb21Nb3ZlIiwgInRhbGtQYWdlIiwgInBhdHJvbExpbmsiLCAibWFya1Jldmlld2VkQnV0dG9uIl0KfQo=
