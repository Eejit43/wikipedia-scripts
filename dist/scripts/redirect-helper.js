"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows","oojs-ui.styles.icons-content","oojs-ui.styles.icons-editing-core","oojs-ui.styles.icons-accessibility"],()=>{class m extends OO.ui.TextInputWidget{constructor(e,t){super(e);this.api=new mw.Api;this.getLookupRequest=()=>{const e=this.getValue(),t=$.Deferred();if(!e)t.resolve([]);else if(e.includes("#")){const s=e.split("#")[0];this.api.get({action:"parse",page:s,prop:"sections",redirects:!0}).catch(()=>null).then(r=>{if(r){const i=r.parse.sections.filter(o=>o.line.toLowerCase().replaceAll(/<\/?i>/g,"").startsWith(e.split("#")[1].toLowerCase()));t.resolve(i.map(o=>({data:`${r.parse.title}#${o.line.replaceAll(/<\/?i>/g,"")}`,label:`${r.parse.title}#${o.line.replaceAll(/<\/?i>/g,"")}`})))}else t.resolve([])})}else{const s=mw.Title.newFromText(e);this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:s?.getNamespaceId()??0,gapprefix:s?.getMainText()??e,generator:"allpages",prop:["info","pageprops"]}).catch(()=>null).then(r=>{r?t.resolve(r.query?.pages?r.query.pages.filter(i=>i.title!==this.pageTitleParsed.toString()).map(i=>({data:i.title,label:new OO.ui.HtmlSnippet(`${i.title}${i.pageprops&&"disambiguation"in i.pageprops?" <i>(disambiguation)</i>":""}${"redirect"in i?" <i>(redirect)</i>":""}`)})):[]):t.resolve([])})}return t.promise({abort(){}})};this.getLookupCacheDataFromResponse=e=>e??[];this.getLookupMenuOptionsFromData=e=>e.map(({data:t,label:s})=>new OO.ui.MenuOptionWidget({data:t,label:s}));OO.ui.mixin.LookupElement.call(this,e),this.pageTitleParsed=t}}Object.assign(m.prototype,OO.ui.mixin.LookupElement.prototype);class h extends OO.ui.TextInputWidget{constructor(e){super(e);this.api=new mw.Api;this.getLookupRequest=()=>{const e=this.getValue(),t=$.Deferred();e||t.resolve([]);const s=mw.Title.newFromText(e);return this.api.get({action:"query",formatversion:"2",gaplimit:20,gapnamespace:14,gapprefix:s?.getMainText()??e,generator:"allpages",prop:"categories"}).catch(()=>null).then(r=>{if(r?.query?.pages){const i=r.query.pages.filter(o=>!(o.categories&&o.categories.some(n=>n.title==="Category:Wikipedia soft redirected categories"))).map(o=>{const n=o.title.split(":")[1];return{data:n,label:n}});this.emit("showing-values",i),t.resolve(i)}else t.resolve([])}),t.promise({abort(){}})};this.getLookupCacheDataFromResponse=e=>e??[];this.getLookupMenuOptionsFromData=e=>e.map(({data:t,label:s})=>new OO.ui.MenuOptionWidget({data:t,label:s}));OO.ui.mixin.LookupElement.call(this,e)}}Object.assign(h.prototype,OO.ui.mixin.LookupElement.prototype);class l extends OO.ui.ProcessDialog{constructor(e,t){super(e);this.api=new mw.Api;this.getSetupProcess=()=>l.super.prototype.getSetupProcess.call(this).next(()=>this.api.post({action:"parse",formatversion:"2",contentmodel:"wikitext",prop:["text","categorieshtml"],title:this.pageTitleParsed.getPrefixedDb(),text:`{{Redirect category shell|${this.getData().map(e=>`{{${e}}}`).join("")}}}`}).then(e=>{const t=e.parse.text,s=e.parse.categorieshtml,r=new OO.ui.PanelLayout({padded:!0,expanded:!1});r.$element.append(t,s),this.$body.append(r.$element)}));this.getActionProcess=e=>e?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):l.super.prototype.getActionProcess.call(this,e);this.getTeardownProcess=()=>l.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});this.pageTitleParsed=t,l.static.name="TemplatePreviewDialog",l.static.title="Redirect categorization templates preview",l.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]}]}}Object.assign(l.prototype,OO.ui.ProcessDialog.prototype);class c extends OO.ui.ProcessDialog{constructor(e){super(e);this.api=new mw.Api;this.getSetupProcess=()=>c.super.prototype.getSetupProcess.call(this).next(()=>{const[e,t]=this.getData();return this.api.post({action:"compare",formatversion:"2",prop:["diff"],fromslots:"main","fromtext-main":e,"fromcontentmodel-main":"wikitext",toslots:"main","totext-main":t,"tocontentmodel-main":"wikitext"}).then(s=>{const r=s.compare.body,i=new OO.ui.MessageWidget({type:"warning",label:"No changes to make!"}),o=new OO.ui.PanelLayout({padded:!0,expanded:!1});o.$element.append(r?`
<table class="diff diff-editfont-monospace">
    <colgroup>
        <col class="diff-marker">
        <col class="diff-content">
        <col class="diff-marker">
        <col class="diff-content">
    </colgroup>
    <tbody>
        ${r}
    </tbody>
</table>`:i.$element[0]),this.$body.append(o.$element)})});this.getActionProcess=e=>e?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):c.super.prototype.getActionProcess.call(this,e);this.getTeardownProcess=()=>c.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});c.static.name="ShowChangesDialog",c.static.title="Changes to be made",c.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]}]}}Object.assign(c.prototype,OO.ui.ProcessDialog.prototype);class f{constructor(){this.api=new mw.Api}async run(){if(this.passesPreChecks()){if(this.redirectTemplates=await this.fetchRedirectTemplates(),this.contentText=document.querySelector("#mw-content-text"),!this.contentText)return mw.notify("redirect-helper: Failed to find content text element!",{type:"error"});if(this.pageTitle=mw.config.get("wgPageName"),this.pageTitleParsed=mw.Title.newFromText(this.pageTitle),!this.pageTitleParsed)return mw.notify("redirect-helper: Failed to parse page title!",{type:"error"});await this.checkPageAndLoad()}}passesPreChecks(){return[mw.config.get("wgNamespaceNumber")>=0,mw.config.get("wgIsProbablyEditable"),mw.config.get("wgIsArticle"),mw.config.get("wgAction")==="view",mw.config.get("wgRevisionId")===mw.config.get("wgCurRevisionId"),!mw.config.get("wgDiffOldId")].every(Boolean)}async fetchRedirectTemplates(){return JSON.parse((await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/redirect-helper.json"})).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")}async checkPageAndLoad(){const a=await this.api.get({action:"query",formatversion:"2",prop:"info",titles:this.pageTitle}),e={redirectTemplates:this.redirectTemplates,contentText:this.contentText,pageTitle:this.pageTitle,pageTitleParsed:this.pageTitleParsed};if(a.query.pages[0].missing){mw.util.addCSS(`
#create-redirect-button {
    margin-bottom: 20px;
}`);const t=new OO.ui.ButtonWidget({id:"create-redirect-button",label:"Create redirect",icon:"articleRedirect",flags:["progressive"]});t.on("click",()=>{t.$element[0].remove(),new g(e,!1).load()}),this.contentText.prepend(t.$element[0])}else if(a.query.pages[0].redirect)new g(e,!0).load();else{const t=mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Redirect page","redirect-helper");t.addEventListener("click",s=>{s.preventDefault(),new g(e,!1).load(),window.scrollTo({top:0,behavior:"smooth"}),t.remove()})}}}class g{constructor({redirectTemplates:a,contentText:e,pageTitle:t,pageTitleParsed:s},r){this.api=new mw.Api;this.redirectRegex=/^#redirect:?\s*\[\[\s*:?([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i;this.scriptAdvert=" (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";this.needsCheck=!0;this.pageContent="";this.redirectTemplates=a,this.contentText=e,this.pageTitle=t,this.pageTitleParsed=s,this.exists=r}async load(){mw.util.addCSS(`
#create-redirect-button {
    margin-bottom: 20px;
}

#redirect-helper-box {
    background-color: whitesmoke;
    width: 700px;
    max-width: calc(100% - 50px);
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 25px !important;
}

.redirect-input-layout label {
    font-weight: bold;
}

#redirect-helper-summary-layout {
    padding-top: 10px;
    margin-top: 15px;
    border-top: 1px solid gray;
}

#redirect-helper-submit-layout {
    margin-top: 10px;
}

#redirect-helper-submit-layout > * {
    margin-bottom: 0;
}

.redirect-helper-warning {
    margin-top: 8px;
}`),mw.loader.addLinkTag("https://www.mediawiki.org/w/load.php?modules=mediawiki.diff.styles&only=styles"),this.editorBox=new OO.ui.PanelLayout({id:"redirect-helper-box",padded:!0,expanded:!1,framed:!0}),this.pageTitleParsed.isTalkPage()&&(await this.api.get({action:"query",formatversion:"2",prop:"info",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].redirect&&await this.loadSyncWithMainButton(),this.loadInputElements(),await this.loadSubmitElements(),this.editorBox.$element[0].append(...[this.syncWithMainButton?.$element?.[0],this.redirectInputLayout.$element[0],this.tagSelectLayout.$element[0],this.defaultSortInputLayout.$element[0],this.categorySelectLayout.$element[0],this.summaryInputLayout.$element[0],this.submitLayout.$element[0]].filter(Boolean)),this.contentText.prepend(this.editorBox.$element[0]),this.exists&&this.loadExistingData()}async loadSyncWithMainButton(){const a=await this.getPageContent(this.pageTitleParsed.getSubjectPage().getPrefixedText());this.syncWithMainButton=new OO.ui.ButtonWidget({label:"Sync with main page",icon:"link",flags:["progressive"]}),this.syncWithMainButton.on("click",()=>{const e=this.redirectRegex.exec(a)?.[1];if(!e)return mw.notify("Failed to parse main page content!",{type:"error"});this.redirectInput.setValue(mw.Title.newFromText(e)?.getTalkPage()?.toString()??""),["R from move",...this.redirectTemplates["R from move"]].some(s=>new RegExp(`{{\\s*[${s[0].toLowerCase()}${s[0]}]${s.slice(1)}\\s*(\\||}})`).test(a))&&this.tagSelect.setValue(["R from move"])})}loadInputElements(){this.redirectInput=new m({placeholder:"Target page name",required:!0},this.pageTitleParsed),this.redirectInput.on("change",()=>{let t=this.redirectInput.getValue();t=t.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),t=t.replace(/^:/,""),t.length>0?(this.redirectInput.setValue(t[0].toUpperCase()+t.slice(1).replaceAll("_"," ")),this.submitButton.setDisabled(!1),this.showChangesButton.setDisabled(!1)):(this.submitButton.setDisabled(!0),this.showChangesButton.setDisabled(!0)),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.redirectInputLayout=new OO.ui.FieldLayout(this.redirectInput,{label:"Redirect target:",classes:["redirect-input-layout"],align:"top"}),this.tagSelect=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.keys(this.redirectTemplates).map(t=>({data:t,label:t}))}),this.tagSelect.getMenu().filterMode="substring",this.tagSelect.on("change",()=>{const t=this.tagSelect.getValue().sort((s,r)=>s.toLowerCase().localeCompare(r.toLowerCase()));this.tagSelect.getValue().join(";")!==t.join(";")&&this.tagSelect.setValue(t),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0,this.tagSelect.getValue().length>0?this.previewButton.setDisabled(!1):this.previewButton.setDisabled(!0)});const a=new OO.ui.WindowManager;document.body.append(a.$element[0]);const e=new l({size:"large"},this.pageTitleParsed);a.addWindows([e]),this.previewButton=new OO.ui.ButtonWidget({icon:"eye",label:"Preview",disabled:!0}),this.previewButton.on("click",()=>{e.setData(this.tagSelect.getValue()),e.open()}),this.tagSelectLayout=new OO.ui.ActionFieldLayout(this.tagSelect,this.previewButton,{label:"Redirect categorization templates:",classes:["redirect-input-layout"],align:"top"}),this.defaultSortInput=new OO.ui.TextInputWidget,this.defaultSortInput.on("change",()=>{const t=this.defaultSortInput.getValue();t.length>0&&this.defaultSortInput.setValue(t.replaceAll("_"," ")),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.defaultSortInputLayout=new OO.ui.FieldLayout(this.defaultSortInput,{label:new OO.ui.HtmlSnippet(`Default sort key (DEFAULTSORT) (see <a href="${mw.util.getUrl("Wikipedia:Categorization#Sort keys")}" target="_blank">guideline</a>):`),classes:["redirect-input-layout"],align:"top"}),this.categorySelectInput=new h({placeholder:"Add categories here"}),this.categorySelectInput.on("change",()=>{let t=this.categorySelectInput.getValue();t=t.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),t=t.replace(/^Category:/,""),t.length>0&&this.categorySelectInput.setValue(t[0].toUpperCase()+t.slice(1).replaceAll("_"," "))}),this.categorySelectInput.on("showing-values",t=>{for(const s of t)this.categorySelect.addAllowedValue(s.data)}),this.categorySelect=new OO.ui.TagMultiselectWidget({allowReordering:!1,inputPosition:"outline",inputWidget:this.categorySelectInput}),this.categorySelect.on("change",()=>{const t=this.categorySelect.getValue().sort((s,r)=>s.toLowerCase().localeCompare(r.toLowerCase()));this.categorySelect.getValue().join(";")!==t.join(";")&&this.categorySelect.setValue(t),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.categorySelectLayout=new OO.ui.FieldLayout(this.categorySelect,{label:"Categories:",classes:["redirect-input-layout"],align:"top"}),this.summaryInput=new OO.ui.ComboBoxInputWidget({options:[{data:"Resolve double redirect"},{data:"Resolve self redirect"},{data:"Remove incorrect rcats"}]}),this.summaryInputLayout=new OO.ui.FieldLayout(this.summaryInput,{id:"redirect-helper-summary-layout",label:"Summary:",classes:["redirect-input-layout"],align:"top"})}async loadSubmitElements(){this.submitButton=new OO.ui.ButtonWidget({label:"Submit",disabled:!0,flags:["progressive"]}),this.submitButton.on("click",()=>this.handleSubmitButtonClick()),this.exists&&(this.pageContent=await this.getPageContent(this.pageTitle));const a=new OO.ui.WindowManager;document.body.append(a.$element[0]);const e=new c({size:"large"});a.addWindows([e]),this.showChangesButton=new OO.ui.ButtonWidget({label:"Show changes",disabled:!0}),this.showChangesButton.on("click",()=>{e.setData([this.pageContent,this.createOutput(this.redirectInput.getValue(),this.tagSelect.getValue(),this.oldStrayText,this.defaultSortInput.getValue(),this.categorySelect.getValue())]),e.open()}),this.pageTitleParsed.isTalkPage()||(this.talkData=await this.api.get({action:"query",formatversion:"2",prop:"info",titles:this.pageTitleParsed.getTalkPage().getPrefixedText()}),this.syncTalkCheckbox=new OO.ui.CheckboxInputWidget({selected:!!this.talkData.query.pages[0].redirect}),this.syncTalkCheckboxLayout=new OO.ui.Widget({content:[new OO.ui.FieldLayout(this.syncTalkCheckbox,{label:"Sync talk page",align:"inline"})]})),await this.checkShouldPromptPatrol()&&(this.patrolCheckbox=new OO.ui.CheckboxInputWidget({selected:!0}),this.patrolCheckboxLayout=new OO.ui.Widget({content:[new OO.ui.FieldLayout(this.patrolCheckbox,{label:"Mark as patrolled",align:"inline"})]})),this.submitLayout=new OO.ui.HorizontalLayout({id:"redirect-helper-submit-layout",items:[this.submitButton,this.showChangesButton,this.syncTalkCheckboxLayout,this.patrolCheckboxLayout].filter(Boolean)})}async checkShouldPromptPatrol(){const a=document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");if(a?.click(),a?.click(),mw.config.get("wgNamespaceNumber")!==0)return!1;if(document.querySelector(".patrollink"))return!0;if(document.querySelector("#mwe-pt-mark-as-reviewed-button"))return!0;if(document.querySelector("#mwe-pt-mark-as-unreviewed-button"))return!1;{if(!mw.config.get("wgArticleId")||!(await this.api.get({action:"query",meta:"userinfo",uiprop:"rights"})).query.userinfo.rights.includes("patrol"))return!1;const t=await this.api.get({action:"pagetriagelist",page_id:mw.config.get("wgArticleId")});return t.pagetriagelist.pages[0]?.user_name===mw.config.get("wgUserName")||t.pagetriagelist.result!=="success"||t.pagetriagelist.pages.length===0?!1:!Number.parseInt(t.pagetriagelist.pages[0]?.patrol_status)}}updateSummary(){const a=this.redirectInput.getValue().trim();if(!a)this.summaryInput.$tabIndexed[0].placeholder="";else if(this.exists){const e=a!==this.oldRedirectTarget?.replaceAll("_"," "),t=this.tagSelect.getValue().some(o=>!this.oldRedirectTags.includes(o))||this.oldRedirectTags.some(o=>!this.tagSelect.getValue().includes(o)),s=this.defaultSortInput.getValue().trim()!==this.oldDefaultSort.replaceAll("_"," "),r=this.categorySelect.getValue().some(o=>!this.oldCategories.includes(o))||this.oldCategories.some(o=>!this.categorySelect.getValue().includes(o)),i=[];e&&i.push(`retarget to [[${a}]]`),t&&i.push("change categorization templates"),s&&i.push("change default sort key"),r&&i.push("change categories"),i.length===0&&i.push("perform redirect cleanup"),i[0]=i[0][0].toUpperCase()+i[0].slice(1),i.length>1&&(i[i.length-1]=`and ${i.at(-1)}`),this.summaryInput.$tabIndexed[0].placeholder=i.join(i.length>2?", ":" ")}else this.summaryInput.$tabIndexed[0].placeholder=`Create redirect to [[${a}]]`}loadExistingData(){this.oldRedirectTarget=this.redirectRegex.exec(this.pageContent)?.[1],this.oldRedirectTags=Object.entries(this.redirectTemplates).map(([e,t])=>[e,...t].some(s=>new RegExp(`{{\\s*[${s[0].toLowerCase()}${s[0]}]${s.slice(1)}\\s*(\\||}})`).test(this.pageContent))?e:null).filter(Boolean).sort((e,t)=>e.toLowerCase().localeCompare(t.toLowerCase()));const a=Object.entries(this.redirectTemplates).flatMap(([e,t])=>[e,...t]).map(e=>new RegExp(`{{\\s*[${e[0].toLowerCase()}${e[0]}]${e.slice(1)}\\s*(\\||}})`).test(this.pageContent)?e:null).filter(Boolean);this.oldRedirectTagData=Object.fromEntries(a.map(e=>{const t=new RegExp(`{{\\s*[${e[0].toLowerCase()}${e[0]}]${e.slice(1)}\\|?(.*?)\\s*}}`).exec(this.pageContent),s=Object.entries(this.redirectTemplates).find(([r,i])=>[r,...i].includes(e))?.[0];return t?[s,t[1]]:null}).filter(Boolean)),this.oldDefaultSort=this.pageContent.match(/{{DEFAULTSORT:.*?}}/g)?.at(-1)?.slice(14,-2)?.trim()??"",this.oldCategories=this.pageContent.match(/\[\[[Cc]ategory:.+?]]/g)?.map(e=>e.slice(11,-2))??[],this.oldStrayText=[this.pageContent.match(/{{short description\|.*?}}/i)?.[0],this.pageContent.match(/{{DISPLAYTITLE:.*?}}/)?.[0],this.pageContent.match(/{{italic title\|?.*?}}/i)?.[0],this.pageContent.match(/{{title language\|.*?}}/)?.[0]].filter(Boolean).join(`
`),this.oldRedirectTarget?this.redirectInput.setValue(this.oldRedirectTarget.replaceAll("_"," ")):mw.notify("Could not find redirect target!",{type:"error"}),this.tagSelect.setValue(this.oldRedirectTags),this.oldDefaultSort&&this.defaultSortInput.setValue(this.oldDefaultSort);for(const e of this.oldCategories)this.categorySelect.addAllowedValue(e);this.categorySelect.setValue(this.oldCategories.map(e=>({data:e,label:e}))),this.updateSummary()}async validateSubmission(){const a=[],e=this.redirectInput.getValue().trim(),t=this.tagSelect.getValue();/^\s*[^[\]{|}]+\s*$/.test(e)||a.push({title:e,message:"is not a valid page title!"});try{this.parsedDestination=mw.Title.newFromText(e)}catch{a.length===0&&a.push({title:e,message:"is not a valid page title!"})}!this.parsedDestination&&a.length===0&&a.push({title:e,message:"is not a valid page title!"}),this.parsedDestination?.toString()===this.pageTitleParsed.toString()&&a.push({message:"cannot redirect to itself!"});const s=await this.api.get({action:"query",formatversion:"2",prop:"pageprops",titles:e}).catch(i=>(i==="missingtitle"?a.push({title:e,message:"does not exist!"}):a.push({title:e,message:`was not able to be fetched from the API (${i})!`}),null)),r=await this.api.get({action:"parse",page:e,prop:"sections",redirects:!0});if(r.parse.redirects?.[0]){const i=r.parse.redirects[0].to+(r.parse.redirects[0].tofragment?`#${r.parse.redirects[0].tofragment}`:"");a.push({title:e,message:`is a redirect to <a href="${mw.util.getUrl(i)}" target="_blank">${i}</a>. Retarget to that page instead, as double redirects aren't allowed.`})}if(e.split("#").length>1)if(r.parse.sections.find(o=>o.line.replaceAll(/<\/?i>/g,"")===e.split("#")[1]))t.includes("R to anchor")&&a.push({message:"is tagged as a redirect to an anchor, but it is actually a redirect to a section!"}),t.includes("R to section")||a.push({message:"is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!"});else{const o=(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:this.parsedDestination.toString()})).query.pages[0].revisions[0].slots.main.content;[...o.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map(u=>u.split("|").map(p=>p.trim()))?.flat()??[],...o.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(u=>u.split("|").map(p=>p.trim()).filter(p=>!/^text\s*?=/.test(p)))?.flat()??[],...o.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map(u=>u.trim())??[]].includes(e.split("#")[1])?(t.includes("R to section")&&a.push({message:"is tagged as a redirect to a section, but it is actually a redirect to an anchor!"}),t.includes("R to anchor")||a.push({message:"is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!"})):a.push({message:`is a redirect to <a href="${mw.util.getUrl(e)}" target="_blank">${e}</a>, but that section or anchor does not exist!`})}e.split("#").length===1&&(t.includes("R to section")||t.includes("R to anchor"))&&a.push({message:"is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!"}),s.query.pages[0].pageprops&&"disambiguation"in s.query.pages[0].pageprops&&!["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation","R from incorrect disambiguation","R from other disambiguation"].some(i=>t.includes(i))&&a.push({message:"is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!"}),s.query.pages[0].pageprops&&!("disambiguation"in s.query.pages[0].pageprops)&&["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation"].some(i=>t.includes(i))&&a.push({message:"is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!"}),t.includes("R to disambiguation page")&&!this.pageTitleParsed.getMainText().endsWith(" (disambiguation)")&&a.push({message:'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'});for(const i of["R semi-protected","R extended-protected","R template-protected","R fully protected"])t.includes(i)&&a.push({message:`is tagged with unnecessarily tagged with <code>{{${i}}}</code> which will be duplicated by the redirect category shell!`});return mw.config.get("wgWikibaseItemId")&&!t.includes("R with Wikidata item")&&a.push({message:"is linked to a Wikidata item but it isn't tagged with <code>{{R with Wikidata item}}</code>!"}),t.includes("R with Wikidata item")&&!mw.config.get("wgWikibaseItemId")&&a.push({message:"is tagged with <code>{{R with Wikidata item}}</code> but it is not actually linked to a Wikidata item!"}),this.syncTalkCheckbox?.isSelected()&&!this.talkData.query.pages[0].missing&&!this.talkData.query.pages[0].redirect&&a.push({title:this.pageTitleParsed.getTalkPage().getPrefixedText(),message:"exists, but is not a redirect!"}),a}async handleSubmitButtonClick(){const a=[this.redirectInput,this.tagSelect,this.defaultSortInput,this.categorySelect,this.summaryInput,this.submitButton,this.previewButton,this.syncTalkCheckbox,this.patrolCheckbox].filter(Boolean);for(const i of a)i.setDisabled(!0);this.submitButton.setLabel("Checking target validity...");let e=[];if(this.needsCheck?e=await this.validateSubmission():this.parsedDestination=mw.Title.newFromText(this.redirectInput.getValue()),e.length>0){for(const i of document.querySelectorAll(".redirect-helper-warning"))i.remove();for(const{title:i,message:o}of e){const n=new OO.ui.HtmlSnippet(`${i?`<a href="${mw.util.getUrl(i)}" target="_blank">${i}</a>`:"This page"} ${o} Click again without making changes to submit anyway.`),u=new OO.ui.MessageWidget({type:"error",classes:["redirect-helper-warning"],inline:!0,label:n});this.editorBox.$element[0].append(u.$element[0])}for(const i of a)i.setDisabled(!1);this.tagSelect.getValue().length>0&&this.previewButton.setDisabled(!1),this.submitButton.setLabel("Submit anyway"),this.needsCheck=!1;return}this.submitButton.setLabel(`${this.exists?"Editing":"Creating"} redirect...`);const t=this.createOutput(this.redirectInput.getValue(),this.tagSelect.getValue(),this.oldStrayText,this.defaultSortInput.getValue(),this.categorySelect.getValue()),s=(this.summaryInput.getValue()||this.summaryInput.$tabIndexed[0].placeholder)+this.scriptAdvert;if(await this.editOrCreate(this.pageTitle,t,s)){if(mw.notify(`Redirect ${this.exists?"edited":"created"} successfully!`,{type:"success"}),this.syncTalkCheckbox?.isSelected()){this.submitButton.setLabel("Editing talk page...");const i=this.tagSelect.getValue().includes("R from move"),o=this.createOutput(this.parsedDestination.getTalkPage().getPrefixedText(),i?["R from move"]:[],void 0,void 0,[]);if(!await this.editOrCreate(this.pageTitleParsed.getTalkPage().getPrefixedText(),o,"Syncing redirect from main page"+this.scriptAdvert))return;mw.notify("Talk page synced successfully!",{type:"success"})}if(this.patrolCheckbox?.isSelected()){this.submitButton.setLabel("Patrolling redirect...");const i=document.querySelector(".patrollink a"),o=document.querySelector("#mwe-pt-mark-as-reviewed-button");i?await this.api.postWithToken("patrol",{action:"patrol",rcid:new URL(i.href).searchParams.get("rcid")}).catch((u,p)=>(mw.notify(`Error patrolling ${this.pageTitle} via API: ${p?.error.info??"Unknown error"} (${u})`,{type:"error"}),null))&&mw.notify("Redirect patrolled successfully!",{type:"success"}):o?(o.click(),mw.notify("Redirect patrolled successfully!",{type:"success"})):mw.notify("Page curation toolbar not found, redirect cannot be patrolled!",{type:"error"})}this.submitButton.setLabel("Complete, reloading..."),window.location.href=mw.util.getUrl(this.pageTitle,{redirect:"no"})}}createOutput(a,e,t,s,r){const i=mw.Title.newFromText(a);return[`#REDIRECT [[${i?`${i.getNamespaceId()===14?":":""}${i.getPrefixedText()}`:a.trim()}]]
`,e.length>0?`{{Redirect category shell|
${e.map(n=>`{{${n}${this.oldRedirectTagData?.[n]?`|${this.oldRedirectTagData[n]}`:""}}}`).join(`
`)}
}}
`:null,t?t+`
`:null,s?`{{DEFAULTSORT:${s.trim()}}}`:null,r.length>0?r.map(n=>`[[Category:${n}]]`).join(`
`):null].filter(Boolean).join(`
`)}async getPageContent(a){return(await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:a})).query.pages[0].revisions[0].slots.main.content.trim()}async editOrCreate(a,e,t){return await this.api.edit(a,()=>({text:e,summary:t})).catch((s,r)=>s==="nocreate-missing"?this.api.create(a,{summary:t},e).catch((i,o)=>{mw.notify(`Error creating ${a}: ${o?.error.info??"Unknown error"} (${i})`,{type:"error"})}):(mw.notify(`Error editing or creating ${a}: ${r?.error.info??"Unknown error"} (${s})`,{type:"error"}),null))}}new f().run()});
//# sourceMappingURL=data:application/json;base64,
