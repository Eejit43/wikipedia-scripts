"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui.styles.icons-content","oojs-ui.styles.icons-editing-core"],()=>{class A extends OO.ui.TextInputWidget{constructor(r,a){super(r);this.getLookupRequest=()=>{const r=this.getValue(),a=$.Deferred();if(!r)a.resolve([]);else if(r.includes("#")){const m=r.split("#")[0];new mw.Api().get({action:"parse",page:m,prop:"sections",redirects:"1"}).catch(()=>null).then(s=>{if(s){const f=s.parse.sections.filter(c=>c.line.toLowerCase().startsWith(r.split("#")[1].toLowerCase()));a.resolve(f.map(c=>({data:`${s.parse.title}#${c.line}`,label:`${s.parse.title}#${c.line}`})))}else a.resolve([])})}else{const m=mw.Title.newFromText(r);new mw.Api().get({action:"query",formatversion:2,gaplimit:20,gapnamespace:m?.getNamespaceId()??0,gapprefix:m?.getMainText()??r,generator:"allpages",prop:"info|pageprops"}).catch(()=>null).then(s=>{s?a.resolve(s.query?.pages?s.query.pages.filter(f=>f.title!==this.pageTitleParsed.toString()).map(f=>({data:f.title,label:new OO.ui.HtmlSnippet(`${f.title}${f.pageprops&&"disambiguation"in f.pageprops?" <i>(disambiguation)</i>":""}${"redirect"in f?" <i>(redirect)</i>":""}`)})):[]):a.resolve([])})}return a.promise({abort(){}})};this.getLookupCacheDataFromResponse=r=>r??[];this.getLookupMenuOptionsFromData=r=>r.map(({data:a,label:m})=>new OO.ui.MenuOptionWidget({data:a,label:m}));OO.ui.mixin.LookupElement.call(this,r),this.pageTitleParsed=a}}Object.assign(A.prototype,OO.ui.mixin.LookupElement.prototype);class B{async run(){if(this.passesPreChecks()){if(this.redirectTemplates=await this.fetchRedirectTemplates(),this.contentText=document.querySelector("#mw-content-text"),!this.contentText)return mw.notify("redirect-helper: Failed to find content text element!",{type:"error"});if(this.pageTitle=mw.config.get("wgPageName"),this.pageTitleParsed=mw.Title.newFromText(this.pageTitle),!this.pageTitleParsed)return mw.notify("redirect-helper: Failed to parse page title!",{type:"error"});await this.checkPageAndLoad()}}passesPreChecks(){return[mw.config.get("wgNamespaceNumber")>=0,mw.config.get("wgIsProbablyEditable"),mw.config.get("wgIsArticle"),mw.config.get("wgAction")==="view",mw.config.get("wgRevisionId")===mw.config.get("wgCurRevisionId"),!mw.config.get("wgDiffOldId")].every(Boolean)}async fetchRedirectTemplates(){return JSON.parse((await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:"User:Eejit43/scripts/redirect-helper.json"})).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")}async checkPageAndLoad(){const l=await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitle}),r={redirectTemplates:this.redirectTemplates,contentText:this.contentText,pageTitle:this.pageTitle,pageTitleParsed:this.pageTitleParsed};if(l.query.pages[0].missing){const a=new OO.ui.ButtonWidget({label:"Create redirect",icon:"articleRedirect",flags:["progressive"]});a.$element[0].style.marginBottom="20px",a.on("click",()=>{a.$element[0].remove(),new v(r,!1).run()}),this.contentText.prepend(a.$element[0])}else l.query.pages[0].redirect?new v(r,!0).run():mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Redirect page","redirect-helper").addEventListener("click",m=>{m.preventDefault(),new v(r,!1).run()})}}class v{constructor({redirectTemplates:l,contentText:r,pageTitle:a,pageTitleParsed:m},s){this.redirectTemplates=l,this.contentText=r,this.pageTitle=a,this.pageTitleParsed=m,this.exists=s}async run(){const l=new OO.ui.PanelLayout({padded:!0,expanded:!1,framed:!0});l.$element[0].style.backgroundColor="#95d4bc",l.$element[0].style.width="700px",l.$element[0].style.maxWidth="calc(100% - 50px)",l.$element[0].style.marginLeft="auto",l.$element[0].style.marginRight="auto",l.$element[0].style.marginBottom="20px";let r;if(this.pageTitleParsed.isTalkPage()&&(await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].redirect){const t=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].revisions[0].slots.main.content.trim();r=new OO.ui.ButtonWidget({label:"Sync with main page",icon:"link",flags:["progressive"]}),r.on("click",()=>{const n=/^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(t)?.[1];if(!n)return mw.notify("Failed to parse main page content!",{type:"error"});a.setValue(mw.Title.newFromText(n)?.getTalkPage()?.toString()??""),["R from move",...this.redirectTemplates["R from move"]].some(w=>new RegExp(`{{\\s*[${w[0].toLowerCase()}${w[0]}]${w.slice(1)}\\s*(\\||}})`).test(t))&&s.setValue(["R from move"])})}const a=new A({placeholder:"Target page name",required:!0},this.pageTitleParsed);a.on("change",()=>{let i=a.getValue();i=i.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),i=i.replace(/^:/,""),i.length>0?(a.setValue(i[0].toUpperCase()+i.slice(1).replaceAll("_"," ")),p.setDisabled(!1)):p.setDisabled(!0),E(this.exists),p.setLabel("Submit"),P=!0});const m=new OO.ui.FieldLayout(a,{label:new OO.ui.HtmlSnippet("<b>Redirect target:</b>"),align:"top"}),s=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.keys(this.redirectTemplates).map(i=>({data:i,label:i}))});s.getMenu().filterMode="substring",s.on("change",()=>{const i=s.getValue().sort((t,n)=>t.toLowerCase().localeCompare(n.toLowerCase()));s.getValue().join(";")!==i.join(";")&&s.setValue(i),E(this.exists),p.setLabel("Submit"),P=!0});const f=new OO.ui.FieldLayout(s,{label:new OO.ui.HtmlSnippet("<b>Redirect categorization template(s):</b>"),align:"top"}),c=new OO.ui.ComboBoxInputWidget({options:[{data:"Resolve double redirect"},{data:"Resolve self redirect"},{data:"Remove incorrect rcats"}]}),j=new OO.ui.FieldLayout(c,{label:new OO.ui.HtmlSnippet("<b>Summary:</b>"),align:"top"}),p=new OO.ui.ButtonWidget({label:"Submit",disabled:!0,flags:["progressive"]});p.$element[0].style.marginBottom="0";let P=!0;p.on("click",async()=>{for(const e of[a,s,c,p,R,x].filter(Boolean))e.setDisabled(!0);p.setLabel("Checking target validity...");let i;const t=[];if(P){const e=a.getValue().trim();/^\s*[^[\]{|}]+\s*$/.test(e)||t.push({title:e,message:"is not a valid page title!"});try{i=mw.Title.newFromText(e)}catch{t.length===0&&t.push({title:e,message:"is not a valid page title!"})}!i&&t.length===0&&t.push({title:e,message:"is not a valid page title!"}),i?.toString()===this.pageTitleParsed.toString()&&t.push({message:"cannot redirect to itself!"});const g=await new mw.Api().get({action:"query",formatversion:2,prop:"pageprops",titles:e}).catch(o=>(o==="missingtitle"?t.push({title:e,message:"does not exist!"}):t.push({title:e,message:`was not able to be fetched from the API (${o})!`}),null)),d=await new mw.Api().get({action:"parse",page:e,prop:"sections",redirects:"1"});if(d.parse.redirects?.[0]){const o=d.parse.redirects[0].to+(d.parse.redirects[0].tofragment?`#${d.parse.redirects[0].tofragment}`:"");t.push({title:e,message:`is a redirect to <a href="${mw.util.getUrl(o)}" target="_blank">${o}</a>. Retarget to that page instead, as double redirects aren't allowed.`})}if(e.split("#").length>1)if(d.parse.sections.find(T=>T.line===e.split("#")[1]))s.getValue().includes("R to anchor")&&t.push({message:"is tagged as a redirect to an anchor, but it is actually a redirect to a section!"}),s.getValue().includes("R to section")||t.push({message:"is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!"});else{const T=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:i.toString()})).query.pages[0].revisions[0].slots.main.content;[...T.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map(y=>y.split("|").map(b=>b.trim()))?.flat()??[],...T.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(y=>y.split("|").map(b=>b.trim()).filter(b=>!/^text\s*?=/.test(b)))?.flat()??[],...T.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map(y=>y.trim())??[]].includes(e.split("#")[1])?(s.getValue().includes("R to section")&&t.push({message:"is tagged as a redirect to a section, but it is actually a redirect to an anchor!"}),s.getValue().includes("R to anchor")||t.push({message:"is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!"})):t.push({message:`is a redirect to <a href="${mw.util.getUrl(e)}" target="_blank">${e}</a>, but that section or anchor does not exist!`})}e.split("#").length===1&&(s.getValue().includes("R to section")||s.getValue().includes("R to anchor"))&&t.push({message:"is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!"}),g.query.pages[0].pageprops&&"disambiguation"in g.query.pages[0].pageprops&&!["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation","R from incorrect disambiguation","R from other disambiguation"].some(o=>s.getValue().includes(o))&&t.push({message:"is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!"}),g.query.pages[0].pageprops&&!("disambiguation"in g.query.pages[0].pageprops)&&["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation"].some(o=>s.getValue().includes(o))&&t.push({message:"is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!"}),s.getValue().includes("R to disambiguation page")&&!this.pageTitleParsed.getMainText().endsWith(" (disambiguation)")&&t.push({message:'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'}),R?.isSelected()&&!O.query.pages[0].missing&&!O.query.pages[0].redirect&&t.push({title:this.pageTitleParsed.getTalkPage().getPrefixedText(),message:"exists, but is not a redirect!"})}if(t.length>0){for(const e of document.querySelectorAll(".redirect-helper-warning"))e.remove();for(const{title:e,message:g}of t){const d=new OO.ui.HtmlSnippet(`${e?`<a href="${mw.util.getUrl(e)}" target="_blank">${e}</a>`:"This page"} ${g} Click again without making changes to submit anyway.`),o=new OO.ui.MessageWidget({type:"error",classes:["redirect-helper-warning"],inline:!0,label:d});o.$element[0].style.marginTop="8px",l.$element[0].append(o.$element[0])}for(const e of[a,s,c,p,R,x].filter(Boolean))e.setDisabled(!1);p.setLabel("Submit anyway"),P=!1;return}i=mw.Title.newFromText(a.getValue()),p.setLabel(`${this.exists?"Editing":"Creating"} redirect...`);const n=[`#REDIRECT [[${a.getValue().trim()}]]`,s.getValue().length>0?`{{Redirect category shell|
${s.getValue().map(e=>`{{${e}${S?.[e]?`|${S[e]}`:""}}}`).join(`
`)}
}}`:null,D].filter(Boolean).join(`

`),u=(c.getValue()||c.$tabIndexed[0].placeholder)+" (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";if(await new mw.Api().edit(this.pageTitle,()=>({text:n,summary:u})).catch((e,g)=>e==="nocreate-missing"?new mw.Api().create(this.pageTitle,{summary:u},n).catch((d,o)=>{mw.notify(`Error creating ${this.pageTitle}: ${o?.error.info??"Unknown error"} (${d})`,{type:"error"})}):(mw.notify(`Error editing or creating ${this.pageTitle}: ${g?.error.info??"Unknown error"} (${e})`,{type:"error"}),null))){if(mw.notify(`Redirect ${this.exists?"edited":"created"} successfully!`,{type:"success"}),R?.isSelected()){p.setLabel("Editing talk page...");const e=s.getValue().includes("R from move"),g=[`#REDIRECT [[${i.getTalkPage().getPrefixedText()}]]`,e?`{{Redirect category shell|
{{R from move}}
}}`:null].filter(Boolean).join(`

`),d=this.pageTitleParsed.getTalkPage().getPrefixedText();if(!await new mw.Api().edit(d,()=>({text:g,summary:"Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])"})).catch((T,V)=>T==="nocreate-missing"?new mw.Api().create(d,{summary:"Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])"},g).catch((y,b)=>{mw.notify(`Error creating ${d}: ${b?.error.info??"Unknown error"} (${y})`,{type:"error"})}):(mw.notify(`Error editing or creating ${d}: ${V?.error.info??"Unknown error"} (${T})`,{type:"error"}),null)))return;mw.notify("Talk page synced successfully!",{type:"success"})}if(x?.isSelected()){p.setLabel("Patrolling redirect...");const e=document.querySelector(".patrollink a"),g=document.querySelector("#mwe-pt-mark-as-reviewed-button");e?await new mw.Api().postWithToken("patrol",{action:"patrol",rcid:new URL(e.href).searchParams.get("rcid")}).catch((o,T)=>(mw.notify(`Error patrolling ${this.pageTitle} via API: ${T?.error.info??"Unknown error"} (${o})`,{type:"error"}),null))&&mw.notify("Redirect patrolled successfully!",{type:"success"}):g?(g.click(),mw.notify("Redirect patrolled successfully!",{type:"success"})):mw.notify("Page curation toolbar not found, redirect cannot be patrolled!",{type:"error"})}p.setLabel("Complete, reloading..."),window.location.href=mw.util.getUrl(this.pageTitle,{redirect:"no"})}});let O,R,L;this.pageTitleParsed.isTalkPage()||(O=await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitleParsed.getTalkPage().getPrefixedText()}),R=new OO.ui.CheckboxInputWidget({selected:!!O.query.pages[0].redirect}),L=new OO.ui.Widget({content:[new OO.ui.FieldLayout(R,{label:"Sync talk page",align:"inline"})]}),L.$element[0].style.marginBottom="0");const q=document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");q?.click(),q?.click();let h;if(mw.config.get("wgNamespaceNumber")!==0)h=!1;else if(document.querySelector(".patrollink"))h=!0;else if(document.querySelector("#mwe-pt-mark-as-reviewed-button"))h=!0;else if(document.querySelector("#mwe-pt-mark-as-unreviewed-button"))h=!1;else{mw.config.get("wgArticleId")||(h=!1),(await new mw.Api().get({action:"query",meta:"userinfo",uiprop:"rights"})).query.userinfo.rights.includes("patrol")||(h=!1);const t=await new mw.Api().get({action:"pagetriagelist",page_id:mw.config.get("wgArticleId")});t.pagetriagelist.pages[0]?.user_name===mw.config.get("wgUserName")||t.pagetriagelist.result!=="success"||t.pagetriagelist.pages.length===0?h=!1:h=!Number.parseInt(t.pagetriagelist.pages[0]?.patrol_status)}let x,I;h&&(x=new OO.ui.CheckboxInputWidget({selected:!0}),I=new OO.ui.Widget({content:[new OO.ui.FieldLayout(x,{label:"Mark as patrolled",align:"inline"})]}),I.$element[0].style.marginBottom="0");const W=new OO.ui.HorizontalLayout({items:[p,L,I].filter(Boolean)});W.$element[0].style.marginTop="10px",l.$element[0].append(...[r?.$element?.[0],m.$element[0],f.$element[0],j.$element[0],W.$element[0]].filter(Boolean)),this.contentText.prepend(l.$element[0]);function E(i){const t=a.getValue().trim();if(!t)c.$tabIndexed[0].placeholder="";else if(i){const n=t!==k?.replaceAll("_"," "),u=s.getValue().join(";")!==C?.join(";");n&&u?c.$tabIndexed[0].placeholder=`Changing redirect to [[${t}]] and changing categorization templates`:n?c.$tabIndexed[0].placeholder=`Changing redirect to [[${t}]]`:u?c.$tabIndexed[0].placeholder="Changing categorization templates":c.$tabIndexed[0].placeholder="Redirect cleanup"}else c.$tabIndexed[0].placeholder=`Creating redirect to [[${t}]]`}let k,C,S,D;if(this.exists){const i=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();k=/^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(i)?.[1],C=Object.entries(this.redirectTemplates).map(([n,u])=>[n,...u].some(w=>new RegExp(`{{\\s*[${w[0].toLowerCase()}${w[0]}]${w.slice(1)}\\s*(\\||}})`).test(i))?n:null).filter(Boolean).sort((n,u)=>n.toLowerCase().localeCompare(u.toLowerCase()));const t=Object.entries(this.redirectTemplates).flatMap(([n,u])=>[n,...u]).map(n=>new RegExp(`{{\\s*[${n[0].toLowerCase()}${n[0]}]${n.slice(1)}\\s*(\\||}})`).test(i)?n:null).filter(Boolean);S=Object.fromEntries(t.map(n=>{const u=new RegExp(`{{\\s*[${n[0].toLowerCase()}${n[0]}]${n.slice(1)}\\|?(.*?)\\s*}}`).exec(i),w=Object.entries(this.redirectTemplates).find(([e,g])=>[e,...g].includes(n))?.[0];return u?[w,u[1]]:null}).filter(Boolean)),D=[i.match(/{{short description\|.*?}}/i)?.[0],i.match(/{{DISPLAYTITLE:.*?}}/)?.[0],i.match(/{{italic title\|?.*?}}/i)?.[0],i.match(/{{DEFAULTSORT:.*?}}/)?.[0],i.match(/{{title language\|.*?}}/)?.[0],...i.match(/\[\[[Cc]ategory:.+?]]/g)??[]].filter(Boolean).join(`
`),k?a.setValue(k.replaceAll("_"," ")):mw.notify("Could not find redirect target!",{type:"error"}),s.setValue(C),E(this.exists)}}}new B().run()});
//# sourceMappingURL=data:application/json;base64,
