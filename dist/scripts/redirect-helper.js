"use strict";
mw.loader.using(["mediawiki.util", "oojs-ui-core", "oojs-ui-widgets", "oojs-ui.styles.icons-content", "oojs-ui.styles.icons-editing-core"], async () => {
  if (mw.config.get("wgNamespaceNumber") < 0)
    return;
  if (!mw.config.get("wgIsProbablyEditable"))
    return;
  if (mw.config.get("wgAction") !== "view" || !mw.config.get("wgIsArticle"))
    return;
  if (mw.util.getParamValue("oldid") || mw.config.get("wgDiffOldId"))
    return;
  const contentText = document.querySelector("#mw-content-text");
  if (!contentText)
    return mw.notify("Failed to find content text element!", { type: "error" });
  const redirectTemplates = JSON.parse(
    (await new mw.Api().get({
      action: "query",
      formatversion: 2,
      prop: "revisions",
      rvprop: "content",
      rvslots: "*",
      titles: "User:Eejit43/scripts/redirect-helper.json"
    })).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content || "[]"
  );
  const pageTitle = mw.config.get("wgPageName");
  const pageTitleParsed = mw.Title.newFromText(pageTitle);
  if (!pageTitleParsed)
    return mw.notify("Failed to parse page title!", { type: "error" });
  const pageInfo = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info", titles: pageTitle });
  if (pageInfo.query.pages[0].missing) {
    const button = new OO.ui.ButtonWidget({ label: "Create redirect", icon: "articleRedirect", flags: ["progressive"] });
    button.$element[0].style.marginBottom = "20px";
    button.on("click", () => {
      button.$element[0].remove();
      showRedirectInfo(false);
    });
    contentText.prepend(button.$element[0]);
  } else if (pageInfo.query.pages[0].redirect)
    showRedirectInfo(true);
  else {
    const portletLink = mw.util.addPortletLink(mw.config.get("skin") === "minerva" ? "p-tb" : "p-cactions", "#", "Redirect page", "redirect-helper");
    portletLink.addEventListener("click", (event) => {
      event.preventDefault();
      showRedirectInfo(false);
    });
  }
  async function showRedirectInfo(exists) {
    const editorBox = new OO.ui.PanelLayout({ padded: true, expanded: false, framed: true });
    editorBox.$element[0].style.backgroundColor = "#95d4bc";
    editorBox.$element[0].style.width = "700px";
    editorBox.$element[0].style.maxWidth = "calc(100% - 50px)";
    editorBox.$element[0].style.marginLeft = "auto";
    editorBox.$element[0].style.marginRight = "auto";
    editorBox.$element[0].style.marginBottom = "20px";
    let syncWithMainButton;
    if (pageTitleParsed.isTalkPage()) {
      const mainPageData = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info", titles: pageTitleParsed.getSubjectPage().getPrefixedText() });
      if (mainPageData.query.pages[0].redirect) {
        const mainPageContent = (await new mw.Api().get({
          action: "query",
          formatversion: 2,
          prop: "revisions",
          rvprop: "content",
          rvslots: "*",
          titles: pageTitleParsed.getSubjectPage().getPrefixedText()
        })).query.pages[0].revisions[0].slots.main.content.trim();
        syncWithMainButton = new OO.ui.ButtonWidget({ label: "Sync with main page", icon: "link", flags: ["progressive"] });
        syncWithMainButton.on("click", () => {
          const target = /^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(mainPageContent)?.[1];
          if (!target)
            return mw.notify("Failed to parse main page content!", { type: "error" });
          redirectInput.setValue(mw.Title.newFromText(target)?.getTalkPage()?.toString() ?? "");
          const fromMove = ["R from move", ...redirectTemplates["R from move"]].some(
            (tagOrRedirect) => new RegExp(`{{\\s*[${tagOrRedirect[0].toLowerCase()}${tagOrRedirect[0]}]${tagOrRedirect.slice(1)}\\s*(\\||}})`).test(mainPageContent)
          );
          if (fromMove)
            tagSelect.setValue(["R from move"]);
        });
      }
    }
    class RedirectInputWidget extends OO.ui.TextInputWidget {
      constructor(config) {
        super(config);
        this.getLookupRequest = () => {
          const value = this.getValue();
          const deferred = $.Deferred();
          if (!value)
            deferred.resolve([]);
          else if (value.includes("#")) {
            const title = value.split("#")[0];
            new mw.Api().get({ action: "parse", page: title, prop: "sections", redirects: "1" }).catch(() => null).then((result) => {
              if (result) {
                const matchedSections = result.parse.sections.filter((section) => section.line.toLowerCase().startsWith(value.split("#")[1].toLowerCase()));
                deferred.resolve(matchedSections.map((section) => ({ data: `${result.parse.title}#${section.line}`, label: `${result.parse.title}#${section.line}` })));
              } else
                deferred.resolve([]);
            });
          } else {
            const parsedTitle = mw.Title.newFromText(value);
            new mw.Api().get({
              action: "query",
              formatversion: 2,
              gaplimit: 20,
              gapnamespace: parsedTitle?.namespace ?? 0,
              gapprefix: parsedTitle?.title ?? value,
              generator: "allpages",
              prop: "info|pageprops"
            }).catch(() => null).then((result) => {
              if (result)
                deferred.resolve(
                  result.query?.pages ? result.query.pages.filter((page) => page.title !== pageTitleParsed.toString()).map((page) => ({
                    data: page.title,
                    label: new OO.ui.HtmlSnippet(
                      `${page.title}${page.pageprops && "disambiguation" in page.pageprops ? " <i>(disambiguation)</i>" : ""}${"redirect" in page ? " <i>(redirect)</i>" : ""}`
                    )
                  })) : []
                );
              else
                deferred.resolve([]);
            });
          }
          return deferred.promise({ abort() {
          } });
        };
        this.getLookupCacheDataFromResponse = (response) => response ?? [];
        this.getLookupMenuOptionsFromData = (data) => data.map(({ data: data2, label }) => new OO.ui.MenuOptionWidget({ data: data2, label }));
        OO.ui.mixin.LookupElement.call(this, config);
      }
    }
    Object.assign(RedirectInputWidget.prototype, OO.ui.mixin.LookupElement.prototype);
    const redirectInput = new RedirectInputWidget({ placeholder: "Target page name", required: true });
    redirectInput.on("change", () => {
      let value = redirectInput.getValue();
      value = value.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/, "")}/wiki/`), "");
      value = value.replace(/^:/, "");
      if (value.length > 0) {
        redirectInput.setValue(value[0].toUpperCase() + value.slice(1).replaceAll("_", " "));
        submitButton.setDisabled(false);
      } else
        submitButton.setDisabled(true);
      updateSummary();
      submitButton.setLabel("Submit");
      needsCheck = true;
    });
    const redirectInputLayout = new OO.ui.FieldLayout(redirectInput, { label: new OO.ui.HtmlSnippet("<b>Redirect target:</b>"), align: "top" });
    const tagSelect = new OO.ui.MenuTagMultiselectWidget({
      allowArbitrary: false,
      allowReordering: false,
      options: Object.keys(redirectTemplates).map((tag) => ({ data: tag, label: tag }))
    });
    tagSelect.getMenu().filterMode = "substring";
    tagSelect.on("change", () => {
      const sortedTags = tagSelect.getValue().sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
      if (tagSelect.getValue().join(";") !== sortedTags.join(";"))
        tagSelect.setValue(sortedTags);
      updateSummary();
      submitButton.setLabel("Submit");
      needsCheck = true;
    });
    const tagSelectLayout = new OO.ui.FieldLayout(tagSelect, { label: new OO.ui.HtmlSnippet("<b>Redirect categorization template(s):</b>"), align: "top" });
    const summaryInput = new OO.ui.ComboBoxInputWidget({
      options: [
        { data: "Resolve double redirect" },
        //
        { data: "Resolve self redirect" },
        { data: "Remove incorrect rcats" }
      ]
    });
    const summaryInputLayout = new OO.ui.FieldLayout(summaryInput, { label: new OO.ui.HtmlSnippet("<b>Summary:</b>"), align: "top" });
    const submitButton = new OO.ui.ButtonWidget({ label: "Submit", disabled: true, flags: ["progressive"] });
    submitButton.$element[0].style.marginBottom = "0";
    let needsCheck = true;
    submitButton.on("click", async () => {
      for (const element of [redirectInput, tagSelect, summaryInput, submitButton, syncTalkCheckbox, patrolCheckbox].filter(Boolean))
        element.setDisabled(true);
      submitButton.setLabel("Checking target validity...");
      let parsedDestination;
      const errors = [];
      if (needsCheck) {
        const destination = redirectInput.getValue().trim();
        if (!/^\s*[^[\]{|}]+\s*$/.test(destination))
          errors.push({ title: destination, message: "is not a valid page title!" });
        try {
          parsedDestination = mw.Title.newFromText(destination);
        } catch {
          if (errors.length === 0)
            errors.push({ title: destination, message: "is not a valid page title!" });
        }
        if (!parsedDestination && errors.length === 0)
          errors.push({ title: destination, message: "is not a valid page title!" });
        if (parsedDestination?.toString() === pageTitleParsed.toString())
          errors.push({ message: "cannot redirect to itself!" });
        const destinationData = await new mw.Api().get({ action: "query", formatversion: 2, prop: "pageprops", titles: destination }).catch((errorCode) => {
          if (errorCode === "missingtitle")
            errors.push({ title: destination, message: "does not exist!" });
          else
            errors.push({ title: destination, message: `was not able to be fetched from the API (${errorCode})!` });
          return null;
        });
        const destinationParseResult = await new mw.Api().get({ action: "parse", page: destination, prop: "sections", redirects: "1" });
        if (destinationParseResult.parse.redirects?.[0]) {
          const destinationRedirect = destinationParseResult.parse.redirects[0].to + (destinationParseResult.parse.redirects[0].tofragment ? `#${destinationParseResult.parse.redirects[0].tofragment}` : "");
          errors.push({
            title: destination,
            message: `is a redirect to <a href="${mw.util.getUrl(
              destinationRedirect
            )}" target="_blank">${destinationRedirect}</a>. Retarget to that page instead, as double redirects aren't allowed.`
          });
        }
        if (destination.split("#").length > 1) {
          const validSection = destinationParseResult.parse.sections.find((section) => section.line === destination.split("#")[1]);
          if (validSection) {
            if (tagSelect.getValue().includes("R to anchor"))
              errors.push({ message: "is tagged as a redirect to an anchor, but it is actually a redirect to a section!" });
            if (!tagSelect.getValue().includes("R to section"))
              errors.push({ message: "is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!" });
          } else {
            const destinationContent = (await new mw.Api().get({
              action: "query",
              formatversion: 2,
              prop: "revisions",
              rvprop: "content",
              rvslots: "*",
              titles: parsedDestination.toString()
            })).query.pages[0].revisions[0].slots.main.content;
            const anchors = [
              ...destinationContent.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map((anchor) => anchor.split("|").map((part) => part.trim()))?.flat() ?? [],
              ...destinationContent.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(
                (anchor) => anchor.split("|").map((part) => part.trim()).filter((part) => !/^text\s*?=/.test(part))
              )?.flat() ?? [],
              ...destinationContent.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map((anchor) => anchor.trim()) ?? []
            ];
            if (anchors.includes(destination.split("#")[1])) {
              if (tagSelect.getValue().includes("R to section"))
                errors.push({ message: "is tagged as a redirect to a section, but it is actually a redirect to an anchor!" });
              if (!tagSelect.getValue().includes("R to anchor"))
                errors.push({ message: "is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!" });
            } else
              errors.push({ message: `is a redirect to <a href="${mw.util.getUrl(destination)}" target="_blank">${destination}</a>, but that section or anchor does not exist!` });
          }
        }
        if (destination.split("#").length === 1 && (tagSelect.getValue().includes("R to section") || tagSelect.getValue().includes("R to anchor")))
          errors.push({ message: "is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!" });
        if ("disambiguation" in destinationData.query.pages[0].pageprops && ![
          "R from ambiguous sort name",
          "R from ambiguous term",
          "R to disambiguation page",
          "R from incomplete disambiguation",
          "R from incorrect disambiguation",
          "R from other disambiguation"
        ].some((template) => tagSelect.getValue().includes(template)))
          errors.push({ message: "is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!" });
        if (!("disambiguation" in destinationData.query.pages[0].pageprops) && ["R from ambiguous sort name", "R from ambiguous term", "R to disambiguation page", "R from incomplete disambiguation"].some((template) => tagSelect.getValue().includes(template)))
          errors.push({ message: "is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!" });
        if (tagSelect.getValue().includes("R to disambiguation page") && !pageTitleParsed.getMainText().endsWith(" (disambiguation)"))
          errors.push({
            message: 'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'
          });
        if (syncTalkCheckbox?.isSelected() && !talkData.query.pages[0].missing && !talkData.query.pages[0].redirect)
          errors.push({ title: pageTitleParsed.getTalkPage().getPrefixedText(), message: "exists, but is not a redirect!" });
      }
      if (errors.length > 0) {
        for (const element of document.querySelectorAll(".redirect-helper-warning"))
          element.remove();
        for (const { title, message } of errors) {
          const label = new OO.ui.HtmlSnippet(
            `${title ? `<a href="${mw.util.getUrl(title)}" target="_blank">${title}</a>` : "This page"} ${message} Click again without making changes to submit anyway.`
          );
          const warningMessage = new OO.ui.MessageWidget({ type: "error", classes: ["redirect-helper-warning"], inline: true, label });
          warningMessage.$element[0].style.marginTop = "8px";
          editorBox.$element[0].append(warningMessage.$element[0]);
        }
        for (const element of [redirectInput, tagSelect, summaryInput, submitButton, syncTalkCheckbox, patrolCheckbox].filter(Boolean))
          element.setDisabled(false);
        submitButton.setLabel("Submit anyway");
        needsCheck = false;
        return;
      }
      parsedDestination = mw.Title.newFromText(redirectInput.getValue());
      submitButton.setLabel(`${exists ? "Editing" : "Creating"} redirect...`);
      const output = [
        `#REDIRECT [[${redirectInput.getValue().trim()}]]`,
        //
        tagSelect.getValue().length > 0 ? `{{Redirect category shell|
${tagSelect.getValue().map((tag) => `{{${tag}${oldRedirectTagData?.[tag] ? `|${oldRedirectTagData[tag]}` : ""}}}`).join("\n")}
}}` : null,
        oldStrayText
      ].filter(Boolean).join("\n\n");
      const summary = (summaryInput.getValue() || summaryInput.$tabIndexed[0].placeholder) + " (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";
      const result = await new mw.Api().edit(pageTitle, () => ({ text: output, summary })).catch((errorCode, { error }) => {
        if (errorCode === "nocreate-missing")
          return new mw.Api().create(pageTitle, { summary }, output).catch((errorCode2, { error: error2 }) => {
            mw.notify(`Error creating ${pageTitle}: ${error2.info} (${errorCode2})`, { type: "error" });
          });
        else {
          mw.notify(`Error editing or creating ${pageTitle}: ${error.info} (${errorCode})`, { type: "error" });
          return null;
        }
      });
      if (!result)
        return;
      mw.notify(`Redirect ${exists ? "edited" : "created"} successfully!`, { type: "success" });
      if (syncTalkCheckbox?.isSelected()) {
        submitButton.setLabel("Editing talk page...");
        const fromMove = tagSelect.getValue().includes("R from move");
        const output2 = [
          `#REDIRECT [[${parsedDestination.getTalkPage().getPrefixedText()}]]`,
          //
          fromMove ? "{{Redirect category shell|\n{{R from move}}\n}}" : null
        ].filter(Boolean).join("\n\n");
        const talkPage = pageTitleParsed.getTalkPage().getPrefixedText();
        const talkResult = await new mw.Api().edit(talkPage, () => ({ text: output2, summary: "Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])" })).catch((errorCode, { error }) => {
          if (errorCode === "nocreate-missing")
            return new mw.Api().create(talkPage, { summary: "Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])" }, output2).catch((errorCode2, { error: error2 }) => {
              mw.notify(`Error creating ${talkPage}: ${error2.info} (${errorCode2})`, { type: "error" });
            });
          else {
            mw.notify(`Error editing or creating ${talkPage}: ${error.info} (${errorCode})`, { type: "error" });
            return null;
          }
        });
        if (!talkResult)
          return;
        mw.notify("Talk page synced successfully!", { type: "success" });
      }
      if (patrolCheckbox?.isSelected()) {
        submitButton.setLabel("Patrolling redirect...");
        const patrolLink = document.querySelector(".patrollink a");
        const markReviewedButton = document.querySelector("#mwe-pt-mark-as-reviewed-button");
        if (patrolLink) {
          const patrolResult = await new mw.Api().postWithToken("patrol", { action: "patrol", rcid: new URL(patrolLink.href).searchParams.get("rcid") }).catch((errorCode, { error }) => {
            mw.notify(`Error patrolling ${pageTitle} via API: ${error.info} (${errorCode})`, { type: "error" });
            return null;
          });
          if (patrolResult)
            mw.notify("Redirect patrolled successfully!", { type: "success" });
        } else if (markReviewedButton) {
          markReviewedButton.click();
          mw.notify("Redirect patrolled successfully!", { type: "success" });
        } else
          mw.notify("Page curation toolbar not found, redirect cannot be patrolled!", { type: "error" });
      }
      submitButton.setLabel("Complete, reloading...");
      window.location.href = mw.util.getUrl(pageTitle, { redirect: "no" });
    });
    let talkData;
    let syncTalkCheckbox, syncTalkLayout;
    if (!pageTitleParsed.isTalkPage()) {
      talkData = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info", titles: pageTitleParsed.getTalkPage().getPrefixedText() });
      syncTalkCheckbox = new OO.ui.CheckboxInputWidget({ selected: !!talkData.query.pages[0].redirect });
      syncTalkLayout = new OO.ui.Widget({ content: [new OO.ui.FieldLayout(syncTalkCheckbox, { label: "Sync talk page", align: "inline" })] });
      syncTalkLayout.$element[0].style.marginBottom = "0";
    }
    const markButton = document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");
    markButton?.click();
    markButton?.click();
    let shouldPromptPatrol;
    if (mw.config.get("wgNamespaceNumber") !== 0)
      shouldPromptPatrol = false;
    else if (document.querySelector(".patrollink"))
      shouldPromptPatrol = true;
    else if (document.querySelector("#mwe-pt-mark-as-reviewed-button"))
      shouldPromptPatrol = true;
    else if (document.querySelector("#mwe-pt-mark-as-unreviewed-button"))
      shouldPromptPatrol = false;
    else {
      if (!mw.config.get("wgArticleId"))
        shouldPromptPatrol = false;
      const userPermissions = await new mw.Api().get({ action: "query", meta: "userinfo", uiprop: "rights" });
      if (!userPermissions.query.userinfo.rights.includes("patrol"))
        shouldPromptPatrol = false;
      const patrolResponse = await new mw.Api().get({ action: "pagetriagelist", page_id: mw.config.get("wgArticleId") });
      if (patrolResponse.pagetriagelist.pages[0]?.user_name === mw.config.get("wgUserName"))
        shouldPromptPatrol = false;
      else if (patrolResponse.pagetriagelist.result !== "success" || patrolResponse.pagetriagelist.pages.length === 0)
        shouldPromptPatrol = false;
      else
        shouldPromptPatrol = !Number.parseInt(patrolResponse.pagetriagelist.pages[0]?.patrol_status);
    }
    let patrolCheckbox, patrolLayout;
    if (shouldPromptPatrol) {
      patrolCheckbox = new OO.ui.CheckboxInputWidget({ selected: true });
      patrolLayout = new OO.ui.Widget({ content: [new OO.ui.FieldLayout(patrolCheckbox, { label: "Mark as patrolled", align: "inline" })] });
      patrolLayout.$element[0].style.marginBottom = "0";
    }
    const submitLayout = new OO.ui.HorizontalLayout({ items: [submitButton, syncTalkLayout, patrolLayout].filter(Boolean) });
    submitLayout.$element[0].style.marginTop = "10px";
    editorBox.$element[0].append(
      ...[syncWithMainButton?.$element?.[0], redirectInputLayout.$element[0], tagSelectLayout.$element[0], summaryInputLayout.$element[0], submitLayout.$element[0]].filter(
        Boolean
      )
    );
    contentText.prepend(editorBox.$element[0]);
    function updateSummary() {
      const redirectValue = redirectInput.getValue().trim();
      if (!redirectValue)
        summaryInput.$tabIndexed[0].placeholder = "";
      else if (exists) {
        const targetChanged = redirectValue.replace("_", " ") !== oldRedirectTarget?.replace("_", " ");
        const tagsChanged = tagSelect.getValue().join(";") !== oldRedirectTags?.join(";");
        if (targetChanged && tagsChanged)
          summaryInput.$tabIndexed[0].placeholder = `Changing redirect to [[${redirectValue}]] and changing categorization templates`;
        else if (targetChanged)
          summaryInput.$tabIndexed[0].placeholder = `Changing redirect to [[${redirectValue}]]`;
        else if (tagsChanged)
          summaryInput.$tabIndexed[0].placeholder = "Changing categorization templates";
        else
          summaryInput.$tabIndexed[0].placeholder = "Redirect cleanup";
      } else
        summaryInput.$tabIndexed[0].placeholder = `Creating redirect to [[${redirectValue}]]`;
    }
    let oldRedirectTarget, oldRedirectTags, oldRedirectTagData, oldStrayText;
    if (exists) {
      const pageContent = (await new mw.Api().get({ action: "query", formatversion: 2, prop: "revisions", rvprop: "content", rvslots: "*", titles: pageTitle })).query.pages[0].revisions[0].slots.main.content.trim();
      oldRedirectTarget = /^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(pageContent)?.[1];
      oldRedirectTags = Object.entries(redirectTemplates).map(
        ([tag, redirects]) => [tag, ...redirects].some((tagOrRedirect) => new RegExp(`{{\\s*[${tagOrRedirect[0].toLowerCase()}${tagOrRedirect[0]}]${tagOrRedirect.slice(1)}\\s*(\\||}})`).test(pageContent)) ? tag : null
      ).filter(Boolean).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
      oldRedirectTagData = Object.fromEntries(
        oldRedirectTags.map((tag) => {
          const match = new RegExp(`{{\\s*(?:${[tag, ...redirectTemplates[tag]].map((tag2) => `[${tag2[0].toLowerCase()}${tag2[0]}]${tag2.slice(1)}`).join("|")})\\|?(.*?)\\s*}}`).exec(
            pageContent
          );
          return match ? [tag, match[1]] : null;
        }).filter(Boolean)
      );
      oldStrayText = [
        pageContent.match(/{{short description\|.*?}}/i)?.[0],
        pageContent.match(/{{DISPLAYTITLE:.*?}}/)?.[0],
        pageContent.match(/{{italic title\|?.*?}}/i)?.[0],
        pageContent.match(/{{DEFAULTSORT:.*?}}/)?.[0],
        ...pageContent.match(/\[\[[Cc]ategory:.+?]]/g) ?? []
      ].filter(Boolean).join("\n");
      if (oldRedirectTarget)
        redirectInput.setValue(oldRedirectTarget.replaceAll("_", " "));
      else
        mw.notify("Could not find redirect target!", { type: "error" });
      tagSelect.setValue(oldRedirectTags);
    }
  }
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9yZWRpcmVjdC1oZWxwZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IE1lZGlhV2lraURhdGFFcnJvciwgUGFnZVJldmlzaW9uc1Jlc3VsdCB9IGZyb20gJy4uL2dsb2JhbC10eXBlcyc7XG5cbmludGVyZmFjZSBQYWdlSW5mb1Jlc3VsdCB7XG4gICAgcXVlcnk6IHsgcGFnZXM6IHsgbWlzc2luZz86IHN0cmluZzsgcmVkaXJlY3Q/OiBzdHJpbmcgfVtdIH07XG59XG5cbmludGVyZmFjZSBBbGxQYWdlc0dlbmVyYXRvclJlc3VsdCB7XG4gICAgcXVlcnk6IHsgcGFnZXM6IHsgdGl0bGU6IHN0cmluZzsgcGFnZXByb3BzOiB7IGRpc2FtYmlndWF0aW9uPzogc3RyaW5nIH07IHJlZGlyZWN0Pzogc3RyaW5nIH1bXSB9O1xufVxuXG5pbnRlcmZhY2UgUGFnZVBhcnNlUmVzdWx0IHtcbiAgICBwYXJzZTogeyB0aXRsZTogc3RyaW5nOyByZWRpcmVjdHM6IHsgdG86IHN0cmluZzsgdG9mcmFnbWVudDogc3RyaW5nIH1bXTsgc2VjdGlvbnM6IHsgbGluZTogc3RyaW5nIH1bXSB9O1xufVxuXG5pbnRlcmZhY2UgUGFnZXByb3BzUmVzdWx0IHtcbiAgICBxdWVyeTogeyBwYWdlczogeyBwYWdlcHJvcHM6IHsgZGlzYW1iaWd1YXRpb24/OiBzdHJpbmcgfSB9W10gfTtcbn1cblxuaW50ZXJmYWNlIFVzZXJQZXJtaXNzaW9uc1Jlc3BvbnNlIHtcbiAgICBxdWVyeTogeyB1c2VyaW5mbzogeyByaWdodHM6IHN0cmluZ1tdIH0gfTtcbn1cblxuaW50ZXJmYWNlIFBhZ2VUcmlhZ2VMaXN0UmVzcG9uc2Uge1xuICAgIHBhZ2V0cmlhZ2VsaXN0OiB7IHBhZ2VzOiB7IHVzZXJfbmFtZTogc3RyaW5nOyBwYXRyb2xfc3RhdHVzOiBzdHJpbmcgfVtdOyByZXN1bHQ6IHN0cmluZyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxufVxuXG5tdy5sb2FkZXIudXNpbmcoWydtZWRpYXdpa2kudXRpbCcsICdvb2pzLXVpLWNvcmUnLCAnb29qcy11aS13aWRnZXRzJywgJ29vanMtdWkuc3R5bGVzLmljb25zLWNvbnRlbnQnLCAnb29qcy11aS5zdHlsZXMuaWNvbnMtZWRpdGluZy1jb3JlJ10sIGFzeW5jICgpID0+IHtcbiAgICBpZiAobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA8IDApIHJldHVybjsgLy8gRG9uJ3QgcnVuIGluIHZpcnR1YWwgbmFtZXNwYWNlc1xuICAgIGlmICghbXcuY29uZmlnLmdldCgnd2dJc1Byb2JhYmx5RWRpdGFibGUnKSkgcmV0dXJuOyAvLyBEb24ndCBydW4gaWYgdXNlciBjYW4ndCBlZGl0IHBhZ2VcbiAgICBpZiAobXcuY29uZmlnLmdldCgnd2dBY3Rpb24nKSAhPT0gJ3ZpZXcnIHx8ICFtdy5jb25maWcuZ2V0KCd3Z0lzQXJ0aWNsZScpKSByZXR1cm47IC8vIERvbid0IHJ1biBpZiBub3Qgdmlld2luZyBwYWdlXG4gICAgaWYgKG13LnV0aWwuZ2V0UGFyYW1WYWx1ZSgnb2xkaWQnKSB8fCBtdy5jb25maWcuZ2V0KCd3Z0RpZmZPbGRJZCcpKSByZXR1cm47IC8vIERvbid0IHJ1biBpZiB2aWV3aW5nIG9sZCByZXZpc2lvbiBvciBkaWZmXG5cbiAgICBjb25zdCBjb250ZW50VGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1jb250ZW50LXRleHQnKSBhcyBIVE1MRGl2RWxlbWVudDtcblxuICAgIGlmICghY29udGVudFRleHQpIHJldHVybiBtdy5ub3RpZnkoJ0ZhaWxlZCB0byBmaW5kIGNvbnRlbnQgdGV4dCBlbGVtZW50IScsIHsgdHlwZTogJ2Vycm9yJyB9KTtcblxuICAgIGNvbnN0IHJlZGlyZWN0VGVtcGxhdGVzID0gSlNPTi5wYXJzZShcbiAgICAgICAgKFxuICAgICAgICAgICAgKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAyLFxuICAgICAgICAgICAgICAgIHByb3A6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgIHJ2c2xvdHM6ICcqJyxcbiAgICAgICAgICAgICAgICB0aXRsZXM6ICdVc2VyOkVlaml0NDMvc2NyaXB0cy9yZWRpcmVjdC1oZWxwZXIuanNvbicsXG4gICAgICAgICAgICB9KSkgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdFxuICAgICAgICApLnF1ZXJ5LnBhZ2VzPy5bMF0/LnJldmlzaW9ucz8uWzBdPy5zbG90cz8ubWFpbj8uY29udGVudCB8fCAnW10nLFxuICAgICkgYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nW10+O1xuXG4gICAgY29uc3QgcGFnZVRpdGxlID0gbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpO1xuICAgIGNvbnN0IHBhZ2VUaXRsZVBhcnNlZCA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KHBhZ2VUaXRsZSkhO1xuXG4gICAgaWYgKCFwYWdlVGl0bGVQYXJzZWQpIHJldHVybiBtdy5ub3RpZnkoJ0ZhaWxlZCB0byBwYXJzZSBwYWdlIHRpdGxlIScsIHsgdHlwZTogJ2Vycm9yJyB9KTtcblxuICAgIGNvbnN0IHBhZ2VJbmZvID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIGZvcm1hdHZlcnNpb246IDIsIHByb3A6ICdpbmZvJywgdGl0bGVzOiBwYWdlVGl0bGUgfSkpIGFzIFBhZ2VJbmZvUmVzdWx0O1xuXG4gICAgaWYgKHBhZ2VJbmZvLnF1ZXJ5LnBhZ2VzWzBdLm1pc3NpbmcpIHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IE9PLnVpLkJ1dHRvbldpZGdldCh7IGxhYmVsOiAnQ3JlYXRlIHJlZGlyZWN0JywgaWNvbjogJ2FydGljbGVSZWRpcmVjdCcsIGZsYWdzOiBbJ3Byb2dyZXNzaXZlJ10gfSk7XG4gICAgICAgIGJ1dHRvbi4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMjBweCc7XG4gICAgICAgIGJ1dHRvbi5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBidXR0b24uJGVsZW1lbnRbMF0ucmVtb3ZlKCk7XG4gICAgICAgICAgICBzaG93UmVkaXJlY3RJbmZvKGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29udGVudFRleHQucHJlcGVuZChidXR0b24uJGVsZW1lbnRbMF0pO1xuICAgIH0gZWxzZSBpZiAocGFnZUluZm8ucXVlcnkucGFnZXNbMF0ucmVkaXJlY3QpIHNob3dSZWRpcmVjdEluZm8odHJ1ZSk7XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHBvcnRsZXRMaW5rID0gbXcudXRpbC5hZGRQb3J0bGV0TGluayhtdy5jb25maWcuZ2V0KCdza2luJykgPT09ICdtaW5lcnZhJyA/ICdwLXRiJyA6ICdwLWNhY3Rpb25zJywgJyMnLCAnUmVkaXJlY3QgcGFnZScsICdyZWRpcmVjdC1oZWxwZXInKTtcbiAgICAgICAgcG9ydGxldExpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzaG93UmVkaXJlY3RJbmZvKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIHJlZGlyZWN0IGluZm9ybWF0aW9uIGJveC5cbiAgICAgKiBAcGFyYW0gZXhpc3RzIFdoZXRoZXIgdGhlIHBhZ2UgZXhpc3RzLlxuICAgICAqL1xuICAgIGFzeW5jIGZ1bmN0aW9uIHNob3dSZWRpcmVjdEluZm8oZXhpc3RzOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGVkaXRvckJveCA9IG5ldyBPTy51aS5QYW5lbExheW91dCh7IHBhZGRlZDogdHJ1ZSwgZXhwYW5kZWQ6IGZhbHNlLCBmcmFtZWQ6IHRydWUgfSk7XG4gICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzk1ZDRiYyc7XG4gICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5zdHlsZS53aWR0aCA9ICc3MDBweCc7XG4gICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5zdHlsZS5tYXhXaWR0aCA9ICdjYWxjKDEwMCUgLSA1MHB4KSc7XG4gICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5MZWZ0ID0gJ2F1dG8nO1xuICAgICAgICBlZGl0b3JCb3guJGVsZW1lbnRbMF0uc3R5bGUubWFyZ2luUmlnaHQgPSAnYXV0byc7XG4gICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMjBweCc7XG5cbiAgICAgICAgbGV0IHN5bmNXaXRoTWFpbkJ1dHRvbjtcblxuICAgICAgICBpZiAocGFnZVRpdGxlUGFyc2VkLmlzVGFsa1BhZ2UoKSkge1xuICAgICAgICAgICAgY29uc3QgbWFpblBhZ2VEYXRhID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIGZvcm1hdHZlcnNpb246IDIsIHByb3A6ICdpbmZvJywgdGl0bGVzOiBwYWdlVGl0bGVQYXJzZWQuZ2V0U3ViamVjdFBhZ2UoKSEuZ2V0UHJlZml4ZWRUZXh0KCkgfSkpIGFzIFBhZ2VJbmZvUmVzdWx0O1xuXG4gICAgICAgICAgICBpZiAobWFpblBhZ2VEYXRhLnF1ZXJ5LnBhZ2VzWzBdLnJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFpblBhZ2VDb250ZW50ID0gKFxuICAgICAgICAgICAgICAgICAgICAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogJ3JldmlzaW9ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICBydnByb3A6ICdjb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ2c2xvdHM6ICcqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlczogcGFnZVRpdGxlUGFyc2VkLmdldFN1YmplY3RQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSkgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdFxuICAgICAgICAgICAgICAgICkucXVlcnkucGFnZXNbMF0ucmV2aXNpb25zWzBdLnNsb3RzLm1haW4uY29udGVudC50cmltKCk7XG4gICAgICAgICAgICAgICAgc3luY1dpdGhNYWluQnV0dG9uID0gbmV3IE9PLnVpLkJ1dHRvbldpZGdldCh7IGxhYmVsOiAnU3luYyB3aXRoIG1haW4gcGFnZScsIGljb246ICdsaW5rJywgZmxhZ3M6IFsncHJvZ3Jlc3NpdmUnXSB9KTtcbiAgICAgICAgICAgICAgICBzeW5jV2l0aE1haW5CdXR0b24ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAvXiNyZWRpcmVjdDo/XFxzKlxcW1xcW1xccyooW15bXFxde3x9XSs/KVxccyooPzpcXHxbXltcXF17fH1dKz8pP11dXFxzKi9pLmV4ZWMobWFpblBhZ2VDb250ZW50KT8uWzFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldCkgcmV0dXJuIG13Lm5vdGlmeSgnRmFpbGVkIHRvIHBhcnNlIG1haW4gcGFnZSBjb250ZW50IScsIHsgdHlwZTogJ2Vycm9yJyB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdElucHV0LnNldFZhbHVlKG13LlRpdGxlLm5ld0Zyb21UZXh0KHRhcmdldCk/LmdldFRhbGtQYWdlKCk/LnRvU3RyaW5nKCkgPz8gJycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcm9tTW92ZSA9IFsnUiBmcm9tIG1vdmUnLCAuLi5yZWRpcmVjdFRlbXBsYXRlc1snUiBmcm9tIG1vdmUnXV0uc29tZSgodGFnT3JSZWRpcmVjdCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoYHt7XFxcXHMqWyR7dGFnT3JSZWRpcmVjdFswXS50b0xvd2VyQ2FzZSgpfSR7dGFnT3JSZWRpcmVjdFswXX1dJHt0YWdPclJlZGlyZWN0LnNsaWNlKDEpfVxcXFxzKihcXFxcfHx9fSlgKS50ZXN0KG1haW5QYWdlQ29udGVudCksXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcm9tTW92ZSkgdGFnU2VsZWN0LnNldFZhbHVlKFsnUiBmcm9tIG1vdmUnXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBSZWRpcmVjdCB0YXJnZXQgaW5wdXQgKi9cbiAgICAgICAgaW50ZXJmYWNlIFJlZGlyZWN0SW5wdXRXaWRnZXRDb25maWcgZXh0ZW5kcyBPTy51aS5UZXh0SW5wdXRXaWRnZXQuQ29uZmlnT3B0aW9ucywgT08udWkubWl4aW4uTG9va3VwRWxlbWVudC5Db25maWdPcHRpb25zIHt9XG5cbiAgICAgICAgY2xhc3MgUmVkaXJlY3RJbnB1dFdpZGdldCBleHRlbmRzIE9PLnVpLlRleHRJbnB1dFdpZGdldCB7XG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcihjb25maWc6IFJlZGlyZWN0SW5wdXRXaWRnZXRDb25maWcpIHtcbiAgICAgICAgICAgICAgICBzdXBlcihjb25maWcpO1xuICAgICAgICAgICAgICAgIE9PLnVpLm1peGluLkxvb2t1cEVsZW1lbnQuY2FsbCh0aGlzIGFzIHVua25vd24gYXMgT08udWkubWl4aW4uTG9va3VwRWxlbWVudCwgY29uZmlnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0TG9va3VwUmVxdWVzdCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcblxuICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIGRlZmVycmVkLnJlc29sdmUoW10pO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlLmluY2x1ZGVzKCcjJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSB2YWx1ZS5zcGxpdCgnIycpWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldCh7IGFjdGlvbjogJ3BhcnNlJywgcGFnZTogdGl0bGUsIHByb3A6ICdzZWN0aW9ucycsIHJlZGlyZWN0czogJzEnIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQ6IFBhZ2VQYXJzZVJlc3VsdCB8IG51bGwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRTZWN0aW9ucyA9IHJlc3VsdC5wYXJzZS5zZWN0aW9ucy5maWx0ZXIoKHNlY3Rpb24pID0+IHNlY3Rpb24ubGluZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgodmFsdWUuc3BsaXQoJyMnKVsxXS50b0xvd2VyQ2FzZSgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUobWF0Y2hlZFNlY3Rpb25zLm1hcCgoc2VjdGlvbikgPT4gKHsgZGF0YTogYCR7cmVzdWx0LnBhcnNlLnRpdGxlfSMke3NlY3Rpb24ubGluZX1gLCBsYWJlbDogYCR7cmVzdWx0LnBhcnNlLnRpdGxlfSMke3NlY3Rpb24ubGluZX1gIH0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGRlZmVycmVkLnJlc29sdmUoW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkVGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHZlcnNpb246IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FwbGltaXQ6IDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhcG5hbWVzcGFjZTogcGFyc2VkVGl0bGU/Lm5hbWVzcGFjZSA/PyAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhcHByZWZpeDogcGFyc2VkVGl0bGU/LnRpdGxlID8/IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRvcjogJ2FsbHBhZ2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wOiAnaW5mb3xwYWdlcHJvcHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdDogQWxsUGFnZXNHZW5lcmF0b3JSZXN1bHQgfCBudWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5xdWVyeT8ucGFnZXMgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHJlc3VsdC5xdWVyeS5wYWdlcyAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHBhZ2UpID0+IHBhZ2UudGl0bGUgIT09IHBhZ2VUaXRsZVBhcnNlZC50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHBhZ2UpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBhZ2UudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgT08udWkuSHRtbFNuaXBwZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwYWdlLnRpdGxlfSR7cGFnZS5wYWdlcHJvcHMgJiYgJ2Rpc2FtYmlndWF0aW9uJyBpbiBwYWdlLnBhZ2Vwcm9wcyA/ICcgPGk+KGRpc2FtYmlndWF0aW9uKTwvaT4nIDogJyd9JHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVkaXJlY3QnIGluIHBhZ2UgPyAnIDxpPihyZWRpcmVjdCk8L2k+JyA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgZGVmZXJyZWQucmVzb2x2ZShbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSh7IGFib3J0KCkge30gfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBnZXRMb29rdXBDYWNoZURhdGFGcm9tUmVzcG9uc2UgPSA8VD4ocmVzcG9uc2U6IFRbXSB8IG51bGwgfCB1bmRlZmluZWQpID0+IHJlc3BvbnNlID8/IFtdO1xuXG4gICAgICAgICAgICBnZXRMb29rdXBNZW51T3B0aW9uc0Zyb21EYXRhID0gKGRhdGE6IHsgZGF0YTogc3RyaW5nOyBsYWJlbDogc3RyaW5nIH1bXSkgPT4gZGF0YS5tYXAoKHsgZGF0YSwgbGFiZWwgfSkgPT4gbmV3IE9PLnVpLk1lbnVPcHRpb25XaWRnZXQoeyBkYXRhLCBsYWJlbCB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuYXNzaWduKFJlZGlyZWN0SW5wdXRXaWRnZXQucHJvdG90eXBlLCBPTy51aS5taXhpbi5Mb29rdXBFbGVtZW50LnByb3RvdHlwZSk7XG5cbiAgICAgICAgY29uc3QgcmVkaXJlY3RJbnB1dCA9IG5ldyBSZWRpcmVjdElucHV0V2lkZ2V0KHsgcGxhY2Vob2xkZXI6ICdUYXJnZXQgcGFnZSBuYW1lJywgcmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgICAgIHJlZGlyZWN0SW5wdXQub24oJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHJlZGlyZWN0SW5wdXQuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKGBeKGh0dHBzPzopPy97Mn0/JHttdy5jb25maWcuZ2V0KCd3Z1NlcnZlcicpLnJlcGxhY2UoL15cXC97Mn0vLCAnJyl9L3dpa2kvYCksICcnKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXjovLCAnJyk7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RJbnB1dC5zZXRWYWx1ZSh2YWx1ZVswXS50b1VwcGVyQ2FzZSgpICsgdmFsdWUuc2xpY2UoMSkucmVwbGFjZUFsbCgnXycsICcgJykpO1xuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXREaXNhYmxlZChmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Ugc3VibWl0QnV0dG9uLnNldERpc2FibGVkKHRydWUpO1xuXG4gICAgICAgICAgICB1cGRhdGVTdW1tYXJ5KCk7XG4gICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0TGFiZWwoJ1N1Ym1pdCcpO1xuICAgICAgICAgICAgbmVlZHNDaGVjayA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlZGlyZWN0SW5wdXRMYXlvdXQgPSBuZXcgT08udWkuRmllbGRMYXlvdXQocmVkaXJlY3RJbnB1dCwgeyBsYWJlbDogbmV3IE9PLnVpLkh0bWxTbmlwcGV0KCc8Yj5SZWRpcmVjdCB0YXJnZXQ6PC9iPicpLCBhbGlnbjogJ3RvcCcgfSk7XG5cbiAgICAgICAgLyogUmVkaXJlY3QgY2F0ZWdvcml6YXRpb24gdGVtcGxhdGUgc2VsZWN0aW9uICovXG4gICAgICAgIGNvbnN0IHRhZ1NlbGVjdCA9IG5ldyBPTy51aS5NZW51VGFnTXVsdGlzZWxlY3RXaWRnZXQoe1xuICAgICAgICAgICAgYWxsb3dBcmJpdHJhcnk6IGZhbHNlLFxuICAgICAgICAgICAgYWxsb3dSZW9yZGVyaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IE9iamVjdC5rZXlzKHJlZGlyZWN0VGVtcGxhdGVzKS5tYXAoKHRhZykgPT4gKHsgZGF0YTogdGFnLCBsYWJlbDogdGFnIH0pKSxcbiAgICAgICAgfSk7XG4gICAgICAgICh0YWdTZWxlY3QuZ2V0TWVudSgpIGFzIE9PLnVpLk1lbnVTZWxlY3RXaWRnZXQuQ29uZmlnT3B0aW9ucykuZmlsdGVyTW9kZSA9ICdzdWJzdHJpbmcnO1xuICAgICAgICB0YWdTZWxlY3Qub24oJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNvcnRlZFRhZ3MgPSAodGFnU2VsZWN0LmdldFZhbHVlKCkgYXMgc3RyaW5nW10pLnNvcnQoKGEsIGIpID0+IGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSkpO1xuXG4gICAgICAgICAgICBpZiAoKHRhZ1NlbGVjdC5nZXRWYWx1ZSgpIGFzIHN0cmluZ1tdKS5qb2luKCc7JykgIT09IHNvcnRlZFRhZ3Muam9pbignOycpKSB0YWdTZWxlY3Quc2V0VmFsdWUoc29ydGVkVGFncyk7XG5cbiAgICAgICAgICAgIHVwZGF0ZVN1bW1hcnkoKTtcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRMYWJlbCgnU3VibWl0Jyk7XG4gICAgICAgICAgICBuZWVkc0NoZWNrID0gdHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgdGFnU2VsZWN0TGF5b3V0ID0gbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHRhZ1NlbGVjdCwgeyBsYWJlbDogbmV3IE9PLnVpLkh0bWxTbmlwcGV0KCc8Yj5SZWRpcmVjdCBjYXRlZ29yaXphdGlvbiB0ZW1wbGF0ZShzKTo8L2I+JyksIGFsaWduOiAndG9wJyB9KTtcblxuICAgICAgICAvKiBTdW1tYXJ5IGlucHV0ICovXG4gICAgICAgIGNvbnN0IHN1bW1hcnlJbnB1dCA9IG5ldyBPTy51aS5Db21ib0JveElucHV0V2lkZ2V0KHtcbiAgICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7IGRhdGE6ICdSZXNvbHZlIGRvdWJsZSByZWRpcmVjdCcgfSwgLy9cbiAgICAgICAgICAgICAgICB7IGRhdGE6ICdSZXNvbHZlIHNlbGYgcmVkaXJlY3QnIH0sXG4gICAgICAgICAgICAgICAgeyBkYXRhOiAnUmVtb3ZlIGluY29ycmVjdCByY2F0cycgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHN1bW1hcnlJbnB1dExheW91dCA9IG5ldyBPTy51aS5GaWVsZExheW91dChzdW1tYXJ5SW5wdXQsIHsgbGFiZWw6IG5ldyBPTy51aS5IdG1sU25pcHBldCgnPGI+U3VtbWFyeTo8L2I+JyksIGFsaWduOiAndG9wJyB9KTtcblxuICAgICAgICAvKiBTdWJtaXQgYnV0dG9uICovXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IG5ldyBPTy51aS5CdXR0b25XaWRnZXQoeyBsYWJlbDogJ1N1Ym1pdCcsIGRpc2FibGVkOiB0cnVlLCBmbGFnczogWydwcm9ncmVzc2l2ZSddIH0pO1xuICAgICAgICBzdWJtaXRCdXR0b24uJGVsZW1lbnRbMF0uc3R5bGUubWFyZ2luQm90dG9tID0gJzAnO1xuXG4gICAgICAgIGxldCBuZWVkc0NoZWNrID0gdHJ1ZTtcbiAgICAgICAgc3VibWl0QnV0dG9uLm9uKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbcmVkaXJlY3RJbnB1dCwgdGFnU2VsZWN0LCBzdW1tYXJ5SW5wdXQsIHN1Ym1pdEJ1dHRvbiwgc3luY1RhbGtDaGVja2JveCwgcGF0cm9sQ2hlY2tib3hdLmZpbHRlcihCb29sZWFuKSkgKGVsZW1lbnQgYXMgT08udWkuV2lkZ2V0KS5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRMYWJlbCgnQ2hlY2tpbmcgdGFyZ2V0IHZhbGlkaXR5Li4uJyk7XG5cbiAgICAgICAgICAgIGxldCBwYXJzZWREZXN0aW5hdGlvbjtcblxuICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gW107XG5cbiAgICAgICAgICAgIC8qIFRpdGxlIHZhbGlkYXRpb24gKi9cbiAgICAgICAgICAgIGlmIChuZWVkc0NoZWNrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb24gPSByZWRpcmVjdElucHV0LmdldFZhbHVlKCkudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgLyogSW52YWxpZCBjaGFyYWN0ZXJzICovXG4gICAgICAgICAgICAgICAgaWYgKCEvXlxccypbXltcXF17fH1dK1xccyokLy50ZXN0KGRlc3RpbmF0aW9uKSkgZXJyb3JzLnB1c2goeyB0aXRsZTogZGVzdGluYXRpb24sIG1lc3NhZ2U6ICdpcyBub3QgYSB2YWxpZCBwYWdlIHRpdGxlIScgfSk7XG5cbiAgICAgICAgICAgICAgICAvKiBGYWlsZWQgZHVyaW5nIHRpdGxlIHBhcnNpbmcgKi9cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWREZXN0aW5hdGlvbiA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KGRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPT09IDApIGVycm9ycy5wdXNoKHsgdGl0bGU6IGRlc3RpbmF0aW9uLCBtZXNzYWdlOiAnaXMgbm90IGEgdmFsaWQgcGFnZSB0aXRsZSEnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZERlc3RpbmF0aW9uICYmIGVycm9ycy5sZW5ndGggPT09IDApIGVycm9ycy5wdXNoKHsgdGl0bGU6IGRlc3RpbmF0aW9uLCBtZXNzYWdlOiAnaXMgbm90IGEgdmFsaWQgcGFnZSB0aXRsZSEnIH0pO1xuXG4gICAgICAgICAgICAgICAgLyogU2VsZiByZWRpcmVjdHMgKi9cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkRGVzdGluYXRpb24/LnRvU3RyaW5nKCkgPT09IHBhZ2VUaXRsZVBhcnNlZC50b1N0cmluZygpKSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdjYW5ub3QgcmVkaXJlY3QgdG8gaXRzZWxmIScgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvbkRhdGEgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3F1ZXJ5JywgZm9ybWF0dmVyc2lvbjogMiwgcHJvcDogJ3BhZ2Vwcm9wcycsIHRpdGxlczogZGVzdGluYXRpb24gfSkuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8qIE5vbi1leGlzdGVudCBkZXN0aW5hdGlvbiAqLyBpZiAoZXJyb3JDb2RlID09PSAnbWlzc2luZ3RpdGxlJykgZXJyb3JzLnB1c2goeyB0aXRsZTogZGVzdGluYXRpb24sIG1lc3NhZ2U6ICdkb2VzIG5vdCBleGlzdCEnIH0pO1xuICAgICAgICAgICAgICAgICAgICAvKiBPdGhlciBBUEkgZXJyb3IgKi8gZWxzZSBlcnJvcnMucHVzaCh7IHRpdGxlOiBkZXN0aW5hdGlvbiwgbWVzc2FnZTogYHdhcyBub3QgYWJsZSB0byBiZSBmZXRjaGVkIGZyb20gdGhlIEFQSSAoJHtlcnJvckNvZGV9KSFgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9KSkgYXMgUGFnZXByb3BzUmVzdWx0IHwgbnVsbDtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBhcnNlUmVzdWx0ID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdwYXJzZScsIHBhZ2U6IGRlc3RpbmF0aW9uLCBwcm9wOiAnc2VjdGlvbnMnLCByZWRpcmVjdHM6ICcxJyB9KSkgYXMgUGFnZVBhcnNlUmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgLyogRG91YmxlIHJlZGlyZWN0cyAqL1xuICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvblBhcnNlUmVzdWx0LnBhcnNlLnJlZGlyZWN0cz8uWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUmVkaXJlY3QgPVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25QYXJzZVJlc3VsdC5wYXJzZS5yZWRpcmVjdHNbMF0udG8gKyAoZGVzdGluYXRpb25QYXJzZVJlc3VsdC5wYXJzZS5yZWRpcmVjdHNbMF0udG9mcmFnbWVudCA/IGAjJHtkZXN0aW5hdGlvblBhcnNlUmVzdWx0LnBhcnNlLnJlZGlyZWN0c1swXS50b2ZyYWdtZW50fWAgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkZXN0aW5hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBpcyBhIHJlZGlyZWN0IHRvIDxhIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uUmVkaXJlY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICApfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGVzdGluYXRpb25SZWRpcmVjdH08L2E+LiBSZXRhcmdldCB0byB0aGF0IHBhZ2UgaW5zdGVhZCwgYXMgZG91YmxlIHJlZGlyZWN0cyBhcmVuJ3QgYWxsb3dlZC5gLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiBOb24tZXhpc3RlbnQgc2VjdGlvbiAqL1xuICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbi5zcGxpdCgnIycpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsaWRTZWN0aW9uID0gZGVzdGluYXRpb25QYXJzZVJlc3VsdC5wYXJzZS5zZWN0aW9ucy5maW5kKChzZWN0aW9uKSA9PiBzZWN0aW9uLmxpbmUgPT09IGRlc3RpbmF0aW9uLnNwbGl0KCcjJylbMV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRTZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgdG8gYW5jaG9yJykpIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2lzIHRhZ2dlZCBhcyBhIHJlZGlyZWN0IHRvIGFuIGFuY2hvciwgYnV0IGl0IGlzIGFjdHVhbGx5IGEgcmVkaXJlY3QgdG8gYSBzZWN0aW9uIScgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIHNlY3Rpb24nKSkgZXJyb3JzLnB1c2goeyBtZXNzYWdlOiAnaXMgYSByZWRpcmVjdCB0byBhIHNlY3Rpb24sIGJ1dCBpdCBpcyBub3QgdGFnZ2VkIHdpdGggPGNvZGU+e3tSIHRvIHNlY3Rpb259fTwvY29kZT4hJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uQ29udGVudCA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogJ3JldmlzaW9ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydnNsb3RzOiAnKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlczogcGFyc2VkRGVzdGluYXRpb24hLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpIGFzIFBhZ2VSZXZpc2lvbnNSZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICkucXVlcnkucGFnZXNbMF0ucmV2aXNpb25zWzBdLnNsb3RzLm1haW4uY29udGVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4oZGVzdGluYXRpb25Db250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXRjaCgvKD88PXt7XFxzKj9bQWFdKD86bmNob3JzP3xuY2hvciBmb3IgcmVkaXJlY3R8bmtlcnxOQ0hPUnxuYylcXHMqP1xcfCkuKz8oPz19fSkvZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5tYXAoKGFuY2hvcjogc3RyaW5nKSA9PiBhbmNob3Iuc3BsaXQoJ3wnKS5tYXAoKHBhcnQpID0+IHBhcnQudHJpbSgpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5mbGF0KCkgPz8gW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihkZXN0aW5hdGlvbkNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hdGNoKC8oPzw9e3tcXHMqPyg/OltWdl0oPzppc2libGUgYW5jaG9ycz98aXNhbmN8QW5jaHxhbmNob3J8aXNpYmxlYW5jaG9yfGEpfFtBYV0oPzpuY2hvcmR8Y2hvcmVkfG5jaG9yXFwrKXxbVHRdZXh0IGFuY2hvcilcXHMqP1xcfCkuKz8oPz0oPzwhIXw9KX19KS9nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/Lm1hcCgoYW5jaG9yOiBzdHJpbmcpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJ3wnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHBhcnQpID0+IHBhcnQudHJpbSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHBhcnQpID0+ICEvXnRleHRcXHMqPz0vLnRlc3QocGFydCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8uZmxhdCgpID8/IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4oZGVzdGluYXRpb25Db250ZW50Lm1hdGNoKC8oPzw9aWQ9KVwiPy4rPyg/PVwifD58XFx8KS9nKT8ubWFwKChhbmNob3I6IHN0cmluZykgPT4gYW5jaG9yLnRyaW0oKSkgPz8gW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JzLmluY2x1ZGVzKGRlc3RpbmF0aW9uLnNwbGl0KCcjJylbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIHNlY3Rpb24nKSkgZXJyb3JzLnB1c2goeyBtZXNzYWdlOiAnaXMgdGFnZ2VkIGFzIGEgcmVkaXJlY3QgdG8gYSBzZWN0aW9uLCBidXQgaXQgaXMgYWN0dWFsbHkgYSByZWRpcmVjdCB0byBhbiBhbmNob3IhJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIGFuY2hvcicpKSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyBhIHJlZGlyZWN0IHRvIGFuIGFuY2hvciwgYnV0IGl0IGlzIG5vdCB0YWdnZWQgd2l0aCA8Y29kZT57e1IgZnJvbSBhbmNob3J9fTwvY29kZT4hJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6IGBpcyBhIHJlZGlyZWN0IHRvIDxhIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKGRlc3RpbmF0aW9uKX1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2Rlc3RpbmF0aW9ufTwvYT4sIGJ1dCB0aGF0IHNlY3Rpb24gb3IgYW5jaG9yIGRvZXMgbm90IGV4aXN0IWAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiBJbXByb3Blcmx5IHRhZ2dlZCBhcyByZWRpcmVjdCB0byBzZWN0aW9uL2FuY2hvciAqL1xuICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbi5zcGxpdCgnIycpLmxlbmd0aCA9PT0gMSAmJiAodGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgdG8gc2VjdGlvbicpIHx8IHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIGFuY2hvcicpKSlcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goeyBtZXNzYWdlOiAnaXMgbm90IGEgcmVkaXJlY3QgdG8gYSBzZWN0aW9uL2FuY2hvciwgYnV0IGl0IGlzIHRhZ2dlZCB3aXRoIDxjb2RlPnt7UiBmcm9tIHNlY3Rpb259fTwvY29kZT4gb3IgPGNvZGU+e3tSIGZyb20gYW5jaG9yfX08L2NvZGU+IScgfSk7XG5cbiAgICAgICAgICAgICAgICAvKiBSZWRpcmVjdCB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlIHdpdGhvdXQgdGVtcGxhdGUgKi9cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICdkaXNhbWJpZ3VhdGlvbicgaW4gZGVzdGluYXRpb25EYXRhIS5xdWVyeS5wYWdlc1swXS5wYWdlcHJvcHMgJiZcbiAgICAgICAgICAgICAgICAgICAgIVtcbiAgICAgICAgICAgICAgICAgICAgICAgICdSIGZyb20gYW1iaWd1b3VzIHNvcnQgbmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnUiBmcm9tIGFtYmlndW91cyB0ZXJtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdSIHRvIGRpc2FtYmlndWF0aW9uIHBhZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1IgZnJvbSBpbmNvbXBsZXRlIGRpc2FtYmlndWF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdSIGZyb20gaW5jb3JyZWN0IGRpc2FtYmlndWF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdSIGZyb20gb3RoZXIgZGlzYW1iaWd1YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICBdLnNvbWUoKHRlbXBsYXRlKSA9PiB0YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcyh0ZW1wbGF0ZSkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyBhIHJlZGlyZWN0IHRvIGEgZGlzYW1iaWd1YXRpb24gcGFnZSwgYnV0IGl0IGlzIG5vdCB0YWdnZWQgd2l0aCBhIGRpc2FtYmlndWF0aW9uIGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlIScgfSk7XG5cbiAgICAgICAgICAgICAgICAvKiBJbXByb3Blcmx5IHRhZ2dlZCBhcyByZWRpcmVjdCB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlICovXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAhKCdkaXNhbWJpZ3VhdGlvbicgaW4gZGVzdGluYXRpb25EYXRhIS5xdWVyeS5wYWdlc1swXS5wYWdlcHJvcHMpICYmXG4gICAgICAgICAgICAgICAgICAgIFsnUiBmcm9tIGFtYmlndW91cyBzb3J0IG5hbWUnLCAnUiBmcm9tIGFtYmlndW91cyB0ZXJtJywgJ1IgdG8gZGlzYW1iaWd1YXRpb24gcGFnZScsICdSIGZyb20gaW5jb21wbGV0ZSBkaXNhbWJpZ3VhdGlvbiddLnNvbWUoKHRlbXBsYXRlKSA9PiB0YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcyh0ZW1wbGF0ZSkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyBub3QgYSByZWRpcmVjdCB0byBhIGRpc2FtYmlndWF0aW9uIHBhZ2UsIGJ1dCBpdCBpcyB0YWdnZWQgd2l0aCBhIGRpc2FtYmlndWF0aW9uIGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlIScgfSk7XG5cbiAgICAgICAgICAgICAgICAvKiB7e1IgdG8gZGlzYW1iaWd1YXRpb24gcGFnZX19IHdpdGhvdXQgXCIgKGRpc2FtYmlndWF0aW9uKVwiIGF0IGVuZCBvZiB0aXRsZSAqL1xuICAgICAgICAgICAgICAgIGlmICh0YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlJykgJiYgIXBhZ2VUaXRsZVBhcnNlZC5nZXRNYWluVGV4dCgpLmVuZHNXaXRoKCcgKGRpc2FtYmlndWF0aW9uKScpKVxuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpcyB0YWdnZWQgd2l0aCA8Y29kZT57e1IgdG8gZGlzYW1iaWd1YXRpb24gcGFnZX19PC9jb2RlPiwgYnV0IHRoaXMgdGl0bGUgZG9lcyBub3QgZW5kIHdpdGggXCIgKGRpc2FtYmlndWF0aW9uKVwiLiBVc2UgPGNvZGU+e3tSIGZyb20gYW1iaWd1b3VzIHRlcm19fTwvY29kZT4gb3IgYSBzaW1pbGFyIGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlIGluc3RlYWQhJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvKiBTeW5jaW5nIHRhbGsgcGFnZSBidXQgdGFsayBwYWdlIGV4aXN0cyBhbmQgaXNuJ3QgYSByZWRpcmVjdCAqL1xuICAgICAgICAgICAgICAgIGlmIChzeW5jVGFsa0NoZWNrYm94Py5pc1NlbGVjdGVkKCkgJiYgIXRhbGtEYXRhIS5xdWVyeS5wYWdlc1swXS5taXNzaW5nICYmICF0YWxrRGF0YSEucXVlcnkucGFnZXNbMF0ucmVkaXJlY3QpXG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgdGl0bGU6IHBhZ2VUaXRsZVBhcnNlZC5nZXRUYWxrUGFnZSgpIS5nZXRQcmVmaXhlZFRleHQoKSwgbWVzc2FnZTogJ2V4aXN0cywgYnV0IGlzIG5vdCBhIHJlZGlyZWN0IScgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucmVkaXJlY3QtaGVscGVyLXdhcm5pbmcnKSkgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHsgdGl0bGUsIG1lc3NhZ2UgfSBvZiBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBuZXcgT08udWkuSHRtbFNuaXBwZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHt0aXRsZSA/IGA8YSBocmVmPVwiJHttdy51dGlsLmdldFVybCh0aXRsZSl9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHt0aXRsZX08L2E+YCA6ICdUaGlzIHBhZ2UnfSAke21lc3NhZ2V9IENsaWNrIGFnYWluIHdpdGhvdXQgbWFraW5nIGNoYW5nZXMgdG8gc3VibWl0IGFueXdheS5gLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YXJuaW5nTWVzc2FnZSA9IG5ldyBPTy51aS5NZXNzYWdlV2lkZ2V0KHsgdHlwZTogJ2Vycm9yJywgY2xhc3NlczogWydyZWRpcmVjdC1oZWxwZXItd2FybmluZyddLCBpbmxpbmU6IHRydWUsIGxhYmVsIH0pO1xuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTWVzc2FnZS4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5Ub3AgPSAnOHB4JztcblxuICAgICAgICAgICAgICAgICAgICBlZGl0b3JCb3guJGVsZW1lbnRbMF0uYXBwZW5kKHdhcm5pbmdNZXNzYWdlLiRlbGVtZW50WzBdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgW3JlZGlyZWN0SW5wdXQsIHRhZ1NlbGVjdCwgc3VtbWFyeUlucHV0LCBzdWJtaXRCdXR0b24sIHN5bmNUYWxrQ2hlY2tib3gsIHBhdHJvbENoZWNrYm94XS5maWx0ZXIoQm9vbGVhbikpIChlbGVtZW50IGFzIE9PLnVpLldpZGdldCkuc2V0RGlzYWJsZWQoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldExhYmVsKCdTdWJtaXQgYW55d2F5Jyk7XG4gICAgICAgICAgICAgICAgbmVlZHNDaGVjayA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYXJzZWREZXN0aW5hdGlvbiA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KHJlZGlyZWN0SW5wdXQuZ2V0VmFsdWUoKSk7XG5cbiAgICAgICAgICAgIC8qIEVkaXQvY3JlYXRlIHJlZGlyZWN0ICovXG4gICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0TGFiZWwoYCR7ZXhpc3RzID8gJ0VkaXRpbmcnIDogJ0NyZWF0aW5nJ30gcmVkaXJlY3QuLi5gKTtcblxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gW1xuICAgICAgICAgICAgICAgIGAjUkVESVJFQ1QgW1ske3JlZGlyZWN0SW5wdXQuZ2V0VmFsdWUoKS50cmltKCl9XV1gLCAvL1xuICAgICAgICAgICAgICAgIHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgPyBge3tSZWRpcmVjdCBjYXRlZ29yeSBzaGVsbHxcXG4keyh0YWdTZWxlY3QuZ2V0VmFsdWUoKSBhcyBzdHJpbmdbXSkubWFwKCh0YWcpID0+IGB7eyR7dGFnfSR7b2xkUmVkaXJlY3RUYWdEYXRhPy5bdGFnXSA/IGB8JHtvbGRSZWRpcmVjdFRhZ0RhdGFbdGFnXX1gIDogJyd9fX1gKS5qb2luKCdcXG4nKX1cXG59fWBcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgIG9sZFN0cmF5VGV4dCxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcblxcbicpO1xuXG4gICAgICAgICAgICBjb25zdCBzdW1tYXJ5ID0gKHN1bW1hcnlJbnB1dC5nZXRWYWx1ZSgpIHx8IChzdW1tYXJ5SW5wdXQuJHRhYkluZGV4ZWRbMF0gYXMgSFRNTElucHV0RWxlbWVudCkucGxhY2Vob2xkZXIpICsgJyAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvcmVkaXJlY3QtaGVscGVyfHJlZGlyZWN0LWhlbHBlcl1dKSc7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgIC5lZGl0KHBhZ2VUaXRsZSwgKCkgPT4gKHsgdGV4dDogb3V0cHV0LCBzdW1tYXJ5IH0pKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIHsgZXJyb3IgfTogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdub2NyZWF0ZS1taXNzaW5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbXcuQXBpKCkuY3JlYXRlKHBhZ2VUaXRsZSwgeyBzdW1tYXJ5IH0sIG91dHB1dCkuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCB7IGVycm9yIH06IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgRXJyb3IgY3JlYXRpbmcgJHtwYWdlVGl0bGV9OiAke2Vycm9yLmluZm99ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBlZGl0aW5nIG9yIGNyZWF0aW5nICR7cGFnZVRpdGxlfTogJHtlcnJvci5pbmZvfSAoJHtlcnJvckNvZGV9KWAsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghcmVzdWx0KSByZXR1cm47XG5cbiAgICAgICAgICAgIG13Lm5vdGlmeShgUmVkaXJlY3QgJHtleGlzdHMgPyAnZWRpdGVkJyA6ICdjcmVhdGVkJ30gc3VjY2Vzc2Z1bGx5IWAsIHsgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuXG4gICAgICAgICAgICAvKiBTeW5jIHRhbGsgcGFnZSBjaGVja2JveCBoYW5kbGVyICovXG4gICAgICAgICAgICBpZiAoc3luY1RhbGtDaGVja2JveD8uaXNTZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldExhYmVsKCdFZGl0aW5nIHRhbGsgcGFnZS4uLicpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbU1vdmUgPSB0YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiBmcm9tIG1vdmUnKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG91dHB1dCA9IFtcbiAgICAgICAgICAgICAgICAgICAgYCNSRURJUkVDVCBbWyR7cGFyc2VkRGVzdGluYXRpb24hLmdldFRhbGtQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpfV1dYCwgLy9cbiAgICAgICAgICAgICAgICAgICAgZnJvbU1vdmUgPyAne3tSZWRpcmVjdCBjYXRlZ29yeSBzaGVsbHxcXG57e1IgZnJvbSBtb3ZlfX1cXG59fScgOiBudWxsLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAgICAgICAgICAgICAuam9pbignXFxuXFxuJyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0YWxrUGFnZSA9IHBhZ2VUaXRsZVBhcnNlZC5nZXRUYWxrUGFnZSgpIS5nZXRQcmVmaXhlZFRleHQoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRhbGtSZXN1bHQgPSBhd2FpdCBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAgICAgLmVkaXQodGFsa1BhZ2UsICgpID0+ICh7IHRleHQ6IG91dHB1dCwgc3VtbWFyeTogJ1N5bmNpbmcgcmVkaXJlY3QgZnJvbSBtYWluIHBhZ2UgKHZpYSBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL3JlZGlyZWN0LWhlbHBlcnxyZWRpcmVjdC1oZWxwZXJdXSknIH0pKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCB7IGVycm9yIH06IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ25vY3JlYXRlLW1pc3NpbmcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZSh0YWxrUGFnZSwgeyBzdW1tYXJ5OiAnU3luY2luZyByZWRpcmVjdCBmcm9tIG1haW4gcGFnZSAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvcmVkaXJlY3QtaGVscGVyfHJlZGlyZWN0LWhlbHBlcl1dKScgfSwgb3V0cHV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCB7IGVycm9yIH06IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBjcmVhdGluZyAke3RhbGtQYWdlfTogJHtlcnJvci5pbmZvfSAoJHtlcnJvckNvZGV9KWAsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEVycm9yIGVkaXRpbmcgb3IgY3JlYXRpbmcgJHt0YWxrUGFnZX06ICR7ZXJyb3IuaW5mb30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0YWxrUmVzdWx0KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBtdy5ub3RpZnkoJ1RhbGsgcGFnZSBzeW5jZWQgc3VjY2Vzc2Z1bGx5IScsIHsgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBQYXRyb2wgY2hlY2tib3ggaGFuZGxlciAqL1xuICAgICAgICAgICAgaWYgKHBhdHJvbENoZWNrYm94Py5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0TGFiZWwoJ1BhdHJvbGxpbmcgcmVkaXJlY3QuLi4nKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdHJvbExpbms6IEhUTUxBbmNob3JFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYXRyb2xsaW5rIGEnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrUmV2aWV3ZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXdlLXB0LW1hcmstYXMtcmV2aWV3ZWQtYnV0dG9uJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhdHJvbExpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0cm9sUmVzdWx0ID0gYXdhaXQgbmV3IG13LkFwaSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAucG9zdFdpdGhUb2tlbigncGF0cm9sJywgeyBhY3Rpb246ICdwYXRyb2wnLCByY2lkOiBuZXcgVVJMKHBhdHJvbExpbmsuaHJlZikuc2VhcmNoUGFyYW1zLmdldCgncmNpZCcpISB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvckNvZGU6IHN0cmluZywgeyBlcnJvciB9OiBNZWRpYVdpa2lEYXRhRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEVycm9yIHBhdHJvbGxpbmcgJHtwYWdlVGl0bGV9IHZpYSBBUEk6ICR7ZXJyb3IuaW5mb30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdHJvbFJlc3VsdCkgbXcubm90aWZ5KCdSZWRpcmVjdCBwYXRyb2xsZWQgc3VjY2Vzc2Z1bGx5IScsIHsgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWFya1Jldmlld2VkQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtSZXZpZXdlZEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoJ1JlZGlyZWN0IHBhdHJvbGxlZCBzdWNjZXNzZnVsbHkhJywgeyB0eXBlOiAnc3VjY2VzcycgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIG13Lm5vdGlmeSgnUGFnZSBjdXJhdGlvbiB0b29sYmFyIG5vdCBmb3VuZCwgcmVkaXJlY3QgY2Fubm90IGJlIHBhdHJvbGxlZCEnLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRMYWJlbCgnQ29tcGxldGUsIHJlbG9hZGluZy4uLicpO1xuXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG13LnV0aWwuZ2V0VXJsKHBhZ2VUaXRsZSwgeyByZWRpcmVjdDogJ25vJyB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHRhbGtEYXRhOiBQYWdlSW5mb1Jlc3VsdCB8IHVuZGVmaW5lZDtcblxuICAgICAgICBsZXQgc3luY1RhbGtDaGVja2JveDogT08udWkuQ2hlY2tib3hJbnB1dFdpZGdldCB8IHVuZGVmaW5lZCwgc3luY1RhbGtMYXlvdXQ6IE9PLnVpLldpZGdldCB8IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCFwYWdlVGl0bGVQYXJzZWQuaXNUYWxrUGFnZSgpKSB7XG4gICAgICAgICAgICB0YWxrRGF0YSA9IChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHsgYWN0aW9uOiAncXVlcnknLCBmb3JtYXR2ZXJzaW9uOiAyLCBwcm9wOiAnaW5mbycsIHRpdGxlczogcGFnZVRpdGxlUGFyc2VkLmdldFRhbGtQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpIH0pKSBhcyBQYWdlSW5mb1Jlc3VsdDtcbiAgICAgICAgICAgIHN5bmNUYWxrQ2hlY2tib3ggPSBuZXcgT08udWkuQ2hlY2tib3hJbnB1dFdpZGdldCh7IHNlbGVjdGVkOiAhIXRhbGtEYXRhLnF1ZXJ5LnBhZ2VzWzBdLnJlZGlyZWN0IH0pO1xuXG4gICAgICAgICAgICBzeW5jVGFsa0xheW91dCA9IG5ldyBPTy51aS5XaWRnZXQoeyBjb250ZW50OiBbbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHN5bmNUYWxrQ2hlY2tib3gsIHsgbGFiZWw6ICdTeW5jIHRhbGsgcGFnZScsIGFsaWduOiAnaW5saW5lJyB9KV0gfSk7XG4gICAgICAgICAgICBzeW5jVGFsa0xheW91dC4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMCc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtYXJrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213ZS1wdC1tYXJrIC5td2UtcHQtdG9vbC1pY29uJykgYXMgSFRNTEltYWdlRWxlbWVudCB8IG51bGw7XG4gICAgICAgIG1hcmtCdXR0b24/LmNsaWNrKCk7XG4gICAgICAgIG1hcmtCdXR0b24/LmNsaWNrKCk7XG5cbiAgICAgICAgbGV0IHNob3VsZFByb21wdFBhdHJvbDtcbiAgICAgICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgIT09IDApIHNob3VsZFByb21wdFBhdHJvbCA9IGZhbHNlO1xuICAgICAgICBlbHNlIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGF0cm9sbGluaycpKSBzaG91bGRQcm9tcHRQYXRyb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXdlLXB0LW1hcmstYXMtcmV2aWV3ZWQtYnV0dG9uJykpIHNob3VsZFByb21wdFBhdHJvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtd2UtcHQtbWFyay1hcy11bnJldmlld2VkLWJ1dHRvbicpKSBzaG91bGRQcm9tcHRQYXRyb2wgPSBmYWxzZTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIW13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykpIHNob3VsZFByb21wdFBhdHJvbCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgdXNlclBlcm1pc3Npb25zID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIG1ldGE6ICd1c2VyaW5mbycsIHVpcHJvcDogJ3JpZ2h0cycgfSkpIGFzIFVzZXJQZXJtaXNzaW9uc1Jlc3BvbnNlO1xuICAgICAgICAgICAgaWYgKCF1c2VyUGVybWlzc2lvbnMucXVlcnkudXNlcmluZm8ucmlnaHRzLmluY2x1ZGVzKCdwYXRyb2wnKSkgc2hvdWxkUHJvbXB0UGF0cm9sID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhdHJvbFJlc3BvbnNlID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdwYWdldHJpYWdlbGlzdCcsIHBhZ2VfaWQ6IG13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykgfSkpIGFzIFBhZ2VUcmlhZ2VMaXN0UmVzcG9uc2U7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5cbiAgICAgICAgICAgIGlmIChwYXRyb2xSZXNwb25zZS5wYWdldHJpYWdlbGlzdC5wYWdlc1swXT8udXNlcl9uYW1lID09PSBtdy5jb25maWcuZ2V0KCd3Z1VzZXJOYW1lJykpIHNob3VsZFByb21wdFBhdHJvbCA9IGZhbHNlO1xuICAgICAgICAgICAgZWxzZSBpZiAocGF0cm9sUmVzcG9uc2UucGFnZXRyaWFnZWxpc3QucmVzdWx0ICE9PSAnc3VjY2VzcycgfHwgcGF0cm9sUmVzcG9uc2UucGFnZXRyaWFnZWxpc3QucGFnZXMubGVuZ3RoID09PSAwKSBzaG91bGRQcm9tcHRQYXRyb2wgPSBmYWxzZTtcbiAgICAgICAgICAgIGVsc2Ugc2hvdWxkUHJvbXB0UGF0cm9sID0gIU51bWJlci5wYXJzZUludChwYXRyb2xSZXNwb25zZS5wYWdldHJpYWdlbGlzdC5wYWdlc1swXT8ucGF0cm9sX3N0YXR1cyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGF0cm9sQ2hlY2tib3g6IE9PLnVpLkNoZWNrYm94SW5wdXRXaWRnZXQgfCB1bmRlZmluZWQsIHBhdHJvbExheW91dDogT08udWkuV2lkZ2V0IHwgdW5kZWZpbmVkO1xuICAgICAgICBpZiAoc2hvdWxkUHJvbXB0UGF0cm9sKSB7XG4gICAgICAgICAgICBwYXRyb2xDaGVja2JveCA9IG5ldyBPTy51aS5DaGVja2JveElucHV0V2lkZ2V0KHsgc2VsZWN0ZWQ6IHRydWUgfSk7XG5cbiAgICAgICAgICAgIHBhdHJvbExheW91dCA9IG5ldyBPTy51aS5XaWRnZXQoeyBjb250ZW50OiBbbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHBhdHJvbENoZWNrYm94LCB7IGxhYmVsOiAnTWFyayBhcyBwYXRyb2xsZWQnLCBhbGlnbjogJ2lubGluZScgfSldIH0pO1xuICAgICAgICAgICAgcGF0cm9sTGF5b3V0LiRlbGVtZW50WzBdLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcwJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN1Ym1pdExheW91dCA9IG5ldyBPTy51aS5Ib3Jpem9udGFsTGF5b3V0KHsgaXRlbXM6IFtzdWJtaXRCdXR0b24sIHN5bmNUYWxrTGF5b3V0LCBwYXRyb2xMYXlvdXRdLmZpbHRlcihCb29sZWFuKSBhcyBPTy51aS5XaWRnZXRbXSB9KTtcbiAgICAgICAgc3VibWl0TGF5b3V0LiRlbGVtZW50WzBdLnN0eWxlLm1hcmdpblRvcCA9ICcxMHB4JztcblxuICAgICAgICAvKiBBZGQgZWxlbWVudHMgdG8gc2NyZWVuICovXG4gICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5hcHBlbmQoXG4gICAgICAgICAgICAuLi4oW3N5bmNXaXRoTWFpbkJ1dHRvbj8uJGVsZW1lbnQ/LlswXSwgcmVkaXJlY3RJbnB1dExheW91dC4kZWxlbWVudFswXSwgdGFnU2VsZWN0TGF5b3V0LiRlbGVtZW50WzBdLCBzdW1tYXJ5SW5wdXRMYXlvdXQuJGVsZW1lbnRbMF0sIHN1Ym1pdExheW91dC4kZWxlbWVudFswXV0uZmlsdGVyKFxuICAgICAgICAgICAgICAgIEJvb2xlYW4sXG4gICAgICAgICAgICApIGFzIEhUTUxFbGVtZW50W10pLFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnRlbnRUZXh0LnByZXBlbmQoZWRpdG9yQm94LiRlbGVtZW50WzBdKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgc3VtbWFyeSBpbnB1dCBwbGFjZWhvbGRlci5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVN1bW1hcnkoKSB7XG4gICAgICAgICAgICBjb25zdCByZWRpcmVjdFZhbHVlID0gcmVkaXJlY3RJbnB1dC5nZXRWYWx1ZSgpLnRyaW0oKTtcblxuICAgICAgICAgICAgaWYgKCFyZWRpcmVjdFZhbHVlKSAoc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gJyc7XG4gICAgICAgICAgICBlbHNlIGlmIChleGlzdHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRDaGFuZ2VkID0gcmVkaXJlY3RWYWx1ZS5yZXBsYWNlKCdfJywgJyAnKSAhPT0gb2xkUmVkaXJlY3RUYXJnZXQ/LnJlcGxhY2UoJ18nLCAnICcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhZ3NDaGFuZ2VkID0gdGFnU2VsZWN0LmdldFZhbHVlKCkuam9pbignOycpICE9PSBvbGRSZWRpcmVjdFRhZ3M/LmpvaW4oJzsnKTtcblxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRDaGFuZ2VkICYmIHRhZ3NDaGFuZ2VkKSAoc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gYENoYW5naW5nIHJlZGlyZWN0IHRvIFtbJHtyZWRpcmVjdFZhbHVlfV1dIGFuZCBjaGFuZ2luZyBjYXRlZ29yaXphdGlvbiB0ZW1wbGF0ZXNgO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldENoYW5nZWQpIChzdW1tYXJ5SW5wdXQuJHRhYkluZGV4ZWRbMF0gYXMgSFRNTElucHV0RWxlbWVudCkucGxhY2Vob2xkZXIgPSBgQ2hhbmdpbmcgcmVkaXJlY3QgdG8gW1ske3JlZGlyZWN0VmFsdWV9XV1gO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRhZ3NDaGFuZ2VkKSAoc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gJ0NoYW5naW5nIGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlcyc7XG4gICAgICAgICAgICAgICAgZWxzZSAoc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gJ1JlZGlyZWN0IGNsZWFudXAnO1xuICAgICAgICAgICAgfSBlbHNlIChzdW1tYXJ5SW5wdXQuJHRhYkluZGV4ZWRbMF0gYXMgSFRNTElucHV0RWxlbWVudCkucGxhY2Vob2xkZXIgPSBgQ3JlYXRpbmcgcmVkaXJlY3QgdG8gW1ske3JlZGlyZWN0VmFsdWV9XV1gO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogTG9hZCBjdXJyZW50IHRhcmdldCBhbmQgdGFncywgaWYgYXBwbGljYWJsZSAqL1xuICAgICAgICBsZXQgb2xkUmVkaXJlY3RUYXJnZXQ6IHN0cmluZyB8IHVuZGVmaW5lZCwgb2xkUmVkaXJlY3RUYWdzOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCwgb2xkUmVkaXJlY3RUYWdEYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgdW5kZWZpbmVkLCBvbGRTdHJheVRleHQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICAgICAgY29uc3QgcGFnZUNvbnRlbnQgPSAoXG4gICAgICAgICAgICAgICAgKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIGZvcm1hdHZlcnNpb246IDIsIHByb3A6ICdyZXZpc2lvbnMnLCBydnByb3A6ICdjb250ZW50JywgcnZzbG90czogJyonLCB0aXRsZXM6IHBhZ2VUaXRsZSB9KSkgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdFxuICAgICAgICAgICAgKS5xdWVyeS5wYWdlc1swXS5yZXZpc2lvbnNbMF0uc2xvdHMubWFpbi5jb250ZW50LnRyaW0oKTtcblxuICAgICAgICAgICAgb2xkUmVkaXJlY3RUYXJnZXQgPSAvXiNyZWRpcmVjdDo/XFxzKlxcW1xcW1xccyooW15bXFxde3x9XSs/KVxccyooPzpcXHxbXltcXF17fH1dKz8pP11dXFxzKi9pLmV4ZWMocGFnZUNvbnRlbnQpPy5bMV07XG4gICAgICAgICAgICBvbGRSZWRpcmVjdFRhZ3MgPSAoXG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMocmVkaXJlY3RUZW1wbGF0ZXMpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKFt0YWcsIHJlZGlyZWN0c10pID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBbdGFnLCAuLi5yZWRpcmVjdHNdLnNvbWUoKHRhZ09yUmVkaXJlY3QpID0+IG5ldyBSZWdFeHAoYHt7XFxcXHMqWyR7dGFnT3JSZWRpcmVjdFswXS50b0xvd2VyQ2FzZSgpfSR7dGFnT3JSZWRpcmVjdFswXX1dJHt0YWdPclJlZGlyZWN0LnNsaWNlKDEpfVxcXFxzKihcXFxcfHx9fSlgKS50ZXN0KHBhZ2VDb250ZW50KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRhZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pIGFzIHN0cmluZ1tdXG4gICAgICAgICAgICApLnNvcnQoKGEsIGIpID0+IGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSkpO1xuICAgICAgICAgICAgb2xkUmVkaXJlY3RUYWdEYXRhID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgICAgICAgICAgIG9sZFJlZGlyZWN0VGFnc1xuICAgICAgICAgICAgICAgICAgICAubWFwKCh0YWcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbmV3IFJlZ0V4cChge3tcXFxccyooPzoke1t0YWcsIC4uLnJlZGlyZWN0VGVtcGxhdGVzW3RhZ11dLm1hcCgodGFnKSA9PiBgWyR7dGFnWzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdbMF19XSR7dGFnLnNsaWNlKDEpfWApLmpvaW4oJ3wnKX0pXFxcXHw/KC4qPylcXFxccyp9fWApLmV4ZWMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoID8gW3RhZywgbWF0Y2hbMV1dIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKSBhcyBbc3RyaW5nLCBzdHJpbmddW10sXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgb2xkU3RyYXlUZXh0ID0gW1xuICAgICAgICAgICAgICAgIHBhZ2VDb250ZW50Lm1hdGNoKC97e3Nob3J0IGRlc2NyaXB0aW9uXFx8Lio/fX0vaSk/LlswXSxcbiAgICAgICAgICAgICAgICBwYWdlQ29udGVudC5tYXRjaCgve3tESVNQTEFZVElUTEU6Lio/fX0vKT8uWzBdLFxuICAgICAgICAgICAgICAgIHBhZ2VDb250ZW50Lm1hdGNoKC97e2l0YWxpYyB0aXRsZVxcfD8uKj99fS9pKT8uWzBdLFxuICAgICAgICAgICAgICAgIHBhZ2VDb250ZW50Lm1hdGNoKC97e0RFRkFVTFRTT1JUOi4qP319Lyk/LlswXSxcbiAgICAgICAgICAgICAgICAuLi4ocGFnZUNvbnRlbnQubWF0Y2goL1xcW1xcW1tDY11hdGVnb3J5Oi4rP11dL2cpID8/IFtdKSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgICAgICBpZiAob2xkUmVkaXJlY3RUYXJnZXQpIHJlZGlyZWN0SW5wdXQuc2V0VmFsdWUob2xkUmVkaXJlY3RUYXJnZXQucmVwbGFjZUFsbCgnXycsICcgJykpO1xuICAgICAgICAgICAgZWxzZSBtdy5ub3RpZnkoJ0NvdWxkIG5vdCBmaW5kIHJlZGlyZWN0IHRhcmdldCEnLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICB0YWdTZWxlY3Quc2V0VmFsdWUob2xkUmVkaXJlY3RUYWdzKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQTBCQSxHQUFHLE9BQU8sTUFBTSxDQUFDLGtCQUFrQixnQkFBZ0IsbUJBQW1CLGdDQUFnQyxtQ0FBbUMsR0FBRyxZQUFZO0FBQ3BKLE1BQUksR0FBRyxPQUFPLElBQUksbUJBQW1CLElBQUk7QUFBRztBQUM1QyxNQUFJLENBQUMsR0FBRyxPQUFPLElBQUksc0JBQXNCO0FBQUc7QUFDNUMsTUFBSSxHQUFHLE9BQU8sSUFBSSxVQUFVLE1BQU0sVUFBVSxDQUFDLEdBQUcsT0FBTyxJQUFJLGFBQWE7QUFBRztBQUMzRSxNQUFJLEdBQUcsS0FBSyxjQUFjLE9BQU8sS0FBSyxHQUFHLE9BQU8sSUFBSSxhQUFhO0FBQUc7QUFFcEUsUUFBTSxjQUFjLFNBQVMsY0FBYyxrQkFBa0I7QUFFN0QsTUFBSSxDQUFDO0FBQWEsV0FBTyxHQUFHLE9BQU8sd0NBQXdDLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFNUYsUUFBTSxvQkFBb0IsS0FBSztBQUFBLEtBRXRCLE1BQU0sSUFBSSxHQUFHLElBQUksRUFBRSxJQUFJO0FBQUEsTUFDcEIsUUFBUTtBQUFBLE1BQ1IsZUFBZTtBQUFBLE1BQ2YsTUFBTTtBQUFBLE1BQ04sUUFBUTtBQUFBLE1BQ1IsU0FBUztBQUFBLE1BQ1QsUUFBUTtBQUFBLElBQ1osQ0FBQyxHQUNILE1BQU0sUUFBUSxDQUFDLEdBQUcsWUFBWSxDQUFDLEdBQUcsT0FBTyxNQUFNLFdBQVc7QUFBQSxFQUNoRTtBQUVBLFFBQU0sWUFBWSxHQUFHLE9BQU8sSUFB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LENBQUMsQ0FBQyxLQUFLLFNBQVMsTUFDakIsQ0FBQyxLQUFLLEdBQUcsU0FBUyxFQUFFLEtBQUssQ0FBQyxrQkFBa0IsSUFBSSxPQUFPLFVBQVUsY0FBYyxDQUFDLEVBQUUsWUFBWSxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsSUFBSSxjQUFjLE1BQU0sQ0FBQyxDQUFDLGNBQWMsRUFBRSxLQUFLLFdBQVcsQ0FBQyxJQUN2SyxNQUNBO0FBQUEsTUFDVixFQUNDLE9BQU8sT0FBTyxFQUNyQixLQUFLLENBQUMsR0FBRyxNQUFNLEVBQUUsWUFBWSxFQUFFLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMvRCwyQkFBcUIsT0FBTztBQUFBLFFBQ3hCLGdCQUNLLElBQUksQ0FBQyxRQUFRO0FBQ1YsZ0JBQU0sUUFBUSxJQUFJLE9BQU8sWUFBWSxDQUFDLEtBQUssR0FBRyxrQkFBa0IsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDRyxTQUFRLElBQUlBLEtBQUksQ0FBQyxFQUFFLFlBQVksQ0FBQyxHQUFHQSxLQUFJLENBQUMsQ0FBQyxJQUFJQSxLQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRTtBQUFBLFlBQ2pLO0FBQUEsVUFDSjtBQUNBLGlCQUFPLFFBQVEsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLElBQUk7QUFBQSxRQUNyQyxDQUFDLEVBQ0EsT0FBTyxPQUFPO0FBQUEsTUFDdkI7QUFDQSxxQkFBZTtBQUFBLFFBQ1gsWUFBWSxNQUFNLDZCQUE2QixJQUFJLENBQUM7QUFBQSxRQUNwRCxZQUFZLE1BQU0sc0JBQXNCLElBQUksQ0FBQztBQUFBLFFBQzdDLFlBQVksTUFBTSx5QkFBeUIsSUFBSSxDQUFDO0FBQUEsUUFDaEQsWUFBWSxNQUFNLHFCQUFxQixJQUFJLENBQUM7QUFBQSxRQUM1QyxHQUFJLFlBQVksTUFBTSx3QkFBd0IsS0FBSyxDQUFDO0FBQUEsTUFDeEQsRUFDSyxPQUFPLE9BQU8sRUFDZCxLQUFLLElBQUk7QUFFZCxVQUFJO0FBQW1CLHNCQUFjLFNBQVMsa0JBQWtCLFdBQVcsS0FBSyxHQUFHLENBQUM7QUFBQTtBQUMvRSxXQUFHLE9BQU8sbUNBQW1DLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbkUsZ0JBQVUsU0FBUyxlQUFlO0FBQUEsSUFDdEM7QUFBQSxFQUNKO0FBQ0osQ0FBQzsiLAogICJuYW1lcyI6IFsiZGF0YSIsICJlcnJvckNvZGUiLCAiZXJyb3IiLCAib3V0cHV0IiwgInRhZyJdCn0K
