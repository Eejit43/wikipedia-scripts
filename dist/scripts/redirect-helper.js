"use strict";
mw.loader.using(["mediawiki.util", "oojs-ui-core", "oojs-ui-widgets", "oojs-ui.styles.icons-content", "oojs-ui.styles.icons-editing-core"], async () => {
  if (mw.config.get("wgNamespaceNumber") < 0)
    return;
  if (!mw.config.get("wgIsProbablyEditable"))
    return;
  if (mw.config.get("wgAction") !== "view" || !mw.config.get("wgIsArticle"))
    return;
  if (mw.util.getParamValue("oldid") || mw.config.get("wgDiffOldId"))
    return;
  const contentText = document.querySelector("#mw-content-text");
  if (!contentText)
    return mw.notify("Failed to find content text element!", { type: "error" });
  const redirectTemplates = JSON.parse(
    (await new mw.Api().get({
      action: "query",
      formatversion: 2,
      prop: "revisions",
      rvprop: "content",
      rvslots: "*",
      titles: "User:Eejit43/scripts/redirect-helper.json"
    })).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content || "[]"
  );
  const pageTitle = mw.config.get("wgPageName");
  const pageTitleParsed = mw.Title.newFromText(pageTitle);
  if (!pageTitleParsed)
    return mw.notify("Failed to parse page title!", { type: "error" });
  const pageInfo = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info", titles: pageTitle });
  if (pageInfo.query.pages[0].missing) {
    const button = new OO.ui.ButtonWidget({ label: "Create redirect", icon: "articleRedirect", flags: ["progressive"] });
    button.$element[0].style.marginBottom = "20px";
    button.on("click", () => {
      button.$element[0].remove();
      showRedirectInfo(false);
    });
    contentText.prepend(button.$element[0]);
  } else if (pageInfo.query.pages[0].redirect)
    showRedirectInfo(true);
  else {
    const portletLink = mw.util.addPortletLink(mw.config.get("skin") === "minerva" ? "p-tb" : "p-cactions", "#", "Redirect page", "redirect-helper");
    portletLink.addEventListener("click", (event) => {
      event.preventDefault();
      showRedirectInfo(false);
    });
  }
  async function showRedirectInfo(exists) {
    const editorBox = new OO.ui.PanelLayout({ padded: true, expanded: false, framed: true });
    editorBox.$element[0].style.backgroundColor = "#95d4bc";
    editorBox.$element[0].style.width = "700px";
    editorBox.$element[0].style.maxWidth = "calc(100% - 50px)";
    editorBox.$element[0].style.marginLeft = "auto";
    editorBox.$element[0].style.marginRight = "auto";
    editorBox.$element[0].style.marginBottom = "20px";
    let syncWithMainButton;
    if (pageTitleParsed.isTalkPage()) {
      const mainPageData = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info", titles: pageTitleParsed.getSubjectPage().getPrefixedText() });
      if (mainPageData.query.pages[0].redirect) {
        const mainPageContent = (await new mw.Api().get({
          action: "query",
          formatversion: 2,
          prop: "revisions",
          rvprop: "content",
          rvslots: "*",
          titles: pageTitleParsed.getSubjectPage().getPrefixedText()
        })).query.pages[0].revisions[0].slots.main.content.trim();
        syncWithMainButton = new OO.ui.ButtonWidget({ label: "Sync with main page", icon: "link", flags: ["progressive"] });
        syncWithMainButton.on("click", () => {
          const target = /^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(mainPageContent)?.[1];
          if (!target)
            return mw.notify("Failed to parse main page content!", { type: "error" });
          redirectInput.setValue(mw.Title.newFromText(target)?.getTalkPage()?.toString() ?? "");
          const fromMove = ["R from move", ...redirectTemplates["R from move"]].some(
            (tagOrRedirect) => new RegExp(`{{\\s*[${tagOrRedirect[0].toLowerCase()}${tagOrRedirect[0]}]${tagOrRedirect.slice(1)}\\s*(\\||}})`).test(mainPageContent)
          );
          if (fromMove)
            tagSelect.setValue(["R from move"]);
        });
      }
    }
    class RedirectInputWidget extends OO.ui.TextInputWidget {
      constructor(config) {
        super(config);
        this.getLookupRequest = () => {
          const value = this.getValue();
          const deferred = $.Deferred();
          if (!value)
            deferred.resolve([]);
          else if (value.includes("#")) {
            const title = value.split("#")[0];
            new mw.Api().get({ action: "parse", page: title, prop: "sections", redirects: "1" }).catch(() => null).then((result) => {
              if (result) {
                const matchedSections = result.parse.sections.filter((section) => section.line.toLowerCase().startsWith(value.split("#")[1].toLowerCase()));
                deferred.resolve(matchedSections.map((section) => ({ data: `${result.parse.title}#${section.line}`, label: `${result.parse.title}#${section.line}` })));
              } else
                deferred.resolve([]);
            });
          } else {
            const parsedTitle = mw.Title.newFromText(value);
            new mw.Api().get({
              action: "query",
              formatversion: 2,
              gaplimit: 20,
              gapnamespace: parsedTitle?.getNamespaceId() ?? 0,
              gapprefix: parsedTitle?.getMainText() ?? value,
              generator: "allpages",
              prop: "info|pageprops"
            }).catch(() => null).then((result) => {
              if (result)
                deferred.resolve(
                  result.query?.pages ? result.query.pages.filter((page) => page.title !== pageTitleParsed.toString()).map((page) => ({
                    data: page.title,
                    label: new OO.ui.HtmlSnippet(
                      `${page.title}${page.pageprops && "disambiguation" in page.pageprops ? " <i>(disambiguation)</i>" : ""}${"redirect" in page ? " <i>(redirect)</i>" : ""}`
                    )
                  })) : []
                );
              else
                deferred.resolve([]);
            });
          }
          return deferred.promise({ abort() {
          } });
        };
        this.getLookupCacheDataFromResponse = (response) => response ?? [];
        this.getLookupMenuOptionsFromData = (data) => data.map(({ data: data2, label }) => new OO.ui.MenuOptionWidget({ data: data2, label }));
        OO.ui.mixin.LookupElement.call(this, config);
      }
    }
    Object.assign(RedirectInputWidget.prototype, OO.ui.mixin.LookupElement.prototype);
    const redirectInput = new RedirectInputWidget({ placeholder: "Target page name", required: true });
    redirectInput.on("change", () => {
      let value = redirectInput.getValue();
      value = value.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/, "")}/wiki/`), "");
      value = value.replace(/^:/, "");
      if (value.length > 0) {
        redirectInput.setValue(value[0].toUpperCase() + value.slice(1).replaceAll("_", " "));
        submitButton.setDisabled(false);
      } else
        submitButton.setDisabled(true);
      updateSummary();
      submitButton.setLabel("Submit");
      needsCheck = true;
    });
    const redirectInputLayout = new OO.ui.FieldLayout(redirectInput, { label: new OO.ui.HtmlSnippet("<b>Redirect target:</b>"), align: "top" });
    const tagSelect = new OO.ui.MenuTagMultiselectWidget({
      allowArbitrary: false,
      allowReordering: false,
      options: Object.keys(redirectTemplates).map((tag) => ({ data: tag, label: tag }))
    });
    tagSelect.getMenu().filterMode = "substring";
    tagSelect.on("change", () => {
      const sortedTags = tagSelect.getValue().sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
      if (tagSelect.getValue().join(";") !== sortedTags.join(";"))
        tagSelect.setValue(sortedTags);
      updateSummary();
      submitButton.setLabel("Submit");
      needsCheck = true;
    });
    const tagSelectLayout = new OO.ui.FieldLayout(tagSelect, { label: new OO.ui.HtmlSnippet("<b>Redirect categorization template(s):</b>"), align: "top" });
    const summaryInput = new OO.ui.ComboBoxInputWidget({
      options: [
        { data: "Resolve double redirect" },
        //
        { data: "Resolve self redirect" },
        { data: "Remove incorrect rcats" }
      ]
    });
    const summaryInputLayout = new OO.ui.FieldLayout(summaryInput, { label: new OO.ui.HtmlSnippet("<b>Summary:</b>"), align: "top" });
    const submitButton = new OO.ui.ButtonWidget({ label: "Submit", disabled: true, flags: ["progressive"] });
    submitButton.$element[0].style.marginBottom = "0";
    let needsCheck = true;
    submitButton.on("click", async () => {
      for (const element of [redirectInput, tagSelect, summaryInput, submitButton, syncTalkCheckbox, patrolCheckbox].filter(Boolean))
        element.setDisabled(true);
      submitButton.setLabel("Checking target validity...");
      let parsedDestination;
      const errors = [];
      if (needsCheck) {
        const destination = redirectInput.getValue().trim();
        if (!/^\s*[^[\]{|}]+\s*$/.test(destination))
          errors.push({ title: destination, message: "is not a valid page title!" });
        try {
          parsedDestination = mw.Title.newFromText(destination);
        } catch {
          if (errors.length === 0)
            errors.push({ title: destination, message: "is not a valid page title!" });
        }
        if (!parsedDestination && errors.length === 0)
          errors.push({ title: destination, message: "is not a valid page title!" });
        if (parsedDestination?.toString() === pageTitleParsed.toString())
          errors.push({ message: "cannot redirect to itself!" });
        const destinationData = await new mw.Api().get({ action: "query", formatversion: 2, prop: "pageprops", titles: destination }).catch((errorCode) => {
          if (errorCode === "missingtitle")
            errors.push({ title: destination, message: "does not exist!" });
          else
            errors.push({ title: destination, message: `was not able to be fetched from the API (${errorCode})!` });
          return null;
        });
        const destinationParseResult = await new mw.Api().get({ action: "parse", page: destination, prop: "sections", redirects: "1" });
        if (destinationParseResult.parse.redirects?.[0]) {
          const destinationRedirect = destinationParseResult.parse.redirects[0].to + (destinationParseResult.parse.redirects[0].tofragment ? `#${destinationParseResult.parse.redirects[0].tofragment}` : "");
          errors.push({
            title: destination,
            message: `is a redirect to <a href="${mw.util.getUrl(
              destinationRedirect
            )}" target="_blank">${destinationRedirect}</a>. Retarget to that page instead, as double redirects aren't allowed.`
          });
        }
        if (destination.split("#").length > 1) {
          const validSection = destinationParseResult.parse.sections.find((section) => section.line === destination.split("#")[1]);
          if (validSection) {
            if (tagSelect.getValue().includes("R to anchor"))
              errors.push({ message: "is tagged as a redirect to an anchor, but it is actually a redirect to a section!" });
            if (!tagSelect.getValue().includes("R to section"))
              errors.push({ message: "is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!" });
          } else {
            const destinationContent = (await new mw.Api().get({
              action: "query",
              formatversion: 2,
              prop: "revisions",
              rvprop: "content",
              rvslots: "*",
              titles: parsedDestination.toString()
            })).query.pages[0].revisions[0].slots.main.content;
            const anchors = [
              ...destinationContent.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map((anchor) => anchor.split("|").map((part) => part.trim()))?.flat() ?? [],
              ...destinationContent.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(
                (anchor) => anchor.split("|").map((part) => part.trim()).filter((part) => !/^text\s*?=/.test(part))
              )?.flat() ?? [],
              ...destinationContent.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map((anchor) => anchor.trim()) ?? []
            ];
            if (anchors.includes(destination.split("#")[1])) {
              if (tagSelect.getValue().includes("R to section"))
                errors.push({ message: "is tagged as a redirect to a section, but it is actually a redirect to an anchor!" });
              if (!tagSelect.getValue().includes("R to anchor"))
                errors.push({ message: "is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!" });
            } else
              errors.push({ message: `is a redirect to <a href="${mw.util.getUrl(destination)}" target="_blank">${destination}</a>, but that section or anchor does not exist!` });
          }
        }
        if (destination.split("#").length === 1 && (tagSelect.getValue().includes("R to section") || tagSelect.getValue().includes("R to anchor")))
          errors.push({ message: "is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!" });
        if (destinationData.query.pages[0].pageprops && "disambiguation" in destinationData.query.pages[0].pageprops && ![
          "R from ambiguous sort name",
          "R from ambiguous term",
          "R to disambiguation page",
          "R from incomplete disambiguation",
          "R from incorrect disambiguation",
          "R from other disambiguation"
        ].some((template) => tagSelect.getValue().includes(template)))
          errors.push({ message: "is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!" });
        if (destinationData.query.pages[0].pageprops && !("disambiguation" in destinationData.query.pages[0].pageprops) && ["R from ambiguous sort name", "R from ambiguous term", "R to disambiguation page", "R from incomplete disambiguation"].some((template) => tagSelect.getValue().includes(template)))
          errors.push({ message: "is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!" });
        if (tagSelect.getValue().includes("R to disambiguation page") && !pageTitleParsed.getMainText().endsWith(" (disambiguation)"))
          errors.push({
            message: 'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'
          });
        if (syncTalkCheckbox?.isSelected() && !talkData.query.pages[0].missing && !talkData.query.pages[0].redirect)
          errors.push({ title: pageTitleParsed.getTalkPage().getPrefixedText(), message: "exists, but is not a redirect!" });
      }
      if (errors.length > 0) {
        for (const element of document.querySelectorAll(".redirect-helper-warning"))
          element.remove();
        for (const { title, message } of errors) {
          const label = new OO.ui.HtmlSnippet(
            `${title ? `<a href="${mw.util.getUrl(title)}" target="_blank">${title}</a>` : "This page"} ${message} Click again without making changes to submit anyway.`
          );
          const warningMessage = new OO.ui.MessageWidget({ type: "error", classes: ["redirect-helper-warning"], inline: true, label });
          warningMessage.$element[0].style.marginTop = "8px";
          editorBox.$element[0].append(warningMessage.$element[0]);
        }
        for (const element of [redirectInput, tagSelect, summaryInput, submitButton, syncTalkCheckbox, patrolCheckbox].filter(Boolean))
          element.setDisabled(false);
        submitButton.setLabel("Submit anyway");
        needsCheck = false;
        return;
      }
      parsedDestination = mw.Title.newFromText(redirectInput.getValue());
      submitButton.setLabel(`${exists ? "Editing" : "Creating"} redirect...`);
      const output = [
        `#REDIRECT [[${redirectInput.getValue().trim()}]]`,
        //
        tagSelect.getValue().length > 0 ? `{{Redirect category shell|
${tagSelect.getValue().map((tag) => `{{${tag}${oldRedirectTagData?.[tag] ? `|${oldRedirectTagData[tag]}` : ""}}}`).join("\n")}
}}` : null,
        oldStrayText
      ].filter(Boolean).join("\n\n");
      const summary = (summaryInput.getValue() || summaryInput.$tabIndexed[0].placeholder) + " (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";
      const result = await new mw.Api().edit(pageTitle, () => ({ text: output, summary })).catch((errorCode, errorInfo) => {
        if (errorCode === "nocreate-missing")
          return new mw.Api().create(pageTitle, { summary }, output).catch((errorCode2, errorInfo2) => {
            mw.notify(`Error creating ${pageTitle}: ${errorInfo2?.error.info ?? "Unknown error"} (${errorCode2})`, { type: "error" });
          });
        else {
          mw.notify(`Error editing or creating ${pageTitle}: ${errorInfo?.error.info ?? "Unknown error"} (${errorCode})`, { type: "error" });
          return null;
        }
      });
      if (!result)
        return;
      mw.notify(`Redirect ${exists ? "edited" : "created"} successfully!`, { type: "success" });
      if (syncTalkCheckbox?.isSelected()) {
        submitButton.setLabel("Editing talk page...");
        const fromMove = tagSelect.getValue().includes("R from move");
        const output2 = [
          `#REDIRECT [[${parsedDestination.getTalkPage().getPrefixedText()}]]`,
          //
          fromMove ? "{{Redirect category shell|\n{{R from move}}\n}}" : null
        ].filter(Boolean).join("\n\n");
        const talkPage = pageTitleParsed.getTalkPage().getPrefixedText();
        const talkResult = await new mw.Api().edit(talkPage, () => ({ text: output2, summary: "Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])" })).catch((errorCode, errorInfo) => {
          if (errorCode === "nocreate-missing")
            return new mw.Api().create(talkPage, { summary: "Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])" }, output2).catch((errorCode2, errorInfo2) => {
              mw.notify(`Error creating ${talkPage}: ${errorInfo2?.error.info ?? "Unknown error"} (${errorCode2})`, { type: "error" });
            });
          else {
            mw.notify(`Error editing or creating ${talkPage}: ${errorInfo?.error.info ?? "Unknown error"} (${errorCode})`, { type: "error" });
            return null;
          }
        });
        if (!talkResult)
          return;
        mw.notify("Talk page synced successfully!", { type: "success" });
      }
      if (patrolCheckbox?.isSelected()) {
        submitButton.setLabel("Patrolling redirect...");
        const patrolLink = document.querySelector(".patrollink a");
        const markReviewedButton = document.querySelector("#mwe-pt-mark-as-reviewed-button");
        if (patrolLink) {
          const patrolResult = await new mw.Api().postWithToken("patrol", { action: "patrol", rcid: new URL(patrolLink.href).searchParams.get("rcid") }).catch((errorCode, errorInfo) => {
            mw.notify(`Error patrolling ${pageTitle} via API: ${errorInfo?.error.info ?? "Unknown error"} (${errorCode})`, { type: "error" });
            return null;
          });
          if (patrolResult)
            mw.notify("Redirect patrolled successfully!", { type: "success" });
        } else if (markReviewedButton) {
          markReviewedButton.click();
          mw.notify("Redirect patrolled successfully!", { type: "success" });
        } else
          mw.notify("Page curation toolbar not found, redirect cannot be patrolled!", { type: "error" });
      }
      submitButton.setLabel("Complete, reloading...");
      window.location.href = mw.util.getUrl(pageTitle, { redirect: "no" });
    });
    let talkData;
    let syncTalkCheckbox, syncTalkLayout;
    if (!pageTitleParsed.isTalkPage()) {
      talkData = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info", titles: pageTitleParsed.getTalkPage().getPrefixedText() });
      syncTalkCheckbox = new OO.ui.CheckboxInputWidget({ selected: !!talkData.query.pages[0].redirect });
      syncTalkLayout = new OO.ui.Widget({ content: [new OO.ui.FieldLayout(syncTalkCheckbox, { label: "Sync talk page", align: "inline" })] });
      syncTalkLayout.$element[0].style.marginBottom = "0";
    }
    const markButton = document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");
    markButton?.click();
    markButton?.click();
    let shouldPromptPatrol;
    if (mw.config.get("wgNamespaceNumber") !== 0)
      shouldPromptPatrol = false;
    else if (document.querySelector(".patrollink"))
      shouldPromptPatrol = true;
    else if (document.querySelector("#mwe-pt-mark-as-reviewed-button"))
      shouldPromptPatrol = true;
    else if (document.querySelector("#mwe-pt-mark-as-unreviewed-button"))
      shouldPromptPatrol = false;
    else {
      if (!mw.config.get("wgArticleId"))
        shouldPromptPatrol = false;
      const userPermissions = await new mw.Api().get({ action: "query", meta: "userinfo", uiprop: "rights" });
      if (!userPermissions.query.userinfo.rights.includes("patrol"))
        shouldPromptPatrol = false;
      const patrolResponse = await new mw.Api().get({ action: "pagetriagelist", page_id: mw.config.get("wgArticleId") });
      if (patrolResponse.pagetriagelist.pages[0]?.user_name === mw.config.get("wgUserName"))
        shouldPromptPatrol = false;
      else if (patrolResponse.pagetriagelist.result !== "success" || patrolResponse.pagetriagelist.pages.length === 0)
        shouldPromptPatrol = false;
      else
        shouldPromptPatrol = !Number.parseInt(patrolResponse.pagetriagelist.pages[0]?.patrol_status);
    }
    let patrolCheckbox, patrolLayout;
    if (shouldPromptPatrol) {
      patrolCheckbox = new OO.ui.CheckboxInputWidget({ selected: true });
      patrolLayout = new OO.ui.Widget({ content: [new OO.ui.FieldLayout(patrolCheckbox, { label: "Mark as patrolled", align: "inline" })] });
      patrolLayout.$element[0].style.marginBottom = "0";
    }
    const submitLayout = new OO.ui.HorizontalLayout({ items: [submitButton, syncTalkLayout, patrolLayout].filter(Boolean) });
    submitLayout.$element[0].style.marginTop = "10px";
    editorBox.$element[0].append(
      ...[syncWithMainButton?.$element?.[0], redirectInputLayout.$element[0], tagSelectLayout.$element[0], summaryInputLayout.$element[0], submitLayout.$element[0]].filter(
        Boolean
      )
    );
    contentText.prepend(editorBox.$element[0]);
    function updateSummary() {
      const redirectValue = redirectInput.getValue().trim();
      if (!redirectValue)
        summaryInput.$tabIndexed[0].placeholder = "";
      else if (exists) {
        const targetChanged = redirectValue !== oldRedirectTarget?.replaceAll("_", " ");
        const tagsChanged = tagSelect.getValue().join(";") !== oldRedirectTags?.join(";");
        if (targetChanged && tagsChanged)
          summaryInput.$tabIndexed[0].placeholder = `Changing redirect to [[${redirectValue}]] and changing categorization templates`;
        else if (targetChanged)
          summaryInput.$tabIndexed[0].placeholder = `Changing redirect to [[${redirectValue}]]`;
        else if (tagsChanged)
          summaryInput.$tabIndexed[0].placeholder = "Changing categorization templates";
        else
          summaryInput.$tabIndexed[0].placeholder = "Redirect cleanup";
      } else
        summaryInput.$tabIndexed[0].placeholder = `Creating redirect to [[${redirectValue}]]`;
    }
    let oldRedirectTarget, oldRedirectTags, oldRedirectTagData, oldStrayText;
    if (exists) {
      const pageContent = (await new mw.Api().get({ action: "query", formatversion: 2, prop: "revisions", rvprop: "content", rvslots: "*", titles: pageTitle })).query.pages[0].revisions[0].slots.main.content.trim();
      oldRedirectTarget = /^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(pageContent)?.[1];
      oldRedirectTags = Object.entries(redirectTemplates).map(
        ([tag, redirects]) => [tag, ...redirects].some((tagOrRedirect) => new RegExp(`{{\\s*[${tagOrRedirect[0].toLowerCase()}${tagOrRedirect[0]}]${tagOrRedirect.slice(1)}\\s*(\\||}})`).test(pageContent)) ? tag : null
      ).filter(Boolean).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
      const originalRedirectTags = Object.entries(redirectTemplates).flatMap(([tag, redirects]) => [tag, ...redirects]).map((tagOrRedirect) => new RegExp(`{{\\s*[${tagOrRedirect[0].toLowerCase()}${tagOrRedirect[0]}]${tagOrRedirect.slice(1)}\\s*(\\||}})`).test(pageContent) ? tagOrRedirect : null).filter(Boolean);
      oldRedirectTagData = Object.fromEntries(
        originalRedirectTags.map((tag) => {
          const match = new RegExp(`{{\\s*[${tag[0].toLowerCase()}${tag[0]}]${tag.slice(1)}\\|?(.*?)\\s*}}`).exec(pageContent);
          const newTag = Object.entries(redirectTemplates).find(([template, redirects]) => [template, ...redirects].includes(tag))?.[0];
          return match ? [newTag, match[1]] : null;
        }).filter(Boolean)
      );
      oldStrayText = [
        pageContent.match(/{{short description\|.*?}}/i)?.[0],
        pageContent.match(/{{DISPLAYTITLE:.*?}}/)?.[0],
        pageContent.match(/{{italic title\|?.*?}}/i)?.[0],
        pageContent.match(/{{DEFAULTSORT:.*?}}/)?.[0],
        pageContent.match(/{{title language\|.*?}}/)?.[0],
        ...pageContent.match(/\[\[[Cc]ategory:.+?]]/g) ?? []
      ].filter(Boolean).join("\n");
      if (oldRedirectTarget)
        redirectInput.setValue(oldRedirectTarget.replaceAll("_", " "));
      else
        mw.notify("Could not find redirect target!", { type: "error" });
      tagSelect.setValue(oldRedirectTags);
      updateSummary();
    }
  }
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9yZWRpcmVjdC1oZWxwZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IE1lZGlhV2lraURhdGFFcnJvciwgUGFnZVJldmlzaW9uc1Jlc3VsdCB9IGZyb20gJy4uL2dsb2JhbC10eXBlcyc7XG5cbmludGVyZmFjZSBQYWdlSW5mb1Jlc3VsdCB7XG4gICAgcXVlcnk6IHsgcGFnZXM6IHsgbWlzc2luZz86IHN0cmluZzsgcmVkaXJlY3Q/OiBzdHJpbmcgfVtdIH07XG59XG5cbmludGVyZmFjZSBBbGxQYWdlc0dlbmVyYXRvclJlc3VsdCB7XG4gICAgcXVlcnk6IHsgcGFnZXM6IHsgdGl0bGU6IHN0cmluZzsgcGFnZXByb3BzOiB7IGRpc2FtYmlndWF0aW9uPzogc3RyaW5nIH07IHJlZGlyZWN0Pzogc3RyaW5nIH1bXSB9O1xufVxuXG5pbnRlcmZhY2UgUGFnZVBhcnNlUmVzdWx0IHtcbiAgICBwYXJzZTogeyB0aXRsZTogc3RyaW5nOyByZWRpcmVjdHM6IHsgdG86IHN0cmluZzsgdG9mcmFnbWVudDogc3RyaW5nIH1bXTsgc2VjdGlvbnM6IHsgbGluZTogc3RyaW5nIH1bXSB9O1xufVxuXG5pbnRlcmZhY2UgUGFnZXByb3BzUmVzdWx0IHtcbiAgICBxdWVyeTogeyBwYWdlczogeyBwYWdlcHJvcHM/OiB7IGRpc2FtYmlndWF0aW9uPzogc3RyaW5nIH0gfVtdIH07XG59XG5cbmludGVyZmFjZSBVc2VyUGVybWlzc2lvbnNSZXNwb25zZSB7XG4gICAgcXVlcnk6IHsgdXNlcmluZm86IHsgcmlnaHRzOiBzdHJpbmdbXSB9IH07XG59XG5cbmludGVyZmFjZSBQYWdlVHJpYWdlTGlzdFJlc3BvbnNlIHtcbiAgICBwYWdldHJpYWdlbGlzdDogeyBwYWdlczogeyB1c2VyX25hbWU6IHN0cmluZzsgcGF0cm9sX3N0YXR1czogc3RyaW5nIH1bXTsgcmVzdWx0OiBzdHJpbmcgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbn1cblxubXcubG9hZGVyLnVzaW5nKFsnbWVkaWF3aWtpLnV0aWwnLCAnb29qcy11aS1jb3JlJywgJ29vanMtdWktd2lkZ2V0cycsICdvb2pzLXVpLnN0eWxlcy5pY29ucy1jb250ZW50JywgJ29vanMtdWkuc3R5bGVzLmljb25zLWVkaXRpbmctY29yZSddLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPCAwKSByZXR1cm47IC8vIERvbid0IHJ1biBpbiB2aXJ0dWFsIG5hbWVzcGFjZXNcbiAgICBpZiAoIW13LmNvbmZpZy5nZXQoJ3dnSXNQcm9iYWJseUVkaXRhYmxlJykpIHJldHVybjsgLy8gRG9uJ3QgcnVuIGlmIHVzZXIgY2FuJ3QgZWRpdCBwYWdlXG4gICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnQWN0aW9uJykgIT09ICd2aWV3JyB8fCAhbXcuY29uZmlnLmdldCgnd2dJc0FydGljbGUnKSkgcmV0dXJuOyAvLyBEb24ndCBydW4gaWYgbm90IHZpZXdpbmcgcGFnZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW51bGxpc2gtY29hbGVzY2luZ1xuICAgIGlmIChtdy51dGlsLmdldFBhcmFtVmFsdWUoJ29sZGlkJykgfHwgbXcuY29uZmlnLmdldCgnd2dEaWZmT2xkSWQnKSkgcmV0dXJuOyAvLyBEb24ndCBydW4gaWYgdmlld2luZyBvbGQgcmV2aXNpb24gb3IgZGlmZlxuXG4gICAgY29uc3QgY29udGVudFRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXctY29udGVudC10ZXh0JykgYXMgSFRNTERpdkVsZW1lbnQ7XG5cbiAgICBpZiAoIWNvbnRlbnRUZXh0KSByZXR1cm4gbXcubm90aWZ5KCdGYWlsZWQgdG8gZmluZCBjb250ZW50IHRleHQgZWxlbWVudCEnLCB7IHR5cGU6ICdlcnJvcicgfSk7XG5cbiAgICBjb25zdCByZWRpcmVjdFRlbXBsYXRlcyA9IEpTT04ucGFyc2UoXG4gICAgICAgIChcbiAgICAgICAgICAgIChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogMixcbiAgICAgICAgICAgICAgICBwcm9wOiAncmV2aXNpb25zJyxcbiAgICAgICAgICAgICAgICBydnByb3A6ICdjb250ZW50JyxcbiAgICAgICAgICAgICAgICBydnNsb3RzOiAnKicsXG4gICAgICAgICAgICAgICAgdGl0bGVzOiAnVXNlcjpFZWppdDQzL3NjcmlwdHMvcmVkaXJlY3QtaGVscGVyLmpzb24nLFxuICAgICAgICAgICAgfSkpIGFzIFBhZ2VSZXZpc2lvbnNSZXN1bHRcbiAgICAgICAgKS5xdWVyeS5wYWdlcz8uWzBdPy5yZXZpc2lvbnM/LlswXT8uc2xvdHM/Lm1haW4/LmNvbnRlbnQgfHwgJ1tdJyxcbiAgICApIGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPjtcblxuICAgIGNvbnN0IHBhZ2VUaXRsZSA9IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKTtcbiAgICBjb25zdCBwYWdlVGl0bGVQYXJzZWQgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChwYWdlVGl0bGUpITtcblxuICAgIGlmICghcGFnZVRpdGxlUGFyc2VkKSByZXR1cm4gbXcubm90aWZ5KCdGYWlsZWQgdG8gcGFyc2UgcGFnZSB0aXRsZSEnLCB7IHR5cGU6ICdlcnJvcicgfSk7XG5cbiAgICBjb25zdCBwYWdlSW5mbyA9IChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHsgYWN0aW9uOiAncXVlcnknLCBmb3JtYXR2ZXJzaW9uOiAyLCBwcm9wOiAnaW5mbycsIHRpdGxlczogcGFnZVRpdGxlIH0pKSBhcyBQYWdlSW5mb1Jlc3VsdDtcblxuICAgIGlmIChwYWdlSW5mby5xdWVyeS5wYWdlc1swXS5taXNzaW5nKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IG5ldyBPTy51aS5CdXR0b25XaWRnZXQoeyBsYWJlbDogJ0NyZWF0ZSByZWRpcmVjdCcsIGljb246ICdhcnRpY2xlUmVkaXJlY3QnLCBmbGFnczogWydwcm9ncmVzc2l2ZSddIH0pO1xuICAgICAgICBidXR0b24uJGVsZW1lbnRbMF0uc3R5bGUubWFyZ2luQm90dG9tID0gJzIwcHgnO1xuICAgICAgICBidXR0b24ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgYnV0dG9uLiRlbGVtZW50WzBdLnJlbW92ZSgpO1xuICAgICAgICAgICAgc2hvd1JlZGlyZWN0SW5mbyhmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnRlbnRUZXh0LnByZXBlbmQoYnV0dG9uLiRlbGVtZW50WzBdKTtcbiAgICB9IGVsc2UgaWYgKHBhZ2VJbmZvLnF1ZXJ5LnBhZ2VzWzBdLnJlZGlyZWN0KSBzaG93UmVkaXJlY3RJbmZvKHRydWUpO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBwb3J0bGV0TGluayA9IG13LnV0aWwuYWRkUG9ydGxldExpbmsobXcuY29uZmlnLmdldCgnc2tpbicpID09PSAnbWluZXJ2YScgPyAncC10YicgOiAncC1jYWN0aW9ucycsICcjJywgJ1JlZGlyZWN0IHBhZ2UnLCAncmVkaXJlY3QtaGVscGVyJykhO1xuICAgICAgICBwb3J0bGV0TGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNob3dSZWRpcmVjdEluZm8oZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgcmVkaXJlY3QgaW5mb3JtYXRpb24gYm94LlxuICAgICAqIEBwYXJhbSBleGlzdHMgV2hldGhlciB0aGUgcGFnZSBleGlzdHMuXG4gICAgICovXG4gICAgYXN5bmMgZnVuY3Rpb24gc2hvd1JlZGlyZWN0SW5mbyhleGlzdHM6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZWRpdG9yQm94ID0gbmV3IE9PLnVpLlBhbmVsTGF5b3V0KHsgcGFkZGVkOiB0cnVlLCBleHBhbmRlZDogZmFsc2UsIGZyYW1lZDogdHJ1ZSB9KTtcbiAgICAgICAgZWRpdG9yQm94LiRlbGVtZW50WzBdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjOTVkNGJjJztcbiAgICAgICAgZWRpdG9yQm94LiRlbGVtZW50WzBdLnN0eWxlLndpZHRoID0gJzcwMHB4JztcbiAgICAgICAgZWRpdG9yQm94LiRlbGVtZW50WzBdLnN0eWxlLm1heFdpZHRoID0gJ2NhbGMoMTAwJSAtIDUwcHgpJztcbiAgICAgICAgZWRpdG9yQm94LiRlbGVtZW50WzBdLnN0eWxlLm1hcmdpbkxlZnQgPSAnYXV0byc7XG4gICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5SaWdodCA9ICdhdXRvJztcbiAgICAgICAgZWRpdG9yQm94LiRlbGVtZW50WzBdLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcyMHB4JztcblxuICAgICAgICBsZXQgc3luY1dpdGhNYWluQnV0dG9uO1xuXG4gICAgICAgIGlmIChwYWdlVGl0bGVQYXJzZWQuaXNUYWxrUGFnZSgpKSB7XG4gICAgICAgICAgICBjb25zdCBtYWluUGFnZURhdGEgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3F1ZXJ5JywgZm9ybWF0dmVyc2lvbjogMiwgcHJvcDogJ2luZm8nLCB0aXRsZXM6IHBhZ2VUaXRsZVBhcnNlZC5nZXRTdWJqZWN0UGFnZSgpIS5nZXRQcmVmaXhlZFRleHQoKSB9KSkgYXMgUGFnZUluZm9SZXN1bHQ7XG5cbiAgICAgICAgICAgIGlmIChtYWluUGFnZURhdGEucXVlcnkucGFnZXNbMF0ucmVkaXJlY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYWluUGFnZUNvbnRlbnQgPSAoXG4gICAgICAgICAgICAgICAgICAgIChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHZlcnNpb246IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wOiAncmV2aXNpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnZzbG90czogJyonLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVzOiBwYWdlVGl0bGVQYXJzZWQuZ2V0U3ViamVjdFBhZ2UoKSEuZ2V0UHJlZml4ZWRUZXh0KCksXG4gICAgICAgICAgICAgICAgICAgIH0pKSBhcyBQYWdlUmV2aXNpb25zUmVzdWx0XG4gICAgICAgICAgICAgICAgKS5xdWVyeS5wYWdlc1swXS5yZXZpc2lvbnNbMF0uc2xvdHMubWFpbi5jb250ZW50LnRyaW0oKTtcbiAgICAgICAgICAgICAgICBzeW5jV2l0aE1haW5CdXR0b24gPSBuZXcgT08udWkuQnV0dG9uV2lkZ2V0KHsgbGFiZWw6ICdTeW5jIHdpdGggbWFpbiBwYWdlJywgaWNvbjogJ2xpbmsnLCBmbGFnczogWydwcm9ncmVzc2l2ZSddIH0pO1xuICAgICAgICAgICAgICAgIHN5bmNXaXRoTWFpbkJ1dHRvbi5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IC9eI3JlZGlyZWN0Oj9cXHMqXFxbXFxbXFxzKihbXltcXF17fH1dKz8pXFxzKig/OlxcfFteW1xcXXt8fV0rPyk/XV1cXHMqL2kuZXhlYyhtYWluUGFnZUNvbnRlbnQpPy5bMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0KSByZXR1cm4gbXcubm90aWZ5KCdGYWlsZWQgdG8gcGFyc2UgbWFpbiBwYWdlIGNvbnRlbnQhJywgeyB0eXBlOiAnZXJyb3InIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0SW5wdXQuc2V0VmFsdWUobXcuVGl0bGUubmV3RnJvbVRleHQodGFyZ2V0KT8uZ2V0VGFsa1BhZ2UoKT8udG9TdHJpbmcoKSA/PyAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb21Nb3ZlID0gWydSIGZyb20gbW92ZScsIC4uLnJlZGlyZWN0VGVtcGxhdGVzWydSIGZyb20gbW92ZSddXS5zb21lKCh0YWdPclJlZGlyZWN0KSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChge3tcXFxccypbJHt0YWdPclJlZGlyZWN0WzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdPclJlZGlyZWN0WzBdfV0ke3RhZ09yUmVkaXJlY3Quc2xpY2UoMSl9XFxcXHMqKFxcXFx8fH19KWApLnRlc3QobWFpblBhZ2VDb250ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyb21Nb3ZlKSB0YWdTZWxlY3Quc2V0VmFsdWUoWydSIGZyb20gbW92ZSddKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFJlZGlyZWN0IHRhcmdldCBpbnB1dCAqL1xuICAgICAgICBpbnRlcmZhY2UgUmVkaXJlY3RJbnB1dFdpZGdldENvbmZpZyBleHRlbmRzIE9PLnVpLlRleHRJbnB1dFdpZGdldC5Db25maWdPcHRpb25zLCBPTy51aS5taXhpbi5Mb29rdXBFbGVtZW50LkNvbmZpZ09wdGlvbnMge31cblxuICAgICAgICBjbGFzcyBSZWRpcmVjdElucHV0V2lkZ2V0IGV4dGVuZHMgT08udWkuVGV4dElucHV0V2lkZ2V0IHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogUmVkaXJlY3RJbnB1dFdpZGdldENvbmZpZykge1xuICAgICAgICAgICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgT08udWkubWl4aW4uTG9va3VwRWxlbWVudC5jYWxsKHRoaXMgYXMgdW5rbm93biBhcyBPTy51aS5taXhpbi5Mb29rdXBFbGVtZW50LCBjb25maWcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRMb29rdXBSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgZGVmZXJyZWQucmVzb2x2ZShbXSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUuaW5jbHVkZXMoJyMnKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IHZhbHVlLnNwbGl0KCcjJylbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IG13LkFwaSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KHsgYWN0aW9uOiAncGFyc2UnLCBwYWdlOiB0aXRsZSwgcHJvcDogJ3NlY3Rpb25zJywgcmVkaXJlY3RzOiAnMScgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdDogUGFnZVBhcnNlUmVzdWx0IHwgbnVsbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlZFNlY3Rpb25zID0gcmVzdWx0LnBhcnNlLnNlY3Rpb25zLmZpbHRlcigoc2VjdGlvbikgPT4gc2VjdGlvbi5saW5lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh2YWx1ZS5zcGxpdCgnIycpWzFdLnRvTG93ZXJDYXNlKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShtYXRjaGVkU2VjdGlvbnMubWFwKChzZWN0aW9uKSA9PiAoeyBkYXRhOiBgJHtyZXN1bHQucGFyc2UudGl0bGV9IyR7c2VjdGlvbi5saW5lfWAsIGxhYmVsOiBgJHtyZXN1bHQucGFyc2UudGl0bGV9IyR7c2VjdGlvbi5saW5lfWAgfSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZGVmZXJyZWQucmVzb2x2ZShbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRUaXRsZSA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3IG13LkFwaSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXBsaW1pdDogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FwbmFtZXNwYWNlOiBwYXJzZWRUaXRsZT8uZ2V0TmFtZXNwYWNlSWQoKSA/PyAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhcHByZWZpeDogcGFyc2VkVGl0bGU/LmdldE1haW5UZXh0KCkgPz8gdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdG9yOiAnYWxscGFnZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6ICdpbmZvfHBhZ2Vwcm9wcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0OiBBbGxQYWdlc0dlbmVyYXRvclJlc3VsdCB8IG51bGwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnF1ZXJ5Py5wYWdlcyAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzdWx0LnF1ZXJ5LnBhZ2VzIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigocGFnZSkgPT4gcGFnZS50aXRsZSAhPT0gcGFnZVRpdGxlUGFyc2VkLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgocGFnZSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcGFnZS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5ldyBPTy51aS5IdG1sU25pcHBldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3BhZ2UudGl0bGV9JHtwYWdlLnBhZ2Vwcm9wcyAmJiAnZGlzYW1iaWd1YXRpb24nIGluIHBhZ2UucGFnZXByb3BzID8gJyA8aT4oZGlzYW1iaWd1YXRpb24pPC9pPicgOiAnJ30ke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWRpcmVjdCcgaW4gcGFnZSA/ICcgPGk+KHJlZGlyZWN0KTwvaT4nIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBkZWZlcnJlZC5yZXNvbHZlKFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKHsgYWJvcnQoKSB7fSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGdldExvb2t1cENhY2hlRGF0YUZyb21SZXNwb25zZSA9IDxUPihyZXNwb25zZTogVFtdIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gcmVzcG9uc2UgPz8gW107XG5cbiAgICAgICAgICAgIGdldExvb2t1cE1lbnVPcHRpb25zRnJvbURhdGEgPSAoZGF0YTogeyBkYXRhOiBzdHJpbmc7IGxhYmVsOiBzdHJpbmcgfVtdKSA9PiBkYXRhLm1hcCgoeyBkYXRhLCBsYWJlbCB9KSA9PiBuZXcgT08udWkuTWVudU9wdGlvbldpZGdldCh7IGRhdGEsIGxhYmVsIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5hc3NpZ24oUmVkaXJlY3RJbnB1dFdpZGdldC5wcm90b3R5cGUsIE9PLnVpLm1peGluLkxvb2t1cEVsZW1lbnQucHJvdG90eXBlKTtcblxuICAgICAgICBjb25zdCByZWRpcmVjdElucHV0ID0gbmV3IFJlZGlyZWN0SW5wdXRXaWRnZXQoeyBwbGFjZWhvbGRlcjogJ1RhcmdldCBwYWdlIG5hbWUnLCByZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICAgICAgcmVkaXJlY3RJbnB1dC5vbignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gcmVkaXJlY3RJbnB1dC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoYF4oaHR0cHM/Oik/L3syfT8ke213LmNvbmZpZy5nZXQoJ3dnU2VydmVyJykucmVwbGFjZSgvXlxcL3syfS8sICcnKX0vd2lraS9gKSwgJycpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eOi8sICcnKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdElucHV0LnNldFZhbHVlKHZhbHVlWzBdLnRvVXBwZXJDYXNlKCkgKyB2YWx1ZS5zbGljZSgxKS5yZXBsYWNlQWxsKCdfJywgJyAnKSk7XG4gICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldERpc2FibGVkKGZhbHNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBzdWJtaXRCdXR0b24uc2V0RGlzYWJsZWQodHJ1ZSk7XG5cbiAgICAgICAgICAgIHVwZGF0ZVN1bW1hcnkoKTtcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRMYWJlbCgnU3VibWl0Jyk7XG4gICAgICAgICAgICBuZWVkc0NoZWNrID0gdHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVkaXJlY3RJbnB1dExheW91dCA9IG5ldyBPTy51aS5GaWVsZExheW91dChyZWRpcmVjdElucHV0LCB7IGxhYmVsOiBuZXcgT08udWkuSHRtbFNuaXBwZXQoJzxiPlJlZGlyZWN0IHRhcmdldDo8L2I+JyksIGFsaWduOiAndG9wJyB9KTtcblxuICAgICAgICAvKiBSZWRpcmVjdCBjYXRlZ29yaXphdGlvbiB0ZW1wbGF0ZSBzZWxlY3Rpb24gKi9cbiAgICAgICAgY29uc3QgdGFnU2VsZWN0ID0gbmV3IE9PLnVpLk1lbnVUYWdNdWx0aXNlbGVjdFdpZGdldCh7XG4gICAgICAgICAgICBhbGxvd0FyYml0cmFyeTogZmFsc2UsXG4gICAgICAgICAgICBhbGxvd1Jlb3JkZXJpbmc6IGZhbHNlLFxuICAgICAgICAgICAgb3B0aW9uczogT2JqZWN0LmtleXMocmVkaXJlY3RUZW1wbGF0ZXMpLm1hcCgodGFnKSA9PiAoeyBkYXRhOiB0YWcsIGxhYmVsOiB0YWcgfSkpLFxuICAgICAgICB9KTtcbiAgICAgICAgKHRhZ1NlbGVjdC5nZXRNZW51KCkgYXMgT08udWkuTWVudVNlbGVjdFdpZGdldC5Db25maWdPcHRpb25zKS5maWx0ZXJNb2RlID0gJ3N1YnN0cmluZyc7XG4gICAgICAgIHRhZ1NlbGVjdC5vbignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc29ydGVkVGFncyA9ICh0YWdTZWxlY3QuZ2V0VmFsdWUoKSBhcyBzdHJpbmdbXSkuc29ydCgoYSwgYikgPT4gYS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi50b0xvd2VyQ2FzZSgpKSk7XG5cbiAgICAgICAgICAgIGlmICgodGFnU2VsZWN0LmdldFZhbHVlKCkgYXMgc3RyaW5nW10pLmpvaW4oJzsnKSAhPT0gc29ydGVkVGFncy5qb2luKCc7JykpIHRhZ1NlbGVjdC5zZXRWYWx1ZShzb3J0ZWRUYWdzKTtcblxuICAgICAgICAgICAgdXBkYXRlU3VtbWFyeSgpO1xuICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldExhYmVsKCdTdWJtaXQnKTtcbiAgICAgICAgICAgIG5lZWRzQ2hlY2sgPSB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB0YWdTZWxlY3RMYXlvdXQgPSBuZXcgT08udWkuRmllbGRMYXlvdXQodGFnU2VsZWN0LCB7IGxhYmVsOiBuZXcgT08udWkuSHRtbFNuaXBwZXQoJzxiPlJlZGlyZWN0IGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlKHMpOjwvYj4nKSwgYWxpZ246ICd0b3AnIH0pO1xuXG4gICAgICAgIC8qIFN1bW1hcnkgaW5wdXQgKi9cbiAgICAgICAgY29uc3Qgc3VtbWFyeUlucHV0ID0gbmV3IE9PLnVpLkNvbWJvQm94SW5wdXRXaWRnZXQoe1xuICAgICAgICAgICAgb3B0aW9uczogW1xuICAgICAgICAgICAgICAgIHsgZGF0YTogJ1Jlc29sdmUgZG91YmxlIHJlZGlyZWN0JyB9LCAvL1xuICAgICAgICAgICAgICAgIHsgZGF0YTogJ1Jlc29sdmUgc2VsZiByZWRpcmVjdCcgfSxcbiAgICAgICAgICAgICAgICB7IGRhdGE6ICdSZW1vdmUgaW5jb3JyZWN0IHJjYXRzJyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc3VtbWFyeUlucHV0TGF5b3V0ID0gbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHN1bW1hcnlJbnB1dCwgeyBsYWJlbDogbmV3IE9PLnVpLkh0bWxTbmlwcGV0KCc8Yj5TdW1tYXJ5OjwvYj4nKSwgYWxpZ246ICd0b3AnIH0pO1xuXG4gICAgICAgIC8qIFN1Ym1pdCBidXR0b24gKi9cbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gbmV3IE9PLnVpLkJ1dHRvbldpZGdldCh7IGxhYmVsOiAnU3VibWl0JywgZGlzYWJsZWQ6IHRydWUsIGZsYWdzOiBbJ3Byb2dyZXNzaXZlJ10gfSk7XG4gICAgICAgIHN1Ym1pdEJ1dHRvbi4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMCc7XG5cbiAgICAgICAgbGV0IG5lZWRzQ2hlY2sgPSB0cnVlO1xuICAgICAgICBzdWJtaXRCdXR0b24ub24oJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIFtyZWRpcmVjdElucHV0LCB0YWdTZWxlY3QsIHN1bW1hcnlJbnB1dCwgc3VibWl0QnV0dG9uLCBzeW5jVGFsa0NoZWNrYm94LCBwYXRyb2xDaGVja2JveF0uZmlsdGVyKEJvb2xlYW4pKSAoZWxlbWVudCBhcyBPTy51aS5XaWRnZXQpLnNldERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldExhYmVsKCdDaGVja2luZyB0YXJnZXQgdmFsaWRpdHkuLi4nKTtcblxuICAgICAgICAgICAgbGV0IHBhcnNlZERlc3RpbmF0aW9uO1xuXG4gICAgICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcblxuICAgICAgICAgICAgLyogVGl0bGUgdmFsaWRhdGlvbiAqL1xuICAgICAgICAgICAgaWYgKG5lZWRzQ2hlY2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IHJlZGlyZWN0SW5wdXQuZ2V0VmFsdWUoKS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAvKiBJbnZhbGlkIGNoYXJhY3RlcnMgKi9cbiAgICAgICAgICAgICAgICBpZiAoIS9eXFxzKlteW1xcXXt8fV0rXFxzKiQvLnRlc3QoZGVzdGluYXRpb24pKSBlcnJvcnMucHVzaCh7IHRpdGxlOiBkZXN0aW5hdGlvbiwgbWVzc2FnZTogJ2lzIG5vdCBhIHZhbGlkIHBhZ2UgdGl0bGUhJyB9KTtcblxuICAgICAgICAgICAgICAgIC8qIEZhaWxlZCBkdXJpbmcgdGl0bGUgcGFyc2luZyAqL1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZERlc3RpbmF0aW9uID0gbXcuVGl0bGUubmV3RnJvbVRleHQoZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMCkgZXJyb3JzLnB1c2goeyB0aXRsZTogZGVzdGluYXRpb24sIG1lc3NhZ2U6ICdpcyBub3QgYSB2YWxpZCBwYWdlIHRpdGxlIScgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcGFyc2VkRGVzdGluYXRpb24gJiYgZXJyb3JzLmxlbmd0aCA9PT0gMCkgZXJyb3JzLnB1c2goeyB0aXRsZTogZGVzdGluYXRpb24sIG1lc3NhZ2U6ICdpcyBub3QgYSB2YWxpZCBwYWdlIHRpdGxlIScgfSk7XG5cbiAgICAgICAgICAgICAgICAvKiBTZWxmIHJlZGlyZWN0cyAqL1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWREZXN0aW5hdGlvbj8udG9TdHJpbmcoKSA9PT0gcGFnZVRpdGxlUGFyc2VkLnRvU3RyaW5nKCkpIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2Nhbm5vdCByZWRpcmVjdCB0byBpdHNlbGYhJyB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uRGF0YSA9IChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHsgYWN0aW9uOiAncXVlcnknLCBmb3JtYXR2ZXJzaW9uOiAyLCBwcm9wOiAncGFnZXByb3BzJywgdGl0bGVzOiBkZXN0aW5hdGlvbiB9KS5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLyogTm9uLWV4aXN0ZW50IGRlc3RpbmF0aW9uICovIGlmIChlcnJvckNvZGUgPT09ICdtaXNzaW5ndGl0bGUnKSBlcnJvcnMucHVzaCh7IHRpdGxlOiBkZXN0aW5hdGlvbiwgbWVzc2FnZTogJ2RvZXMgbm90IGV4aXN0IScgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8qIE90aGVyIEFQSSBlcnJvciAqLyBlbHNlIGVycm9ycy5wdXNoKHsgdGl0bGU6IGRlc3RpbmF0aW9uLCBtZXNzYWdlOiBgd2FzIG5vdCBhYmxlIHRvIGJlIGZldGNoZWQgZnJvbSB0aGUgQVBJICgke2Vycm9yQ29kZX0pIWAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0pKSBhcyBQYWdlcHJvcHNSZXN1bHQgfCBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUGFyc2VSZXN1bHQgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3BhcnNlJywgcGFnZTogZGVzdGluYXRpb24sIHByb3A6ICdzZWN0aW9ucycsIHJlZGlyZWN0czogJzEnIH0pKSBhcyBQYWdlUGFyc2VSZXN1bHQ7XG5cbiAgICAgICAgICAgICAgICAvKiBEb3VibGUgcmVkaXJlY3RzICovXG4gICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uUGFyc2VSZXN1bHQucGFyc2UucmVkaXJlY3RzPy5bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb25SZWRpcmVjdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvblBhcnNlUmVzdWx0LnBhcnNlLnJlZGlyZWN0c1swXS50byArIChkZXN0aW5hdGlvblBhcnNlUmVzdWx0LnBhcnNlLnJlZGlyZWN0c1swXS50b2ZyYWdtZW50ID8gYCMke2Rlc3RpbmF0aW9uUGFyc2VSZXN1bHQucGFyc2UucmVkaXJlY3RzWzBdLnRvZnJhZ21lbnR9YCA6ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRlc3RpbmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYGlzIGEgcmVkaXJlY3QgdG8gPGEgaHJlZj1cIiR7bXcudXRpbC5nZXRVcmwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25SZWRpcmVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICl9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkZXN0aW5hdGlvblJlZGlyZWN0fTwvYT4uIFJldGFyZ2V0IHRvIHRoYXQgcGFnZSBpbnN0ZWFkLCBhcyBkb3VibGUgcmVkaXJlY3RzIGFyZW4ndCBhbGxvd2VkLmAsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qIE5vbi1leGlzdGVudCBzZWN0aW9uICovXG4gICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uLnNwbGl0KCcjJykubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZFNlY3Rpb24gPSBkZXN0aW5hdGlvblBhcnNlUmVzdWx0LnBhcnNlLnNlY3Rpb25zLmZpbmQoKHNlY3Rpb24pID0+IHNlY3Rpb24ubGluZSA9PT0gZGVzdGluYXRpb24uc3BsaXQoJyMnKVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZFNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiB0byBhbmNob3InKSkgZXJyb3JzLnB1c2goeyBtZXNzYWdlOiAnaXMgdGFnZ2VkIGFzIGEgcmVkaXJlY3QgdG8gYW4gYW5jaG9yLCBidXQgaXQgaXMgYWN0dWFsbHkgYSByZWRpcmVjdCB0byBhIHNlY3Rpb24hJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgdG8gc2VjdGlvbicpKSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyBhIHJlZGlyZWN0IHRvIGEgc2VjdGlvbiwgYnV0IGl0IGlzIG5vdCB0YWdnZWQgd2l0aCA8Y29kZT57e1IgdG8gc2VjdGlvbn19PC9jb2RlPiEnIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb25Db250ZW50ID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wOiAncmV2aXNpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnZwcm9wOiAnY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ2c2xvdHM6ICcqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVzOiBwYXJzZWREZXN0aW5hdGlvbiEudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgKS5xdWVyeS5wYWdlc1swXS5yZXZpc2lvbnNbMF0uc2xvdHMubWFpbi5jb250ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmNob3JzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihkZXN0aW5hdGlvbkNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hdGNoKC8oPzw9e3tcXHMqP1tBYV0oPzpuY2hvcnM/fG5jaG9yIGZvciByZWRpcmVjdHxua2VyfE5DSE9SfG5jKVxccyo/XFx8KS4rPyg/PX19KS9nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/Lm1hcCgoYW5jaG9yOiBzdHJpbmcpID0+IGFuY2hvci5zcGxpdCgnfCcpLm1hcCgocGFydCkgPT4gcGFydC50cmltKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmZsYXQoKSA/PyBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGRlc3RpbmF0aW9uQ29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWF0Y2goLyg/PD17e1xccyo/KD86W1Z2XSg/OmlzaWJsZSBhbmNob3JzP3xpc2FuY3xBbmNofGFuY2hvcnxpc2libGVhbmNob3J8YSl8W0FhXSg/Om5jaG9yZHxjaG9yZWR8bmNob3JcXCspfFtUdF1leHQgYW5jaG9yKVxccyo/XFx8KS4rPyg/PSg/PCEhfD0pfX0pL2cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ubWFwKChhbmNob3I6IHN0cmluZykgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnfCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgocGFydCkgPT4gcGFydC50cmltKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigocGFydCkgPT4gIS9edGV4dFxccyo/PS8udGVzdChwYXJ0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5mbGF0KCkgPz8gW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihkZXN0aW5hdGlvbkNvbnRlbnQubWF0Y2goLyg/PD1pZD0pXCI/Lis/KD89XCJ8PnxcXHwpL2cpPy5tYXAoKGFuY2hvcjogc3RyaW5nKSA9PiBhbmNob3IudHJpbSgpKSA/PyBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvcnMuaW5jbHVkZXMoZGVzdGluYXRpb24uc3BsaXQoJyMnKVsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgdG8gc2VjdGlvbicpKSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyB0YWdnZWQgYXMgYSByZWRpcmVjdCB0byBhIHNlY3Rpb24sIGJ1dCBpdCBpcyBhY3R1YWxseSBhIHJlZGlyZWN0IHRvIGFuIGFuY2hvciEnIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgdG8gYW5jaG9yJykpIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2lzIGEgcmVkaXJlY3QgdG8gYW4gYW5jaG9yLCBidXQgaXQgaXMgbm90IHRhZ2dlZCB3aXRoIDxjb2RlPnt7UiBmcm9tIGFuY2hvcn19PC9jb2RlPiEnIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogYGlzIGEgcmVkaXJlY3QgdG8gPGEgaHJlZj1cIiR7bXcudXRpbC5nZXRVcmwoZGVzdGluYXRpb24pfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGVzdGluYXRpb259PC9hPiwgYnV0IHRoYXQgc2VjdGlvbiBvciBhbmNob3IgZG9lcyBub3QgZXhpc3QhYCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qIEltcHJvcGVybHkgdGFnZ2VkIGFzIHJlZGlyZWN0IHRvIHNlY3Rpb24vYW5jaG9yICovXG4gICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uLnNwbGl0KCcjJykubGVuZ3RoID09PSAxICYmICh0YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiB0byBzZWN0aW9uJykgfHwgdGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgdG8gYW5jaG9yJykpKVxuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyBub3QgYSByZWRpcmVjdCB0byBhIHNlY3Rpb24vYW5jaG9yLCBidXQgaXQgaXMgdGFnZ2VkIHdpdGggPGNvZGU+e3tSIGZyb20gc2VjdGlvbn19PC9jb2RlPiBvciA8Y29kZT57e1IgZnJvbSBhbmNob3J9fTwvY29kZT4hJyB9KTtcblxuICAgICAgICAgICAgICAgIC8qIFJlZGlyZWN0IHRvIGRpc2FtYmlndWF0aW9uIHBhZ2Ugd2l0aG91dCB0ZW1wbGF0ZSAqL1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25EYXRhIS5xdWVyeS5wYWdlc1swXS5wYWdlcHJvcHMgJiZcbiAgICAgICAgICAgICAgICAgICAgJ2Rpc2FtYmlndWF0aW9uJyBpbiBkZXN0aW5hdGlvbkRhdGEhLnF1ZXJ5LnBhZ2VzWzBdLnBhZ2Vwcm9wcyAmJlxuICAgICAgICAgICAgICAgICAgICAhW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1IgZnJvbSBhbWJpZ3VvdXMgc29ydCBuYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdSIGZyb20gYW1iaWd1b3VzIHRlcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1IgdG8gZGlzYW1iaWd1YXRpb24gcGFnZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnUiBmcm9tIGluY29tcGxldGUgZGlzYW1iaWd1YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1IgZnJvbSBpbmNvcnJlY3QgZGlzYW1iaWd1YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1IgZnJvbSBvdGhlciBkaXNhbWJpZ3VhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIF0uc29tZSgodGVtcGxhdGUpID0+IHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKHRlbXBsYXRlKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2lzIGEgcmVkaXJlY3QgdG8gYSBkaXNhbWJpZ3VhdGlvbiBwYWdlLCBidXQgaXQgaXMgbm90IHRhZ2dlZCB3aXRoIGEgZGlzYW1iaWd1YXRpb24gY2F0ZWdvcml6YXRpb24gdGVtcGxhdGUhJyB9KTtcblxuICAgICAgICAgICAgICAgIC8qIEltcHJvcGVybHkgdGFnZ2VkIGFzIHJlZGlyZWN0IHRvIGRpc2FtYmlndWF0aW9uIHBhZ2UgKi9cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uRGF0YSEucXVlcnkucGFnZXNbMF0ucGFnZXByb3BzICYmXG4gICAgICAgICAgICAgICAgICAgICEoJ2Rpc2FtYmlndWF0aW9uJyBpbiBkZXN0aW5hdGlvbkRhdGEhLnF1ZXJ5LnBhZ2VzWzBdLnBhZ2Vwcm9wcykgJiZcbiAgICAgICAgICAgICAgICAgICAgWydSIGZyb20gYW1iaWd1b3VzIHNvcnQgbmFtZScsICdSIGZyb20gYW1iaWd1b3VzIHRlcm0nLCAnUiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlJywgJ1IgZnJvbSBpbmNvbXBsZXRlIGRpc2FtYmlndWF0aW9uJ10uc29tZSgodGVtcGxhdGUpID0+IHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKHRlbXBsYXRlKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2lzIG5vdCBhIHJlZGlyZWN0IHRvIGEgZGlzYW1iaWd1YXRpb24gcGFnZSwgYnV0IGl0IGlzIHRhZ2dlZCB3aXRoIGEgZGlzYW1iaWd1YXRpb24gY2F0ZWdvcml6YXRpb24gdGVtcGxhdGUhJyB9KTtcblxuICAgICAgICAgICAgICAgIC8qIHt7UiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlfX0gd2l0aG91dCBcIiAoZGlzYW1iaWd1YXRpb24pXCIgYXQgZW5kIG9mIHRpdGxlICovXG4gICAgICAgICAgICAgICAgaWYgKHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIGRpc2FtYmlndWF0aW9uIHBhZ2UnKSAmJiAhcGFnZVRpdGxlUGFyc2VkLmdldE1haW5UZXh0KCkuZW5kc1dpdGgoJyAoZGlzYW1iaWd1YXRpb24pJykpXG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzIHRhZ2dlZCB3aXRoIDxjb2RlPnt7UiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlfX08L2NvZGU+LCBidXQgdGhpcyB0aXRsZSBkb2VzIG5vdCBlbmQgd2l0aCBcIiAoZGlzYW1iaWd1YXRpb24pXCIuIFVzZSA8Y29kZT57e1IgZnJvbSBhbWJpZ3VvdXMgdGVybX19PC9jb2RlPiBvciBhIHNpbWlsYXIgY2F0ZWdvcml6YXRpb24gdGVtcGxhdGUgaW5zdGVhZCEnLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8qIFN5bmNpbmcgdGFsayBwYWdlIGJ1dCB0YWxrIHBhZ2UgZXhpc3RzIGFuZCBpc24ndCBhIHJlZGlyZWN0ICovXG4gICAgICAgICAgICAgICAgaWYgKHN5bmNUYWxrQ2hlY2tib3g/LmlzU2VsZWN0ZWQoKSAmJiAhdGFsa0RhdGEhLnF1ZXJ5LnBhZ2VzWzBdLm1pc3NpbmcgJiYgIXRhbGtEYXRhIS5xdWVyeS5wYWdlc1swXS5yZWRpcmVjdClcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goeyB0aXRsZTogcGFnZVRpdGxlUGFyc2VkLmdldFRhbGtQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpLCBtZXNzYWdlOiAnZXhpc3RzLCBidXQgaXMgbm90IGEgcmVkaXJlY3QhJyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yZWRpcmVjdC1oZWxwZXItd2FybmluZycpKSBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgeyB0aXRsZSwgbWVzc2FnZSB9IG9mIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IG5ldyBPTy51aS5IdG1sU25pcHBldChcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke3RpdGxlID8gYDxhIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKHRpdGxlKX1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke3RpdGxlfTwvYT5gIDogJ1RoaXMgcGFnZSd9ICR7bWVzc2FnZX0gQ2xpY2sgYWdhaW4gd2l0aG91dCBtYWtpbmcgY2hhbmdlcyB0byBzdWJtaXQgYW55d2F5LmAsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdhcm5pbmdNZXNzYWdlID0gbmV3IE9PLnVpLk1lc3NhZ2VXaWRnZXQoeyB0eXBlOiAnZXJyb3InLCBjbGFzc2VzOiBbJ3JlZGlyZWN0LWhlbHBlci13YXJuaW5nJ10sIGlubGluZTogdHJ1ZSwgbGFiZWwgfSk7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNZXNzYWdlLiRlbGVtZW50WzBdLnN0eWxlLm1hcmdpblRvcCA9ICc4cHgnO1xuXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5hcHBlbmQod2FybmluZ01lc3NhZ2UuJGVsZW1lbnRbMF0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbcmVkaXJlY3RJbnB1dCwgdGFnU2VsZWN0LCBzdW1tYXJ5SW5wdXQsIHN1Ym1pdEJ1dHRvbiwgc3luY1RhbGtDaGVja2JveCwgcGF0cm9sQ2hlY2tib3hdLmZpbHRlcihCb29sZWFuKSkgKGVsZW1lbnQgYXMgT08udWkuV2lkZ2V0KS5zZXREaXNhYmxlZChmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0TGFiZWwoJ1N1Ym1pdCBhbnl3YXknKTtcbiAgICAgICAgICAgICAgICBuZWVkc0NoZWNrID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcnNlZERlc3RpbmF0aW9uID0gbXcuVGl0bGUubmV3RnJvbVRleHQocmVkaXJlY3RJbnB1dC5nZXRWYWx1ZSgpKTtcblxuICAgICAgICAgICAgLyogRWRpdC9jcmVhdGUgcmVkaXJlY3QgKi9cbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRMYWJlbChgJHtleGlzdHMgPyAnRWRpdGluZycgOiAnQ3JlYXRpbmcnfSByZWRpcmVjdC4uLmApO1xuXG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBbXG4gICAgICAgICAgICAgICAgYCNSRURJUkVDVCBbWyR7cmVkaXJlY3RJbnB1dC5nZXRWYWx1ZSgpLnRyaW0oKX1dXWAsIC8vXG4gICAgICAgICAgICAgICAgdGFnU2VsZWN0LmdldFZhbHVlKCkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IGB7e1JlZGlyZWN0IGNhdGVnb3J5IHNoZWxsfFxcbiR7KHRhZ1NlbGVjdC5nZXRWYWx1ZSgpIGFzIHN0cmluZ1tdKS5tYXAoKHRhZykgPT4gYHt7JHt0YWd9JHtvbGRSZWRpcmVjdFRhZ0RhdGE/Llt0YWddID8gYHwke29sZFJlZGlyZWN0VGFnRGF0YVt0YWddfWAgOiAnJ319fWApLmpvaW4oJ1xcbicpfVxcbn19YFxuICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgb2xkU3RyYXlUZXh0LFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAuam9pbignXFxuXFxuJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHN1bW1hcnkgPSAoc3VtbWFyeUlucHV0LmdldFZhbHVlKCkgfHwgKHN1bW1hcnlJbnB1dC4kdGFiSW5kZXhlZFswXSBhcyBIVE1MSW5wdXRFbGVtZW50KS5wbGFjZWhvbGRlcikgKyAnICh2aWEgW1tVc2VyOkVlaml0NDMvc2NyaXB0cy9yZWRpcmVjdC1oZWxwZXJ8cmVkaXJlY3QtaGVscGVyXV0pJztcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbmV3IG13LkFwaSgpXG4gICAgICAgICAgICAgICAgLmVkaXQocGFnZVRpdGxlLCAoKSA9PiAoeyB0ZXh0OiBvdXRwdXQsIHN1bW1hcnkgfSkpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvckNvZGU6IHN0cmluZywgZXJyb3JJbmZvOiBNZWRpYVdpa2lEYXRhRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ25vY3JlYXRlLW1pc3NpbmcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBtdy5BcGkoKS5jcmVhdGUocGFnZVRpdGxlLCB7IHN1bW1hcnkgfSwgb3V0cHV0KS5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9ySW5mbzogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBjcmVhdGluZyAke3BhZ2VUaXRsZX06ICR7ZXJyb3JJbmZvPy5lcnJvci5pbmZvID8/ICdVbmtub3duIGVycm9yJ30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEVycm9yIGVkaXRpbmcgb3IgY3JlYXRpbmcgJHtwYWdlVGl0bGV9OiAke2Vycm9ySW5mbz8uZXJyb3IuaW5mbyA/PyAnVW5rbm93biBlcnJvcid9ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHJldHVybjtcblxuICAgICAgICAgICAgbXcubm90aWZ5KGBSZWRpcmVjdCAke2V4aXN0cyA/ICdlZGl0ZWQnIDogJ2NyZWF0ZWQnfSBzdWNjZXNzZnVsbHkhYCwgeyB0eXBlOiAnc3VjY2VzcycgfSk7XG5cbiAgICAgICAgICAgIC8qIFN5bmMgdGFsayBwYWdlIGNoZWNrYm94IGhhbmRsZXIgKi9cbiAgICAgICAgICAgIGlmIChzeW5jVGFsa0NoZWNrYm94Py5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0TGFiZWwoJ0VkaXRpbmcgdGFsayBwYWdlLi4uJyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBmcm9tTW92ZSA9IHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIGZyb20gbW92ZScpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gW1xuICAgICAgICAgICAgICAgICAgICBgI1JFRElSRUNUIFtbJHtwYXJzZWREZXN0aW5hdGlvbiEuZ2V0VGFsa1BhZ2UoKSEuZ2V0UHJlZml4ZWRUZXh0KCl9XV1gLCAvL1xuICAgICAgICAgICAgICAgICAgICBmcm9tTW92ZSA/ICd7e1JlZGlyZWN0IGNhdGVnb3J5IHNoZWxsfFxcbnt7UiBmcm9tIG1vdmV9fVxcbn19JyA6IG51bGwsXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCdcXG5cXG4nKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRhbGtQYWdlID0gcGFnZVRpdGxlUGFyc2VkLmdldFRhbGtQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdGFsa1Jlc3VsdCA9IGF3YWl0IG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgICAgICAuZWRpdCh0YWxrUGFnZSwgKCkgPT4gKHsgdGV4dDogb3V0cHV0LCBzdW1tYXJ5OiAnU3luY2luZyByZWRpcmVjdCBmcm9tIG1haW4gcGFnZSAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvcmVkaXJlY3QtaGVscGVyfHJlZGlyZWN0LWhlbHBlcl1dKScgfSkpXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9ySW5mbzogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDb2RlID09PSAnbm9jcmVhdGUtbWlzc2luZycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY3JlYXRlKHRhbGtQYWdlLCB7IHN1bW1hcnk6ICdTeW5jaW5nIHJlZGlyZWN0IGZyb20gbWFpbiBwYWdlICh2aWEgW1tVc2VyOkVlaml0NDMvc2NyaXB0cy9yZWRpcmVjdC1oZWxwZXJ8cmVkaXJlY3QtaGVscGVyXV0pJyB9LCBvdXRwdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9ySW5mbzogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEVycm9yIGNyZWF0aW5nICR7dGFsa1BhZ2V9OiAke2Vycm9ySW5mbz8uZXJyb3IuaW5mbyA/PyAnVW5rbm93biBlcnJvcid9ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgRXJyb3IgZWRpdGluZyBvciBjcmVhdGluZyAke3RhbGtQYWdlfTogJHtlcnJvckluZm8/LmVycm9yLmluZm8gPz8gJ1Vua25vd24gZXJyb3InfSAoJHtlcnJvckNvZGV9KWAsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRhbGtSZXN1bHQpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIG13Lm5vdGlmeSgnVGFsayBwYWdlIHN5bmNlZCBzdWNjZXNzZnVsbHkhJywgeyB0eXBlOiAnc3VjY2VzcycgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIFBhdHJvbCBjaGVja2JveCBoYW5kbGVyICovXG4gICAgICAgICAgICBpZiAocGF0cm9sQ2hlY2tib3g/LmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRMYWJlbCgnUGF0cm9sbGluZyByZWRpcmVjdC4uLicpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0cm9sTGluazogSFRNTEFuY2hvckVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhdHJvbGxpbmsgYScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtSZXZpZXdlZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtd2UtcHQtbWFyay1hcy1yZXZpZXdlZC1idXR0b24nKSBhcyBIVE1MQnV0dG9uRWxlbWVudCB8IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAocGF0cm9sTGluaykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRyb2xSZXN1bHQgPSBhd2FpdCBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wb3N0V2l0aFRva2VuKCdwYXRyb2wnLCB7IGFjdGlvbjogJ3BhdHJvbCcsIHJjaWQ6IG5ldyBVUkwocGF0cm9sTGluay5ocmVmKS5zZWFyY2hQYXJhbXMuZ2V0KCdyY2lkJykhIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCBlcnJvckluZm86IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgRXJyb3IgcGF0cm9sbGluZyAke3BhZ2VUaXRsZX0gdmlhIEFQSTogJHtlcnJvckluZm8/LmVycm9yLmluZm8gPz8gJ1Vua25vd24gZXJyb3InfSAoJHtlcnJvckNvZGV9KWAsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGF0cm9sUmVzdWx0KSBtdy5ub3RpZnkoJ1JlZGlyZWN0IHBhdHJvbGxlZCBzdWNjZXNzZnVsbHkhJywgeyB0eXBlOiAnc3VjY2VzcycgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXJrUmV2aWV3ZWRCdXR0b24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWFya1Jldmlld2VkQnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeSgnUmVkaXJlY3QgcGF0cm9sbGVkIHN1Y2Nlc3NmdWxseSEnLCB7IHR5cGU6ICdzdWNjZXNzJyB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgbXcubm90aWZ5KCdQYWdlIGN1cmF0aW9uIHRvb2xiYXIgbm90IGZvdW5kLCByZWRpcmVjdCBjYW5ub3QgYmUgcGF0cm9sbGVkIScsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldExhYmVsKCdDb21wbGV0ZSwgcmVsb2FkaW5nLi4uJyk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbXcudXRpbC5nZXRVcmwocGFnZVRpdGxlLCB7IHJlZGlyZWN0OiAnbm8nIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgdGFsa0RhdGE6IFBhZ2VJbmZvUmVzdWx0IHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGxldCBzeW5jVGFsa0NoZWNrYm94OiBPTy51aS5DaGVja2JveElucHV0V2lkZ2V0IHwgdW5kZWZpbmVkLCBzeW5jVGFsa0xheW91dDogT08udWkuV2lkZ2V0IHwgdW5kZWZpbmVkO1xuICAgICAgICBpZiAoIXBhZ2VUaXRsZVBhcnNlZC5pc1RhbGtQYWdlKCkpIHtcbiAgICAgICAgICAgIHRhbGtEYXRhID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIGZvcm1hdHZlcnNpb246IDIsIHByb3A6ICdpbmZvJywgdGl0bGVzOiBwYWdlVGl0bGVQYXJzZWQuZ2V0VGFsa1BhZ2UoKSEuZ2V0UHJlZml4ZWRUZXh0KCkgfSkpIGFzIFBhZ2VJbmZvUmVzdWx0O1xuICAgICAgICAgICAgc3luY1RhbGtDaGVja2JveCA9IG5ldyBPTy51aS5DaGVja2JveElucHV0V2lkZ2V0KHsgc2VsZWN0ZWQ6ICEhdGFsa0RhdGEucXVlcnkucGFnZXNbMF0ucmVkaXJlY3QgfSk7XG5cbiAgICAgICAgICAgIHN5bmNUYWxrTGF5b3V0ID0gbmV3IE9PLnVpLldpZGdldCh7IGNvbnRlbnQ6IFtuZXcgT08udWkuRmllbGRMYXlvdXQoc3luY1RhbGtDaGVja2JveCwgeyBsYWJlbDogJ1N5bmMgdGFsayBwYWdlJywgYWxpZ246ICdpbmxpbmUnIH0pXSB9KTtcbiAgICAgICAgICAgIHN5bmNUYWxrTGF5b3V0LiRlbGVtZW50WzBdLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcwJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hcmtCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXdlLXB0LW1hcmsgLm13ZS1wdC10b29sLWljb24nKSBhcyBIVE1MSW1hZ2VFbGVtZW50IHwgbnVsbDtcbiAgICAgICAgbWFya0J1dHRvbj8uY2xpY2soKTtcbiAgICAgICAgbWFya0J1dHRvbj8uY2xpY2soKTtcblxuICAgICAgICBsZXQgc2hvdWxkUHJvbXB0UGF0cm9sO1xuICAgICAgICBpZiAobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSAhPT0gMCkgc2hvdWxkUHJvbXB0UGF0cm9sID0gZmFsc2U7XG4gICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYXRyb2xsaW5rJykpIHNob3VsZFByb21wdFBhdHJvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtd2UtcHQtbWFyay1hcy1yZXZpZXdlZC1idXR0b24nKSkgc2hvdWxkUHJvbXB0UGF0cm9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213ZS1wdC1tYXJrLWFzLXVucmV2aWV3ZWQtYnV0dG9uJykpIHNob3VsZFByb21wdFBhdHJvbCA9IGZhbHNlO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghbXcuY29uZmlnLmdldCgnd2dBcnRpY2xlSWQnKSkgc2hvdWxkUHJvbXB0UGF0cm9sID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCB1c2VyUGVybWlzc2lvbnMgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3F1ZXJ5JywgbWV0YTogJ3VzZXJpbmZvJywgdWlwcm9wOiAncmlnaHRzJyB9KSkgYXMgVXNlclBlcm1pc3Npb25zUmVzcG9uc2U7XG4gICAgICAgICAgICBpZiAoIXVzZXJQZXJtaXNzaW9ucy5xdWVyeS51c2VyaW5mby5yaWdodHMuaW5jbHVkZXMoJ3BhdHJvbCcpKSBzaG91bGRQcm9tcHRQYXRyb2wgPSBmYWxzZTtcblxuICAgICAgICAgICAgY29uc3QgcGF0cm9sUmVzcG9uc2UgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3BhZ2V0cmlhZ2VsaXN0JywgcGFnZV9pZDogbXcuY29uZmlnLmdldCgnd2dBcnRpY2xlSWQnKSB9KSkgYXMgUGFnZVRyaWFnZUxpc3RSZXNwb25zZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cblxuICAgICAgICAgICAgaWYgKHBhdHJvbFJlc3BvbnNlLnBhZ2V0cmlhZ2VsaXN0LnBhZ2VzWzBdPy51c2VyX25hbWUgPT09IG13LmNvbmZpZy5nZXQoJ3dnVXNlck5hbWUnKSkgc2hvdWxkUHJvbXB0UGF0cm9sID0gZmFsc2U7XG4gICAgICAgICAgICBlbHNlIGlmIChwYXRyb2xSZXNwb25zZS5wYWdldHJpYWdlbGlzdC5yZXN1bHQgIT09ICdzdWNjZXNzJyB8fCBwYXRyb2xSZXNwb25zZS5wYWdldHJpYWdlbGlzdC5wYWdlcy5sZW5ndGggPT09IDApIHNob3VsZFByb21wdFBhdHJvbCA9IGZhbHNlO1xuICAgICAgICAgICAgZWxzZSBzaG91bGRQcm9tcHRQYXRyb2wgPSAhTnVtYmVyLnBhcnNlSW50KHBhdHJvbFJlc3BvbnNlLnBhZ2V0cmlhZ2VsaXN0LnBhZ2VzWzBdPy5wYXRyb2xfc3RhdHVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYXRyb2xDaGVja2JveDogT08udWkuQ2hlY2tib3hJbnB1dFdpZGdldCB8IHVuZGVmaW5lZCwgcGF0cm9sTGF5b3V0OiBPTy51aS5XaWRnZXQgfCB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzaG91bGRQcm9tcHRQYXRyb2wpIHtcbiAgICAgICAgICAgIHBhdHJvbENoZWNrYm94ID0gbmV3IE9PLnVpLkNoZWNrYm94SW5wdXRXaWRnZXQoeyBzZWxlY3RlZDogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgcGF0cm9sTGF5b3V0ID0gbmV3IE9PLnVpLldpZGdldCh7IGNvbnRlbnQ6IFtuZXcgT08udWkuRmllbGRMYXlvdXQocGF0cm9sQ2hlY2tib3gsIHsgbGFiZWw6ICdNYXJrIGFzIHBhdHJvbGxlZCcsIGFsaWduOiAnaW5saW5lJyB9KV0gfSk7XG4gICAgICAgICAgICBwYXRyb2xMYXlvdXQuJGVsZW1lbnRbMF0uc3R5bGUubWFyZ2luQm90dG9tID0gJzAnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3VibWl0TGF5b3V0ID0gbmV3IE9PLnVpLkhvcml6b250YWxMYXlvdXQoeyBpdGVtczogW3N1Ym1pdEJ1dHRvbiwgc3luY1RhbGtMYXlvdXQsIHBhdHJvbExheW91dF0uZmlsdGVyKEJvb2xlYW4pIGFzIE9PLnVpLldpZGdldFtdIH0pO1xuICAgICAgICBzdWJtaXRMYXlvdXQuJGVsZW1lbnRbMF0uc3R5bGUubWFyZ2luVG9wID0gJzEwcHgnO1xuXG4gICAgICAgIC8qIEFkZCBlbGVtZW50cyB0byBzY3JlZW4gKi9cbiAgICAgICAgZWRpdG9yQm94LiRlbGVtZW50WzBdLmFwcGVuZChcbiAgICAgICAgICAgIC4uLihbc3luY1dpdGhNYWluQnV0dG9uPy4kZWxlbWVudD8uWzBdLCByZWRpcmVjdElucHV0TGF5b3V0LiRlbGVtZW50WzBdLCB0YWdTZWxlY3RMYXlvdXQuJGVsZW1lbnRbMF0sIHN1bW1hcnlJbnB1dExheW91dC4kZWxlbWVudFswXSwgc3VibWl0TGF5b3V0LiRlbGVtZW50WzBdXS5maWx0ZXIoXG4gICAgICAgICAgICAgICAgQm9vbGVhbixcbiAgICAgICAgICAgICkgYXMgSFRNTEVsZW1lbnRbXSksXG4gICAgICAgICk7XG5cbiAgICAgICAgY29udGVudFRleHQucHJlcGVuZChlZGl0b3JCb3guJGVsZW1lbnRbMF0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGVzIHRoZSBzdW1tYXJ5IGlucHV0IHBsYWNlaG9sZGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlU3VtbWFyeSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0VmFsdWUgPSByZWRpcmVjdElucHV0LmdldFZhbHVlKCkudHJpbSgpO1xuXG4gICAgICAgICAgICBpZiAoIXJlZGlyZWN0VmFsdWUpIChzdW1tYXJ5SW5wdXQuJHRhYkluZGV4ZWRbMF0gYXMgSFRNTElucHV0RWxlbWVudCkucGxhY2Vob2xkZXIgPSAnJztcbiAgICAgICAgICAgIGVsc2UgaWYgKGV4aXN0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldENoYW5nZWQgPSByZWRpcmVjdFZhbHVlICE9PSBvbGRSZWRpcmVjdFRhcmdldD8ucmVwbGFjZUFsbCgnXycsICcgJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFnc0NoYW5nZWQgPSB0YWdTZWxlY3QuZ2V0VmFsdWUoKS5qb2luKCc7JykgIT09IG9sZFJlZGlyZWN0VGFncz8uam9pbignOycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldENoYW5nZWQgJiYgdGFnc0NoYW5nZWQpIChzdW1tYXJ5SW5wdXQuJHRhYkluZGV4ZWRbMF0gYXMgSFRNTElucHV0RWxlbWVudCkucGxhY2Vob2xkZXIgPSBgQ2hhbmdpbmcgcmVkaXJlY3QgdG8gW1ske3JlZGlyZWN0VmFsdWV9XV0gYW5kIGNoYW5naW5nIGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlc2A7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGFyZ2V0Q2hhbmdlZCkgKHN1bW1hcnlJbnB1dC4kdGFiSW5kZXhlZFswXSBhcyBIVE1MSW5wdXRFbGVtZW50KS5wbGFjZWhvbGRlciA9IGBDaGFuZ2luZyByZWRpcmVjdCB0byBbWyR7cmVkaXJlY3RWYWx1ZX1dXWA7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGFnc0NoYW5nZWQpIChzdW1tYXJ5SW5wdXQuJHRhYkluZGV4ZWRbMF0gYXMgSFRNTElucHV0RWxlbWVudCkucGxhY2Vob2xkZXIgPSAnQ2hhbmdpbmcgY2F0ZWdvcml6YXRpb24gdGVtcGxhdGVzJztcbiAgICAgICAgICAgICAgICBlbHNlIChzdW1tYXJ5SW5wdXQuJHRhYkluZGV4ZWRbMF0gYXMgSFRNTElucHV0RWxlbWVudCkucGxhY2Vob2xkZXIgPSAnUmVkaXJlY3QgY2xlYW51cCc7XG4gICAgICAgICAgICB9IGVsc2UgKHN1bW1hcnlJbnB1dC4kdGFiSW5kZXhlZFswXSBhcyBIVE1MSW5wdXRFbGVtZW50KS5wbGFjZWhvbGRlciA9IGBDcmVhdGluZyByZWRpcmVjdCB0byBbWyR7cmVkaXJlY3RWYWx1ZX1dXWA7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBMb2FkIGN1cnJlbnQgdGFyZ2V0IGFuZCB0YWdzLCBpZiBhcHBsaWNhYmxlICovXG4gICAgICAgIGxldCBvbGRSZWRpcmVjdFRhcmdldDogc3RyaW5nIHwgdW5kZWZpbmVkLCBvbGRSZWRpcmVjdFRhZ3M6IHN0cmluZ1tdIHwgdW5kZWZpbmVkLCBvbGRSZWRpcmVjdFRhZ0RhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQsIG9sZFN0cmF5VGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgICAgICBjb25zdCBwYWdlQ29udGVudCA9IChcbiAgICAgICAgICAgICAgICAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3F1ZXJ5JywgZm9ybWF0dmVyc2lvbjogMiwgcHJvcDogJ3JldmlzaW9ucycsIHJ2cHJvcDogJ2NvbnRlbnQnLCBydnNsb3RzOiAnKicsIHRpdGxlczogcGFnZVRpdGxlIH0pKSBhcyBQYWdlUmV2aXNpb25zUmVzdWx0XG4gICAgICAgICAgICApLnF1ZXJ5LnBhZ2VzWzBdLnJldmlzaW9uc1swXS5zbG90cy5tYWluLmNvbnRlbnQudHJpbSgpO1xuXG4gICAgICAgICAgICBvbGRSZWRpcmVjdFRhcmdldCA9IC9eI3JlZGlyZWN0Oj9cXHMqXFxbXFxbXFxzKihbXltcXF17fH1dKz8pXFxzKig/OlxcfFteW1xcXXt8fV0rPyk/XV1cXHMqL2kuZXhlYyhwYWdlQ29udGVudCk/LlsxXTtcbiAgICAgICAgICAgIG9sZFJlZGlyZWN0VGFncyA9IChcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhyZWRpcmVjdFRlbXBsYXRlcylcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoW3RhZywgcmVkaXJlY3RzXSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFt0YWcsIC4uLnJlZGlyZWN0c10uc29tZSgodGFnT3JSZWRpcmVjdCkgPT4gbmV3IFJlZ0V4cChge3tcXFxccypbJHt0YWdPclJlZGlyZWN0WzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdPclJlZGlyZWN0WzBdfV0ke3RhZ09yUmVkaXJlY3Quc2xpY2UoMSl9XFxcXHMqKFxcXFx8fH19KWApLnRlc3QocGFnZUNvbnRlbnQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGFnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbikgYXMgc3RyaW5nW11cbiAgICAgICAgICAgICkuc29ydCgoYSwgYikgPT4gYS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi50b0xvd2VyQ2FzZSgpKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsUmVkaXJlY3RUYWdzID0gT2JqZWN0LmVudHJpZXMocmVkaXJlY3RUZW1wbGF0ZXMpXG4gICAgICAgICAgICAgICAgLmZsYXRNYXAoKFt0YWcsIHJlZGlyZWN0c10pID0+IFt0YWcsIC4uLnJlZGlyZWN0c10pXG4gICAgICAgICAgICAgICAgLm1hcCgodGFnT3JSZWRpcmVjdCkgPT4gKG5ldyBSZWdFeHAoYHt7XFxcXHMqWyR7dGFnT3JSZWRpcmVjdFswXS50b0xvd2VyQ2FzZSgpfSR7dGFnT3JSZWRpcmVjdFswXX1dJHt0YWdPclJlZGlyZWN0LnNsaWNlKDEpfVxcXFxzKihcXFxcfHx9fSlgKS50ZXN0KHBhZ2VDb250ZW50KSA/IHRhZ09yUmVkaXJlY3QgOiBudWxsKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pIGFzIHN0cmluZ1tdO1xuXG4gICAgICAgICAgICBvbGRSZWRpcmVjdFRhZ0RhdGEgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxSZWRpcmVjdFRhZ3NcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgodGFnKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IG5ldyBSZWdFeHAoYHt7XFxcXHMqWyR7dGFnWzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdbMF19XSR7dGFnLnNsaWNlKDEpfVxcXFx8PyguKj8pXFxcXHMqfX1gKS5leGVjKHBhZ2VDb250ZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VGFnID0gT2JqZWN0LmVudHJpZXMocmVkaXJlY3RUZW1wbGF0ZXMpLmZpbmQoKFt0ZW1wbGF0ZSwgcmVkaXJlY3RzXSkgPT4gW3RlbXBsYXRlLCAuLi5yZWRpcmVjdHNdLmluY2x1ZGVzKHRhZykpPy5bMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaCA/IFtuZXdUYWcsIG1hdGNoWzFdXSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbikgYXMgW3N0cmluZywgc3RyaW5nXVtdLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG9sZFN0cmF5VGV4dCA9IFtcbiAgICAgICAgICAgICAgICBwYWdlQ29udGVudC5tYXRjaCgve3tzaG9ydCBkZXNjcmlwdGlvblxcfC4qP319L2kpPy5bMF0sXG4gICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQubWF0Y2goL3t7RElTUExBWVRJVExFOi4qP319Lyk/LlswXSxcbiAgICAgICAgICAgICAgICBwYWdlQ29udGVudC5tYXRjaCgve3tpdGFsaWMgdGl0bGVcXHw/Lio/fX0vaSk/LlswXSxcbiAgICAgICAgICAgICAgICBwYWdlQ29udGVudC5tYXRjaCgve3tERUZBVUxUU09SVDouKj99fS8pPy5bMF0sXG4gICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQubWF0Y2goL3t7dGl0bGUgbGFuZ3VhZ2VcXHwuKj99fS8pPy5bMF0sXG4gICAgICAgICAgICAgICAgLi4uKHBhZ2VDb250ZW50Lm1hdGNoKC9cXFtcXFtbQ2NdYXRlZ29yeTouKz9dXS9nKSA/PyBbXSksXG4gICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKTtcblxuICAgICAgICAgICAgaWYgKG9sZFJlZGlyZWN0VGFyZ2V0KSByZWRpcmVjdElucHV0LnNldFZhbHVlKG9sZFJlZGlyZWN0VGFyZ2V0LnJlcGxhY2VBbGwoJ18nLCAnICcpKTtcbiAgICAgICAgICAgIGVsc2UgbXcubm90aWZ5KCdDb3VsZCBub3QgZmluZCByZWRpcmVjdCB0YXJnZXQhJywgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgdGFnU2VsZWN0LnNldFZhbHVlKG9sZFJlZGlyZWN0VGFncyk7XG5cbiAgICAgICAgICAgIHVwZGF0ZVN1bW1hcnkoKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQTBCQSxHQUFHLE9BQU8sTUFBTSxDQUFDLGtCQUFrQixnQkFBZ0IsbUJBQW1CLGdDQUFnQyxtQ0FBbUMsR0FBRyxZQUFZO0FBQ3BKLE1BQUksR0FBRyxPQUFPLElBQUksbUJBQW1CLElBQUk7QUFBRztBQUM1QyxNQUFJLENBQUMsR0FBRyxPQUFPLElBQUksc0JBQXNCO0FBQUc7QUFDNUMsTUFBSSxHQUFHLE9BQU8sSUFBSSxVQUFVLE1BQU0sVUFBVSxDQUFDLEdBQUcsT0FBTyxJQUFJLGFBQWE7QUFBRztBQUUzRSxNQUFJLEdBQUcsS0FBSyxjQUFjLE9BQU8sS0FBSyxHQUFHLE9BQU8sSUFBSSxhQUFhO0FBQUc7QUFFcEUsUUFBTSxjQUFjLFNBQVMsY0FBYyxrQkFBa0I7QUFFN0QsTUFBSSxDQUFDO0FBQWEsV0FBTyxHQUFHLE9BQU8sd0NBQXdDLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFNUYsUUFBTSxvQkFBb0IsS0FBSztBQUFBLEtBRXRCLE1BQU0sSUFBSSxHQUFHLElBQUksRUFBRSxJQUFJO0FBQUEsTUFDcEIsUUFBUTtBQUFBLE1BQ1IsZUFBZTtBQUFBLE1BQ2YsTUFBTTtBQUFBLE1BQ04sUUFBUTtBQUFBLE1BQ1IsU0FBUztBQUFBLE1BQ1QsUUFBUTtBQUFBLElBQ1osQ0FBQyxHQUNILE1BQU0sUUFBUSxDQUFDLEdBQUcsWUFBWSxDQUFDLEdBQUcsT0FBTyxNQUFNLFdBQVc7QUFBQSxFQUNoRTtBQUVBLFFBQU0sWUFBWSxHQUFHLE9BQU8s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QUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxJQUFJO0FBQUEsUUFDeEMsQ0FBQyxFQUNBLE9BQU8sT0FBTztBQUFBLE1BQ3ZCO0FBQ0EscUJBQWU7QUFBQSxRQUNYLFlBQVksTUFBTSw2QkFBNkIsSUFBSSxDQUFDO0FBQUEsUUFDcEQsWUFBWSxNQUFNLHNCQUFzQixJQUFJLENBQUM7QUFBQSxRQUM3QyxZQUFZLE1BQU0seUJBQXlCLElBQUksQ0FBQztBQUFBLFFBQ2hELFlBQVksTUFBTSxxQkFBcUIsSUFBSSxDQUFDO0FBQUEsUUFDNUMsWUFBWSxNQUFNLHlCQUF5QixJQUFJLENBQUM7QUFBQSxRQUNoRCxHQUFJLFlBQVksTUFBTSx3QkFBd0IsS0FBSyxDQUFDO0FBQUEsTUFDeEQsRUFDSyxPQUFPLE9BQU8sRUFDZCxLQUFLLElBQUk7QUFFZCxVQUFJO0FBQW1CLHNCQUFjLFNBQVMsa0JBQWtCLFdBQVcsS0FBSyxHQUFHLENBQUM7QUFBQTtBQUMvRSxXQUFHLE9BQU8sbUNBQW1DLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbkUsZ0JBQVUsU0FBUyxlQUFlO0FBRWxDLG9CQUFjO0FBQUEsSUFDbEI7QUFBQSxFQUNKO0FBQ0osQ0FBQzsiLAogICJuYW1lcyI6IFsiZGF0YSIsICJlcnJvckNvZGUiLCAiZXJyb3JJbmZvIiwgIm91dHB1dCJdCn0K
