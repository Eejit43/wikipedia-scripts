"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui.styles.icons-content","oojs-ui.styles.icons-editing-core"],()=>{class u extends OO.ui.TextInputWidget{constructor(s,t){super(s);this.getLookupRequest=()=>{const s=this.getValue(),t=$.Deferred();if(!s)t.resolve([]);else if(s.includes("#")){const a=s.split("#")[0];new mw.Api().get({action:"parse",page:a,prop:"sections",redirects:"1"}).catch(()=>null).then(i=>{if(i){const r=i.parse.sections.filter(n=>n.line.toLowerCase().startsWith(s.split("#")[1].toLowerCase()));t.resolve(r.map(n=>({data:`${i.parse.title}#${n.line}`,label:`${i.parse.title}#${n.line}`})))}else t.resolve([])})}else{const a=mw.Title.newFromText(s);new mw.Api().get({action:"query",formatversion:2,gaplimit:20,gapnamespace:a?.getNamespaceId()??0,gapprefix:a?.getMainText()??s,generator:"allpages",prop:"info|pageprops"}).catch(()=>null).then(i=>{i?t.resolve(i.query?.pages?i.query.pages.filter(r=>r.title!==this.pageTitleParsed.toString()).map(r=>({data:r.title,label:new OO.ui.HtmlSnippet(`${r.title}${r.pageprops&&"disambiguation"in r.pageprops?" <i>(disambiguation)</i>":""}${"redirect"in r?" <i>(redirect)</i>":""}`)})):[]):t.resolve([])})}return t.promise({abort(){}})};this.getLookupCacheDataFromResponse=s=>s??[];this.getLookupMenuOptionsFromData=s=>s.map(({data:t,label:a})=>new OO.ui.MenuOptionWidget({data:t,label:a}));OO.ui.mixin.LookupElement.call(this,s),this.pageTitleParsed=t}}Object.assign(u.prototype,OO.ui.mixin.LookupElement.prototype);class g{async run(){if(this.passesPreChecks()){if(this.redirectTemplates=await this.fetchRedirectTemplates(),this.contentText=document.querySelector("#mw-content-text"),!this.contentText)return mw.notify("redirect-helper: Failed to find content text element!",{type:"error"});if(this.pageTitle=mw.config.get("wgPageName"),this.pageTitleParsed=mw.Title.newFromText(this.pageTitle),!this.pageTitleParsed)return mw.notify("redirect-helper: Failed to parse page title!",{type:"error"});await this.checkPageAndLoad()}}passesPreChecks(){return[mw.config.get("wgNamespaceNumber")>=0,mw.config.get("wgIsProbablyEditable"),mw.config.get("wgIsArticle"),mw.config.get("wgAction")==="view",mw.config.get("wgRevisionId")===mw.config.get("wgCurRevisionId"),!mw.config.get("wgDiffOldId")].every(Boolean)}async fetchRedirectTemplates(){return JSON.parse((await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:"User:Eejit43/scripts/redirect-helper.json"})).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content||"{}")}async checkPageAndLoad(){const e=await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitle}),s={redirectTemplates:this.redirectTemplates,contentText:this.contentText,pageTitle:this.pageTitle,pageTitleParsed:this.pageTitleParsed};if(e.query.pages[0].missing){const t=new OO.ui.ButtonWidget({label:"Create redirect",icon:"articleRedirect",flags:["progressive"]});t.$element[0].style.marginBottom="20px",t.on("click",()=>{t.$element[0].remove(),new c(s,!1).load()}),this.contentText.prepend(t.$element[0])}else e.query.pages[0].redirect?new c(s,!0).load():mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Redirect page","redirect-helper").addEventListener("click",a=>{a.preventDefault(),new c(s,!1).load()})}}class c{constructor({redirectTemplates:e,contentText:s,pageTitle:t,pageTitleParsed:a},i){this.needsCheck=!0;this.redirectTemplates=e,this.contentText=s,this.pageTitle=t,this.pageTitleParsed=a,this.exists=i}async load(){this.editorBox=new OO.ui.PanelLayout({padded:!0,expanded:!1,framed:!0}),this.editorBox.$element[0].style.backgroundColor="#95d4bc",this.editorBox.$element[0].style.width="700px",this.editorBox.$element[0].style.maxWidth="calc(100% - 50px)",this.editorBox.$element[0].style.marginLeft="auto",this.editorBox.$element[0].style.marginRight="auto",this.editorBox.$element[0].style.marginBottom="20px",this.pageTitleParsed.isTalkPage()&&(await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].redirect&&this.loadSyncWithMainButton(),this.loadInputElements(),await this.loadSubmitElements(),this.editorBox.$element[0].append(...[this.syncWithMainButton?.$element?.[0],this.redirectInputLayout.$element[0],this.tagSelectLayout.$element[0],this.summaryInputLayout.$element[0],this.submitLayout.$element[0]].filter(Boolean)),this.contentText.prepend(this.editorBox.$element[0]),this.exists&&this.loadExistingData()}async loadSyncWithMainButton(){const e=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.pageTitleParsed.getSubjectPage().getPrefixedText()})).query.pages[0].revisions[0].slots.main.content.trim();this.syncWithMainButton=new OO.ui.ButtonWidget({label:"Sync with main page",icon:"link",flags:["progressive"]}),this.syncWithMainButton.on("click",()=>{const s=/^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(e)?.[1];if(!s)return mw.notify("Failed to parse main page content!",{type:"error"});this.redirectInput.setValue(mw.Title.newFromText(s)?.getTalkPage()?.toString()??""),["R from move",...this.redirectTemplates["R from move"]].some(a=>new RegExp(`{{\\s*[${a[0].toLowerCase()}${a[0]}]${a.slice(1)}\\s*(\\||}})`).test(e))&&this.tagSelect.setValue(["R from move"])})}loadInputElements(){this.redirectInput=new u({placeholder:"Target page name",required:!0},this.pageTitleParsed),this.redirectInput.on("change",()=>{let e=this.redirectInput.getValue();e=e.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/,"")}/wiki/`),""),e=e.replace(/^:/,""),e.length>0?(this.redirectInput.setValue(e[0].toUpperCase()+e.slice(1).replaceAll("_"," ")),this.submitButton.setDisabled(!1)):this.submitButton.setDisabled(!0),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.redirectInputLayout=new OO.ui.FieldLayout(this.redirectInput,{label:new OO.ui.HtmlSnippet("<b>Redirect target:</b>"),align:"top"}),this.tagSelect=new OO.ui.MenuTagMultiselectWidget({allowArbitrary:!1,allowReordering:!1,options:Object.keys(this.redirectTemplates).map(e=>({data:e,label:e}))}),this.tagSelect.getMenu().filterMode="substring",this.tagSelect.on("change",()=>{const e=this.tagSelect.getValue().sort((s,t)=>s.toLowerCase().localeCompare(t.toLowerCase()));this.tagSelect.getValue().join(";")!==e.join(";")&&this.tagSelect.setValue(e),this.updateSummary(),this.submitButton.setLabel("Submit"),this.needsCheck=!0}),this.tagSelectLayout=new OO.ui.FieldLayout(this.tagSelect,{label:new OO.ui.HtmlSnippet("<b>Redirect categorization template(s):</b>"),align:"top"}),this.summaryInput=new OO.ui.ComboBoxInputWidget({options:[{data:"Resolve double redirect"},{data:"Resolve self redirect"},{data:"Remove incorrect rcats"}]}),this.summaryInputLayout=new OO.ui.FieldLayout(this.summaryInput,{label:new OO.ui.HtmlSnippet("<b>Summary:</b>"),align:"top"})}async loadSubmitElements(){this.submitButton=new OO.ui.ButtonWidget({label:"Submit",disabled:!0,flags:["progressive"]}),this.submitButton.$element[0].style.marginBottom="0",this.submitButton.on("click",()=>this.handleSubmitButtonClick()),this.pageTitleParsed.isTalkPage()||(this.talkData=await new mw.Api().get({action:"query",formatversion:2,prop:"info",titles:this.pageTitleParsed.getTalkPage().getPrefixedText()}),this.syncTalkCheckbox=new OO.ui.CheckboxInputWidget({selected:!!this.talkData.query.pages[0].redirect}),this.syncTalkCheckboxLayout=new OO.ui.Widget({content:[new OO.ui.FieldLayout(this.syncTalkCheckbox,{label:"Sync talk page",align:"inline"})]}),this.syncTalkCheckboxLayout.$element[0].style.marginBottom="0"),await this.checkShouldPromptPatrol()&&(this.patrolCheckbox=new OO.ui.CheckboxInputWidget({selected:!0}),this.patrolCheckboxLayout=new OO.ui.Widget({content:[new OO.ui.FieldLayout(this.patrolCheckbox,{label:"Mark as patrolled",align:"inline"})]}),this.patrolCheckboxLayout.$element[0].style.marginBottom="0"),this.submitLayout=new OO.ui.HorizontalLayout({items:[this.submitButton,this.syncTalkCheckboxLayout,this.patrolCheckboxLayout].filter(Boolean)}),this.submitLayout.$element[0].style.marginTop="10px"}async checkShouldPromptPatrol(){const e=document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");if(e?.click(),e?.click(),mw.config.get("wgNamespaceNumber")!==0)return!1;if(document.querySelector(".patrollink"))return!0;if(document.querySelector("#mwe-pt-mark-as-reviewed-button"))return!0;if(document.querySelector("#mwe-pt-mark-as-unreviewed-button"))return!1;{if(!mw.config.get("wgArticleId")||!(await new mw.Api().get({action:"query",meta:"userinfo",uiprop:"rights"})).query.userinfo.rights.includes("patrol"))return!1;const t=await new mw.Api().get({action:"pagetriagelist",page_id:mw.config.get("wgArticleId")});return t.pagetriagelist.pages[0]?.user_name===mw.config.get("wgUserName")||t.pagetriagelist.result!=="success"||t.pagetriagelist.pages.length===0?!1:!Number.parseInt(t.pagetriagelist.pages[0]?.patrol_status)}}updateSummary(){const e=this.redirectInput.getValue().trim();if(!e)this.summaryInput.$tabIndexed[0].placeholder="";else if(this.exists){const s=e!==this.oldRedirectTarget?.replaceAll("_"," "),t=this.tagSelect.getValue().join(";")!==this.oldRedirectTags?.join(";");s&&t?this.summaryInput.$tabIndexed[0].placeholder=`Retarget redirect to [[${e}]] and change categorization templates`:s?this.summaryInput.$tabIndexed[0].placeholder=`Retarget redirect to [[${e}]]`:t?this.summaryInput.$tabIndexed[0].placeholder="Change categorization templates":this.summaryInput.$tabIndexed[0].placeholder="Perform redirect cleanup"}else this.summaryInput.$tabIndexed[0].placeholder=`Create redirect to [[${e}]]`}async loadExistingData(){const e=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.pageTitle})).query.pages[0].revisions[0].slots.main.content.trim();this.oldRedirectTarget=/^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(e)?.[1],this.oldRedirectTags=Object.entries(this.redirectTemplates).map(([t,a])=>[t,...a].some(i=>new RegExp(`{{\\s*[${i[0].toLowerCase()}${i[0]}]${i.slice(1)}\\s*(\\||}})`).test(e))?t:null).filter(Boolean).sort((t,a)=>t.toLowerCase().localeCompare(a.toLowerCase()));const s=Object.entries(this.redirectTemplates).flatMap(([t,a])=>[t,...a]).map(t=>new RegExp(`{{\\s*[${t[0].toLowerCase()}${t[0]}]${t.slice(1)}\\s*(\\||}})`).test(e)?t:null).filter(Boolean);this.oldRedirectTagData=Object.fromEntries(s.map(t=>{const a=new RegExp(`{{\\s*[${t[0].toLowerCase()}${t[0]}]${t.slice(1)}\\|?(.*?)\\s*}}`).exec(e),i=Object.entries(this.redirectTemplates).find(([r,n])=>[r,...n].includes(t))?.[0];return a?[i,a[1]]:null}).filter(Boolean)),this.oldStrayText=[e.match(/{{short description\|.*?}}/i)?.[0],e.match(/{{DISPLAYTITLE:.*?}}/)?.[0],e.match(/{{italic title\|?.*?}}/i)?.[0],e.match(/{{DEFAULTSORT:.*?}}/)?.[0],e.match(/{{title language\|.*?}}/)?.[0],...e.match(/\[\[[Cc]ategory:.+?]]/g)??[]].filter(Boolean).join(`
`),this.oldRedirectTarget?this.redirectInput.setValue(this.oldRedirectTarget.replaceAll("_"," ")):mw.notify("Could not find redirect target!",{type:"error"}),this.tagSelect.setValue(this.oldRedirectTags),this.updateSummary()}async validateSubmission(){const e=[],s=this.redirectInput.getValue().trim();/^\s*[^[\]{|}]+\s*$/.test(s)||e.push({title:s,message:"is not a valid page title!"});try{this.parsedDestination=mw.Title.newFromText(s)}catch{e.length===0&&e.push({title:s,message:"is not a valid page title!"})}!this.parsedDestination&&e.length===0&&e.push({title:s,message:"is not a valid page title!"}),this.parsedDestination?.toString()===this.pageTitleParsed.toString()&&e.push({message:"cannot redirect to itself!"});const t=await new mw.Api().get({action:"query",formatversion:2,prop:"pageprops",titles:s}).catch(i=>(i==="missingtitle"?e.push({title:s,message:"does not exist!"}):e.push({title:s,message:`was not able to be fetched from the API (${i})!`}),null)),a=await new mw.Api().get({action:"parse",page:s,prop:"sections",redirects:"1"});if(a.parse.redirects?.[0]){const i=a.parse.redirects[0].to+(a.parse.redirects[0].tofragment?`#${a.parse.redirects[0].tofragment}`:"");e.push({title:s,message:`is a redirect to <a href="${mw.util.getUrl(i)}" target="_blank">${i}</a>. Retarget to that page instead, as double redirects aren't allowed.`})}if(s.split("#").length>1)if(a.parse.sections.find(r=>r.line===s.split("#")[1]))this.tagSelect.getValue().includes("R to anchor")&&e.push({message:"is tagged as a redirect to an anchor, but it is actually a redirect to a section!"}),this.tagSelect.getValue().includes("R to section")||e.push({message:"is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!"});else{const r=(await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:this.parsedDestination.toString()})).query.pages[0].revisions[0].slots.main.content;[...r.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map(o=>o.split("|").map(l=>l.trim()))?.flat()??[],...r.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(o=>o.split("|").map(l=>l.trim()).filter(l=>!/^text\s*?=/.test(l)))?.flat()??[],...r.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map(o=>o.trim())??[]].includes(s.split("#")[1])?(this.tagSelect.getValue().includes("R to section")&&e.push({message:"is tagged as a redirect to a section, but it is actually a redirect to an anchor!"}),this.tagSelect.getValue().includes("R to anchor")||e.push({message:"is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!"})):e.push({message:`is a redirect to <a href="${mw.util.getUrl(s)}" target="_blank">${s}</a>, but that section or anchor does not exist!`})}s.split("#").length===1&&(this.tagSelect.getValue().includes("R to section")||this.tagSelect.getValue().includes("R to anchor"))&&e.push({message:"is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!"}),t.query.pages[0].pageprops&&"disambiguation"in t.query.pages[0].pageprops&&!["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation","R from incorrect disambiguation","R from other disambiguation"].some(i=>this.tagSelect.getValue().includes(i))&&e.push({message:"is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!"}),t.query.pages[0].pageprops&&!("disambiguation"in t.query.pages[0].pageprops)&&["R from ambiguous sort name","R from ambiguous term","R to disambiguation page","R from incomplete disambiguation"].some(i=>this.tagSelect.getValue().includes(i))&&e.push({message:"is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!"}),this.tagSelect.getValue().includes("R to disambiguation page")&&!this.pageTitleParsed.getMainText().endsWith(" (disambiguation)")&&e.push({message:'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'});for(const i of["R semi-protected","R extended-protected","R template-protected","R fully protected"])this.tagSelect.getValue().includes(i)&&e.push({message:`is tagged with unnecessarily tagged with <code>{{${i}}}</code> which will be duplicated by the redirect category shell!`});return this.syncTalkCheckbox?.isSelected()&&!this.talkData.query.pages[0].missing&&!this.talkData.query.pages[0].redirect&&e.push({title:this.pageTitleParsed.getTalkPage().getPrefixedText(),message:"exists, but is not a redirect!"}),e}async handleSubmitButtonClick(){for(const i of[this.redirectInput,this.tagSelect,this.summaryInput,this.submitButton,this.syncTalkCheckbox,this.patrolCheckbox].filter(Boolean))i.setDisabled(!0);this.submitButton.setLabel("Checking target validity...");let e=[];if(this.needsCheck?e=await this.validateSubmission():this.parsedDestination=mw.Title.newFromText(this.redirectInput.getValue()),e.length>0){for(const i of document.querySelectorAll(".redirect-helper-warning"))i.remove();for(const{title:i,message:r}of e){const n=new OO.ui.HtmlSnippet(`${i?`<a href="${mw.util.getUrl(i)}" target="_blank">${i}</a>`:"This page"} ${r} Click again without making changes to submit anyway.`),o=new OO.ui.MessageWidget({type:"error",classes:["redirect-helper-warning"],inline:!0,label:n});o.$element[0].style.marginTop="8px",this.editorBox.$element[0].append(o.$element[0])}for(const i of[this.redirectInput,this.tagSelect,this.summaryInput,this.submitButton,this.syncTalkCheckbox,this.patrolCheckbox].filter(Boolean))i.setDisabled(!1);this.submitButton.setLabel("Submit anyway"),this.needsCheck=!1;return}this.submitButton.setLabel(`${this.exists?"Editing":"Creating"} redirect...`);const s=[`#REDIRECT [[${this.redirectInput.getValue().trim()}]]`,this.tagSelect.getValue().length>0?`{{Redirect category shell|
${this.tagSelect.getValue().map(i=>`{{${i}${this.oldRedirectTagData?.[i]?`|${this.oldRedirectTagData[i]}`:""}}}`).join(`
`)}
}}`:null,this.oldStrayText].filter(Boolean).join(`

`),t=(this.summaryInput.getValue()||this.summaryInput.$tabIndexed[0].placeholder)+" (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";if(await new mw.Api().edit(this.pageTitle,()=>({text:s,summary:t})).catch((i,r)=>i==="nocreate-missing"?new mw.Api().create(this.pageTitle,{summary:t},s).catch((n,o)=>{mw.notify(`Error creating ${this.pageTitle}: ${o?.error.info??"Unknown error"} (${n})`,{type:"error"})}):(mw.notify(`Error editing or creating ${this.pageTitle}: ${r?.error.info??"Unknown error"} (${i})`,{type:"error"}),null))){if(mw.notify(`Redirect ${this.exists?"edited":"created"} successfully!`,{type:"success"}),this.syncTalkCheckbox?.isSelected()){this.submitButton.setLabel("Editing talk page...");const i=this.tagSelect.getValue().includes("R from move"),r=[`#REDIRECT [[${this.parsedDestination.getTalkPage().getPrefixedText()}]]`,i?`{{Redirect category shell|
{{R from move}}
}}`:null].filter(Boolean).join(`

`),n=this.pageTitleParsed.getTalkPage().getPrefixedText();if(!await new mw.Api().edit(n,()=>({text:r,summary:"Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])"})).catch((l,d)=>l==="nocreate-missing"?new mw.Api().create(n,{summary:"Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])"},r).catch((m,h)=>{mw.notify(`Error creating ${n}: ${h?.error.info??"Unknown error"} (${m})`,{type:"error"})}):(mw.notify(`Error editing or creating ${n}: ${d?.error.info??"Unknown error"} (${l})`,{type:"error"}),null)))return;mw.notify("Talk page synced successfully!",{type:"success"})}if(this.patrolCheckbox?.isSelected()){this.submitButton.setLabel("Patrolling redirect...");const i=document.querySelector(".patrollink a"),r=document.querySelector("#mwe-pt-mark-as-reviewed-button");i?await new mw.Api().postWithToken("patrol",{action:"patrol",rcid:new URL(i.href).searchParams.get("rcid")}).catch((o,l)=>(mw.notify(`Error patrolling ${this.pageTitle} via API: ${l?.error.info??"Unknown error"} (${o})`,{type:"error"}),null))&&mw.notify("Redirect patrolled successfully!",{type:"success"}):r?(r.click(),mw.notify("Redirect patrolled successfully!",{type:"success"})):mw.notify("Page curation toolbar not found, redirect cannot be patrolled!",{type:"error"})}this.submitButton.setLabel("Complete, reloading..."),window.location.href=mw.util.getUrl(this.pageTitle,{redirect:"no"})}}}new g().run()});
//# sourceMappingURL=data:application/json;base64,
