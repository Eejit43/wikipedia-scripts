"use strict";
mw.loader.using(["mediawiki.util", "oojs-ui-core", "oojs-ui-widgets", "oojs-ui.styles.icons-content", "oojs-ui.styles.icons-editing-core"], () => {
  class RedirectInputWidget extends OO.ui.TextInputWidget {
    constructor(config, pageTitleParsed) {
      super(config);
      this.getLookupRequest = () => {
        const value = this.getValue();
        const deferred = $.Deferred();
        if (!value)
          deferred.resolve([]);
        else if (value.includes("#")) {
          const title = value.split("#")[0];
          new mw.Api().get({ action: "parse", page: title, prop: "sections", redirects: "1" }).catch(() => null).then((result) => {
            if (result) {
              const matchedSections = result.parse.sections.filter((section) => section.line.toLowerCase().startsWith(value.split("#")[1].toLowerCase()));
              deferred.resolve(matchedSections.map((section) => ({ data: `${result.parse.title}#${section.line}`, label: `${result.parse.title}#${section.line}` })));
            } else
              deferred.resolve([]);
          });
        } else {
          const parsedTitle = mw.Title.newFromText(value);
          new mw.Api().get({
            action: "query",
            formatversion: 2,
            gaplimit: 20,
            gapnamespace: parsedTitle?.getNamespaceId() ?? 0,
            gapprefix: parsedTitle?.getMainText() ?? value,
            generator: "allpages",
            prop: "info|pageprops"
          }).catch(() => null).then((result) => {
            if (result)
              deferred.resolve(
                result.query?.pages ? result.query.pages.filter((page) => page.title !== this.pageTitleParsed.toString()).map((page) => ({
                  data: page.title,
                  label: new OO.ui.HtmlSnippet(
                    `${page.title}${page.pageprops && "disambiguation" in page.pageprops ? " <i>(disambiguation)</i>" : ""}${"redirect" in page ? " <i>(redirect)</i>" : ""}`
                  )
                })) : []
              );
            else
              deferred.resolve([]);
          });
        }
        return deferred.promise({ abort() {
        } });
      };
      this.getLookupCacheDataFromResponse = (response) => response ?? [];
      this.getLookupMenuOptionsFromData = (data) => data.map(({ data: data2, label }) => new OO.ui.MenuOptionWidget({ data: data2, label }));
      OO.ui.mixin.LookupElement.call(this, config);
      this.pageTitleParsed = pageTitleParsed;
    }
  }
  Object.assign(RedirectInputWidget.prototype, OO.ui.mixin.LookupElement.prototype);
  class RedirectHelper {
    /**
     * Runs the redirect helper.
     */
    async run() {
      if (!this.passesPreChecks())
        return;
      this.redirectTemplates = await this.fetchRedirectTemplates();
      this.contentText = document.querySelector("#mw-content-text");
      if (!this.contentText)
        return mw.notify("redirect-helper: Failed to find content text element!", { type: "error" });
      this.pageTitle = mw.config.get("wgPageName");
      this.pageTitleParsed = mw.Title.newFromText(this.pageTitle);
      if (!this.pageTitleParsed)
        return mw.notify("redirect-helper: Failed to parse page title!", { type: "error" });
      await this.checkPageAndLoad();
    }
    /**
     * Checks if the page passes pre checks.
     */
    passesPreChecks() {
      const conditions = [
        mw.config.get("wgNamespaceNumber") >= 0,
        // Is not virtual namespace
        mw.config.get("wgIsProbablyEditable"),
        // Page is editable
        mw.config.get("wgIsArticle"),
        // Viewing the content of a page
        mw.config.get("wgAction") === "view",
        // Viewing the page (not editing)
        mw.config.get("wgRevisionId") === mw.config.get("wgCurRevisionId"),
        // Viewing the current revision
        !mw.config.get("wgDiffOldId")
        // Not viewing a diff
      ];
      return conditions.every(Boolean);
    }
    /**
     * Fetches the redirect templates.
     */
    async fetchRedirectTemplates() {
      return JSON.parse(
        (await new mw.Api().get({
          action: "query",
          formatversion: 2,
          prop: "revisions",
          rvprop: "content",
          rvslots: "*",
          titles: "User:Eejit43/scripts/redirect-helper.json"
        })).query.pages?.[0]?.revisions?.[0]?.slots?.main?.content || "{}"
      );
    }
    /**
     * Checks a page's status and loads the helper appropriately.
     */
    async checkPageAndLoad() {
      const pageInfo = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info", titles: this.pageTitle });
      const dialogInfo = { redirectTemplates: this.redirectTemplates, contentText: this.contentText, pageTitle: this.pageTitle, pageTitleParsed: this.pageTitleParsed };
      if (pageInfo.query.pages[0].missing) {
        const button = new OO.ui.ButtonWidget({ label: "Create redirect", icon: "articleRedirect", flags: ["progressive"] });
        button.$element[0].style.marginBottom = "20px";
        button.on("click", () => {
          button.$element[0].remove();
          new RedirectHelperDialog(dialogInfo, false).run();
        });
        this.contentText.prepend(button.$element[0]);
      } else if (pageInfo.query.pages[0].redirect)
        new RedirectHelperDialog(dialogInfo, true).run();
      else {
        const portletLink = mw.util.addPortletLink(mw.config.get("skin") === "minerva" ? "p-tb" : "p-cactions", "#", "Redirect page", "redirect-helper");
        portletLink.addEventListener("click", (event) => {
          event.preventDefault();
          new RedirectHelperDialog(dialogInfo, false).run();
        });
      }
    }
  }
  class RedirectHelperDialog {
    constructor({ redirectTemplates, contentText, pageTitle, pageTitleParsed }, exists) {
      this.redirectTemplates = redirectTemplates;
      this.contentText = contentText;
      this.pageTitle = pageTitle;
      this.pageTitleParsed = pageTitleParsed;
      this.exists = exists;
    }
    async run() {
      const editorBox = new OO.ui.PanelLayout({ padded: true, expanded: false, framed: true });
      editorBox.$element[0].style.backgroundColor = "#95d4bc";
      editorBox.$element[0].style.width = "700px";
      editorBox.$element[0].style.maxWidth = "calc(100% - 50px)";
      editorBox.$element[0].style.marginLeft = "auto";
      editorBox.$element[0].style.marginRight = "auto";
      editorBox.$element[0].style.marginBottom = "20px";
      let syncWithMainButton;
      if (this.pageTitleParsed.isTalkPage()) {
        const mainPageData = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info", titles: this.pageTitleParsed.getSubjectPage().getPrefixedText() });
        if (mainPageData.query.pages[0].redirect) {
          const mainPageContent = (await new mw.Api().get({
            action: "query",
            formatversion: 2,
            prop: "revisions",
            rvprop: "content",
            rvslots: "*",
            titles: this.pageTitleParsed.getSubjectPage().getPrefixedText()
          })).query.pages[0].revisions[0].slots.main.content.trim();
          syncWithMainButton = new OO.ui.ButtonWidget({ label: "Sync with main page", icon: "link", flags: ["progressive"] });
          syncWithMainButton.on("click", () => {
            const target = /^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(mainPageContent)?.[1];
            if (!target)
              return mw.notify("Failed to parse main page content!", { type: "error" });
            redirectInput.setValue(mw.Title.newFromText(target)?.getTalkPage()?.toString() ?? "");
            const fromMove = ["R from move", ...this.redirectTemplates["R from move"]].some(
              (tagOrRedirect) => new RegExp(`{{\\s*[${tagOrRedirect[0].toLowerCase()}${tagOrRedirect[0]}]${tagOrRedirect.slice(1)}\\s*(\\||}})`).test(mainPageContent)
            );
            if (fromMove)
              tagSelect.setValue(["R from move"]);
          });
        }
      }
      const redirectInput = new RedirectInputWidget({ placeholder: "Target page name", required: true }, this.pageTitleParsed);
      redirectInput.on("change", () => {
        let value = redirectInput.getValue();
        value = value.replace(new RegExp(`^(https?:)?/{2}?${mw.config.get("wgServer").replace(/^\/{2}/, "")}/wiki/`), "");
        value = value.replace(/^:/, "");
        if (value.length > 0) {
          redirectInput.setValue(value[0].toUpperCase() + value.slice(1).replaceAll("_", " "));
          submitButton.setDisabled(false);
        } else
          submitButton.setDisabled(true);
        updateSummary(this.exists);
        submitButton.setLabel("Submit");
        needsCheck = true;
      });
      const redirectInputLayout = new OO.ui.FieldLayout(redirectInput, { label: new OO.ui.HtmlSnippet("<b>Redirect target:</b>"), align: "top" });
      const tagSelect = new OO.ui.MenuTagMultiselectWidget({
        allowArbitrary: false,
        allowReordering: false,
        options: Object.keys(this.redirectTemplates).map((tag) => ({ data: tag, label: tag }))
      });
      tagSelect.getMenu().filterMode = "substring";
      tagSelect.on("change", () => {
        const sortedTags = tagSelect.getValue().sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
        if (tagSelect.getValue().join(";") !== sortedTags.join(";"))
          tagSelect.setValue(sortedTags);
        updateSummary(this.exists);
        submitButton.setLabel("Submit");
        needsCheck = true;
      });
      const tagSelectLayout = new OO.ui.FieldLayout(tagSelect, { label: new OO.ui.HtmlSnippet("<b>Redirect categorization template(s):</b>"), align: "top" });
      const summaryInput = new OO.ui.ComboBoxInputWidget({
        options: [
          { data: "Resolve double redirect" },
          //
          { data: "Resolve self redirect" },
          { data: "Remove incorrect rcats" }
        ]
      });
      const summaryInputLayout = new OO.ui.FieldLayout(summaryInput, { label: new OO.ui.HtmlSnippet("<b>Summary:</b>"), align: "top" });
      const submitButton = new OO.ui.ButtonWidget({ label: "Submit", disabled: true, flags: ["progressive"] });
      submitButton.$element[0].style.marginBottom = "0";
      let needsCheck = true;
      submitButton.on("click", async () => {
        for (const element of [redirectInput, tagSelect, summaryInput, submitButton, syncTalkCheckbox, patrolCheckbox].filter(Boolean))
          element.setDisabled(true);
        submitButton.setLabel("Checking target validity...");
        let parsedDestination;
        const errors = [];
        if (needsCheck) {
          const destination = redirectInput.getValue().trim();
          if (!/^\s*[^[\]{|}]+\s*$/.test(destination))
            errors.push({ title: destination, message: "is not a valid page title!" });
          try {
            parsedDestination = mw.Title.newFromText(destination);
          } catch {
            if (errors.length === 0)
              errors.push({ title: destination, message: "is not a valid page title!" });
          }
          if (!parsedDestination && errors.length === 0)
            errors.push({ title: destination, message: "is not a valid page title!" });
          if (parsedDestination?.toString() === this.pageTitleParsed.toString())
            errors.push({ message: "cannot redirect to itself!" });
          const destinationData = await new mw.Api().get({ action: "query", formatversion: 2, prop: "pageprops", titles: destination }).catch((errorCode) => {
            if (errorCode === "missingtitle")
              errors.push({ title: destination, message: "does not exist!" });
            else
              errors.push({ title: destination, message: `was not able to be fetched from the API (${errorCode})!` });
            return null;
          });
          const destinationParseResult = await new mw.Api().get({ action: "parse", page: destination, prop: "sections", redirects: "1" });
          if (destinationParseResult.parse.redirects?.[0]) {
            const destinationRedirect = destinationParseResult.parse.redirects[0].to + (destinationParseResult.parse.redirects[0].tofragment ? `#${destinationParseResult.parse.redirects[0].tofragment}` : "");
            errors.push({
              title: destination,
              message: `is a redirect to <a href="${mw.util.getUrl(
                destinationRedirect
              )}" target="_blank">${destinationRedirect}</a>. Retarget to that page instead, as double redirects aren't allowed.`
            });
          }
          if (destination.split("#").length > 1) {
            const validSection = destinationParseResult.parse.sections.find((section) => section.line === destination.split("#")[1]);
            if (validSection) {
              if (tagSelect.getValue().includes("R to anchor"))
                errors.push({ message: "is tagged as a redirect to an anchor, but it is actually a redirect to a section!" });
              if (!tagSelect.getValue().includes("R to section"))
                errors.push({ message: "is a redirect to a section, but it is not tagged with <code>{{R to section}}</code>!" });
            } else {
              const destinationContent = (await new mw.Api().get({
                action: "query",
                formatversion: 2,
                prop: "revisions",
                rvprop: "content",
                rvslots: "*",
                titles: parsedDestination.toString()
              })).query.pages[0].revisions[0].slots.main.content;
              const anchors = [
                ...destinationContent.match(/(?<={{\s*?[Aa](?:nchors?|nchor for redirect|nker|NCHOR|nc)\s*?\|).+?(?=}})/g)?.map((anchor) => anchor.split("|").map((part) => part.trim()))?.flat() ?? [],
                ...destinationContent.match(/(?<={{\s*?(?:[Vv](?:isible anchors?|isanc|Anch|anchor|isibleanchor|a)|[Aa](?:nchord|chored|nchor\+)|[Tt]ext anchor)\s*?\|).+?(?=(?<!!|=)}})/g)?.map(
                  (anchor) => anchor.split("|").map((part) => part.trim()).filter((part) => !/^text\s*?=/.test(part))
                )?.flat() ?? [],
                ...destinationContent.match(/(?<=id=)"?.+?(?="|>|\|)/g)?.map((anchor) => anchor.trim()) ?? []
              ];
              if (anchors.includes(destination.split("#")[1])) {
                if (tagSelect.getValue().includes("R to section"))
                  errors.push({ message: "is tagged as a redirect to a section, but it is actually a redirect to an anchor!" });
                if (!tagSelect.getValue().includes("R to anchor"))
                  errors.push({ message: "is a redirect to an anchor, but it is not tagged with <code>{{R from anchor}}</code>!" });
              } else
                errors.push({ message: `is a redirect to <a href="${mw.util.getUrl(destination)}" target="_blank">${destination}</a>, but that section or anchor does not exist!` });
            }
          }
          if (destination.split("#").length === 1 && (tagSelect.getValue().includes("R to section") || tagSelect.getValue().includes("R to anchor")))
            errors.push({ message: "is not a redirect to a section/anchor, but it is tagged with <code>{{R from section}}</code> or <code>{{R from anchor}}</code>!" });
          if (destinationData.query.pages[0].pageprops && "disambiguation" in destinationData.query.pages[0].pageprops && ![
            "R from ambiguous sort name",
            "R from ambiguous term",
            "R to disambiguation page",
            "R from incomplete disambiguation",
            "R from incorrect disambiguation",
            "R from other disambiguation"
          ].some((template) => tagSelect.getValue().includes(template)))
            errors.push({ message: "is a redirect to a disambiguation page, but it is not tagged with a disambiguation categorization template!" });
          if (destinationData.query.pages[0].pageprops && !("disambiguation" in destinationData.query.pages[0].pageprops) && ["R from ambiguous sort name", "R from ambiguous term", "R to disambiguation page", "R from incomplete disambiguation"].some(
            (template) => tagSelect.getValue().includes(template)
          ))
            errors.push({ message: "is not a redirect to a disambiguation page, but it is tagged with a disambiguation categorization template!" });
          if (tagSelect.getValue().includes("R to disambiguation page") && !this.pageTitleParsed.getMainText().endsWith(" (disambiguation)"))
            errors.push({
              message: 'is tagged with <code>{{R to disambiguation page}}</code>, but this title does not end with " (disambiguation)". Use <code>{{R from ambiguous term}}</code> or a similar categorization template instead!'
            });
          if (syncTalkCheckbox?.isSelected() && !talkData.query.pages[0].missing && !talkData.query.pages[0].redirect)
            errors.push({ title: this.pageTitleParsed.getTalkPage().getPrefixedText(), message: "exists, but is not a redirect!" });
        }
        if (errors.length > 0) {
          for (const element of document.querySelectorAll(".redirect-helper-warning"))
            element.remove();
          for (const { title, message } of errors) {
            const label = new OO.ui.HtmlSnippet(
              `${title ? `<a href="${mw.util.getUrl(title)}" target="_blank">${title}</a>` : "This page"} ${message} Click again without making changes to submit anyway.`
            );
            const warningMessage = new OO.ui.MessageWidget({ type: "error", classes: ["redirect-helper-warning"], inline: true, label });
            warningMessage.$element[0].style.marginTop = "8px";
            editorBox.$element[0].append(warningMessage.$element[0]);
          }
          for (const element of [redirectInput, tagSelect, summaryInput, submitButton, syncTalkCheckbox, patrolCheckbox].filter(Boolean))
            element.setDisabled(false);
          submitButton.setLabel("Submit anyway");
          needsCheck = false;
          return;
        }
        parsedDestination = mw.Title.newFromText(redirectInput.getValue());
        submitButton.setLabel(`${this.exists ? "Editing" : "Creating"} redirect...`);
        const output = [
          `#REDIRECT [[${redirectInput.getValue().trim()}]]`,
          //
          tagSelect.getValue().length > 0 ? `{{Redirect category shell|
${tagSelect.getValue().map((tag) => `{{${tag}${oldRedirectTagData?.[tag] ? `|${oldRedirectTagData[tag]}` : ""}}}`).join("\n")}
}}` : null,
          oldStrayText
        ].filter(Boolean).join("\n\n");
        const summary = (summaryInput.getValue() || summaryInput.$tabIndexed[0].placeholder) + " (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])";
        const result = await new mw.Api().edit(this.pageTitle, () => ({ text: output, summary })).catch((errorCode, errorInfo) => {
          if (errorCode === "nocreate-missing")
            return new mw.Api().create(this.pageTitle, { summary }, output).catch((errorCode2, errorInfo2) => {
              mw.notify(`Error creating ${this.pageTitle}: ${errorInfo2?.error.info ?? "Unknown error"} (${errorCode2})`, { type: "error" });
            });
          else {
            mw.notify(`Error editing or creating ${this.pageTitle}: ${errorInfo?.error.info ?? "Unknown error"} (${errorCode})`, { type: "error" });
            return null;
          }
        });
        if (!result)
          return;
        mw.notify(`Redirect ${this.exists ? "edited" : "created"} successfully!`, { type: "success" });
        if (syncTalkCheckbox?.isSelected()) {
          submitButton.setLabel("Editing talk page...");
          const fromMove = tagSelect.getValue().includes("R from move");
          const output2 = [
            `#REDIRECT [[${parsedDestination.getTalkPage().getPrefixedText()}]]`,
            //
            fromMove ? "{{Redirect category shell|\n{{R from move}}\n}}" : null
          ].filter(Boolean).join("\n\n");
          const talkPage = this.pageTitleParsed.getTalkPage().getPrefixedText();
          const talkResult = await new mw.Api().edit(talkPage, () => ({ text: output2, summary: "Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])" })).catch((errorCode, errorInfo) => {
            if (errorCode === "nocreate-missing")
              return new mw.Api().create(talkPage, { summary: "Syncing redirect from main page (via [[User:Eejit43/scripts/redirect-helper|redirect-helper]])" }, output2).catch((errorCode2, errorInfo2) => {
                mw.notify(`Error creating ${talkPage}: ${errorInfo2?.error.info ?? "Unknown error"} (${errorCode2})`, { type: "error" });
              });
            else {
              mw.notify(`Error editing or creating ${talkPage}: ${errorInfo?.error.info ?? "Unknown error"} (${errorCode})`, { type: "error" });
              return null;
            }
          });
          if (!talkResult)
            return;
          mw.notify("Talk page synced successfully!", { type: "success" });
        }
        if (patrolCheckbox?.isSelected()) {
          submitButton.setLabel("Patrolling redirect...");
          const patrolLink = document.querySelector(".patrollink a");
          const markReviewedButton = document.querySelector("#mwe-pt-mark-as-reviewed-button");
          if (patrolLink) {
            const patrolResult = await new mw.Api().postWithToken("patrol", { action: "patrol", rcid: new URL(patrolLink.href).searchParams.get("rcid") }).catch((errorCode, errorInfo) => {
              mw.notify(`Error patrolling ${this.pageTitle} via API: ${errorInfo?.error.info ?? "Unknown error"} (${errorCode})`, { type: "error" });
              return null;
            });
            if (patrolResult)
              mw.notify("Redirect patrolled successfully!", { type: "success" });
          } else if (markReviewedButton) {
            markReviewedButton.click();
            mw.notify("Redirect patrolled successfully!", { type: "success" });
          } else
            mw.notify("Page curation toolbar not found, redirect cannot be patrolled!", { type: "error" });
        }
        submitButton.setLabel("Complete, reloading...");
        window.location.href = mw.util.getUrl(this.pageTitle, { redirect: "no" });
      });
      let talkData;
      let syncTalkCheckbox, syncTalkLayout;
      if (!this.pageTitleParsed.isTalkPage()) {
        talkData = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info", titles: this.pageTitleParsed.getTalkPage().getPrefixedText() });
        syncTalkCheckbox = new OO.ui.CheckboxInputWidget({ selected: !!talkData.query.pages[0].redirect });
        syncTalkLayout = new OO.ui.Widget({ content: [new OO.ui.FieldLayout(syncTalkCheckbox, { label: "Sync talk page", align: "inline" })] });
        syncTalkLayout.$element[0].style.marginBottom = "0";
      }
      const markButton = document.querySelector("#mwe-pt-mark .mwe-pt-tool-icon");
      markButton?.click();
      markButton?.click();
      let shouldPromptPatrol;
      if (mw.config.get("wgNamespaceNumber") !== 0)
        shouldPromptPatrol = false;
      else if (document.querySelector(".patrollink"))
        shouldPromptPatrol = true;
      else if (document.querySelector("#mwe-pt-mark-as-reviewed-button"))
        shouldPromptPatrol = true;
      else if (document.querySelector("#mwe-pt-mark-as-unreviewed-button"))
        shouldPromptPatrol = false;
      else {
        if (!mw.config.get("wgArticleId"))
          shouldPromptPatrol = false;
        const userPermissions = await new mw.Api().get({ action: "query", meta: "userinfo", uiprop: "rights" });
        if (!userPermissions.query.userinfo.rights.includes("patrol"))
          shouldPromptPatrol = false;
        const patrolResponse = await new mw.Api().get({ action: "pagetriagelist", page_id: mw.config.get("wgArticleId") });
        if (patrolResponse.pagetriagelist.pages[0]?.user_name === mw.config.get("wgUserName"))
          shouldPromptPatrol = false;
        else if (patrolResponse.pagetriagelist.result !== "success" || patrolResponse.pagetriagelist.pages.length === 0)
          shouldPromptPatrol = false;
        else
          shouldPromptPatrol = !Number.parseInt(patrolResponse.pagetriagelist.pages[0]?.patrol_status);
      }
      let patrolCheckbox, patrolLayout;
      if (shouldPromptPatrol) {
        patrolCheckbox = new OO.ui.CheckboxInputWidget({ selected: true });
        patrolLayout = new OO.ui.Widget({ content: [new OO.ui.FieldLayout(patrolCheckbox, { label: "Mark as patrolled", align: "inline" })] });
        patrolLayout.$element[0].style.marginBottom = "0";
      }
      const submitLayout = new OO.ui.HorizontalLayout({ items: [submitButton, syncTalkLayout, patrolLayout].filter(Boolean) });
      submitLayout.$element[0].style.marginTop = "10px";
      editorBox.$element[0].append(
        ...[syncWithMainButton?.$element?.[0], redirectInputLayout.$element[0], tagSelectLayout.$element[0], summaryInputLayout.$element[0], submitLayout.$element[0]].filter(
          Boolean
        )
      );
      this.contentText.prepend(editorBox.$element[0]);
      function updateSummary(exists) {
        const redirectValue = redirectInput.getValue().trim();
        if (!redirectValue)
          summaryInput.$tabIndexed[0].placeholder = "";
        else if (exists) {
          const targetChanged = redirectValue !== oldRedirectTarget?.replaceAll("_", " ");
          const tagsChanged = tagSelect.getValue().join(";") !== oldRedirectTags?.join(";");
          if (targetChanged && tagsChanged)
            summaryInput.$tabIndexed[0].placeholder = `Changing redirect to [[${redirectValue}]] and changing categorization templates`;
          else if (targetChanged)
            summaryInput.$tabIndexed[0].placeholder = `Changing redirect to [[${redirectValue}]]`;
          else if (tagsChanged)
            summaryInput.$tabIndexed[0].placeholder = "Changing categorization templates";
          else
            summaryInput.$tabIndexed[0].placeholder = "Redirect cleanup";
        } else
          summaryInput.$tabIndexed[0].placeholder = `Creating redirect to [[${redirectValue}]]`;
      }
      let oldRedirectTarget, oldRedirectTags, oldRedirectTagData, oldStrayText;
      if (this.exists) {
        const pageContent = (await new mw.Api().get({ action: "query", formatversion: 2, prop: "revisions", rvprop: "content", rvslots: "*", titles: this.pageTitle })).query.pages[0].revisions[0].slots.main.content.trim();
        oldRedirectTarget = /^#redirect:?\s*\[\[\s*([^[\]{|}]+?)\s*(?:\|[^[\]{|}]+?)?]]\s*/i.exec(pageContent)?.[1];
        oldRedirectTags = Object.entries(this.redirectTemplates).map(
          ([tag, redirects]) => [tag, ...redirects].some(
            (tagOrRedirect) => new RegExp(`{{\\s*[${tagOrRedirect[0].toLowerCase()}${tagOrRedirect[0]}]${tagOrRedirect.slice(1)}\\s*(\\||}})`).test(pageContent)
          ) ? tag : null
        ).filter(Boolean).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
        const originalRedirectTags = Object.entries(this.redirectTemplates).flatMap(([tag, redirects]) => [tag, ...redirects]).map((tagOrRedirect) => new RegExp(`{{\\s*[${tagOrRedirect[0].toLowerCase()}${tagOrRedirect[0]}]${tagOrRedirect.slice(1)}\\s*(\\||}})`).test(pageContent) ? tagOrRedirect : null).filter(Boolean);
        oldRedirectTagData = Object.fromEntries(
          originalRedirectTags.map((tag) => {
            const match = new RegExp(`{{\\s*[${tag[0].toLowerCase()}${tag[0]}]${tag.slice(1)}\\|?(.*?)\\s*}}`).exec(pageContent);
            const newTag = Object.entries(this.redirectTemplates).find(([template, redirects]) => [template, ...redirects].includes(tag))?.[0];
            return match ? [newTag, match[1]] : null;
          }).filter(Boolean)
        );
        oldStrayText = [
          pageContent.match(/{{short description\|.*?}}/i)?.[0],
          pageContent.match(/{{DISPLAYTITLE:.*?}}/)?.[0],
          pageContent.match(/{{italic title\|?.*?}}/i)?.[0],
          pageContent.match(/{{DEFAULTSORT:.*?}}/)?.[0],
          pageContent.match(/{{title language\|.*?}}/)?.[0],
          ...pageContent.match(/\[\[[Cc]ategory:.+?]]/g) ?? []
        ].filter(Boolean).join("\n");
        if (oldRedirectTarget)
          redirectInput.setValue(oldRedirectTarget.replaceAll("_", " "));
        else
          mw.notify("Could not find redirect target!", { type: "error" });
        tagSelect.setValue(oldRedirectTags);
        updateSummary(this.exists);
      }
    }
  }
  new RedirectHelper().run();
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9yZWRpcmVjdC1oZWxwZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IE1lZGlhV2lraURhdGFFcnJvciwgUGFnZVJldmlzaW9uc1Jlc3VsdCB9IGZyb20gJy4uL2dsb2JhbC10eXBlcyc7XG5cbi8vIERlZmluZSB0eXBlc1xuaW50ZXJmYWNlIFBhZ2VJbmZvUmVzdWx0IHtcbiAgICBxdWVyeTogeyBwYWdlczogeyBtaXNzaW5nPzogc3RyaW5nOyByZWRpcmVjdD86IHN0cmluZyB9W10gfTtcbn1cblxuaW50ZXJmYWNlIEFsbFBhZ2VzR2VuZXJhdG9yUmVzdWx0IHtcbiAgICBxdWVyeTogeyBwYWdlczogeyB0aXRsZTogc3RyaW5nOyBwYWdlcHJvcHM6IHsgZGlzYW1iaWd1YXRpb24/OiBzdHJpbmcgfTsgcmVkaXJlY3Q/OiBzdHJpbmcgfVtdIH07XG59XG5cbmludGVyZmFjZSBQYWdlUGFyc2VSZXN1bHQge1xuICAgIHBhcnNlOiB7IHRpdGxlOiBzdHJpbmc7IHJlZGlyZWN0czogeyB0bzogc3RyaW5nOyB0b2ZyYWdtZW50OiBzdHJpbmcgfVtdOyBzZWN0aW9uczogeyBsaW5lOiBzdHJpbmcgfVtdIH07XG59XG5cbmludGVyZmFjZSBQYWdlcHJvcHNSZXN1bHQge1xuICAgIHF1ZXJ5OiB7IHBhZ2VzOiB7IHBhZ2Vwcm9wcz86IHsgZGlzYW1iaWd1YXRpb24/OiBzdHJpbmcgfSB9W10gfTtcbn1cblxuaW50ZXJmYWNlIFVzZXJQZXJtaXNzaW9uc1Jlc3BvbnNlIHtcbiAgICBxdWVyeTogeyB1c2VyaW5mbzogeyByaWdodHM6IHN0cmluZ1tdIH0gfTtcbn1cblxuaW50ZXJmYWNlIFBhZ2VUcmlhZ2VMaXN0UmVzcG9uc2Uge1xuICAgIHBhZ2V0cmlhZ2VsaXN0OiB7IHBhZ2VzOiB7IHVzZXJfbmFtZTogc3RyaW5nOyBwYXRyb2xfc3RhdHVzOiBzdHJpbmcgfVtdOyByZXN1bHQ6IHN0cmluZyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxufVxuXG5tdy5sb2FkZXIudXNpbmcoWydtZWRpYXdpa2kudXRpbCcsICdvb2pzLXVpLWNvcmUnLCAnb29qcy11aS13aWRnZXRzJywgJ29vanMtdWkuc3R5bGVzLmljb25zLWNvbnRlbnQnLCAnb29qcy11aS5zdHlsZXMuaWNvbnMtZWRpdGluZy1jb3JlJ10sICgpID0+IHtcbiAgICAvLyBTZXR1cCBSZWRpcmVjdElucHV0V2lkZ2V0XG4gICAgaW50ZXJmYWNlIFJlZGlyZWN0SW5wdXRXaWRnZXRDb25maWcgZXh0ZW5kcyBPTy51aS5UZXh0SW5wdXRXaWRnZXQuQ29uZmlnT3B0aW9ucywgT08udWkubWl4aW4uTG9va3VwRWxlbWVudC5Db25maWdPcHRpb25zIHt9XG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGlzIGEgdGl0bGUgbG9va3VwIGVsZW1lbnQuXG4gICAgICovXG4gICAgY2xhc3MgUmVkaXJlY3RJbnB1dFdpZGdldCBleHRlbmRzIE9PLnVpLlRleHRJbnB1dFdpZGdldCB7XG4gICAgICAgIHBhZ2VUaXRsZVBhcnNlZDogbXcuVGl0bGU7XG5cbiAgICAgICAgY29uc3RydWN0b3IoY29uZmlnOiBSZWRpcmVjdElucHV0V2lkZ2V0Q29uZmlnLCBwYWdlVGl0bGVQYXJzZWQ6IG13LlRpdGxlKSB7XG4gICAgICAgICAgICBzdXBlcihjb25maWcpO1xuICAgICAgICAgICAgT08udWkubWl4aW4uTG9va3VwRWxlbWVudC5jYWxsKHRoaXMgYXMgdW5rbm93biBhcyBPTy51aS5taXhpbi5Mb29rdXBFbGVtZW50LCBjb25maWcpO1xuXG4gICAgICAgICAgICB0aGlzLnBhZ2VUaXRsZVBhcnNlZCA9IHBhZ2VUaXRsZVBhcnNlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldExvb2t1cFJlcXVlc3QgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuXG4gICAgICAgICAgICBpZiAoIXZhbHVlKSBkZWZlcnJlZC5yZXNvbHZlKFtdKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlLmluY2x1ZGVzKCcjJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IHZhbHVlLnNwbGl0KCcjJylbMF07XG5cbiAgICAgICAgICAgICAgICBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAgICAgLmdldCh7IGFjdGlvbjogJ3BhcnNlJywgcGFnZTogdGl0bGUsIHByb3A6ICdzZWN0aW9ucycsIHJlZGlyZWN0czogJzEnIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBudWxsKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0OiBQYWdlUGFyc2VSZXN1bHQgfCBudWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlZFNlY3Rpb25zID0gcmVzdWx0LnBhcnNlLnNlY3Rpb25zLmZpbHRlcigoc2VjdGlvbikgPT4gc2VjdGlvbi5saW5lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh2YWx1ZS5zcGxpdCgnIycpWzFdLnRvTG93ZXJDYXNlKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG1hdGNoZWRTZWN0aW9ucy5tYXAoKHNlY3Rpb24pID0+ICh7IGRhdGE6IGAke3Jlc3VsdC5wYXJzZS50aXRsZX0jJHtzZWN0aW9uLmxpbmV9YCwgbGFiZWw6IGAke3Jlc3VsdC5wYXJzZS50aXRsZX0jJHtzZWN0aW9uLmxpbmV9YCB9KSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGRlZmVycmVkLnJlc29sdmUoW10pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkVGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgbmV3IG13LkFwaSgpXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhcGxpbWl0OiAyMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhcG5hbWVzcGFjZTogcGFyc2VkVGl0bGU/LmdldE5hbWVzcGFjZUlkKCkgPz8gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhcHByZWZpeDogcGFyc2VkVGl0bGU/LmdldE1haW5UZXh0KCkgPz8gdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0b3I6ICdhbGxwYWdlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wOiAnaW5mb3xwYWdlcHJvcHMnLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdDogQWxsUGFnZXNHZW5lcmF0b3JSZXN1bHQgfCBudWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5xdWVyeT8ucGFnZXMgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzdWx0LnF1ZXJ5LnBhZ2VzIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChwYWdlKSA9PiBwYWdlLnRpdGxlICE9PSB0aGlzLnBhZ2VUaXRsZVBhcnNlZC50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgocGFnZSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBwYWdlLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgT08udWkuSHRtbFNuaXBwZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3BhZ2UudGl0bGV9JHtwYWdlLnBhZ2Vwcm9wcyAmJiAnZGlzYW1iaWd1YXRpb24nIGluIHBhZ2UucGFnZXByb3BzID8gJyA8aT4oZGlzYW1iaWd1YXRpb24pPC9pPicgOiAnJ30keydyZWRpcmVjdCcgaW4gcGFnZSA/ICcgPGk+KHJlZGlyZWN0KTwvaT4nIDogJyd9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGRlZmVycmVkLnJlc29sdmUoW10pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoeyBhYm9ydCgpIHt9IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgICAgICB9O1xuXG4gICAgICAgIGdldExvb2t1cENhY2hlRGF0YUZyb21SZXNwb25zZSA9IDxUPihyZXNwb25zZTogVFtdIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gcmVzcG9uc2UgPz8gW107XG5cbiAgICAgICAgZ2V0TG9va3VwTWVudU9wdGlvbnNGcm9tRGF0YSA9IChkYXRhOiB7IGRhdGE6IHN0cmluZzsgbGFiZWw6IHN0cmluZyB9W10pID0+IGRhdGEubWFwKCh7IGRhdGEsIGxhYmVsIH0pID0+IG5ldyBPTy51aS5NZW51T3B0aW9uV2lkZ2V0KHsgZGF0YSwgbGFiZWwgfSkpO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24oUmVkaXJlY3RJbnB1dFdpZGdldC5wcm90b3R5cGUsIE9PLnVpLm1peGluLkxvb2t1cEVsZW1lbnQucHJvdG90eXBlKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgaGFuZGxlcyB0aGUgZW50aXJlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHJlZGlyZWN0LWhlbHBlciBzY3JpcHQuXG4gICAgICovXG4gICAgY2xhc3MgUmVkaXJlY3RIZWxwZXIge1xuICAgICAgICByZWRpcmVjdFRlbXBsYXRlcyE6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPjtcbiAgICAgICAgY29udGVudFRleHQhOiBIVE1MRGl2RWxlbWVudDtcbiAgICAgICAgcGFnZVRpdGxlITogc3RyaW5nO1xuICAgICAgICBwYWdlVGl0bGVQYXJzZWQhOiBtdy5UaXRsZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUnVucyB0aGUgcmVkaXJlY3QgaGVscGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgYXN5bmMgcnVuKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBhc3Nlc1ByZUNoZWNrcygpKSByZXR1cm47XG5cbiAgICAgICAgICAgIHRoaXMucmVkaXJlY3RUZW1wbGF0ZXMgPSBhd2FpdCB0aGlzLmZldGNoUmVkaXJlY3RUZW1wbGF0ZXMoKTtcblxuICAgICAgICAgICAgdGhpcy5jb250ZW50VGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1jb250ZW50LXRleHQnKSBhcyBIVE1MRGl2RWxlbWVudDtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb250ZW50VGV4dCkgcmV0dXJuIG13Lm5vdGlmeSgncmVkaXJlY3QtaGVscGVyOiBGYWlsZWQgdG8gZmluZCBjb250ZW50IHRleHQgZWxlbWVudCEnLCB7IHR5cGU6ICdlcnJvcicgfSk7XG5cbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlID0gbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpO1xuXG4gICAgICAgICAgICB0aGlzLnBhZ2VUaXRsZVBhcnNlZCA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KHRoaXMucGFnZVRpdGxlKSE7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFnZVRpdGxlUGFyc2VkKSByZXR1cm4gbXcubm90aWZ5KCdyZWRpcmVjdC1oZWxwZXI6IEZhaWxlZCB0byBwYXJzZSBwYWdlIHRpdGxlIScsIHsgdHlwZTogJ2Vycm9yJyB9KTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja1BhZ2VBbmRMb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIGlmIHRoZSBwYWdlIHBhc3NlcyBwcmUgY2hlY2tzLlxuICAgICAgICAgKi9cbiAgICAgICAgcGFzc2VzUHJlQ2hlY2tzKCkge1xuICAgICAgICAgICAgY29uc3QgY29uZGl0aW9ucyA9IFtcbiAgICAgICAgICAgICAgICBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID49IDAsIC8vIElzIG5vdCB2aXJ0dWFsIG5hbWVzcGFjZVxuICAgICAgICAgICAgICAgIG13LmNvbmZpZy5nZXQoJ3dnSXNQcm9iYWJseUVkaXRhYmxlJyksIC8vIFBhZ2UgaXMgZWRpdGFibGVcbiAgICAgICAgICAgICAgICBtdy5jb25maWcuZ2V0KCd3Z0lzQXJ0aWNsZScpLCAvLyBWaWV3aW5nIHRoZSBjb250ZW50IG9mIGEgcGFnZVxuICAgICAgICAgICAgICAgIG13LmNvbmZpZy5nZXQoJ3dnQWN0aW9uJykgPT09ICd2aWV3JywgLy8gVmlld2luZyB0aGUgcGFnZSAobm90IGVkaXRpbmcpXG4gICAgICAgICAgICAgICAgbXcuY29uZmlnLmdldCgnd2dSZXZpc2lvbklkJykgPT09IG13LmNvbmZpZy5nZXQoJ3dnQ3VyUmV2aXNpb25JZCcpLCAvLyBWaWV3aW5nIHRoZSBjdXJyZW50IHJldmlzaW9uXG4gICAgICAgICAgICAgICAgIW13LmNvbmZpZy5nZXQoJ3dnRGlmZk9sZElkJyksIC8vIE5vdCB2aWV3aW5nIGEgZGlmZlxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvbmRpdGlvbnMuZXZlcnkoQm9vbGVhbik7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRmV0Y2hlcyB0aGUgcmVkaXJlY3QgdGVtcGxhdGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgYXN5bmMgZmV0Y2hSZWRpcmVjdFRlbXBsYXRlcygpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnZwcm9wOiAnY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBydnNsb3RzOiAnKicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZXM6ICdVc2VyOkVlaml0NDMvc2NyaXB0cy9yZWRpcmVjdC1oZWxwZXIuanNvbicsXG4gICAgICAgICAgICAgICAgICAgIH0pKSBhcyBQYWdlUmV2aXNpb25zUmVzdWx0XG4gICAgICAgICAgICAgICAgKS5xdWVyeS5wYWdlcz8uWzBdPy5yZXZpc2lvbnM/LlswXT8uc2xvdHM/Lm1haW4/LmNvbnRlbnQgfHwgJ3t9JyxcbiAgICAgICAgICAgICkgYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nW10+O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrcyBhIHBhZ2UncyBzdGF0dXMgYW5kIGxvYWRzIHRoZSBoZWxwZXIgYXBwcm9wcmlhdGVseS5cbiAgICAgICAgICovXG4gICAgICAgIGFzeW5jIGNoZWNrUGFnZUFuZExvYWQoKSB7XG4gICAgICAgICAgICBjb25zdCBwYWdlSW5mbyA9IChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHsgYWN0aW9uOiAncXVlcnknLCBmb3JtYXR2ZXJzaW9uOiAyLCBwcm9wOiAnaW5mbycsIHRpdGxlczogdGhpcy5wYWdlVGl0bGUgfSkpIGFzIFBhZ2VJbmZvUmVzdWx0O1xuXG4gICAgICAgICAgICBjb25zdCBkaWFsb2dJbmZvID0geyByZWRpcmVjdFRlbXBsYXRlczogdGhpcy5yZWRpcmVjdFRlbXBsYXRlcywgY29udGVudFRleHQ6IHRoaXMuY29udGVudFRleHQsIHBhZ2VUaXRsZTogdGhpcy5wYWdlVGl0bGUsIHBhZ2VUaXRsZVBhcnNlZDogdGhpcy5wYWdlVGl0bGVQYXJzZWQgfTtcblxuICAgICAgICAgICAgaWYgKHBhZ2VJbmZvLnF1ZXJ5LnBhZ2VzWzBdLm1pc3NpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b24gPSBuZXcgT08udWkuQnV0dG9uV2lkZ2V0KHsgbGFiZWw6ICdDcmVhdGUgcmVkaXJlY3QnLCBpY29uOiAnYXJ0aWNsZVJlZGlyZWN0JywgZmxhZ3M6IFsncHJvZ3Jlc3NpdmUnXSB9KTtcbiAgICAgICAgICAgICAgICBidXR0b24uJGVsZW1lbnRbMF0uc3R5bGUubWFyZ2luQm90dG9tID0gJzIwcHgnO1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi4kZWxlbWVudFswXS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJlZGlyZWN0SGVscGVyRGlhbG9nKGRpYWxvZ0luZm8sIGZhbHNlKS5ydW4oKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudFRleHQucHJlcGVuZChidXR0b24uJGVsZW1lbnRbMF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYWdlSW5mby5xdWVyeS5wYWdlc1swXS5yZWRpcmVjdCkgbmV3IFJlZGlyZWN0SGVscGVyRGlhbG9nKGRpYWxvZ0luZm8sIHRydWUpLnJ1bigpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9ydGxldExpbmsgPSBtdy51dGlsLmFkZFBvcnRsZXRMaW5rKG13LmNvbmZpZy5nZXQoJ3NraW4nKSA9PT0gJ21pbmVydmEnID8gJ3AtdGInIDogJ3AtY2FjdGlvbnMnLCAnIycsICdSZWRpcmVjdCBwYWdlJywgJ3JlZGlyZWN0LWhlbHBlcicpITtcbiAgICAgICAgICAgICAgICBwb3J0bGV0TGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBuZXcgUmVkaXJlY3RIZWxwZXJEaWFsb2coZGlhbG9nSW5mbywgZmFsc2UpLnJ1bigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xhc3MgUmVkaXJlY3RIZWxwZXJEaWFsb2cge1xuICAgICAgICByZWRpcmVjdFRlbXBsYXRlczogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+O1xuICAgICAgICBjb250ZW50VGV4dDogSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIHBhZ2VUaXRsZTogc3RyaW5nO1xuICAgICAgICBwYWdlVGl0bGVQYXJzZWQ6IG13LlRpdGxlO1xuXG4gICAgICAgIGV4aXN0czogYm9vbGVhbjtcblxuICAgICAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgICAgIHsgcmVkaXJlY3RUZW1wbGF0ZXMsIGNvbnRlbnRUZXh0LCBwYWdlVGl0bGUsIHBhZ2VUaXRsZVBhcnNlZCB9OiB7IHJlZGlyZWN0VGVtcGxhdGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT47IGNvbnRlbnRUZXh0OiBIVE1MRGl2RWxlbWVudDsgcGFnZVRpdGxlOiBzdHJpbmc7IHBhZ2VUaXRsZVBhcnNlZDogbXcuVGl0bGUgfSxcbiAgICAgICAgICAgIGV4aXN0czogYm9vbGVhbixcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnJlZGlyZWN0VGVtcGxhdGVzID0gcmVkaXJlY3RUZW1wbGF0ZXM7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRUZXh0ID0gY29udGVudFRleHQ7XG4gICAgICAgICAgICB0aGlzLnBhZ2VUaXRsZSA9IHBhZ2VUaXRsZTtcbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlUGFyc2VkID0gcGFnZVRpdGxlUGFyc2VkO1xuXG4gICAgICAgICAgICB0aGlzLmV4aXN0cyA9IGV4aXN0cztcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIHJ1bigpIHtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvckJveCA9IG5ldyBPTy51aS5QYW5lbExheW91dCh7IHBhZGRlZDogdHJ1ZSwgZXhwYW5kZWQ6IGZhbHNlLCBmcmFtZWQ6IHRydWUgfSk7XG4gICAgICAgICAgICBlZGl0b3JCb3guJGVsZW1lbnRbMF0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyM5NWQ0YmMnO1xuICAgICAgICAgICAgZWRpdG9yQm94LiRlbGVtZW50WzBdLnN0eWxlLndpZHRoID0gJzcwMHB4JztcbiAgICAgICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5zdHlsZS5tYXhXaWR0aCA9ICdjYWxjKDEwMCUgLSA1MHB4KSc7XG4gICAgICAgICAgICBlZGl0b3JCb3guJGVsZW1lbnRbMF0uc3R5bGUubWFyZ2luTGVmdCA9ICdhdXRvJztcbiAgICAgICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5SaWdodCA9ICdhdXRvJztcbiAgICAgICAgICAgIGVkaXRvckJveC4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMjBweCc7XG5cbiAgICAgICAgICAgIGxldCBzeW5jV2l0aE1haW5CdXR0b247XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBhZ2VUaXRsZVBhcnNlZC5pc1RhbGtQYWdlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYWluUGFnZURhdGEgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3F1ZXJ5JywgZm9ybWF0dmVyc2lvbjogMiwgcHJvcDogJ2luZm8nLCB0aXRsZXM6IHRoaXMucGFnZVRpdGxlUGFyc2VkLmdldFN1YmplY3RQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpIH0pKSBhcyBQYWdlSW5mb1Jlc3VsdDtcblxuICAgICAgICAgICAgICAgIGlmIChtYWluUGFnZURhdGEucXVlcnkucGFnZXNbMF0ucmVkaXJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFpblBhZ2VDb250ZW50ID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR2ZXJzaW9uOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ2c2xvdHM6ICcqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZXM6IHRoaXMucGFnZVRpdGxlUGFyc2VkLmdldFN1YmplY3RQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpIGFzIFBhZ2VSZXZpc2lvbnNSZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgKS5xdWVyeS5wYWdlc1swXS5yZXZpc2lvbnNbMF0uc2xvdHMubWFpbi5jb250ZW50LnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgc3luY1dpdGhNYWluQnV0dG9uID0gbmV3IE9PLnVpLkJ1dHRvbldpZGdldCh7IGxhYmVsOiAnU3luYyB3aXRoIG1haW4gcGFnZScsIGljb246ICdsaW5rJywgZmxhZ3M6IFsncHJvZ3Jlc3NpdmUnXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3luY1dpdGhNYWluQnV0dG9uLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IC9eI3JlZGlyZWN0Oj9cXHMqXFxbXFxbXFxzKihbXltcXF17fH1dKz8pXFxzKig/OlxcfFteW1xcXXt8fV0rPyk/XV1cXHMqL2kuZXhlYyhtYWluUGFnZUNvbnRlbnQpPy5bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldCkgcmV0dXJuIG13Lm5vdGlmeSgnRmFpbGVkIHRvIHBhcnNlIG1haW4gcGFnZSBjb250ZW50IScsIHsgdHlwZTogJ2Vycm9yJyB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RJbnB1dC5zZXRWYWx1ZShtdy5UaXRsZS5uZXdGcm9tVGV4dCh0YXJnZXQpPy5nZXRUYWxrUGFnZSgpPy50b1N0cmluZygpID8/ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb21Nb3ZlID0gWydSIGZyb20gbW92ZScsIC4uLnRoaXMucmVkaXJlY3RUZW1wbGF0ZXNbJ1IgZnJvbSBtb3ZlJ11dLnNvbWUoKHRhZ09yUmVkaXJlY3QpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChge3tcXFxccypbJHt0YWdPclJlZGlyZWN0WzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdPclJlZGlyZWN0WzBdfV0ke3RhZ09yUmVkaXJlY3Quc2xpY2UoMSl9XFxcXHMqKFxcXFx8fH19KWApLnRlc3QobWFpblBhZ2VDb250ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbU1vdmUpIHRhZ1NlbGVjdC5zZXRWYWx1ZShbJ1IgZnJvbSBtb3ZlJ10pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIFJlZGlyZWN0IHRhcmdldCBpbnB1dCAqL1xuICAgICAgICAgICAgY29uc3QgcmVkaXJlY3RJbnB1dCA9IG5ldyBSZWRpcmVjdElucHV0V2lkZ2V0KHsgcGxhY2Vob2xkZXI6ICdUYXJnZXQgcGFnZSBuYW1lJywgcmVxdWlyZWQ6IHRydWUgfSwgdGhpcy5wYWdlVGl0bGVQYXJzZWQpO1xuICAgICAgICAgICAgcmVkaXJlY3RJbnB1dC5vbignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHJlZGlyZWN0SW5wdXQuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChgXihodHRwcz86KT8vezJ9PyR7bXcuY29uZmlnLmdldCgnd2dTZXJ2ZXInKS5yZXBsYWNlKC9eXFwvezJ9LywgJycpfS93aWtpL2ApLCAnJyk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eOi8sICcnKTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0SW5wdXQuc2V0VmFsdWUodmFsdWVbMF0udG9VcHBlckNhc2UoKSArIHZhbHVlLnNsaWNlKDEpLnJlcGxhY2VBbGwoJ18nLCAnICcpKTtcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldERpc2FibGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Ugc3VibWl0QnV0dG9uLnNldERpc2FibGVkKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgdXBkYXRlU3VtbWFyeSh0aGlzLmV4aXN0cyk7XG4gICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldExhYmVsKCdTdWJtaXQnKTtcbiAgICAgICAgICAgICAgICBuZWVkc0NoZWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCByZWRpcmVjdElucHV0TGF5b3V0ID0gbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHJlZGlyZWN0SW5wdXQsIHsgbGFiZWw6IG5ldyBPTy51aS5IdG1sU25pcHBldCgnPGI+UmVkaXJlY3QgdGFyZ2V0OjwvYj4nKSwgYWxpZ246ICd0b3AnIH0pO1xuXG4gICAgICAgICAgICAvKiBSZWRpcmVjdCBjYXRlZ29yaXphdGlvbiB0ZW1wbGF0ZSBzZWxlY3Rpb24gKi9cbiAgICAgICAgICAgIGNvbnN0IHRhZ1NlbGVjdCA9IG5ldyBPTy51aS5NZW51VGFnTXVsdGlzZWxlY3RXaWRnZXQoe1xuICAgICAgICAgICAgICAgIGFsbG93QXJiaXRyYXJ5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhbGxvd1Jlb3JkZXJpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IE9iamVjdC5rZXlzKHRoaXMucmVkaXJlY3RUZW1wbGF0ZXMpLm1hcCgodGFnKSA9PiAoeyBkYXRhOiB0YWcsIGxhYmVsOiB0YWcgfSkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAodGFnU2VsZWN0LmdldE1lbnUoKSBhcyBPTy51aS5NZW51U2VsZWN0V2lkZ2V0LkNvbmZpZ09wdGlvbnMpLmZpbHRlck1vZGUgPSAnc3Vic3RyaW5nJztcbiAgICAgICAgICAgIHRhZ1NlbGVjdC5vbignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvcnRlZFRhZ3MgPSAodGFnU2VsZWN0LmdldFZhbHVlKCkgYXMgc3RyaW5nW10pLnNvcnQoKGEsIGIpID0+IGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCh0YWdTZWxlY3QuZ2V0VmFsdWUoKSBhcyBzdHJpbmdbXSkuam9pbignOycpICE9PSBzb3J0ZWRUYWdzLmpvaW4oJzsnKSkgdGFnU2VsZWN0LnNldFZhbHVlKHNvcnRlZFRhZ3MpO1xuXG4gICAgICAgICAgICAgICAgdXBkYXRlU3VtbWFyeSh0aGlzLmV4aXN0cyk7XG4gICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldExhYmVsKCdTdWJtaXQnKTtcbiAgICAgICAgICAgICAgICBuZWVkc0NoZWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCB0YWdTZWxlY3RMYXlvdXQgPSBuZXcgT08udWkuRmllbGRMYXlvdXQodGFnU2VsZWN0LCB7IGxhYmVsOiBuZXcgT08udWkuSHRtbFNuaXBwZXQoJzxiPlJlZGlyZWN0IGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlKHMpOjwvYj4nKSwgYWxpZ246ICd0b3AnIH0pO1xuXG4gICAgICAgICAgICAvKiBTdW1tYXJ5IGlucHV0ICovXG4gICAgICAgICAgICBjb25zdCBzdW1tYXJ5SW5wdXQgPSBuZXcgT08udWkuQ29tYm9Cb3hJbnB1dFdpZGdldCh7XG4gICAgICAgICAgICAgICAgb3B0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICB7IGRhdGE6ICdSZXNvbHZlIGRvdWJsZSByZWRpcmVjdCcgfSwgLy9cbiAgICAgICAgICAgICAgICAgICAgeyBkYXRhOiAnUmVzb2x2ZSBzZWxmIHJlZGlyZWN0JyB9LFxuICAgICAgICAgICAgICAgICAgICB7IGRhdGE6ICdSZW1vdmUgaW5jb3JyZWN0IHJjYXRzJyB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3Qgc3VtbWFyeUlucHV0TGF5b3V0ID0gbmV3IE9PLnVpLkZpZWxkTGF5b3V0KHN1bW1hcnlJbnB1dCwgeyBsYWJlbDogbmV3IE9PLnVpLkh0bWxTbmlwcGV0KCc8Yj5TdW1tYXJ5OjwvYj4nKSwgYWxpZ246ICd0b3AnIH0pO1xuXG4gICAgICAgICAgICAvKiBTdWJtaXQgYnV0dG9uICovXG4gICAgICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBuZXcgT08udWkuQnV0dG9uV2lkZ2V0KHsgbGFiZWw6ICdTdWJtaXQnLCBkaXNhYmxlZDogdHJ1ZSwgZmxhZ3M6IFsncHJvZ3Jlc3NpdmUnXSB9KTtcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMCc7XG5cbiAgICAgICAgICAgIGxldCBuZWVkc0NoZWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5vbignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIFtyZWRpcmVjdElucHV0LCB0YWdTZWxlY3QsIHN1bW1hcnlJbnB1dCwgc3VibWl0QnV0dG9uLCBzeW5jVGFsa0NoZWNrYm94LCBwYXRyb2xDaGVja2JveF0uZmlsdGVyKEJvb2xlYW4pKSAoZWxlbWVudCBhcyBPTy51aS5XaWRnZXQpLnNldERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRMYWJlbCgnQ2hlY2tpbmcgdGFyZ2V0IHZhbGlkaXR5Li4uJyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgcGFyc2VkRGVzdGluYXRpb247XG5cbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcblxuICAgICAgICAgICAgICAgIC8qIFRpdGxlIHZhbGlkYXRpb24gKi9cbiAgICAgICAgICAgICAgICBpZiAobmVlZHNDaGVjaykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IHJlZGlyZWN0SW5wdXQuZ2V0VmFsdWUoKS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLyogSW52YWxpZCBjaGFyYWN0ZXJzICovXG4gICAgICAgICAgICAgICAgICAgIGlmICghL15cXHMqW15bXFxde3x9XStcXHMqJC8udGVzdChkZXN0aW5hdGlvbikpIGVycm9ycy5wdXNoKHsgdGl0bGU6IGRlc3RpbmF0aW9uLCBtZXNzYWdlOiAnaXMgbm90IGEgdmFsaWQgcGFnZSB0aXRsZSEnIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qIEZhaWxlZCBkdXJpbmcgdGl0bGUgcGFyc2luZyAqL1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGVzdGluYXRpb24gPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChkZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPT09IDApIGVycm9ycy5wdXNoKHsgdGl0bGU6IGRlc3RpbmF0aW9uLCBtZXNzYWdlOiAnaXMgbm90IGEgdmFsaWQgcGFnZSB0aXRsZSEnIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyc2VkRGVzdGluYXRpb24gJiYgZXJyb3JzLmxlbmd0aCA9PT0gMCkgZXJyb3JzLnB1c2goeyB0aXRsZTogZGVzdGluYXRpb24sIG1lc3NhZ2U6ICdpcyBub3QgYSB2YWxpZCBwYWdlIHRpdGxlIScgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLyogU2VsZiByZWRpcmVjdHMgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZERlc3RpbmF0aW9uPy50b1N0cmluZygpID09PSB0aGlzLnBhZ2VUaXRsZVBhcnNlZC50b1N0cmluZygpKSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdjYW5ub3QgcmVkaXJlY3QgdG8gaXRzZWxmIScgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb25EYXRhID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIGZvcm1hdHZlcnNpb246IDIsIHByb3A6ICdwYWdlcHJvcHMnLCB0aXRsZXM6IGRlc3RpbmF0aW9uIH0pLmNhdGNoKChlcnJvckNvZGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9uLWV4aXN0ZW50IGRlc3RpbmF0aW9uICovIGlmIChlcnJvckNvZGUgPT09ICdtaXNzaW5ndGl0bGUnKSBlcnJvcnMucHVzaCh7IHRpdGxlOiBkZXN0aW5hdGlvbiwgbWVzc2FnZTogJ2RvZXMgbm90IGV4aXN0IScgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBPdGhlciBBUEkgZXJyb3IgKi8gZWxzZSBlcnJvcnMucHVzaCh7IHRpdGxlOiBkZXN0aW5hdGlvbiwgbWVzc2FnZTogYHdhcyBub3QgYWJsZSB0byBiZSBmZXRjaGVkIGZyb20gdGhlIEFQSSAoJHtlcnJvckNvZGV9KSFgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0pKSBhcyBQYWdlcHJvcHNSZXN1bHQgfCBudWxsO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBhcnNlUmVzdWx0ID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdwYXJzZScsIHBhZ2U6IGRlc3RpbmF0aW9uLCBwcm9wOiAnc2VjdGlvbnMnLCByZWRpcmVjdHM6ICcxJyB9KSkgYXMgUGFnZVBhcnNlUmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qIERvdWJsZSByZWRpcmVjdHMgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uUGFyc2VSZXN1bHQucGFyc2UucmVkaXJlY3RzPy5bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUmVkaXJlY3QgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uUGFyc2VSZXN1bHQucGFyc2UucmVkaXJlY3RzWzBdLnRvICsgKGRlc3RpbmF0aW9uUGFyc2VSZXN1bHQucGFyc2UucmVkaXJlY3RzWzBdLnRvZnJhZ21lbnQgPyBgIyR7ZGVzdGluYXRpb25QYXJzZVJlc3VsdC5wYXJzZS5yZWRpcmVjdHNbMF0udG9mcmFnbWVudH1gIDogJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkZXN0aW5hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgaXMgYSByZWRpcmVjdCB0byA8YSBocmVmPVwiJHttdy51dGlsLmdldFVybChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25SZWRpcmVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGVzdGluYXRpb25SZWRpcmVjdH08L2E+LiBSZXRhcmdldCB0byB0aGF0IHBhZ2UgaW5zdGVhZCwgYXMgZG91YmxlIHJlZGlyZWN0cyBhcmVuJ3QgYWxsb3dlZC5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvKiBOb24tZXhpc3RlbnQgc2VjdGlvbiAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdGluYXRpb24uc3BsaXQoJyMnKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZFNlY3Rpb24gPSBkZXN0aW5hdGlvblBhcnNlUmVzdWx0LnBhcnNlLnNlY3Rpb25zLmZpbmQoKHNlY3Rpb24pID0+IHNlY3Rpb24ubGluZSA9PT0gZGVzdGluYXRpb24uc3BsaXQoJyMnKVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRTZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIGFuY2hvcicpKSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyB0YWdnZWQgYXMgYSByZWRpcmVjdCB0byBhbiBhbmNob3IsIGJ1dCBpdCBpcyBhY3R1YWxseSBhIHJlZGlyZWN0IHRvIGEgc2VjdGlvbiEnIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgdG8gc2VjdGlvbicpKSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyBhIHJlZGlyZWN0IHRvIGEgc2VjdGlvbiwgYnV0IGl0IGlzIG5vdCB0YWdnZWQgd2l0aCA8Y29kZT57e1IgdG8gc2VjdGlvbn19PC9jb2RlPiEnIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvbkNvbnRlbnQgPSAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHZlcnNpb246IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wOiAncmV2aXNpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnZzbG90czogJyonLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVzOiBwYXJzZWREZXN0aW5hdGlvbiEudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpIGFzIFBhZ2VSZXZpc2lvbnNSZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnF1ZXJ5LnBhZ2VzWzBdLnJldmlzaW9uc1swXS5zbG90cy5tYWluLmNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmNob3JzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4oZGVzdGluYXRpb25Db250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWF0Y2goLyg/PD17e1xccyo/W0FhXSg/Om5jaG9ycz98bmNob3IgZm9yIHJlZGlyZWN0fG5rZXJ8TkNIT1J8bmMpXFxzKj9cXHwpLis/KD89fX0pL2cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/Lm1hcCgoYW5jaG9yOiBzdHJpbmcpID0+IGFuY2hvci5zcGxpdCgnfCcpLm1hcCgocGFydCkgPT4gcGFydC50cmltKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5mbGF0KCkgPz8gW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4oZGVzdGluYXRpb25Db250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWF0Y2goLyg/PD17e1xccyo/KD86W1Z2XSg/OmlzaWJsZSBhbmNob3JzP3xpc2FuY3xBbmNofGFuY2hvcnxpc2libGVhbmNob3J8YSl8W0FhXSg/Om5jaG9yZHxjaG9yZWR8bmNob3JcXCspfFtUdF1leHQgYW5jaG9yKVxccyo/XFx8KS4rPyg/PSg/PCEhfD0pfX0pL2cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/Lm1hcCgoYW5jaG9yOiBzdHJpbmcpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnfCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHBhcnQpID0+IHBhcnQudHJpbSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChwYXJ0KSA9PiAhL150ZXh0XFxzKj89Ly50ZXN0KHBhcnQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8uZmxhdCgpID8/IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGRlc3RpbmF0aW9uQ29udGVudC5tYXRjaCgvKD88PWlkPSlcIj8uKz8oPz1cInw+fFxcfCkvZyk/Lm1hcCgoYW5jaG9yOiBzdHJpbmcpID0+IGFuY2hvci50cmltKCkpID8/IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JzLmluY2x1ZGVzKGRlc3RpbmF0aW9uLnNwbGl0KCcjJylbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiB0byBzZWN0aW9uJykpIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2lzIHRhZ2dlZCBhcyBhIHJlZGlyZWN0IHRvIGEgc2VjdGlvbiwgYnV0IGl0IGlzIGFjdHVhbGx5IGEgcmVkaXJlY3QgdG8gYW4gYW5jaG9yIScgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgdG8gYW5jaG9yJykpIGVycm9ycy5wdXNoKHsgbWVzc2FnZTogJ2lzIGEgcmVkaXJlY3QgdG8gYW4gYW5jaG9yLCBidXQgaXQgaXMgbm90IHRhZ2dlZCB3aXRoIDxjb2RlPnt7UiBmcm9tIGFuY2hvcn19PC9jb2RlPiEnIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6IGBpcyBhIHJlZGlyZWN0IHRvIDxhIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKGRlc3RpbmF0aW9uKX1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2Rlc3RpbmF0aW9ufTwvYT4sIGJ1dCB0aGF0IHNlY3Rpb24gb3IgYW5jaG9yIGRvZXMgbm90IGV4aXN0IWAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvKiBJbXByb3Blcmx5IHRhZ2dlZCBhcyByZWRpcmVjdCB0byBzZWN0aW9uL2FuY2hvciAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdGluYXRpb24uc3BsaXQoJyMnKS5sZW5ndGggPT09IDEgJiYgKHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKCdSIHRvIHNlY3Rpb24nKSB8fCB0YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiB0byBhbmNob3InKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IG1lc3NhZ2U6ICdpcyBub3QgYSByZWRpcmVjdCB0byBhIHNlY3Rpb24vYW5jaG9yLCBidXQgaXQgaXMgdGFnZ2VkIHdpdGggPGNvZGU+e3tSIGZyb20gc2VjdGlvbn19PC9jb2RlPiBvciA8Y29kZT57e1IgZnJvbSBhbmNob3J9fTwvY29kZT4hJyB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvKiBSZWRpcmVjdCB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlIHdpdGhvdXQgdGVtcGxhdGUgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25EYXRhIS5xdWVyeS5wYWdlc1swXS5wYWdlcHJvcHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXNhbWJpZ3VhdGlvbicgaW4gZGVzdGluYXRpb25EYXRhIS5xdWVyeS5wYWdlc1swXS5wYWdlcHJvcHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1IgZnJvbSBhbWJpZ3VvdXMgc29ydCBuYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUiBmcm9tIGFtYmlndW91cyB0ZXJtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUiBmcm9tIGluY29tcGxldGUgZGlzYW1iaWd1YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSIGZyb20gaW5jb3JyZWN0IGRpc2FtYmlndWF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUiBmcm9tIG90aGVyIGRpc2FtYmlndWF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0uc29tZSgodGVtcGxhdGUpID0+IHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKHRlbXBsYXRlKSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goeyBtZXNzYWdlOiAnaXMgYSByZWRpcmVjdCB0byBhIGRpc2FtYmlndWF0aW9uIHBhZ2UsIGJ1dCBpdCBpcyBub3QgdGFnZ2VkIHdpdGggYSBkaXNhbWJpZ3VhdGlvbiBjYXRlZ29yaXphdGlvbiB0ZW1wbGF0ZSEnIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qIEltcHJvcGVybHkgdGFnZ2VkIGFzIHJlZGlyZWN0IHRvIGRpc2FtYmlndWF0aW9uIHBhZ2UgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25EYXRhIS5xdWVyeS5wYWdlc1swXS5wYWdlcHJvcHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICEoJ2Rpc2FtYmlndWF0aW9uJyBpbiBkZXN0aW5hdGlvbkRhdGEhLnF1ZXJ5LnBhZ2VzWzBdLnBhZ2Vwcm9wcykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnUiBmcm9tIGFtYmlndW91cyBzb3J0IG5hbWUnLCAnUiBmcm9tIGFtYmlndW91cyB0ZXJtJywgJ1IgdG8gZGlzYW1iaWd1YXRpb24gcGFnZScsICdSIGZyb20gaW5jb21wbGV0ZSBkaXNhbWJpZ3VhdGlvbiddLnNvbWUoKHRlbXBsYXRlKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1NlbGVjdC5nZXRWYWx1ZSgpLmluY2x1ZGVzKHRlbXBsYXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goeyBtZXNzYWdlOiAnaXMgbm90IGEgcmVkaXJlY3QgdG8gYSBkaXNhbWJpZ3VhdGlvbiBwYWdlLCBidXQgaXQgaXMgdGFnZ2VkIHdpdGggYSBkaXNhbWJpZ3VhdGlvbiBjYXRlZ29yaXphdGlvbiB0ZW1wbGF0ZSEnIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qIHt7UiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlfX0gd2l0aG91dCBcIiAoZGlzYW1iaWd1YXRpb24pXCIgYXQgZW5kIG9mIHRpdGxlICovXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWdTZWxlY3QuZ2V0VmFsdWUoKS5pbmNsdWRlcygnUiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlJykgJiYgIXRoaXMucGFnZVRpdGxlUGFyc2VkLmdldE1haW5UZXh0KCkuZW5kc1dpdGgoJyAoZGlzYW1iaWd1YXRpb24pJykpXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzIHRhZ2dlZCB3aXRoIDxjb2RlPnt7UiB0byBkaXNhbWJpZ3VhdGlvbiBwYWdlfX08L2NvZGU+LCBidXQgdGhpcyB0aXRsZSBkb2VzIG5vdCBlbmQgd2l0aCBcIiAoZGlzYW1iaWd1YXRpb24pXCIuIFVzZSA8Y29kZT57e1IgZnJvbSBhbWJpZ3VvdXMgdGVybX19PC9jb2RlPiBvciBhIHNpbWlsYXIgY2F0ZWdvcml6YXRpb24gdGVtcGxhdGUgaW5zdGVhZCEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLyogU3luY2luZyB0YWxrIHBhZ2UgYnV0IHRhbGsgcGFnZSBleGlzdHMgYW5kIGlzbid0IGEgcmVkaXJlY3QgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN5bmNUYWxrQ2hlY2tib3g/LmlzU2VsZWN0ZWQoKSAmJiAhdGFsa0RhdGEhLnF1ZXJ5LnBhZ2VzWzBdLm1pc3NpbmcgJiYgIXRhbGtEYXRhIS5xdWVyeS5wYWdlc1swXS5yZWRpcmVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgdGl0bGU6IHRoaXMucGFnZVRpdGxlUGFyc2VkLmdldFRhbGtQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpLCBtZXNzYWdlOiAnZXhpc3RzLCBidXQgaXMgbm90IGEgcmVkaXJlY3QhJyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yZWRpcmVjdC1oZWxwZXItd2FybmluZycpKSBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHsgdGl0bGUsIG1lc3NhZ2UgfSBvZiBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gbmV3IE9PLnVpLkh0bWxTbmlwcGV0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3RpdGxlID8gYDxhIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKHRpdGxlKX1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke3RpdGxlfTwvYT5gIDogJ1RoaXMgcGFnZSd9ICR7bWVzc2FnZX0gQ2xpY2sgYWdhaW4gd2l0aG91dCBtYWtpbmcgY2hhbmdlcyB0byBzdWJtaXQgYW55d2F5LmAsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2FybmluZ01lc3NhZ2UgPSBuZXcgT08udWkuTWVzc2FnZVdpZGdldCh7IHR5cGU6ICdlcnJvcicsIGNsYXNzZXM6IFsncmVkaXJlY3QtaGVscGVyLXdhcm5pbmcnXSwgaW5saW5lOiB0cnVlLCBsYWJlbCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNZXNzYWdlLiRlbGVtZW50WzBdLnN0eWxlLm1hcmdpblRvcCA9ICc4cHgnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JCb3guJGVsZW1lbnRbMF0uYXBwZW5kKHdhcm5pbmdNZXNzYWdlLiRlbGVtZW50WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbcmVkaXJlY3RJbnB1dCwgdGFnU2VsZWN0LCBzdW1tYXJ5SW5wdXQsIHN1Ym1pdEJ1dHRvbiwgc3luY1RhbGtDaGVja2JveCwgcGF0cm9sQ2hlY2tib3hdLmZpbHRlcihCb29sZWFuKSkgKGVsZW1lbnQgYXMgT08udWkuV2lkZ2V0KS5zZXREaXNhYmxlZChmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldExhYmVsKCdTdWJtaXQgYW55d2F5Jyk7XG4gICAgICAgICAgICAgICAgICAgIG5lZWRzQ2hlY2sgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyc2VkRGVzdGluYXRpb24gPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChyZWRpcmVjdElucHV0LmdldFZhbHVlKCkpO1xuXG4gICAgICAgICAgICAgICAgLyogRWRpdC9jcmVhdGUgcmVkaXJlY3QgKi9cbiAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0TGFiZWwoYCR7dGhpcy5leGlzdHMgPyAnRWRpdGluZycgOiAnQ3JlYXRpbmcnfSByZWRpcmVjdC4uLmApO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gW1xuICAgICAgICAgICAgICAgICAgICBgI1JFRElSRUNUIFtbJHtyZWRpcmVjdElucHV0LmdldFZhbHVlKCkudHJpbSgpfV1dYCwgLy9cbiAgICAgICAgICAgICAgICAgICAgdGFnU2VsZWN0LmdldFZhbHVlKCkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBge3tSZWRpcmVjdCBjYXRlZ29yeSBzaGVsbHxcXG4keyh0YWdTZWxlY3QuZ2V0VmFsdWUoKSBhcyBzdHJpbmdbXSkubWFwKCh0YWcpID0+IGB7eyR7dGFnfSR7b2xkUmVkaXJlY3RUYWdEYXRhPy5bdGFnXSA/IGB8JHtvbGRSZWRpcmVjdFRhZ0RhdGFbdGFnXX1gIDogJyd9fX1gKS5qb2luKCdcXG4nKX1cXG59fWBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgb2xkU3RyYXlUZXh0LFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAgICAgICAgICAgICAuam9pbignXFxuXFxuJyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzdW1tYXJ5ID0gKHN1bW1hcnlJbnB1dC5nZXRWYWx1ZSgpIHx8IChzdW1tYXJ5SW5wdXQuJHRhYkluZGV4ZWRbMF0gYXMgSFRNTElucHV0RWxlbWVudCkucGxhY2Vob2xkZXIpICsgJyAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvcmVkaXJlY3QtaGVscGVyfHJlZGlyZWN0LWhlbHBlcl1dKSc7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAgICAgLmVkaXQodGhpcy5wYWdlVGl0bGUsICgpID0+ICh7IHRleHQ6IG91dHB1dCwgc3VtbWFyeSB9KSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvckNvZGU6IHN0cmluZywgZXJyb3JJbmZvOiBNZWRpYVdpa2lEYXRhRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdub2NyZWF0ZS1taXNzaW5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IG13LkFwaSgpLmNyZWF0ZSh0aGlzLnBhZ2VUaXRsZSwgeyBzdW1tYXJ5IH0sIG91dHB1dCkuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCBlcnJvckluZm86IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEVycm9yIGNyZWF0aW5nICR7dGhpcy5wYWdlVGl0bGV9OiAke2Vycm9ySW5mbz8uZXJyb3IuaW5mbyA/PyAnVW5rbm93biBlcnJvcid9ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBlZGl0aW5nIG9yIGNyZWF0aW5nICR7dGhpcy5wYWdlVGl0bGV9OiAke2Vycm9ySW5mbz8uZXJyb3IuaW5mbyA/PyAnVW5rbm93biBlcnJvcid9ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYFJlZGlyZWN0ICR7dGhpcy5leGlzdHMgPyAnZWRpdGVkJyA6ICdjcmVhdGVkJ30gc3VjY2Vzc2Z1bGx5IWAsIHsgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuXG4gICAgICAgICAgICAgICAgLyogU3luYyB0YWxrIHBhZ2UgY2hlY2tib3ggaGFuZGxlciAqL1xuICAgICAgICAgICAgICAgIGlmIChzeW5jVGFsa0NoZWNrYm94Py5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldExhYmVsKCdFZGl0aW5nIHRhbGsgcGFnZS4uLicpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb21Nb3ZlID0gdGFnU2VsZWN0LmdldFZhbHVlKCkuaW5jbHVkZXMoJ1IgZnJvbSBtb3ZlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgYCNSRURJUkVDVCBbWyR7cGFyc2VkRGVzdGluYXRpb24hLmdldFRhbGtQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpfV1dYCwgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21Nb3ZlID8gJ3t7UmVkaXJlY3QgY2F0ZWdvcnkgc2hlbGx8XFxue3tSIGZyb20gbW92ZX19XFxufX0nIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJ1xcblxcbicpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhbGtQYWdlID0gdGhpcy5wYWdlVGl0bGVQYXJzZWQuZ2V0VGFsa1BhZ2UoKSEuZ2V0UHJlZml4ZWRUZXh0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFsa1Jlc3VsdCA9IGF3YWl0IG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVkaXQodGFsa1BhZ2UsICgpID0+ICh7IHRleHQ6IG91dHB1dCwgc3VtbWFyeTogJ1N5bmNpbmcgcmVkaXJlY3QgZnJvbSBtYWluIHBhZ2UgKHZpYSBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL3JlZGlyZWN0LWhlbHBlcnxyZWRpcmVjdC1oZWxwZXJdXSknIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvckNvZGU6IHN0cmluZywgZXJyb3JJbmZvOiBNZWRpYVdpa2lEYXRhRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDb2RlID09PSAnbm9jcmVhdGUtbWlzc2luZycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jcmVhdGUodGFsa1BhZ2UsIHsgc3VtbWFyeTogJ1N5bmNpbmcgcmVkaXJlY3QgZnJvbSBtYWluIHBhZ2UgKHZpYSBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL3JlZGlyZWN0LWhlbHBlcnxyZWRpcmVjdC1oZWxwZXJdXSknIH0sIG91dHB1dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9ySW5mbzogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBjcmVhdGluZyAke3RhbGtQYWdlfTogJHtlcnJvckluZm8/LmVycm9yLmluZm8gPz8gJ1Vua25vd24gZXJyb3InfSAoJHtlcnJvckNvZGV9KWAsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEVycm9yIGVkaXRpbmcgb3IgY3JlYXRpbmcgJHt0YWxrUGFnZX06ICR7ZXJyb3JJbmZvPy5lcnJvci5pbmZvID8/ICdVbmtub3duIGVycm9yJ30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFsa1Jlc3VsdCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeSgnVGFsayBwYWdlIHN5bmNlZCBzdWNjZXNzZnVsbHkhJywgeyB0eXBlOiAnc3VjY2VzcycgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyogUGF0cm9sIGNoZWNrYm94IGhhbmRsZXIgKi9cbiAgICAgICAgICAgICAgICBpZiAocGF0cm9sQ2hlY2tib3g/LmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0TGFiZWwoJ1BhdHJvbGxpbmcgcmVkaXJlY3QuLi4nKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRyb2xMaW5rOiBIVE1MQW5jaG9yRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGF0cm9sbGluayBhJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtSZXZpZXdlZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtd2UtcHQtbWFyay1hcy1yZXZpZXdlZC1idXR0b24nKSBhcyBIVE1MQnV0dG9uRWxlbWVudCB8IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdHJvbExpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdHJvbFJlc3VsdCA9IGF3YWl0IG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wb3N0V2l0aFRva2VuKCdwYXRyb2wnLCB7IGFjdGlvbjogJ3BhdHJvbCcsIHJjaWQ6IG5ldyBVUkwocGF0cm9sTGluay5ocmVmKS5zZWFyY2hQYXJhbXMuZ2V0KCdyY2lkJykhIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvckNvZGU6IHN0cmluZywgZXJyb3JJbmZvOiBNZWRpYVdpa2lEYXRhRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBwYXRyb2xsaW5nICR7dGhpcy5wYWdlVGl0bGV9IHZpYSBBUEk6ICR7ZXJyb3JJbmZvPy5lcnJvci5pbmZvID8/ICdVbmtub3duIGVycm9yJ30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdHJvbFJlc3VsdCkgbXcubm90aWZ5KCdSZWRpcmVjdCBwYXRyb2xsZWQgc3VjY2Vzc2Z1bGx5IScsIHsgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hcmtSZXZpZXdlZEJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya1Jldmlld2VkQnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoJ1JlZGlyZWN0IHBhdHJvbGxlZCBzdWNjZXNzZnVsbHkhJywgeyB0eXBlOiAnc3VjY2VzcycgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtdy5ub3RpZnkoJ1BhZ2UgY3VyYXRpb24gdG9vbGJhciBub3QgZm91bmQsIHJlZGlyZWN0IGNhbm5vdCBiZSBwYXRyb2xsZWQhJywgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRMYWJlbCgnQ29tcGxldGUsIHJlbG9hZGluZy4uLicpO1xuXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBtdy51dGlsLmdldFVybCh0aGlzLnBhZ2VUaXRsZSwgeyByZWRpcmVjdDogJ25vJyB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgdGFsa0RhdGE6IFBhZ2VJbmZvUmVzdWx0IHwgdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBsZXQgc3luY1RhbGtDaGVja2JveDogT08udWkuQ2hlY2tib3hJbnB1dFdpZGdldCB8IHVuZGVmaW5lZCwgc3luY1RhbGtMYXlvdXQ6IE9PLnVpLldpZGdldCB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYWdlVGl0bGVQYXJzZWQuaXNUYWxrUGFnZSgpKSB7XG4gICAgICAgICAgICAgICAgdGFsa0RhdGEgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3F1ZXJ5JywgZm9ybWF0dmVyc2lvbjogMiwgcHJvcDogJ2luZm8nLCB0aXRsZXM6IHRoaXMucGFnZVRpdGxlUGFyc2VkLmdldFRhbGtQYWdlKCkhLmdldFByZWZpeGVkVGV4dCgpIH0pKSBhcyBQYWdlSW5mb1Jlc3VsdDtcbiAgICAgICAgICAgICAgICBzeW5jVGFsa0NoZWNrYm94ID0gbmV3IE9PLnVpLkNoZWNrYm94SW5wdXRXaWRnZXQoeyBzZWxlY3RlZDogISF0YWxrRGF0YS5xdWVyeS5wYWdlc1swXS5yZWRpcmVjdCB9KTtcblxuICAgICAgICAgICAgICAgIHN5bmNUYWxrTGF5b3V0ID0gbmV3IE9PLnVpLldpZGdldCh7IGNvbnRlbnQ6IFtuZXcgT08udWkuRmllbGRMYXlvdXQoc3luY1RhbGtDaGVja2JveCwgeyBsYWJlbDogJ1N5bmMgdGFsayBwYWdlJywgYWxpZ246ICdpbmxpbmUnIH0pXSB9KTtcbiAgICAgICAgICAgICAgICBzeW5jVGFsa0xheW91dC4kZWxlbWVudFswXS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG1hcmtCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXdlLXB0LW1hcmsgLm13ZS1wdC10b29sLWljb24nKSBhcyBIVE1MSW1hZ2VFbGVtZW50IHwgbnVsbDtcbiAgICAgICAgICAgIG1hcmtCdXR0b24/LmNsaWNrKCk7XG4gICAgICAgICAgICBtYXJrQnV0dG9uPy5jbGljaygpO1xuXG4gICAgICAgICAgICBsZXQgc2hvdWxkUHJvbXB0UGF0cm9sO1xuICAgICAgICAgICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgIT09IDApIHNob3VsZFByb21wdFBhdHJvbCA9IGZhbHNlO1xuICAgICAgICAgICAgZWxzZSBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhdHJvbGxpbmsnKSkgc2hvdWxkUHJvbXB0UGF0cm9sID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtd2UtcHQtbWFyay1hcy1yZXZpZXdlZC1idXR0b24nKSkgc2hvdWxkUHJvbXB0UGF0cm9sID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtd2UtcHQtbWFyay1hcy11bnJldmlld2VkLWJ1dHRvbicpKSBzaG91bGRQcm9tcHRQYXRyb2wgPSBmYWxzZTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghbXcuY29uZmlnLmdldCgnd2dBcnRpY2xlSWQnKSkgc2hvdWxkUHJvbXB0UGF0cm9sID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlclBlcm1pc3Npb25zID0gKGF3YWl0IG5ldyBtdy5BcGkoKS5nZXQoeyBhY3Rpb246ICdxdWVyeScsIG1ldGE6ICd1c2VyaW5mbycsIHVpcHJvcDogJ3JpZ2h0cycgfSkpIGFzIFVzZXJQZXJtaXNzaW9uc1Jlc3BvbnNlO1xuICAgICAgICAgICAgICAgIGlmICghdXNlclBlcm1pc3Npb25zLnF1ZXJ5LnVzZXJpbmZvLnJpZ2h0cy5pbmNsdWRlcygncGF0cm9sJykpIHNob3VsZFByb21wdFBhdHJvbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0cm9sUmVzcG9uc2UgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3BhZ2V0cmlhZ2VsaXN0JywgcGFnZV9pZDogbXcuY29uZmlnLmdldCgnd2dBcnRpY2xlSWQnKSB9KSkgYXMgUGFnZVRyaWFnZUxpc3RSZXNwb25zZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cblxuICAgICAgICAgICAgICAgIGlmIChwYXRyb2xSZXNwb25zZS5wYWdldHJpYWdlbGlzdC5wYWdlc1swXT8udXNlcl9uYW1lID09PSBtdy5jb25maWcuZ2V0KCd3Z1VzZXJOYW1lJykpIHNob3VsZFByb21wdFBhdHJvbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBhdHJvbFJlc3BvbnNlLnBhZ2V0cmlhZ2VsaXN0LnJlc3VsdCAhPT0gJ3N1Y2Nlc3MnIHx8IHBhdHJvbFJlc3BvbnNlLnBhZ2V0cmlhZ2VsaXN0LnBhZ2VzLmxlbmd0aCA9PT0gMCkgc2hvdWxkUHJvbXB0UGF0cm9sID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBzaG91bGRQcm9tcHRQYXRyb2wgPSAhTnVtYmVyLnBhcnNlSW50KHBhdHJvbFJlc3BvbnNlLnBhZ2V0cmlhZ2VsaXN0LnBhZ2VzWzBdPy5wYXRyb2xfc3RhdHVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHBhdHJvbENoZWNrYm94OiBPTy51aS5DaGVja2JveElucHV0V2lkZ2V0IHwgdW5kZWZpbmVkLCBwYXRyb2xMYXlvdXQ6IE9PLnVpLldpZGdldCB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChzaG91bGRQcm9tcHRQYXRyb2wpIHtcbiAgICAgICAgICAgICAgICBwYXRyb2xDaGVja2JveCA9IG5ldyBPTy51aS5DaGVja2JveElucHV0V2lkZ2V0KHsgc2VsZWN0ZWQ6IHRydWUgfSk7XG5cbiAgICAgICAgICAgICAgICBwYXRyb2xMYXlvdXQgPSBuZXcgT08udWkuV2lkZ2V0KHsgY29udGVudDogW25ldyBPTy51aS5GaWVsZExheW91dChwYXRyb2xDaGVja2JveCwgeyBsYWJlbDogJ01hcmsgYXMgcGF0cm9sbGVkJywgYWxpZ246ICdpbmxpbmUnIH0pXSB9KTtcbiAgICAgICAgICAgICAgICBwYXRyb2xMYXlvdXQuJGVsZW1lbnRbMF0uc3R5bGUubWFyZ2luQm90dG9tID0gJzAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzdWJtaXRMYXlvdXQgPSBuZXcgT08udWkuSG9yaXpvbnRhbExheW91dCh7IGl0ZW1zOiBbc3VibWl0QnV0dG9uLCBzeW5jVGFsa0xheW91dCwgcGF0cm9sTGF5b3V0XS5maWx0ZXIoQm9vbGVhbikgYXMgT08udWkuV2lkZ2V0W10gfSk7XG4gICAgICAgICAgICBzdWJtaXRMYXlvdXQuJGVsZW1lbnRbMF0uc3R5bGUubWFyZ2luVG9wID0gJzEwcHgnO1xuXG4gICAgICAgICAgICAvKiBBZGQgZWxlbWVudHMgdG8gc2NyZWVuICovXG4gICAgICAgICAgICBlZGl0b3JCb3guJGVsZW1lbnRbMF0uYXBwZW5kKFxuICAgICAgICAgICAgICAgIC4uLihbc3luY1dpdGhNYWluQnV0dG9uPy4kZWxlbWVudD8uWzBdLCByZWRpcmVjdElucHV0TGF5b3V0LiRlbGVtZW50WzBdLCB0YWdTZWxlY3RMYXlvdXQuJGVsZW1lbnRbMF0sIHN1bW1hcnlJbnB1dExheW91dC4kZWxlbWVudFswXSwgc3VibWl0TGF5b3V0LiRlbGVtZW50WzBdXS5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgIEJvb2xlYW4sXG4gICAgICAgICAgICAgICAgKSBhcyBIVE1MRWxlbWVudFtdKSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuY29udGVudFRleHQucHJlcGVuZChlZGl0b3JCb3guJGVsZW1lbnRbMF0pO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZXMgdGhlIHN1bW1hcnkgaW5wdXQgcGxhY2Vob2xkZXIuXG4gICAgICAgICAgICAgKiBAcGFyYW0gZXhpc3RzIFdoZXRoZXIgdGhlIHJlZGlyZWN0IGFscmVhZHkgZXhpc3RzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVTdW1tYXJ5KGV4aXN0czogYm9vbGVhbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0VmFsdWUgPSByZWRpcmVjdElucHV0LmdldFZhbHVlKCkudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFyZWRpcmVjdFZhbHVlKSAoc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gJyc7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldENoYW5nZWQgPSByZWRpcmVjdFZhbHVlICE9PSBvbGRSZWRpcmVjdFRhcmdldD8ucmVwbGFjZUFsbCgnXycsICcgJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZ3NDaGFuZ2VkID0gdGFnU2VsZWN0LmdldFZhbHVlKCkuam9pbignOycpICE9PSBvbGRSZWRpcmVjdFRhZ3M/LmpvaW4oJzsnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Q2hhbmdlZCAmJiB0YWdzQ2hhbmdlZCkgKHN1bW1hcnlJbnB1dC4kdGFiSW5kZXhlZFswXSBhcyBIVE1MSW5wdXRFbGVtZW50KS5wbGFjZWhvbGRlciA9IGBDaGFuZ2luZyByZWRpcmVjdCB0byBbWyR7cmVkaXJlY3RWYWx1ZX1dXSBhbmQgY2hhbmdpbmcgY2F0ZWdvcml6YXRpb24gdGVtcGxhdGVzYDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGFyZ2V0Q2hhbmdlZCkgKHN1bW1hcnlJbnB1dC4kdGFiSW5kZXhlZFswXSBhcyBIVE1MSW5wdXRFbGVtZW50KS5wbGFjZWhvbGRlciA9IGBDaGFuZ2luZyByZWRpcmVjdCB0byBbWyR7cmVkaXJlY3RWYWx1ZX1dXWA7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRhZ3NDaGFuZ2VkKSAoc3VtbWFyeUlucHV0LiR0YWJJbmRleGVkWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnBsYWNlaG9sZGVyID0gJ0NoYW5naW5nIGNhdGVnb3JpemF0aW9uIHRlbXBsYXRlcyc7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgKHN1bW1hcnlJbnB1dC4kdGFiSW5kZXhlZFswXSBhcyBIVE1MSW5wdXRFbGVtZW50KS5wbGFjZWhvbGRlciA9ICdSZWRpcmVjdCBjbGVhbnVwJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgKHN1bW1hcnlJbnB1dC4kdGFiSW5kZXhlZFswXSBhcyBIVE1MSW5wdXRFbGVtZW50KS5wbGFjZWhvbGRlciA9IGBDcmVhdGluZyByZWRpcmVjdCB0byBbWyR7cmVkaXJlY3RWYWx1ZX1dXWA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIExvYWQgY3VycmVudCB0YXJnZXQgYW5kIHRhZ3MsIGlmIGFwcGxpY2FibGUgKi9cbiAgICAgICAgICAgIGxldCBvbGRSZWRpcmVjdFRhcmdldDogc3RyaW5nIHwgdW5kZWZpbmVkLCBvbGRSZWRpcmVjdFRhZ3M6IHN0cmluZ1tdIHwgdW5kZWZpbmVkLCBvbGRSZWRpcmVjdFRhZ0RhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQsIG9sZFN0cmF5VGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZUNvbnRlbnQgPSAoXG4gICAgICAgICAgICAgICAgICAgIChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHsgYWN0aW9uOiAncXVlcnknLCBmb3JtYXR2ZXJzaW9uOiAyLCBwcm9wOiAncmV2aXNpb25zJywgcnZwcm9wOiAnY29udGVudCcsIHJ2c2xvdHM6ICcqJywgdGl0bGVzOiB0aGlzLnBhZ2VUaXRsZSB9KSkgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdFxuICAgICAgICAgICAgICAgICkucXVlcnkucGFnZXNbMF0ucmV2aXNpb25zWzBdLnNsb3RzLm1haW4uY29udGVudC50cmltKCk7XG5cbiAgICAgICAgICAgICAgICBvbGRSZWRpcmVjdFRhcmdldCA9IC9eI3JlZGlyZWN0Oj9cXHMqXFxbXFxbXFxzKihbXltcXF17fH1dKz8pXFxzKig/OlxcfFteW1xcXXt8fV0rPyk/XV1cXHMqL2kuZXhlYyhwYWdlQ29udGVudCk/LlsxXTtcbiAgICAgICAgICAgICAgICBvbGRSZWRpcmVjdFRhZ3MgPSAoXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMucmVkaXJlY3RUZW1wbGF0ZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKChbdGFnLCByZWRpcmVjdHNdKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0YWcsIC4uLnJlZGlyZWN0c10uc29tZSgodGFnT3JSZWRpcmVjdCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChge3tcXFxccypbJHt0YWdPclJlZGlyZWN0WzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdPclJlZGlyZWN0WzBdfV0ke3RhZ09yUmVkaXJlY3Quc2xpY2UoMSl9XFxcXHMqKFxcXFx8fH19KWApLnRlc3QocGFnZUNvbnRlbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0YWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKSBhcyBzdHJpbmdbXVxuICAgICAgICAgICAgICAgICkuc29ydCgoYSwgYikgPT4gYS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi50b0xvd2VyQ2FzZSgpKSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbFJlZGlyZWN0VGFncyA9IE9iamVjdC5lbnRyaWVzKHRoaXMucmVkaXJlY3RUZW1wbGF0ZXMpXG4gICAgICAgICAgICAgICAgICAgIC5mbGF0TWFwKChbdGFnLCByZWRpcmVjdHNdKSA9PiBbdGFnLCAuLi5yZWRpcmVjdHNdKVxuICAgICAgICAgICAgICAgICAgICAubWFwKCh0YWdPclJlZGlyZWN0KSA9PiAobmV3IFJlZ0V4cChge3tcXFxccypbJHt0YWdPclJlZGlyZWN0WzBdLnRvTG93ZXJDYXNlKCl9JHt0YWdPclJlZGlyZWN0WzBdfV0ke3RhZ09yUmVkaXJlY3Quc2xpY2UoMSl9XFxcXHMqKFxcXFx8fH19KWApLnRlc3QocGFnZUNvbnRlbnQpID8gdGFnT3JSZWRpcmVjdCA6IG51bGwpKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pIGFzIHN0cmluZ1tdO1xuXG4gICAgICAgICAgICAgICAgb2xkUmVkaXJlY3RUYWdEYXRhID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFJlZGlyZWN0VGFnc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgodGFnKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBuZXcgUmVnRXhwKGB7e1xcXFxzKlske3RhZ1swXS50b0xvd2VyQ2FzZSgpfSR7dGFnWzBdfV0ke3RhZy5zbGljZSgxKX1cXFxcfD8oLio/KVxcXFxzKn19YCkuZXhlYyhwYWdlQ29udGVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdUYWcgPSBPYmplY3QuZW50cmllcyh0aGlzLnJlZGlyZWN0VGVtcGxhdGVzKS5maW5kKChbdGVtcGxhdGUsIHJlZGlyZWN0c10pID0+IFt0ZW1wbGF0ZSwgLi4ucmVkaXJlY3RzXS5pbmNsdWRlcyh0YWcpKT8uWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoID8gW25ld1RhZywgbWF0Y2hbMV1dIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pIGFzIFtzdHJpbmcsIHN0cmluZ11bXSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG9sZFN0cmF5VGV4dCA9IFtcbiAgICAgICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQubWF0Y2goL3t7c2hvcnQgZGVzY3JpcHRpb25cXHwuKj99fS9pKT8uWzBdLFxuICAgICAgICAgICAgICAgICAgICBwYWdlQ29udGVudC5tYXRjaCgve3tESVNQTEFZVElUTEU6Lio/fX0vKT8uWzBdLFxuICAgICAgICAgICAgICAgICAgICBwYWdlQ29udGVudC5tYXRjaCgve3tpdGFsaWMgdGl0bGVcXHw/Lio/fX0vaSk/LlswXSxcbiAgICAgICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQubWF0Y2goL3t7REVGQVVMVFNPUlQ6Lio/fX0vKT8uWzBdLFxuICAgICAgICAgICAgICAgICAgICBwYWdlQ29udGVudC5tYXRjaCgve3t0aXRsZSBsYW5ndWFnZVxcfC4qP319Lyk/LlswXSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKHBhZ2VDb250ZW50Lm1hdGNoKC9cXFtcXFtbQ2NdYXRlZ29yeTouKz9dXS9nKSA/PyBbXSksXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKTtcblxuICAgICAgICAgICAgICAgIGlmIChvbGRSZWRpcmVjdFRhcmdldCkgcmVkaXJlY3RJbnB1dC5zZXRWYWx1ZShvbGRSZWRpcmVjdFRhcmdldC5yZXBsYWNlQWxsKCdfJywgJyAnKSk7XG4gICAgICAgICAgICAgICAgZWxzZSBtdy5ub3RpZnkoJ0NvdWxkIG5vdCBmaW5kIHJlZGlyZWN0IHRhcmdldCEnLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgdGFnU2VsZWN0LnNldFZhbHVlKG9sZFJlZGlyZWN0VGFncyk7XG5cbiAgICAgICAgICAgICAgICB1cGRhdGVTdW1tYXJ5KHRoaXMuZXhpc3RzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5ldyBSZWRpcmVjdEhlbHBlcigpLnJ1bigpO1xufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBMkJBLEdBQUcsT0FBTyxNQUFNLENBQUMsa0JBQWtCLGdCQUFnQixtQkFBbUIsZ0NBQWdDLG1DQUFtQyxHQUFHLE1BQU07QUFBQSxFQU85SSxNQUFNLDRCQUE0QixHQUFHLEdBQUcsZ0JBQWdCO0FBQUEsSUFHcEQsWUFBWSxRQUFtQyxpQkFBMkI7QUFDdEUsWUFBTSxNQUFNO0FBTWhCLDhCQUFtQixNQUFNO0FBQ3JCLGNBQU0sUUFBUSxLQUFLLFNBQVM7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QUFRLENBQUMsQ0FBQyxLQUFLLFNBQVMsTUFBTSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsRUFDakQsSUFBSSxDQUFDLGtCQUFtQixJQUFJLE9BQU8sVUFBVSxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxJQUFJLGNBQWMsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLEtBQUssV0FBVyxJQUFJLGdCQUFnQixJQUFLLEVBQ2pMLE9BQU8sT0FBTztBQUVuQiw2QkFBcUIsT0FBTztBQUFBLFVBQ3hCLHFCQUNLLElBQUksQ0FBQyxRQUFRO0FBQ1Ysa0JBQU0sUUFBUSxJQUFJLE9BQU8sVUFBVSxJQUFJLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxXQUFXO0FBRW5ILGtCQUFNLFNBQVMsT0FBTyxRQUFRLEtBQUssaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUMsVUFBVSxTQUFTLE1BQU0sQ0FBQyxVQUFVLEdBQUcsU0FBUyxFQUFFLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQztBQUVqSSxtQkFBTyxRQUFRLENBQUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxJQUFJO0FBQUEsVUFDeEMsQ0FBQyxFQUNBLE9BQU8sT0FBTztBQUFBLFFBQ3ZCO0FBQ0EsdUJBQWU7QUFBQSxVQUNYLFlBQVksTUFBTSw2QkFBNkIsSUFBSSxDQUFDO0FBQUEsVUFDcEQsWUFBWSxNQUFNLHNCQUFzQixJQUFJLENBQUM7QUFBQSxVQUM3QyxZQUFZLE1BQU0seUJBQXlCLElBQUksQ0FBQztBQUFBLFVBQ2hELFlBQVksTUFBTSxxQkFBcUIsSUFBSSxDQUFDO0FBQUEsVUFDNUMsWUFBWSxNQUFNLHlCQUF5QixJQUFJLENBQUM7QUFBQSxVQUNoRCxHQUFJLFlBQVksTUFBTSx3QkFBd0IsS0FBSyxDQUFDO0FBQUEsUUFDeEQsRUFDSyxPQUFPLE9BQU8sRUFDZCxLQUFLLElBQUk7QUFFZCxZQUFJO0FBQW1CLHdCQUFjLFNBQVMsa0JBQWtCLFdBQVcsS0FBSyxHQUFHLENBQUM7QUFBQTtBQUMvRSxhQUFHLE9BQU8sbUNBQW1DLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbkUsa0JBQVUsU0FBUyxlQUFlO0FBRWxDLHNCQUFjLEtBQUssTUFBTTtBQUFBLE1BQzdCO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFFQSxNQUFJLGVBQWUsRUFBRSxJQUFJO0FBQzdCLENBQUM7IiwKICAibmFtZXMiOiBbImRhdGEiLCAiZXJyb3JDb2RlIiwgImVycm9ySW5mbyIsICJvdXRwdXQiXQp9Cg==
