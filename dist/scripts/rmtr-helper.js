// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/rmtr-helper.ts

"use strict";(()=>{mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="Wikipedia:Requested_moves/Technical_requests")return;importStylesheet("User:Eejit43/scripts/rmtr-helper.css");let b=mw.config.get("wgNamespaceIds"),L=!1;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Review move requests","review-rmtr-requests").addEventListener("click",async T=>{if(T.preventDefault(),L)return document.querySelector("#rmtr-review-result")?.scrollIntoView();L=!0;let N=await I(),P=N.revid,k=N.slots.main.content,q=["Uncontroversial technical requests","Requests to revert undiscussed moves","Contested technical requests","Administrator needed"],o={};for(let a of q){let n=k.split(new RegExp(`={3,} ?${a} ?={3,}`))[1].split(/={3,}/m)[0].trim().match(/(?:\* ?\n)?[ *:]*{{rmassist\/core.+?(?=[ *:]*{{rmassist\/core|$)/gis);if(n)o[a]=n.map(i=>{i=i.trim();let c=i,s=i.replaceAll(/(?:\* ?\n)?[ *:]*{{rmassist\/core \||}}.*/gis,"").split(/\s*\|\s*/).map(r=>r.trim()),e=Object.fromEntries(s.map(r=>r.split(" = ").map(l=>l.trim())));return e.full=c,e.original=e[1]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",e.destination=e[2]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",delete e[1],delete e[2],e});else{o[a]=[];continue}}await Promise.all(Object.entries(o).map(async([,a])=>{await Promise.all(a.map(async t=>{let n=mw.Title.newFromText(t.original),i=mw.Title.newFromText(t.destination);if(!n)return mw.notify(`Invalid title "${t.original}"!`,{type:"error"});if(!i)return mw.notify(`Invalid title "${t.destination}"!`,{type:"error"});let c=!/[#<>[\]{|}]/.test(t.destination)&&i,s=document.createElement("span");s.classList.add("rmtr-review-invalid-warning"),s.textContent=`Invalid title "${t.destination}"!`;let e=![b.file,b.category].some(d=>n.getNamespaceId()===d||i.getNamespaceId()===d),r=document.createElement("span");r.classList.add("rmtr-review-invalid-warning"),r.textContent=`Warning: original or destination page is in namespace "${i.getNamespaceId()===b.file?"file":"category"}"!`;let l=await new mw.Api().parse(`[[:${t.original}]] \u2192 ${c?`[[:${t.destination}]]`:s.outerHTML} requested by ${t.requester?mw.util.isIPAddress(t.requester)?`[[Special:Contributions/${t.requester}|${t.requester}]]`:`[[User:${t.requester}|${t.requester}]]`:/(\[{2}Special:Contributions\/(.*?)\|\2]{2})/.exec(t.sig)?.[1]??"(unknown)"} with reasoning "${t.reason}"`),m=new DOMParser().parseFromString(l,"text/html"),w=document.createElement("li");w.innerHTML=m.querySelector("div.mw-parser-output").firstElementChild.innerHTML,e||w.append(r),t.element=w}))}));let v=document.createElement("div");v.id="rmtr-review-result";let x=document.createElement("div");x.id="rmtr-review-header",x.textContent="Technical move requests review",v.append(x);for(let[a,[t,n]]of Object.entries(o).entries()){let i=document.createElement("div");i.classList.add("rmtr-review-header"),i.textContent=t,v.append(i);let c=document.createElement("div");if(c.classList.add("rmtr-review-section-content"),n.length===0){let s=document.createElement("div");s.textContent="No requests in this section",c.append(s)}else{let s=document.createElement("ul");for(let[e,r]of n.entries()){let l=r.element,m=document.createElement("input");m.type="checkbox",m.classList.add("rmtr-review-request-checkbox"),m.id=`rmtr-review-remove-request-${a}-${e}`,m.addEventListener("change",()=>{m.checked?(o[t][e].result={remove:!0,reason:y.value},d.style.display="inline",p.disabled=!0):(delete o[t][e].result,d.style.display="none",p.disabled=!1)});let w=document.createElement("label");w.htmlFor=`rmtr-review-remove-request-${a}-${e}`,w.textContent="Remove request",l.append(m),l.append(w);let d=document.createElement("span");d.style.display="none",d.append(document.createTextNode(" as "));let y=document.createElement("select");t==="Contested technical requests"&&(y.value="Contested"),y.addEventListener("change",()=>{o[t][e].result.reason=y.value});let j=["Completed","Contested","Already done","Invalid page name","Incorrect venue","Withdrawn","Not done"];for(let R of j){let f=document.createElement("option");f.value=R,f.textContent=R,y.append(f)}d.append(y),l.append(d);let p=document.createElement("input");p.type="checkbox",p.classList.add("rmtr-review-request-checkbox"),p.id=`rmtr-review-move-request-${a}-${e}`,p.addEventListener("change",()=>{p.checked?(o[t][e].result={move:!0,section:$.value},u.style.display="inline",m.disabled=!0):(delete o[t][e].result,u.style.display="none",m.disabled=!1)});let C=document.createElement("label");C.htmlFor=`rmtr-review-move-request-${a}-${e}`,C.textContent="Switch section",l.append(p),l.append(C);let u=document.createElement("span");u.style.display="none",u.append(document.createTextNode(" to "));let $=document.createElement("select");$.addEventListener("change",()=>{o[t][e].result.section=$.value});for(let R of q){if(R===t)continue;let f=document.createElement("option");f.value=R,f.textContent=R,$.append(f)}u.append($),u.append(document.createTextNode(" with reasoning "));let E=document.createElement("input");E.type="text",E.addEventListener("input",()=>{o[t][e].result.reason=E.value}),u.append(E),u.append(document.createTextNode(" (optional, automatically pings requestor and signs)")),l.append(u),s.append(l)}c.append(s)}v.append(c)}let g=document.createElement("button");g.id="rmtr-review-submit",g.textContent="Submit",g.addEventListener("click",async()=>{if((await I()).revid!==P)return mw.notify("rmtr-helper: An edit conflict occurred, please start over!",{type:"error"});g.disabled=!0,h.style.display="inline-block";let t=k,n={remove:{},move:{},total:0};for(let s of Object.values(o))for(let e of s)if(e.result){if("remove"in e.result)t=t.replace(e.full+`
`,"").replace(e.full,""),e.result.reason in n.remove||(n.remove[e.result.reason]=[]),n.remove[e.result.reason].push(e),n.total++;else if("move"in e.result){let r=q[q.indexOf(e.result.section)+1];t=t.replace(e.full+`
`,"").replace(e.full,""),t=t.replace(new RegExp(`(
?
?(?:={3,} ?${r} ?={3,}|$))`),`
${e.full}${e.result.reason?`
:: ${e.requester&&e.requester.length>0?mw.util.isIPAddress(e.requester)?"":`@[[User:${e.requester}|${e.requester}]] `:""} ${e.result.reason} ~~~~`:""}$1`),e.result.section in n.move||(n.move[e.result.section]=[]),n.move[e.result.section].push(e),n.total++}}if(n.total===0)return g.disabled=!1,h.style.display="none",mw.notify("No changes to make!",{type:"error"});let i=Object.values(o).every(s=>s.every(e=>e.result&&"remove"in e.result)),c=`Handled ${n.total} request${n.total>1?"s":""}: ${Object.entries(n.remove).length>0?`Removed ${Object.entries(n.remove).map(([s,e])=>`${e.map(r=>`[[${r.original}]]`).join(", ")} as ${s.toLowerCase()}`).join(", ")}`:""}${Object.entries(n.move).length>0?`${Object.entries(n.remove).length>0?", ":""}Moved ${Object.entries(n.move).map(([s,e])=>`${e.map(r=>`[[${r.original}]]`).join(", ")} to "${s}"`).join(", ")}`:""}${i?" (no requests remain)":""} (via [[User:Eejit43/scripts/rmtr-helper|script]])`;await new mw.Api().edit(mw.config.get("wgPageName"),()=>({text:t,summary:c})),mw.notify(`Successfully handled ${n.total} requests, reloading...`,{type:"success"}),window.location.reload()});let h=document.createElement("span");h.id="rmtr-review-loading",h.style.display="none",g.append(h),v.append(g),mw.util.$content[0].prepend(v),v.scrollIntoView()})});async function I(){return(await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:["content","ids"],rvslots:"main",titles:mw.config.get("wgPageName")})).query.pages[0].revisions[0]}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
