// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/rmtr-helper.ts

"use strict";(()=>{mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="Wikipedia:Requested_moves/Technical_requests")return;importStylesheet("User:Eejit43/scripts/rmtr-helper.css");let q=mw.config.get("wgNamespaceIds"),I=!1;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Review move requests","review-rmtr-requests").addEventListener("click",async k=>{if(k.preventDefault(),I)return document.querySelector("#rmtr-review-result")?.scrollIntoView();I=!0;let N=await L(),S=N.revid,P=N.slots.main.content,$=["Uncontroversial technical requests","Requests to revert undiscussed moves","Contested technical requests","Administrator needed"],r={};for(let a of $){let n=P.split(new RegExp(`={3,} ?${a} ?={3,}`))[1].split(/={3,}/m)[0].trim().match(/(?:\* ?\n)?[ *:]*{{rmassist\/core.+?(?=[ *:]*{{rmassist\/core|$)/gis);if(n)r[a]=n.map(o=>{o=o.trim();let c=o,s=o.replaceAll(/(?:\* ?\n)?[ *:]*{{rmassist\/core \||}}.*/gis,"").split(/\s*\|\s*/).map(i=>i.trim()),e=Object.fromEntries(s.map(i=>i.split(" = ").map(l=>l.trim())));return e.full=c,e.original=e[1]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",e.destination=e[2]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",delete e[1],delete e[2],e});else{r[a]=[];continue}}await Promise.all(Object.entries(r).map(async([,a])=>{await Promise.all(a.map(async t=>{let n=mw.Title.newFromText(t.original),o=mw.Title.newFromText(t.destination);if(!n)return mw.notify(`Invalid title "${t.original}"!`,{type:"error"});if(!o)return mw.notify(`Invalid title "${t.destination}"!`,{type:"error"});let c=!/[#<>[\]{|}]/.test(t.destination)&&o,s=document.createElement("span");s.classList.add("rmtr-review-invalid-warning"),s.textContent=`Invalid title "${t.destination}"!`;let e=![q.file,q.category].some(d=>n.getNamespaceId()===d||o.getNamespaceId()===d),i=document.createElement("span");i.classList.add("rmtr-review-invalid-warning"),i.textContent=`Warning: original or destination page is in namespace "${o.getNamespaceId()===q.file?"file":"category"}"!`;let l=await new mw.Api().parse(`[[:${t.original}]] \u2192 ${c?`[[:${t.destination}]]`:s.outerHTML} requested by ${t.requester?mw.util.isIPAddress(t.requester)?`[[Special:Contributions/${t.requester}|${t.requester}]]`:`[[User:${t.requester}|${t.requester}]]`:/(\[{2}Special:Contributions\/(.*?)\|\2]{2})/.exec(t.sig)?.[1]??"(unknown)"} with reasoning "${t.reason}"`),m=new DOMParser().parseFromString(l,"text/html"),w=document.createElement("li");w.innerHTML=m.querySelector("div.mw-parser-output").firstElementChild.innerHTML,e||w.append(i),t.element=w}))}));let v=document.createElement("div");v.id="rmtr-review-result";let x=document.createElement("div");x.id="rmtr-review-header",x.textContent="Technical move requests review",v.append(x);for(let[a,[t,n]]of Object.entries(r).entries()){let o=document.createElement("div");o.classList.add("rmtr-review-header"),o.textContent=t,v.append(o);let c=document.createElement("div");if(c.classList.add("rmtr-review-section-content"),n.length===0){let s=document.createElement("div");s.textContent="No requests in this section",c.append(s)}else{let s=document.createElement("ul");for(let[e,i]of n.entries()){let l=i.element,m=document.createElement("input");m.type="checkbox",m.classList.add("rmtr-review-request-checkbox"),m.id=`rmtr-review-remove-request-${a}-${e}`,m.addEventListener("change",()=>{m.checked?(r[t][e].result={remove:!0,reason:y.value},d.style.display="inline",p.disabled=!0):(delete r[t][e].result,d.style.display="none",p.disabled=!1)});let w=document.createElement("label");w.htmlFor=`rmtr-review-remove-request-${a}-${e}`,w.textContent="Remove request",l.append(m),l.append(w);let d=document.createElement("span");d.style.display="none",d.append(document.createTextNode(" as "));let y=document.createElement("select");t==="Contested technical requests"&&(y.value="Contested"),y.addEventListener("change",()=>{r[t][e].result.reason=y.value});let T=["Completed","Contested","Already done","Invalid page name","Incorrect venue","Withdrawn","Not done"];for(let h of T){let f=document.createElement("option");f.value=h,f.textContent=h,y.append(f)}d.append(y),l.append(d);let p=document.createElement("input");p.type="checkbox",p.classList.add("rmtr-review-request-checkbox"),p.id=`rmtr-review-move-request-${a}-${e}`,p.addEventListener("change",()=>{p.checked?(r[t][e].result={move:!0,section:E.value},u.style.display="inline",m.disabled=!0):(delete r[t][e].result,u.style.display="none",m.disabled=!1)});let C=document.createElement("label");C.htmlFor=`rmtr-review-move-request-${a}-${e}`,C.textContent="Switch section",l.append(p),l.append(C);let u=document.createElement("span");u.style.display="none",u.append(document.createTextNode(" to "));let E=document.createElement("select");E.addEventListener("change",()=>{r[t][e].result.section=E.value});for(let h of $){if(h===t)continue;let f=document.createElement("option");f.value=h,f.textContent=h,E.append(f)}u.append(E),u.append(document.createTextNode(" with reasoning "));let b=document.createElement("input");b.type="text",b.addEventListener("input",()=>{r[t][e].result.reason=b.value}),u.append(b),u.append(document.createTextNode(" (optional, automatically pings requestor and signs)")),l.append(u),s.append(l)}c.append(s)}v.append(c)}let g=document.createElement("button");g.id="rmtr-review-submit",g.textContent="Submit",g.addEventListener("click",async()=>{if((await L()).revid!==S)return mw.notify("rmtr-helper: An edit conflict occurred, please start over!",{type:"error"});g.disabled=!0,R.style.display="inline-block";let t=P,n={remove:{},move:{},total:0};for(let s of Object.values(r))for(let e of s)if(e.result){if("remove"in e.result)t=t.replace(e.full+`
`,"").replace(e.full,""),n.remove[e.result.reason]||(n.remove[e.result.reason]=[]),n.remove[e.result.reason].push(e),n.total++;else if("move"in e.result){let i=$[$.indexOf(e.result.section)+1];t=t.replace(e.full+`
`,"").replace(e.full,""),t=t.replace(new RegExp(`(
?
?(?:={3,} ?${i} ?={3,}|$))`),`
${e.full}${e.result.reason?`
:: ${e.requester&&e.requester.length>0?mw.util.isIPAddress(e.requester)?"":`@[[User:${e.requester}|${e.requester}]] `:""} ${e.result.reason} ~~~~`:""}$1`),n.move[e.result.section]||(n.move[e.result.section]=[]),n.move[e.result.section].push(e),n.total++}}if(n.total===0)return g.disabled=!1,R.style.display="none",mw.notify("No changes to make!",{type:"error"});let o=Object.values(r).every(s=>s.every(e=>e.result&&"remove"in e.result)),c=`Handled ${n.total} request${n.total>1?"s":""}: ${Object.entries(n.remove).length>0?`Removed ${Object.entries(n.remove).map(([s,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} as ${s.toLowerCase()}`).join(", ")}`:""}${Object.entries(n.move).length>0?`${Object.entries(n.remove).length>0?", ":""}Moved ${Object.entries(n.move).map(([s,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} to "${s}"`).join(", ")}`:""}${o?" (no requests remain)":""} (via [[User:Eejit43/scripts/rmtr-helper|script]])`;await new mw.Api().edit(mw.config.get("wgPageName"),()=>({text:t,summary:c})),mw.notify(`Successfully handled ${n.total} requests, reloading...`,{type:"success"}),window.location.reload()});let R=document.createElement("span");R.id="rmtr-review-loading",R.style.display="none",g.append(R),v.append(g),mw.util.$content[0].prepend(v),v.scrollIntoView()})});async function L(){return(await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:["content","ids"],rvslots:"main",titles:mw.config.get("wgPageName")})).query.pages[0].revisions[0]}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
