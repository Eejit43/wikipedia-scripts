// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/rmtr-helper.ts

"use strict";(()=>{mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="Wikipedia:Requested_moves/Technical_requests")return;importStylesheet("User:Eejit43/scripts/rmtr-helper.css");let b=mw.config.get("wgNamespaceIds"),k=!1;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Review move requests","review-rmtr-requests").addEventListener("click",async I=>{if(I.preventDefault(),k)return document.querySelector("#rmtr-review-result")?.scrollIntoView();k=!0;let L=await T(),P=L.revid,N=L.slots.main.content,y=["Uncontroversial technical requests","Requests to revert undiscussed moves","Contested technical requests","Administrator needed"],S=y[2],j=y[3],m={};function O(l){let t=[],n=["[","{"],a=["]","}"],s=!1,r="";for(let i=0;i<l.length;i++){let c=l[i],o=l[i+1];if(c==="|"&&!s||i===l.length-1){t.push(r),r="";continue}r+=c,n.some(d=>d===c&&d===o)?s=!0:a.some(d=>d===c&&d===o)&&(s=!1)}let e={};for(let[i,c]of t.entries()){let o=c.split("=").map(d=>d.trim());o.length===1&&o.unshift((i+1).toString()),e[o.shift()]=o.join("=")}return e}for(let l of y){let n=N.split(new RegExp(`={3,} ?${l} ?={3,}`))[1].split(/={3,}/m)[0].trim().match(/(?:\* ?\n)?[ *:]*{{rmassist\/core.+?(?=[ *:]*{{rmassist\/core|$)/gis);if(n)m[l]=n.map(a=>{a=a.trim();let s=O(a.replaceAll(/(?:\* ?\n)?[ *:]*{{rmassist\/core\s*\||}}(?![^\n]*}}).*/gis,""));return s.full=a,s.original=s[1]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",s.destination=s[2]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",s.requester||(s.requester=s.sig?.match(/\[\[User:(.*?)(\||]])/)?.[1].trim()),delete s[1],delete s[2],s});else{m[l]=[];continue}}await Promise.all(Object.entries(m).map(async([,l])=>{await Promise.all(l.map(async t=>{let n=mw.Title.newFromText(t.original),a=mw.Title.newFromText(t.destination);if(!n)return mw.notify(`Invalid title "${t.original}"!`,{type:"error"});if(!a)return mw.notify(`Invalid title "${t.destination}"!`,{type:"error"});let s=!/[#<>[\]{|}]/.test(t.destination)&&a,r=document.createElement("span");r.classList.add("rmtr-review-invalid-warning"),r.textContent=`Invalid title "${t.destination}"!`;let e=![b.file,b.category].some(u=>n.getNamespaceId()===u||a.getNamespaceId()===u),i=document.createElement("span");i.classList.add("rmtr-review-invalid-warning"),i.textContent=`Warning: original or destination page is in namespace "${a.getNamespaceId()===b.file?"file":"category"}"!`;let c=await new mw.Api().parse(`[[:${t.original}]] \u2192 ${s?`[[:${t.destination}]]`:r.outerHTML} requested by ${t.requester?mw.util.isIPAddress(t.requester)?`[[Special:Contributions/${t.requester}|${t.requester}]]`:`[[User:${t.requester}|${t.requester}]]`:/(\[{2}Special:Contributions\/(.*?)\|\2]{2})/.exec(t.sig)?.[1]??"(unknown)"} with reasoning "${t.reason}"`),o=new DOMParser().parseFromString(c,"text/html"),d=document.createElement("li");d.innerHTML=o.querySelector("div.mw-parser-output").firstElementChild.innerHTML,e||d.append(i),t.element=d}))}));let f=document.createElement("div");f.id="rmtr-review-result";let x=document.createElement("div");x.id="rmtr-review-header",x.textContent="Technical move requests review",f.append(x);for(let[l,[t,n]]of Object.entries(m).entries()){let a=document.createElement("div");a.classList.add("rmtr-review-header"),a.textContent=t,f.append(a);let s=document.createElement("div");if(s.classList.add("rmtr-review-section-content"),n.length===0){let r=document.createElement("div");r.textContent="No requests in this section",s.append(r)}else{let r=document.createElement("ul");for(let[e,i]of n.entries()){let c=i.element,o=document.createElement("input");o.type="checkbox",o.classList.add("rmtr-review-request-checkbox"),o.id=`rmtr-review-remove-request-${l}-${e}`,o.addEventListener("change",()=>{o.checked?(m[t][e].result={remove:!0,reason:R.value},u.style.display="inline",v.disabled=!0):(delete m[t][e].result,u.style.display="none",v.disabled=!1)});let d=document.createElement("label");d.htmlFor=`rmtr-review-remove-request-${l}-${e}`,d.textContent="Remove request",c.append(o),c.append(d);let u=document.createElement("span");u.style.display="none",u.append(document.createTextNode(" as "));let R=document.createElement("select");t==="Contested technical requests"&&(R.value="Contested"),R.addEventListener("change",()=>{m[t][e].result.reason=R.value});let A=["Completed","Contested","Already done","Invalid page name","Incorrect venue","Withdrawn","Not done"];for(let h of A){let g=document.createElement("option");g.value=h,g.textContent=h,R.append(g)}u.append(R),c.append(u);let v=document.createElement("input");v.type="checkbox",v.classList.add("rmtr-review-request-checkbox"),v.id=`rmtr-review-move-request-${l}-${e}`,v.addEventListener("change",()=>{v.checked?(m[t][e].result={move:!0,section:q.value},p.style.display="inline",o.disabled=!0):(delete m[t][e].result,p.style.display="none",o.disabled=!1)});let C=document.createElement("label");C.htmlFor=`rmtr-review-move-request-${l}-${e}`,C.textContent="Switch section",c.append(v),c.append(C);let p=document.createElement("span");p.style.display="none",p.append(document.createTextNode(" to "));let q=document.createElement("select");q.addEventListener("change",()=>{m[t][e].result.section=q.value});for(let h of y){if(h===t)continue;let g=document.createElement("option");g.selected=h===(t===S?j:S),g.value=h,g.textContent=h,q.append(g)}p.append(q),p.append(document.createTextNode(" with reasoning "));let E=document.createElement("input");E.type="text",E.addEventListener("input",()=>{m[t][e].result.reason=E.value}),p.append(E),p.append(document.createTextNode(" (optional, automatically pings requestor and signs)")),c.append(p),r.append(c)}s.append(r)}f.append(s)}let w=document.createElement("button");w.id="rmtr-review-submit",w.textContent="Submit",w.addEventListener("click",async()=>{if((await T()).revid!==P)return mw.notify("rmtr-helper: An edit conflict occurred, please start over!",{type:"error"});w.disabled=!0,$.style.display="inline-block";let t=N,n={remove:{},move:{},total:0};for(let r of Object.values(m))for(let e of r)if(e.result){if("remove"in e.result)t=t.replace(e.full+`
`,"").replace(e.full,""),e.result.reason in n.remove||(n.remove[e.result.reason]=[]),n.remove[e.result.reason].push(e),n.total++;else if("move"in e.result){let i=y[y.indexOf(e.result.section)+1];t=t.replace(e.full+`
`,"").replace(e.full,""),t=t.replace(new RegExp(`(
?
?(?:={3,} ?${i} ?={3,}|$))`),`
${e.full}${e.result.reason?`
:: ${e.requester&&e.requester.length>0?mw.util.isIPAddress(e.requester)?"":`@[[User:${e.requester}|${e.requester}]] `:""} ${e.result.reason} ~~~~`:""}$1`),e.result.section in n.move||(n.move[e.result.section]=[]),n.move[e.result.section].push(e),n.total++}}if(n.total===0)return w.disabled=!1,$.style.display="none",mw.notify("No changes to make!",{type:"error"});let a=Object.values(m).every(r=>r.every(e=>e.result&&"remove"in e.result)),s=`Handled ${n.total} request${n.total>1?"s":""}: ${Object.entries(n.remove).length>0?`Removed ${Object.entries(n.remove).map(([r,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} as ${r.toLowerCase()}`).join(", ")}`:""}${Object.entries(n.move).length>0?`${Object.entries(n.remove).length>0?", ":""}Moved ${Object.entries(n.move).map(([r,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} to "${r}"`).join(", ")}`:""}${a?" (no requests remain)":""} (via [[User:Eejit43/scripts/rmtr-helper|script]])`;await new mw.Api().edit(mw.config.get("wgPageName"),()=>({text:t,summary:s})),mw.notify(`Successfully handled ${n.total} requests, reloading...`,{type:"success"}),window.location.reload()});let $=document.createElement("span");$.id="rmtr-review-loading",$.style.display="none",w.append($),f.append(w),mw.util.$content[0].prepend(f),f.scrollIntoView()})});async function T(){return(await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:["content","ids"],rvslots:"main",titles:mw.config.get("wgPageName")})).query.pages[0].revisions[0]}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9ybXRyLWhlbHBlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHR5cGUgeyBBcGlRdWVyeVJldmlzaW9uc1BhcmFtcyB9IGZyb20gJ3R5cGVzLW1lZGlhd2lraS9hcGlfcGFyYW1zJztcbmltcG9ydCB0eXBlIHsgUGFnZVJldmlzaW9uc1Jlc3VsdCB9IGZyb20gJy4uL2dsb2JhbC10eXBlcyc7XG5cbm13LmxvYWRlci51c2luZyhbJ21lZGlhd2lraS51dGlsJ10sICgpID0+IHtcbiAgICBpZiAobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpICE9PSAnV2lraXBlZGlhOlJlcXVlc3RlZF9tb3Zlcy9UZWNobmljYWxfcmVxdWVzdHMnKSByZXR1cm47XG5cbiAgICBpbXBvcnRTdHlsZXNoZWV0KCdVc2VyOkVlaml0NDMvc2NyaXB0cy9ybXRyLWhlbHBlci5jc3MnKTtcblxuICAgIGNvbnN0IG5hbWVzcGFjZXMgPSBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZUlkcycpO1xuXG4gICAgbGV0IGRpc3BsYXllZCA9IGZhbHNlO1xuXG4gICAgY29uc3QgbGluayA9IG13LnV0aWwuYWRkUG9ydGxldExpbmsoXG4gICAgICAgIG13LmNvbmZpZy5nZXQoJ3NraW4nKSA9PT0gJ21pbmVydmEnID8gJ3AtdGInIDogJ3AtY2FjdGlvbnMnLFxuICAgICAgICAnIycsXG4gICAgICAgICdSZXZpZXcgbW92ZSByZXF1ZXN0cycsXG4gICAgICAgICdyZXZpZXctcm10ci1yZXF1ZXN0cycsXG4gICAgKSE7XG5cbiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKGRpc3BsYXllZCkgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNybXRyLXJldmlldy1yZXN1bHQnKT8uc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgZWxzZSBkaXNwbGF5ZWQgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN0IHBhZ2VSZXZpc2lvbiA9IGF3YWl0IGdldFBhZ2VSZXZpc2lvbigpO1xuXG4gICAgICAgIGNvbnN0IHJldklkID0gcGFnZVJldmlzaW9uLnJldmlkO1xuICAgICAgICBjb25zdCBwYWdlQ29udGVudCA9IHBhZ2VSZXZpc2lvbi5zbG90cy5tYWluLmNvbnRlbnQ7XG5cbiAgICAgICAgY29uc3Qgc2VjdGlvbnMgPSBbXG4gICAgICAgICAgICAnVW5jb250cm92ZXJzaWFsIHRlY2huaWNhbCByZXF1ZXN0cycsXG4gICAgICAgICAgICAnUmVxdWVzdHMgdG8gcmV2ZXJ0IHVuZGlzY3Vzc2VkIG1vdmVzJyxcbiAgICAgICAgICAgICdDb250ZXN0ZWQgdGVjaG5pY2FsIHJlcXVlc3RzJyxcbiAgICAgICAgICAgICdBZG1pbmlzdHJhdG9yIG5lZWRlZCcsXG4gICAgICAgIF07XG5cbiAgICAgICAgY29uc3QgZGVmYXVsdE1vdmVTZWN0aW9uID0gc2VjdGlvbnNbMl07XG4gICAgICAgIGNvbnN0IGZhbGxiYWNrRGVmYXVsdE1vdmVTZWN0aW9uID0gc2VjdGlvbnNbM107XG5cbiAgICAgICAgaW50ZXJmYWNlIFJlcXVlc3Qge1xuICAgICAgICAgICAgc2lnOiBzdHJpbmc7XG4gICAgICAgICAgICByZXF1ZXN0ZXI/OiBzdHJpbmc7XG4gICAgICAgICAgICByZWFzb246IHN0cmluZztcbiAgICAgICAgICAgIGZ1bGw6IHN0cmluZztcbiAgICAgICAgICAgIG9yaWdpbmFsOiBzdHJpbmc7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbjogc3RyaW5nO1xuICAgICAgICAgICAgZWxlbWVudDogSFRNTExJRWxlbWVudDtcbiAgICAgICAgICAgIHJlc3VsdD86IFJlcXVlc3RSZXN1bHRNb3ZlIHwgUmVxdWVzdFJlc3VsdFJlbW92ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGludGVyZmFjZSBSZXF1ZXN0UmVzdWx0TW92ZSB7XG4gICAgICAgICAgICBtb3ZlOiBib29sZWFuO1xuICAgICAgICAgICAgc2VjdGlvbjogc3RyaW5nO1xuICAgICAgICAgICAgcmVhc29uPzogc3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaW50ZXJmYWNlIFJlcXVlc3RSZXN1bHRSZW1vdmUge1xuICAgICAgICAgICAgcmVtb3ZlOiBib29sZWFuO1xuICAgICAgICAgICAgcmVhc29uOiBzdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhbGxSZXF1ZXN0czogUmVjb3JkPHN0cmluZywgUmVxdWVzdFtdPiA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQYXJzZXMgdGhlIHBhcmFtZXRlcnMgb2YgYSBnaXZlbiBXaWtpdGV4dCB0ZW1wbGF0ZS5cbiAgICAgICAgICogQHBhcmFtIHRlbXBsYXRlIFRoZSB0ZW1wbGF0ZSB0byBwYXJzZS5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlVGVtcGxhdGVQYXJhbWV0ZXJzKHRlbXBsYXRlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhd1BhcmFtZXRlcnM6IHN0cmluZ1tdID0gW107XG5cbiAgICAgICAgICAgIGNvbnN0IGlnbm9yZWRTdGFydFN5bWJvbHMgPSBbJ1snLCAneyddO1xuICAgICAgICAgICAgY29uc3QgaWdub3JlZEVuZFN5bWJvbHMgPSBbJ10nLCAnfSddO1xuXG4gICAgICAgICAgICBsZXQgaW5zaWRlTGlua09yVGVtcGxhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBjdXJyZW50VGV4dCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGVtcGxhdGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gdGVtcGxhdGVbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGFyYWN0ZXI6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRlbXBsYXRlW2luZGV4ICsgMV07XG5cbiAgICAgICAgICAgICAgICBpZiAoKGNoYXJhY3RlciA9PT0gJ3wnICYmICFpbnNpZGVMaW5rT3JUZW1wbGF0ZSkgfHwgaW5kZXggPT09IHRlbXBsYXRlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmF3UGFyYW1ldGVycy5wdXNoKGN1cnJlbnRUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRleHQgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50VGV4dCArPSBjaGFyYWN0ZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlZFN0YXJ0U3ltYm9scy5zb21lKChzeW1ib2wpID0+IHN5bWJvbCA9PT0gY2hhcmFjdGVyICYmIHN5bWJvbCA9PT0gbmV4dENoYXJhY3RlcikpIGluc2lkZUxpbmtPclRlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpZ25vcmVkRW5kU3ltYm9scy5zb21lKChzeW1ib2wpID0+IHN5bWJvbCA9PT0gY2hhcmFjdGVyICYmIHN5bWJvbCA9PT0gbmV4dENoYXJhY3RlcikpIGluc2lkZUxpbmtPclRlbXBsYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4gPSB7fTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBbaW5kZXgsIHBhcmFtZXRlcl0gb2YgcmF3UGFyYW1ldGVycy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcGxpdFBhcmFtZXRlciA9IHBhcmFtZXRlci5zcGxpdCgnPScpLm1hcCgodmFsdWUpID0+IHZhbHVlLnRyaW0oKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3BsaXRQYXJhbWV0ZXIubGVuZ3RoID09PSAxKSBzcGxpdFBhcmFtZXRlci51bnNoaWZ0KChpbmRleCArIDEpLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyc1tzcGxpdFBhcmFtZXRlci5zaGlmdCgpIV0gPSBzcGxpdFBhcmFtZXRlci5qb2luKCc9Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwYXJhbWV0ZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBzZWN0aW9uIG9mIHNlY3Rpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uQ29udGVudCA9IHBhZ2VDb250ZW50XG4gICAgICAgICAgICAgICAgLnNwbGl0KG5ldyBSZWdFeHAoYD17Myx9ID8ke3NlY3Rpb259ID89ezMsfWApKVsxXVxuICAgICAgICAgICAgICAgIC5zcGxpdCgvPXszLH0vbSlbMF1cbiAgICAgICAgICAgICAgICAudHJpbSgpO1xuXG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkUmVxdWVzdHMgPSBzZWN0aW9uQ29udGVudC5tYXRjaCgvKD86XFwqID9cXG4pP1sgKjpdKnt7cm1hc3Npc3RcXC9jb3JlLis/KD89WyAqOl0qe3tybWFzc2lzdFxcL2NvcmV8JCkvZ2lzKTtcblxuICAgICAgICAgICAgaWYgKG1hdGNoZWRSZXF1ZXN0cylcbiAgICAgICAgICAgICAgICBhbGxSZXF1ZXN0c1tzZWN0aW9uXSA9IG1hdGNoZWRSZXF1ZXN0cy5tYXAoKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3QudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBwYXJzZVRlbXBsYXRlUGFyYW1ldGVycyhcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QucmVwbGFjZUFsbCgvKD86XFwqID9cXG4pP1sgKjpdKnt7cm1hc3Npc3RcXC9jb3JlXFxzKlxcfHx9fSg/IVteXFxuXSp9fSkuKi9naXMsICcnKSxcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmZ1bGwgPSByZXF1ZXN0O1xuXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMub3JpZ2luYWwgPSBwYXJhbWV0ZXJzWzFdPy5yZXBsYWNlKC9eXFxbKy8sICcnKS5yZXBsYWNlKC9dKyQvLCAnJykgPz8gJ1VOS05PV04nO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmRlc3RpbmF0aW9uID0gcGFyYW1ldGVyc1syXT8ucmVwbGFjZSgvXlxcWysvLCAnJykucmVwbGFjZSgvXSskLywgJycpID8/ICdVTktOT1dOJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmFtZXRlcnMucmVxdWVzdGVyKSBwYXJhbWV0ZXJzLnJlcXVlc3RlciA9IHBhcmFtZXRlcnMuc2lnPy5tYXRjaCgvXFxbXFxbVXNlcjooLio/KShcXHx8XV0pLyk/LlsxXS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcmFtZXRlcnNbMV07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJhbWV0ZXJzWzJdO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbWV0ZXJzIGFzIHVua25vd24gYXMgUmVxdWVzdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFsbFJlcXVlc3RzW3NlY3Rpb25dID0gW107XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGFsbFJlcXVlc3RzKS5tYXAoYXN5bmMgKFssIHJlcXVlc3RzXSkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0cy5tYXAoYXN5bmMgKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG13T2xkVGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChyZXF1ZXN0Lm9yaWdpbmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG13TmV3VGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChyZXF1ZXN0LmRlc3RpbmF0aW9uKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtd09sZFRpdGxlKSByZXR1cm4gbXcubm90aWZ5KGBJbnZhbGlkIHRpdGxlIFwiJHtyZXF1ZXN0Lm9yaWdpbmFsfVwiIWAsIHsgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbXdOZXdUaXRsZSkgcmV0dXJuIG13Lm5vdGlmeShgSW52YWxpZCB0aXRsZSBcIiR7cmVxdWVzdC5kZXN0aW5hdGlvbn1cIiFgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkVGl0bGUgPSAhL1sjPD5bXFxde3x9XS8udGVzdChyZXF1ZXN0LmRlc3RpbmF0aW9uKSAmJiBtd05ld1RpdGxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnZhbGlkVGl0bGVXYXJuaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZFRpdGxlV2FybmluZy5jbGFzc0xpc3QuYWRkKCdybXRyLXJldmlldy1pbnZhbGlkLXdhcm5pbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRUaXRsZVdhcm5pbmcudGV4dENvbnRlbnQgPSBgSW52YWxpZCB0aXRsZSBcIiR7cmVxdWVzdC5kZXN0aW5hdGlvbn1cIiFgO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZE5hbWVzcGFjZSA9ICFbbmFtZXNwYWNlcy5maWxlLCBuYW1lc3BhY2VzLmNhdGVnb3J5XS5zb21lKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuYW1lc3BhY2UpID0+IG13T2xkVGl0bGUuZ2V0TmFtZXNwYWNlSWQoKSA9PT0gbmFtZXNwYWNlIHx8IG13TmV3VGl0bGUuZ2V0TmFtZXNwYWNlSWQoKSA9PT0gbmFtZXNwYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW52YWxpZE5hbWVzcGFjZVdhcm5pbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkTmFtZXNwYWNlV2FybmluZy5jbGFzc0xpc3QuYWRkKCdybXRyLXJldmlldy1pbnZhbGlkLXdhcm5pbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWROYW1lc3BhY2VXYXJuaW5nLnRleHRDb250ZW50ID0gYFdhcm5pbmc6IG9yaWdpbmFsIG9yIGRlc3RpbmF0aW9uIHBhZ2UgaXMgaW4gbmFtZXNwYWNlIFwiJHttd05ld1RpdGxlLmdldE5hbWVzcGFjZUlkKCkgPT09IG5hbWVzcGFjZXMuZmlsZSA/ICdmaWxlJyA6ICdjYXRlZ29yeSd9XCIhYDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkV2lraXRleHQgPSBhd2FpdCBuZXcgbXcuQXBpKCkucGFyc2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFtbOiR7cmVxdWVzdC5vcmlnaW5hbH1dXSBcdTIxOTIgJHt2YWxpZFRpdGxlID8gYFtbOiR7cmVxdWVzdC5kZXN0aW5hdGlvbn1dXWAgOiBpbnZhbGlkVGl0bGVXYXJuaW5nLm91dGVySFRNTH0gcmVxdWVzdGVkIGJ5ICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QucmVxdWVzdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG13LnV0aWwuaXNJUEFkZHJlc3MocmVxdWVzdC5yZXF1ZXN0ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBgW1tTcGVjaWFsOkNvbnRyaWJ1dGlvbnMvJHtyZXF1ZXN0LnJlcXVlc3Rlcn18JHtyZXF1ZXN0LnJlcXVlc3Rlcn1dXWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGBbW1VzZXI6JHtyZXF1ZXN0LnJlcXVlc3Rlcn18JHtyZXF1ZXN0LnJlcXVlc3Rlcn1dXWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKC8oXFxbezJ9U3BlY2lhbDpDb250cmlidXRpb25zXFwvKC4qPylcXHxcXDJdezJ9KS8uZXhlYyhyZXF1ZXN0LnNpZyk/LlsxXSA/PyAnKHVua25vd24pJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdpdGggcmVhc29uaW5nIFwiJHtyZXF1ZXN0LnJlYXNvbn1cImAsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkSHRtbCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcocGFyc2VkV2lraXRleHQsICd0ZXh0L2h0bWwnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEVsZW1lbnQuaW5uZXJIVE1MID0gcGFyc2VkSHRtbC5xdWVyeVNlbGVjdG9yKCdkaXYubXctcGFyc2VyLW91dHB1dCcpIS5maXJzdEVsZW1lbnRDaGlsZCEuaW5uZXJIVE1MITtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZE5hbWVzcGFjZSkgcmVxdWVzdEVsZW1lbnQuYXBwZW5kKGludmFsaWROYW1lc3BhY2VXYXJuaW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5lbGVtZW50ID0gcmVxdWVzdEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG91dHB1dEVsZW1lbnQuaWQgPSAncm10ci1yZXZpZXctcmVzdWx0JztcblxuICAgICAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgaGVhZGVyLmlkID0gJ3JtdHItcmV2aWV3LWhlYWRlcic7XG4gICAgICAgIGhlYWRlci50ZXh0Q29udGVudCA9ICdUZWNobmljYWwgbW92ZSByZXF1ZXN0cyByZXZpZXcnO1xuXG4gICAgICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kKGhlYWRlcik7XG5cbiAgICAgICAgZm9yIChjb25zdCBbc2VjdGlvbkluZGV4LCBbc2VjdGlvbiwgcmVxdWVzdHNdXSBvZiBPYmplY3QuZW50cmllcyhhbGxSZXF1ZXN0cykuZW50cmllcygpKSB7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBzZWN0aW9uSGVhZGVyLmNsYXNzTGlzdC5hZGQoJ3JtdHItcmV2aWV3LWhlYWRlcicpO1xuICAgICAgICAgICAgc2VjdGlvbkhlYWRlci50ZXh0Q29udGVudCA9IHNlY3Rpb247XG5cbiAgICAgICAgICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kKHNlY3Rpb25IZWFkZXIpO1xuXG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgc2VjdGlvbkNvbnRlbnQuY2xhc3NMaXN0LmFkZCgncm10ci1yZXZpZXctc2VjdGlvbi1jb250ZW50Jyk7XG5cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub1JlcXVlc3RzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgbm9SZXF1ZXN0cy50ZXh0Q29udGVudCA9ICdObyByZXF1ZXN0cyBpbiB0aGlzIHNlY3Rpb24nO1xuXG4gICAgICAgICAgICAgICAgc2VjdGlvbkNvbnRlbnQuYXBwZW5kKG5vUmVxdWVzdHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0c0xpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbcmVxdWVzdEluZGV4LCByZXF1ZXN0XSBvZiByZXF1ZXN0cy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdEVsZW1lbnQgPSByZXF1ZXN0LmVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlUmVxdWVzdENoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVxdWVzdENoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZXF1ZXN0Q2hlY2tib3guY2xhc3NMaXN0LmFkZCgncm10ci1yZXZpZXctcmVxdWVzdC1jaGVja2JveCcpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZXF1ZXN0Q2hlY2tib3guaWQgPSBgcm10ci1yZXZpZXctcmVtb3ZlLXJlcXVlc3QtJHtzZWN0aW9uSW5kZXh9LSR7cmVxdWVzdEluZGV4fWA7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlcXVlc3RDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlUmVxdWVzdENoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxSZXF1ZXN0c1tzZWN0aW9uXVtyZXF1ZXN0SW5kZXhdLnJlc3VsdCA9IHsgcmVtb3ZlOiB0cnVlLCByZWFzb246IHJlbW92ZVJlcXVlc3REcm9wZG93bi52YWx1ZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlcXVlc3RFeHRyYUlucHV0cy5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoU2VjdGlvbkNoZWNrYm94LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGFsbFJlcXVlc3RzW3NlY3Rpb25dW3JlcXVlc3RJbmRleF0ucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlcXVlc3RFeHRyYUlucHV0cy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaFNlY3Rpb25DaGVja2JveC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1vdmVSZXF1ZXN0TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZXF1ZXN0TGFiZWwuaHRtbEZvciA9IGBybXRyLXJldmlldy1yZW1vdmUtcmVxdWVzdC0ke3NlY3Rpb25JbmRleH0tJHtyZXF1ZXN0SW5kZXh9YDtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVxdWVzdExhYmVsLnRleHRDb250ZW50ID0gJ1JlbW92ZSByZXF1ZXN0JztcblxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0RWxlbWVudC5hcHBlbmQocmVtb3ZlUmVxdWVzdENoZWNrYm94KTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEVsZW1lbnQuYXBwZW5kKHJlbW92ZVJlcXVlc3RMYWJlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlUmVxdWVzdEV4dHJhSW5wdXRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZXF1ZXN0RXh0cmFJbnB1dHMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZXF1ZXN0RXh0cmFJbnB1dHMuYXBwZW5kKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgYXMgJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZVJlcXVlc3REcm9wZG93biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VjdGlvbiA9PT0gJ0NvbnRlc3RlZCB0ZWNobmljYWwgcmVxdWVzdHMnKSByZW1vdmVSZXF1ZXN0RHJvcGRvd24udmFsdWUgPSAnQ29udGVzdGVkJztcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVxdWVzdERyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChhbGxSZXF1ZXN0c1tzZWN0aW9uXVtyZXF1ZXN0SW5kZXhdLnJlc3VsdCBhcyBSZXF1ZXN0UmVzdWx0UmVtb3ZlKS5yZWFzb24gPSByZW1vdmVSZXF1ZXN0RHJvcGRvd24udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZVJlcXVlc3REcm9wZG93bk9wdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29tcGxldGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZXN0ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0FscmVhZHkgZG9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnSW52YWxpZCBwYWdlIG5hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0luY29ycmVjdCB2ZW51ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnV2l0aGRyYXduJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdOb3QgZG9uZScsXG4gICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgcmVtb3ZlUmVxdWVzdERyb3Bkb3duT3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRWxlbWVudC52YWx1ZSA9IG9wdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBvcHRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlcXVlc3REcm9wZG93bi5hcHBlbmQob3B0aW9uRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZXF1ZXN0RXh0cmFJbnB1dHMuYXBwZW5kKHJlbW92ZVJlcXVlc3REcm9wZG93bik7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEVsZW1lbnQuYXBwZW5kKHJlbW92ZVJlcXVlc3RFeHRyYUlucHV0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3dpdGNoU2VjdGlvbkNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoU2VjdGlvbkNoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hTZWN0aW9uQ2hlY2tib3guY2xhc3NMaXN0LmFkZCgncm10ci1yZXZpZXctcmVxdWVzdC1jaGVja2JveCcpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hTZWN0aW9uQ2hlY2tib3guaWQgPSBgcm10ci1yZXZpZXctbW92ZS1yZXF1ZXN0LSR7c2VjdGlvbkluZGV4fS0ke3JlcXVlc3RJbmRleH1gO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hTZWN0aW9uQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN3aXRjaFNlY3Rpb25DaGVja2JveC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFsbFJlcXVlc3RzW3NlY3Rpb25dW3JlcXVlc3RJbmRleF0ucmVzdWx0IGFzIFJlcXVlc3RSZXN1bHRNb3ZlKSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbjogc3dpdGNoU2VjdGlvbkRyb3Bkb3duLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoU2VjdGlvbkV4dHJhSW5wdXRzLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVSZXF1ZXN0Q2hlY2tib3guZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYWxsUmVxdWVzdHNbc2VjdGlvbl1bcmVxdWVzdEluZGV4XS5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoU2VjdGlvbkV4dHJhSW5wdXRzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVxdWVzdENoZWNrYm94LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN3aXRjaFNlY3Rpb25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaFNlY3Rpb25MYWJlbC5odG1sRm9yID0gYHJtdHItcmV2aWV3LW1vdmUtcmVxdWVzdC0ke3NlY3Rpb25JbmRleH0tJHtyZXF1ZXN0SW5kZXh9YDtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoU2VjdGlvbkxhYmVsLnRleHRDb250ZW50ID0gJ1N3aXRjaCBzZWN0aW9uJztcblxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0RWxlbWVudC5hcHBlbmQoc3dpdGNoU2VjdGlvbkNoZWNrYm94KTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEVsZW1lbnQuYXBwZW5kKHN3aXRjaFNlY3Rpb25MYWJlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3dpdGNoU2VjdGlvbkV4dHJhSW5wdXRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hTZWN0aW9uRXh0cmFJbnB1dHMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hTZWN0aW9uRXh0cmFJbnB1dHMuYXBwZW5kKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgdG8gJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN3aXRjaFNlY3Rpb25Ecm9wZG93biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hTZWN0aW9uRHJvcGRvd24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgKGFsbFJlcXVlc3RzW3NlY3Rpb25dW3JlcXVlc3RJbmRleF0ucmVzdWx0IGFzIFJlcXVlc3RSZXN1bHRNb3ZlKS5zZWN0aW9uID0gc3dpdGNoU2VjdGlvbkRyb3Bkb3duLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBzZWN0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbiA9PT0gc2VjdGlvbikgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQuc2VsZWN0ZWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbiA9PT0gKHNlY3Rpb24gPT09IGRlZmF1bHRNb3ZlU2VjdGlvbiA/IGZhbGxiYWNrRGVmYXVsdE1vdmVTZWN0aW9uIDogZGVmYXVsdE1vdmVTZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQudmFsdWUgPSBvcHRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gb3B0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hTZWN0aW9uRHJvcGRvd24uYXBwZW5kKG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoU2VjdGlvbkV4dHJhSW5wdXRzLmFwcGVuZChzd2l0Y2hTZWN0aW9uRHJvcGRvd24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaFNlY3Rpb25FeHRyYUlucHV0cy5hcHBlbmQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJyB3aXRoIHJlYXNvbmluZyAnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3dpdGNoU2VjdGlvblJlYXNvbmluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaFNlY3Rpb25SZWFzb25pbmcudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoU2VjdGlvblJlYXNvbmluZy5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChhbGxSZXF1ZXN0c1tzZWN0aW9uXVtyZXF1ZXN0SW5kZXhdLnJlc3VsdCBhcyBSZXF1ZXN0UmVzdWx0UmVtb3ZlKS5yZWFzb24gPSBzd2l0Y2hTZWN0aW9uUmVhc29uaW5nLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hTZWN0aW9uRXh0cmFJbnB1dHMuYXBwZW5kKHN3aXRjaFNlY3Rpb25SZWFzb25pbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaFNlY3Rpb25FeHRyYUlucHV0cy5hcHBlbmQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJyAob3B0aW9uYWwsIGF1dG9tYXRpY2FsbHkgcGluZ3MgcmVxdWVzdG9yIGFuZCBzaWducyknKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEVsZW1lbnQuYXBwZW5kKHN3aXRjaFNlY3Rpb25FeHRyYUlucHV0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHNMaXN0LmFwcGVuZChyZXF1ZXN0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VjdGlvbkNvbnRlbnQuYXBwZW5kKHJlcXVlc3RzTGlzdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kKHNlY3Rpb25Db250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBzdWJtaXRCdXR0b24uaWQgPSAncm10ci1yZXZpZXctc3VibWl0JztcbiAgICAgICAgc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gJ1N1Ym1pdCc7XG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1BhZ2VSZXZpc2lvbiA9IGF3YWl0IGdldFBhZ2VSZXZpc2lvbigpO1xuXG4gICAgICAgICAgICBpZiAobmV3UGFnZVJldmlzaW9uLnJldmlkICE9PSByZXZJZClcbiAgICAgICAgICAgICAgICByZXR1cm4gbXcubm90aWZ5KCdybXRyLWhlbHBlcjogQW4gZWRpdCBjb25mbGljdCBvY2N1cnJlZCwgcGxlYXNlIHN0YXJ0IG92ZXIhJywgeyB0eXBlOiAnZXJyb3InIH0pO1xuXG4gICAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgbG9hZGluZ1NwaW5uZXIuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuXG4gICAgICAgICAgICBsZXQgZW5kUmVzdWx0ID0gcGFnZUNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGludGVyZmFjZSBBbGxDaGFuZ2VzIHtcbiAgICAgICAgICAgICAgICByZW1vdmU6IFJlY29yZDxzdHJpbmcsIFJlcXVlc3RbXT47XG4gICAgICAgICAgICAgICAgbW92ZTogUmVjb3JkPHN0cmluZywgUmVxdWVzdFtdPjtcbiAgICAgICAgICAgICAgICB0b3RhbDogbnVtYmVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VzOiBBbGxDaGFuZ2VzID0geyByZW1vdmU6IHt9LCBtb3ZlOiB7fSwgdG90YWw6IDAgfTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBzZWN0aW9uIG9mIE9iamVjdC52YWx1ZXMoYWxsUmVxdWVzdHMpKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVxdWVzdCBvZiBzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVxdWVzdC5yZXN1bHQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgncmVtb3ZlJyBpbiByZXF1ZXN0LnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kUmVzdWx0ID0gZW5kUmVzdWx0LnJlcGxhY2UocmVxdWVzdC5mdWxsICsgJ1xcbicsICcnKS5yZXBsYWNlKHJlcXVlc3QuZnVsbCwgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVxdWVzdC5yZXN1bHQucmVhc29uIGluIGNoYW5nZXMucmVtb3ZlKSkgY2hhbmdlcy5yZW1vdmVbcmVxdWVzdC5yZXN1bHQucmVhc29uXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5yZW1vdmVbcmVxdWVzdC5yZXN1bHQucmVhc29uXS5wdXNoKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy50b3RhbCsrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCdtb3ZlJyBpbiByZXF1ZXN0LnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VjdGlvblRpdGxlQWZ0ZXIgPSBzZWN0aW9uc1tzZWN0aW9ucy5pbmRleE9mKHJlcXVlc3QucmVzdWx0LnNlY3Rpb24pICsgMV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZFJlc3VsdCA9IGVuZFJlc3VsdC5yZXBsYWNlKHJlcXVlc3QuZnVsbCArICdcXG4nLCAnJykucmVwbGFjZShyZXF1ZXN0LmZ1bGwsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZFJlc3VsdCA9IGVuZFJlc3VsdC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoYChcXG4/XFxuPyg/Oj17Myx9ID8ke3NlY3Rpb25UaXRsZUFmdGVyfSA/PXszLH18JCkpYCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbiR7cmVxdWVzdC5mdWxsfSR7cmVxdWVzdC5yZXN1bHQucmVhc29uID8gYFxcbjo6ICR7cmVxdWVzdC5yZXF1ZXN0ZXIgJiYgcmVxdWVzdC5yZXF1ZXN0ZXIubGVuZ3RoID4gMCA/IChtdy51dGlsLmlzSVBBZGRyZXNzKHJlcXVlc3QucmVxdWVzdGVyKSA/ICcnIDogYEBbW1VzZXI6JHtyZXF1ZXN0LnJlcXVlc3Rlcn18JHtyZXF1ZXN0LnJlcXVlc3Rlcn1dXSBgKSA6ICcnfSAke3JlcXVlc3QucmVzdWx0LnJlYXNvbn0gfn5+fmAgOiAnJ30kMWAsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVxdWVzdC5yZXN1bHQuc2VjdGlvbiBpbiBjaGFuZ2VzLm1vdmUpKSBjaGFuZ2VzLm1vdmVbcmVxdWVzdC5yZXN1bHQuc2VjdGlvbl0gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5tb3ZlW3JlcXVlc3QucmVzdWx0LnNlY3Rpb25dLnB1c2gocmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLnRvdGFsKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnRvdGFsID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbG9hZGluZ1NwaW5uZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICByZXR1cm4gbXcubm90aWZ5KCdObyBjaGFuZ2VzIHRvIG1ha2UhJywgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBub1JlbWFpbmluZyA9IE9iamVjdC52YWx1ZXMoYWxsUmVxdWVzdHMpLmV2ZXJ5KChzZWN0aW9uKSA9PlxuICAgICAgICAgICAgICAgIHNlY3Rpb24uZXZlcnkoKHJlcXVlc3QpID0+IHJlcXVlc3QucmVzdWx0ICYmICdyZW1vdmUnIGluIHJlcXVlc3QucmVzdWx0KSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IGVkaXRTdW1tYXJ5ID0gYEhhbmRsZWQgJHtjaGFuZ2VzLnRvdGFsfSByZXF1ZXN0JHtjaGFuZ2VzLnRvdGFsID4gMSA/ICdzJyA6ICcnfTogJHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhjaGFuZ2VzLnJlbW92ZSkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IGBSZW1vdmVkICR7T2JqZWN0LmVudHJpZXMoY2hhbmdlcy5yZW1vdmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKFtyZWFzb24sIHBhZ2VzXSkgPT4gYCR7cGFnZXMubWFwKChwYWdlKSA9PiBgW1ske3BhZ2Uub3JpZ2luYWx9XV1gKS5qb2luKCcsICcpfSBhcyAke3JlYXNvbi50b0xvd2VyQ2FzZSgpfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcsICcpfWBcbiAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgfSR7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoY2hhbmdlcy5tb3ZlKS5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgID8gYCR7T2JqZWN0LmVudHJpZXMoY2hhbmdlcy5yZW1vdmUpLmxlbmd0aCA+IDAgPyAnLCAnIDogJyd9TW92ZWQgJHtPYmplY3QuZW50cmllcyhjaGFuZ2VzLm1vdmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKFtkZXN0aW5hdGlvbiwgcGFnZXNdKSA9PiBgJHtwYWdlcy5tYXAoKHBhZ2UpID0+IGBbWyR7cGFnZS5vcmlnaW5hbH1dXWApLmpvaW4oJywgJyl9IHRvIFwiJHtkZXN0aW5hdGlvbn1cImApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcsICcpfWBcbiAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgfSR7bm9SZW1haW5pbmcgPyAnIChubyByZXF1ZXN0cyByZW1haW4pJyA6ICcnfSAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvcm10ci1oZWxwZXJ8c2NyaXB0XV0pYDtcblxuICAgICAgICAgICAgYXdhaXQgbmV3IG13LkFwaSgpLmVkaXQobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLCAoKSA9PiAoeyB0ZXh0OiBlbmRSZXN1bHQsIHN1bW1hcnk6IGVkaXRTdW1tYXJ5IH0pKTtcblxuICAgICAgICAgICAgbXcubm90aWZ5KGBTdWNjZXNzZnVsbHkgaGFuZGxlZCAke2NoYW5nZXMudG90YWx9IHJlcXVlc3RzLCByZWxvYWRpbmcuLi5gLCB7IHR5cGU6ICdzdWNjZXNzJyB9KTtcblxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBsb2FkaW5nU3Bpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgbG9hZGluZ1NwaW5uZXIuaWQgPSAncm10ci1yZXZpZXctbG9hZGluZyc7XG4gICAgICAgIGxvYWRpbmdTcGlubmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgc3VibWl0QnV0dG9uLmFwcGVuZChsb2FkaW5nU3Bpbm5lcik7XG5cbiAgICAgICAgb3V0cHV0RWxlbWVudC5hcHBlbmQoc3VibWl0QnV0dG9uKTtcblxuICAgICAgICBtdy51dGlsLiRjb250ZW50WzBdLnByZXBlbmQob3V0cHV0RWxlbWVudCk7XG5cbiAgICAgICAgb3V0cHV0RWxlbWVudC5zY3JvbGxJbnRvVmlldygpO1xuICAgIH0pO1xufSk7XG5cbi8qKlxuICogR2V0cyBpbmZvcm1hdGlvbiBhYm91dCBhIHdpa2kgcGFnZSdzIGxhdGVzdCByZXZpc2lvbi5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0UGFnZVJldmlzaW9uKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIChhd2FpdCBuZXcgbXcuQXBpKCkuZ2V0KHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgIGZvcm1hdHZlcnNpb246ICcyJyxcbiAgICAgICAgICAgIHByb3A6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgcnZwcm9wOiBbJ2NvbnRlbnQnLCAnaWRzJ10sXG4gICAgICAgICAgICBydnNsb3RzOiAnbWFpbicsXG4gICAgICAgICAgICB0aXRsZXM6IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSxcbiAgICAgICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlSZXZpc2lvbnNQYXJhbXMpKSBhcyBQYWdlUmV2aXNpb25zUmVzdWx0XG4gICAgKS5xdWVyeSEucGFnZXNbMF0ucmV2aXNpb25zWzBdO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7O21CQUdBLEdBQUcsT0FBTyxNQUFNLENBQUMsZ0JBQWdCLEVBQUcsSUFBTSxDQUN0QyxHQUFJLEdBQUcsT0FBTyxJQUFJLFlBQVksSUFBTSwrQ0FBZ0QsT0FFcEYsaUJBQWlCLHNDQUFzQyxFQUV2RCxJQUFNQSxFQUFhLEdBQUcsT0FBTyxJQUFJLGdCQUFnQixFQUU3Q0MsRUFBWSxHQUVILEdBQUcsS0FBSyxlQUNqQixHQUFHLE9BQU8sSUFBSSxNQUFNLElBQU0sVUFBWSxPQUFTLGFBQy9DLElBQ0EsdUJBQ0Esc0JBQ0osRUFFSyxpQkFBaUIsUUFBUyxNQUFPQyxHQUFVLENBRzVDLEdBRkFBLEVBQU0sZUFBZSxF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QUFlLENBQ2pDLENBQUMsQ0FDTCxDQUFDLEVBS0QsZUFBZXBDLEdBQWtCLENBQzdCLE9BQ0ssTUFBTSxJQUFJLEdBQUcsSUFBSSxFQUFFLElBQUksQ0FDcEIsT0FBUSxRQUNSLGNBQWUsSUFDZixLQUFNLFlBQ04sT0FBUSxDQUFDLFVBQVcsS0FBSyxFQUN6QixRQUFTLE9BQ1QsT0FBUSxHQUFHLE9BQU8sSUFBSSxZQUFZLENBQ3RDLENBQW1DLEdBQ3JDLE1BQU8sTUFBTSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQ2pDIiwKICAibmFtZXMiOiBbIm5hbWVzcGFjZXMiLCAiZGlzcGxheWVkIiwgImV2ZW50IiwgInBhZ2VSZXZpc2lvbiIsICJnZXRQYWdlUmV2aXNpb24iLCAicmV2SWQiLCAicGFnZUNvbnRlbnQiLCAic2VjdGlvbnMiLCAiZGVmYXVsdE1vdmVTZWN0aW9uIiwgImZhbGxiYWNrRGVmYXVsdE1vdmVTZWN0aW9uIiwgImFsbFJlcXVlc3RzIiwgInBhcnNlVGVtcGxhdGVQYXJhbWV0ZXJzIiwgInRlbXBsYXRlIiwgInJhd1BhcmFtZXRlcnMiLCAiaWdub3JlZFN0YXJ0U3ltYm9scyIsICJpZ25vcmVkRW5kU3ltYm9scyIsICJpbnNpZGVMaW5rT3JUZW1wbGF0ZSIsICJjdXJyZW50VGV4dCIsICJpbmRleCIsICJjaGFyYWN0ZXIiLCAibmV4dENoYXJhY3RlciIsICJzeW1ib2wiLCAicGFyYW1ldGVycyIsICJwYXJhbWV0ZXIiLCAic3BsaXRQYXJhbWV0ZXIiLCAidmFsdWUiLCAic2VjdGlvbiIsICJtYXRjaGVkUmVxdWVzdHMiLCAicmVxdWVzdCIsICJyZXF1ZXN0cyIsICJtd09sZFRpdGxlIiwgIm13TmV3VGl0bGUiLCAidmFsaWRUaXRsZSIsICJpbnZhbGlkVGl0bGVXYXJuaW5nIiwgInZhbGlkTmFtZXNwYWNlIiwgIm5hbWVzcGFjZSIsICJpbnZhbGlkTmFtZXNwYWNlV2FybmluZyIsICJwYXJzZWRXaWtpdGV4dCIsICJwYXJzZWRIdG1sIiwgInJlcXVlc3RFbGVtZW50IiwgIm91dHB1dEVsZW1lbnQiLCAiaGVhZGVyIiwgInNlY3Rpb25JbmRleCIsICJzZWN0aW9uSGVhZGVyIiwgInNlY3Rpb25Db250ZW50IiwgIm5vUmVxdWVzdHMiLCAicmVxdWVzdHNMaXN0IiwgInJlcXVlc3RJbmRleCIsICJyZW1vdmVSZXF1ZXN0Q2hlY2tib3giLCAicmVtb3ZlUmVxdWVzdERyb3Bkb3duIiwgInJlbW92ZVJlcXVlc3RFeHRyYUlucHV0cyIsICJzd2l0Y2hTZWN0aW9uQ2hlY2tib3giLCAicmVtb3ZlUmVxdWVzdExhYmVsIiwgInJlbW92ZVJlcXVlc3REcm9wZG93bk9wdGlvbnMiLCAib3B0aW9uIiwgIm9wdGlvbkVsZW1lbnQiLCAic3dpdGNoU2VjdGlvbkRyb3Bkb3duIiwgInN3aXRjaFNlY3Rpb25FeHRyYUlucHV0cyIsICJzd2l0Y2hTZWN0aW9uTGFiZWwiLCAic3dpdGNoU2VjdGlvblJlYXNvbmluZyIsICJzdWJtaXRCdXR0b24iLCAibG9hZGluZ1NwaW5uZXIiLCAiZW5kUmVzdWx0IiwgImNoYW5nZXMiLCAic2VjdGlvblRpdGxlQWZ0ZXIiLCAibm9SZW1haW5pbmciLCAiZWRpdFN1bW1hcnkiLCAicmVhc29uIiwgInBhZ2VzIiwgInBhZ2UiLCAiZGVzdGluYXRpb24iXQp9Cg==
