// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/rmtr-helper.ts

"use strict";mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="Wikipedia:Requested_moves/Technical_requests")return;importStylesheet("User:Eejit43/scripts/rmtr-helper.css");const x=mw.config.get("wgNamespaceIds");let N=!1;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Review move requests","review-rmtr-requests").addEventListener("click",async a=>{if(a.preventDefault(),N)return document.querySelector("#rmtr-review-result")?.scrollIntoView();N=!0;const w=await getPageRevision(),$=w.revid,f=w.slots.main.content,u=["Uncontroversial technical requests","Requests to revert undiscussed moves","Contested technical requests","Administrator needed"],o={};for(const l of u){const n=f.split(new RegExp(`={3,} ?${l} ?={3,}`))[1].split(/={3,}/m)[0].trim().match(/(?:\* ?\n)?[ *:]*{{rmassist\/core.+?(?=[ *:]*{{rmassist\/core|$)/gis);if(n)o[l]=n.map(i=>{i=i.trim();const m=i,s=i.replaceAll(/(?:\* ?\n)?[ *:]*{{rmassist\/core \||}}.*/gis,"").split(/\s*\|\s*/).map(r=>r.trim()),e=Object.fromEntries(s.map(r=>r.split(" = ").map(c=>c.trim())));return e.full=m,e.original=e[1]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",e.destination=e[2]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",delete e[1],delete e[2],e});else{o[l]=[];continue}}await Promise.all(Object.entries(o).map(async([,l])=>{await Promise.all(l.map(async t=>{const n=mw.Title.newFromText(t.original),i=mw.Title.newFromText(t.destination);if(!n)return mw.notify(`Invalid title "${t.original}"!`,{type:"error"});if(!i)return mw.notify(`Invalid title "${t.destination}"!`,{type:"error"});const m=!/[#<>[\]{|}]/.test(t.destination)&&i,s=document.createElement("span");s.classList.add("rmtr-review-invalid-warning"),s.textContent=`Invalid title "${t.destination}"!`;const e=![x.file,x.category].some(p=>n.getNamespaceId()===p||i.getNamespaceId()===p),r=document.createElement("span");r.classList.add("rmtr-review-invalid-warning"),r.textContent=`Warning: original or destination page is in namespace "${i.getNamespaceId()===x.file?"file":"category"}"!`;const c=await new mw.Api().parse(`[[:${t.original}]] \u2192 ${m?`[[:${t.destination}]]`:s.outerHTML} requested by ${t.requester?mw.util.isIPAddress(t.requester)?`[[Special:Contributions/${t.requester}|${t.requester}]]`:`[[User:${t.requester}|${t.requester}]]`:t.sig?.match(/(\[{2}Special:Contributions\/(.*?)\|\2]{2})/)?.[1]??"(unknown)"} with reasoning "${t.reason}"`),d=new DOMParser().parseFromString(c,"text/html"),R=document.createElement("li");R.innerHTML=d.querySelector("div.mw-parser-output").firstElementChild.innerHTML,e||R.append(r),t.element=R}))}));const h=document.createElement("div");h.id="rmtr-review-result";const P=document.createElement("div");P.id="rmtr-review-header",P.textContent="Technical move requests review",h.append(P);for(const[l,[t,n]]of Object.entries(o).entries()){const i=document.createElement("div");i.classList.add("rmtr-review-header"),i.textContent=t,h.append(i);const m=document.createElement("div");if(m.classList.add("rmtr-review-section-content"),n.length===0){const s=document.createElement("div");s.textContent="No requests in this section",m.append(s)}else{const s=document.createElement("ul");for(const[e,r]of n.entries()){const c=r.element,d=document.createElement("input");d.type="checkbox",d.classList.add("rmtr-review-request-checkbox"),d.id=`rmtr-review-remove-request-${l}-${e}`,d.addEventListener("change",()=>{d.checked?(o[t][e].result={remove:!0,reason:b.value},p.style.display="inline",g.disabled=!0):(delete o[t][e].result,p.style.display="none",g.disabled=!1)});const R=document.createElement("label");R.htmlFor=`rmtr-review-remove-request-${l}-${e}`,R.textContent="Remove request",c.append(d),c.append(R);const p=document.createElement("span");p.style.display="none",p.append(document.createTextNode(" as "));const b=document.createElement("select");t==="Contested technical requests"&&(b.value="Contested"),b.addEventListener("change",()=>{o[t][e].result.reason=b.value});const j=["Completed","Contested","Already done","Invalid page name","Incorrect venue","Withdrawn","Not done"];for(const q of j){const E=document.createElement("option");E.value=q,E.textContent=q,b.append(E)}p.append(b),c.append(p);const g=document.createElement("input");g.type="checkbox",g.classList.add("rmtr-review-request-checkbox"),g.id=`rmtr-review-move-request-${l}-${e}`,g.addEventListener("change",()=>{g.checked?(o[t][e].result={move:!0,section:I.value},v.style.display="inline",d.disabled=!0):(delete o[t][e].result,v.style.display="none",d.disabled=!1)});const S=document.createElement("label");S.htmlFor=`rmtr-review-move-request-${l}-${e}`,S.textContent="Switch section",c.append(g),c.append(S);const v=document.createElement("span");v.style.display="none",v.append(document.createTextNode(" to "));const I=document.createElement("select");I.addEventListener("change",()=>{o[t][e].result.section=I.value});for(const q of u){if(q===t)continue;const E=document.createElement("option");E.value=q,E.textContent=q,I.append(E)}v.append(I),v.append(document.createTextNode(" with reasoning "));const L=document.createElement("input");L.type="text",L.addEventListener("input",()=>{o[t][e].result.reason=L.value}),v.append(L),v.append(document.createTextNode(" (optional, automatically signed)")),c.append(v),s.append(c)}m.append(s)}h.append(m)}const y=document.createElement("button");y.id="rmtr-review-submit",y.textContent="Submit",y.addEventListener("click",async()=>{if((await getPageRevision()).revid!==$)return mw.notify("rmtr-helper: An edit conflict occurred, please start over!",{type:"error"});y.disabled=!0,C.style.display="inline-block";let t=f;const n={remove:{},move:{},total:0};for(const s of Object.values(o))for(const e of s)if(e.result){if("remove"in e.result)t=t.replace(e.full+`
`,"").replace(e.full,""),n.remove[e.result.reason]||(n.remove[e.result.reason]=[]),n.remove[e.result.reason].push(e),n.total++;else if("move"in e.result){const r=u[u.indexOf(e.result.section)+1];t=t.replace(e.full+`
`,"").replace(e.full,""),t=t.replace(new RegExp(`(
?
?(?:={3,} ?${r} ?={3,}|$))`),`
${e.full}${e.result.reason?`
:: ${e.result.reason} ~~~~`:""}$1`),n.move[e.result.section]||(n.move[e.result.section]=[]),n.move[e.result.section].push(e),n.total++}}if(n.total===0)return y.disabled=!1,C.style.display="none",mw.notify("No changes to make!",{type:"error"});const i=Object.values(o).every(s=>s.every(e=>e.result&&"remove"in e.result)),m=`Handled ${n.total} request${n.total>1?"s":""}: ${Object.entries(n.remove).length>0?`Removed ${Object.entries(n.remove).map(([s,e])=>`${e.map(r=>`[[${r.original}]]`).join(", ")} as ${s.toLowerCase()}`).join(", ")}`:""}${Object.entries(n.move).length>0?`${Object.entries(n.remove).length>0?", ":""}Moved ${Object.entries(n.move).map(([s,e])=>`${e.map(r=>`[[${r.original}]]`).join(", ")} to "${s}"`).join(", ")}`:""}${i?" (no requests remain)":""} (via [[User:Eejit43/scripts/rmtr-helper|script]])`;await new mw.Api().edit(mw.config.get("wgPageName"),()=>({text:t,summary:m})),mw.notify(`Successfully handled ${n.total} requests, reloading...`,{type:"success"}),window.location.reload()});const C=document.createElement("span");C.id="rmtr-review-loading",C.style.display="none",y.append(C),h.append(y),mw.util.$content[0].prepend(h),h.scrollIntoView()})});async function getPageRevision(){return(await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:["content","ids"],rvslots:"main",titles:mw.config.get("wgPageName")})).query.pages[0].revisions[0]}function showEditPreview(k,x,N){const T=mw.config.get("wgServer")+mw.config.get("wgScriptPath")+"/",a=document.createElement("form");a.action=`${T}index.php?title=${encodeURIComponent(k)}&action=submit`,a.method="POST";const w=document.createElement("input");w.type="hidden",w.name="wpTextbox1",w.value=x,a.append(w);const $=document.createElement("input");$.type="hidden",$.name="wpSummary",$.value=N,a.append($);const f=document.createElement("input");f.type="hidden",f.name="mode",f.value="preview",a.append(f);const u=document.createElement("input");u.type="hidden",u.name="wpDiff",u.value="Show changes",a.append(u);const o=document.createElement("input");o.type="hidden",o.name="wpUltimateParam",o.value="1",a.append(o),document.body.append(a),a.submit()}

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
