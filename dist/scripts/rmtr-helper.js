// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/rmtr-helper.ts

"use strict";(()=>{mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="Wikipedia:Requested_moves/Technical_requests")return;importStylesheet("User:Eejit43/scripts/rmtr-helper.css");let b=mw.config.get("wgNamespaceIds"),k=!1;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Review move requests","review-rmtr-requests").addEventListener("click",async I=>{if(I.preventDefault(),k)return document.querySelector("#rmtr-review-result")?.scrollIntoView();k=!0;let L=await T(),P=L.revid,N=L.slots.main.content,y=["Uncontroversial technical requests","Requests to revert undiscussed moves","Contested technical requests","Administrator needed"],S=y[2],j=y[3],m={};function O(l){let t=[],n=["[","{"],a=["]","}"],s=!1,r="";for(let i=0;i<l.length;i++){let c=l[i],o=l[i+1];if(c==="|"&&!s||i===l.length-1){t.push(r),r="";continue}r+=c,n.some(d=>d===c&&d===o)?s=!0:a.some(d=>d===c&&d===o)&&(s=!1)}let e={};for(let[i,c]of t.entries()){let o=c.split("=").map(d=>d.trim());o.length===1&&o.unshift((i+1).toString()),e[o.shift()]=o.join("=")}return e}for(let l of y){let n=N.split(new RegExp(`={3,} ?${l} ?={3,}`))[1].split(/={3,}/m)[0].trim().match(/(?:\* ?\n)?[ *:]*{{rmassist\/core.+?(?=[ *:]*{{rmassist\/core|$)/gis);if(n)m[l]=n.map(a=>{a=a.trim();let s=O(a.replaceAll(/(?:\* ?\n)?[ *:]*{{rmassist\/core\s*\||}}\n.*/gis,""));return s.full=a,s.original=s[1]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",s.destination=s[2]?.replace(/^\[+/,"").replace(/]+$/,"")??"UNKNOWN",s.requester||(s.requester=s.sig?.match(/\[\[User:(.*?)(\||]])/)?.[1].trim()),delete s[1],delete s[2],s});else{m[l]=[];continue}}await Promise.all(Object.entries(m).map(async([,l])=>{await Promise.all(l.map(async t=>{let n=mw.Title.newFromText(t.original),a=mw.Title.newFromText(t.destination);if(!n)return mw.notify(`Invalid title "${t.original}"!`,{type:"error"});if(!a)return mw.notify(`Invalid title "${t.destination}"!`,{type:"error"});let s=!/[#<>[\]{|}]/.test(t.destination)&&a,r=document.createElement("span");r.classList.add("rmtr-review-invalid-warning"),r.textContent=`Invalid title "${t.destination}"!`;let e=![b.file,b.category].some(u=>n.getNamespaceId()===u||a.getNamespaceId()===u),i=document.createElement("span");i.classList.add("rmtr-review-invalid-warning"),i.textContent=`Warning: original or destination page is in namespace "${a.getNamespaceId()===b.file?"file":"category"}"!`;let c=await new mw.Api().parse(`[[:${t.original}]] \u2192 ${s?`[[:${t.destination}]]`:r.outerHTML} requested by ${t.requester?mw.util.isIPAddress(t.requester)?`[[Special:Contributions/${t.requester}|${t.requester}]]`:`[[User:${t.requester}|${t.requester}]]`:/(\[{2}Special:Contributions\/(.*?)\|\2]{2})/.exec(t.sig)?.[1]??"(unknown)"} with reasoning "${t.reason}"`),o=new DOMParser().parseFromString(c,"text/html"),d=document.createElement("li");d.innerHTML=o.querySelector("div.mw-parser-output").firstElementChild.innerHTML,e||d.append(i),t.element=d}))}));let f=document.createElement("div");f.id="rmtr-review-result";let x=document.createElement("div");x.id="rmtr-review-header",x.textContent="Technical move requests review",f.append(x);for(let[l,[t,n]]of Object.entries(m).entries()){let a=document.createElement("div");a.classList.add("rmtr-review-header"),a.textContent=t,f.append(a);let s=document.createElement("div");if(s.classList.add("rmtr-review-section-content"),n.length===0){let r=document.createElement("div");r.textContent="No requests in this section",s.append(r)}else{let r=document.createElement("ul");for(let[e,i]of n.entries()){let c=i.element,o=document.createElement("input");o.type="checkbox",o.classList.add("rmtr-review-request-checkbox"),o.id=`rmtr-review-remove-request-${l}-${e}`,o.addEventListener("change",()=>{o.checked?(m[t][e].result={remove:!0,reason:R.value},u.style.display="inline",v.disabled=!0):(delete m[t][e].result,u.style.display="none",v.disabled=!1)});let d=document.createElement("label");d.htmlFor=`rmtr-review-remove-request-${l}-${e}`,d.textContent="Remove request",c.append(o),c.append(d);let u=document.createElement("span");u.style.display="none",u.append(document.createTextNode(" as "));let R=document.createElement("select");t==="Contested technical requests"&&(R.value="Contested"),R.addEventListener("change",()=>{m[t][e].result.reason=R.value});let A=["Completed","Contested","Already done","Invalid page name","Incorrect venue","Withdrawn","Not done"];for(let h of A){let g=document.createElement("option");g.value=h,g.textContent=h,R.append(g)}u.append(R),c.append(u);let v=document.createElement("input");v.type="checkbox",v.classList.add("rmtr-review-request-checkbox"),v.id=`rmtr-review-move-request-${l}-${e}`,v.addEventListener("change",()=>{v.checked?(m[t][e].result={move:!0,section:q.value},p.style.display="inline",o.disabled=!0):(delete m[t][e].result,p.style.display="none",o.disabled=!1)});let C=document.createElement("label");C.htmlFor=`rmtr-review-move-request-${l}-${e}`,C.textContent="Switch section",c.append(v),c.append(C);let p=document.createElement("span");p.style.display="none",p.append(document.createTextNode(" to "));let q=document.createElement("select");q.addEventListener("change",()=>{m[t][e].result.section=q.value});for(let h of y){if(h===t)continue;let g=document.createElement("option");g.selected=h===(t===S?j:S),g.value=h,g.textContent=h,q.append(g)}p.append(q),p.append(document.createTextNode(" with reasoning "));let E=document.createElement("input");E.type="text",E.addEventListener("input",()=>{m[t][e].result.reason=E.value}),p.append(E),p.append(document.createTextNode(" (optional, automatically pings requestor and signs)")),c.append(p),r.append(c)}s.append(r)}f.append(s)}let w=document.createElement("button");w.id="rmtr-review-submit",w.textContent="Submit",w.addEventListener("click",async()=>{if((await T()).revid!==P)return mw.notify("rmtr-helper: An edit conflict occurred, please start over!",{type:"error"});w.disabled=!0,$.style.display="inline-block";let t=N,n={remove:{},move:{},total:0};for(let r of Object.values(m))for(let e of r)if(e.result){if("remove"in e.result)t=t.replace(e.full+`
`,"").replace(e.full,""),e.result.reason in n.remove||(n.remove[e.result.reason]=[]),n.remove[e.result.reason].push(e),n.total++;else if("move"in e.result){let i=y[y.indexOf(e.result.section)+1];t=t.replace(e.full+`
`,"").replace(e.full,""),t=t.replace(new RegExp(`(
?
?(?:={3,} ?${i} ?={3,}|$))`),`
${e.full}${e.result.reason?`
:: ${e.requester&&e.requester.length>0?mw.util.isIPAddress(e.requester)?"":`@[[User:${e.requester}|${e.requester}]] `:""} ${e.result.reason} ~~~~`:""}$1`),e.result.section in n.move||(n.move[e.result.section]=[]),n.move[e.result.section].push(e),n.total++}}if(n.total===0)return w.disabled=!1,$.style.display="none",mw.notify("No changes to make!",{type:"error"});let a=Object.values(m).every(r=>r.every(e=>e.result&&"remove"in e.result)),s=`Handled ${n.total} request${n.total>1?"s":""}: ${Object.entries(n.remove).length>0?`Removed ${Object.entries(n.remove).map(([r,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} as ${r.toLowerCase()}`).join(", ")}`:""}${Object.entries(n.move).length>0?`${Object.entries(n.remove).length>0?", ":""}Moved ${Object.entries(n.move).map(([r,e])=>`${e.map(i=>`[[${i.original}]]`).join(", ")} to "${r}"`).join(", ")}`:""}${a?" (no requests remain)":""} (via [[User:Eejit43/scripts/rmtr-helper|script]])`;await new mw.Api().edit(mw.config.get("wgPageName"),()=>({text:t,summary:s})),mw.notify(`Successfully handled ${n.total} requests, reloading...`,{type:"success"}),window.location.reload()});let $=document.createElement("span");$.id="rmtr-review-loading",$.style.display="none",w.append($),f.append(w),mw.util.$content[0].prepend(f),f.scrollIntoView()})});async function T(){return(await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:["content","ids"],rvslots:"main",titles:mw.config.get("wgPageName")})).query.pages[0].revisions[0]}})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
