// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/script-updater.ts

"use strict";(()=>{mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;let m=document.querySelector(".mw-editsection").cloneNode(!0),r=document.createElement("a");r.href="#",r.style.fontWeight="bold",r.textContent="Sync from GitHub",r.addEventListener("click",h=>{h.preventDefault();let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let t=new a;e.addWindows([t]),t.open()}),m.querySelector("a").replaceWith(r),document.querySelector("h2#My_user_scripts + .mw-editsection").after(m);class a extends OO.ui.ProcessDialog{repoOwner="Eejit43";repoName="wikipedia-scripts";content;checkboxElements=[];actionsMultiselect;latestCommitHash;scripts;constructor(){super({size:"medium"}),a.static.name="ScriptUpdaterDialog",a.static.title="What scripts do you want to update?",a.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}getSetupProcess=()=>a.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){let s=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(s.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1});for(let s of this.scripts){let n=new OO.ui.CheckboxInputWidget;this.checkboxElements.push([s.name,n]);let o=new OO.ui.FieldLayout(n,{align:"inline",label:s.name});this.content.$element.append(o.$element)}this.actionsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:[{id:"documentation",name:"Update script documentation"},{id:"script",name:"Update script code"},{id:"style",name:"Update stylesheet"},{id:"talk",name:"Create talk redirect",selectedDefault:!1}].map(({id:s,name:n,selectedDefault:o})=>new OO.ui.CheckboxMultioptionWidget({data:s,label:n,selected:o??!0}))});let t=new OO.ui.FieldLayout(this.actionsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Actions to take (if applicable):</b>"),align:"inline"});this.content.$element.append(t.$element),this.$body.append(this.content.$element)}));getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):e==="save"?new OO.ui.Process(()=>{let t=[];for(let[s,n]of this.checkboxElements)n.isSelected()&&t.push(this.scripts.find(o=>o.name===s));this.getManager().closeWindow(this),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(t.map(s=>this.handleScript(s))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(s=>!s.personal&&!s.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(s=>s.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(s=>s.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${t.length} script${t.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):a.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>a.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});wrapAsyncMethod(e){let t=$.Deferred();return e().then(s=>t.resolve(s)),t.promise()}loadScriptData=async()=>{let e=await fetch(`https://api.github.com/repos/${this.repoOwner}/${this.repoName}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;let t=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/scripts.json`);if(!t.ok)return`Failed to fetch script data from GitHub: ${t.statusText} (${t.status})`;this.scripts=await t.json()};async handleScript(e){let t=this.actionsMultiselect.findSelectedItemsData(),s=`User:Eejit43/scripts/${e.name}`,n=`User talk:Eejit43/scripts/${e.name}`,o=`${s}.js`,l=`${s}.css`,u=["{{User:Eejit43/script-documentation",e.image===!1?`| image             = ${e.image}`:null,e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = ${e["use-instead"].includes("User:")?e["use-instead"]:`[[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`}`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(i=>`[[User:${i}|${i}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.configuration?`| configuration     = ${e.configuration}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([i,c])=>`* '''{{start date and age|${i}}}:'''${Array.isArray(c)?`
${c.map(g=>`** ${g}`).join(`
`)}`:` ${c}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/script-documentation/skin-support|${Object.entries(e["skin-support"]).map(([i,c])=>`${i}=${c}`).join("|")}}}`,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean),p=null;if(t.includes("script")){let i=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/dist/scripts/${e.name}.js`);if(i.ok)p=await i.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${i.statusText} (${i.status})`,{type:"error",tag:"sync-scripts-notification"})}let d=null;if(t.includes("style")&&e.css){let i=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/dist/styles/${e.name}.css`);i.ok?d=await i.text():mw.notify(`Failed to fetch "${e.name}.css" from GitHub: ${i.statusText} (${i.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(t.includes("documentation")&&await this.editOrCreate(s,u.join(`
`),"Syncing script documentation from GitHub"),t.includes("talk")&&await this.editOrCreate(n,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),p&&await this.editOrCreate(o,p,"Syncing script from GitHub"),e.css&&d&&await this.editOrCreate(l,d,"Syncing styles from GitHub")}mapScripts(e){return e.map(t=>`* [[User:Eejit43/scripts/${t.name}${t.personal?".js":""}|${t.name}]] - ${t["short-description"]||t.description}${t["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${t["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,t,s){s+=" (via [[User:Eejit43/scripts/script-updater.js|script]])",await new mw.Api().edit(e,()=>({text:t,summary:s,watchlist:"watch"})).catch(async(n,o)=>{if(n==="nocreate-missing")await new mw.Api().create(e,{summary:s,watchlist:"watch"},t).catch((l,u)=>{mw.notify(`Error creating ${e}: ${u?.error.info??"Unknown error"} (${l})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${o?.error.info??"Unknown error"} (${n})`,{type:"error"});return}})}}Object.assign(a.prototype,OO.ui.ProcessDialog.prototype)});})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
