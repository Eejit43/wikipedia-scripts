// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/script-updater.ts

"use strict";(()=>{mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;let p=document.querySelector(".mw-editsection").cloneNode(!0),r=document.createElement("a");r.href="#",r.style.fontWeight="bold",r.textContent="Sync from GitHub",r.addEventListener("click",d=>{d.preventDefault();let e=new OO.ui.WindowManager;document.body.append(e.$element[0]);let t=new a;e.addWindows([t]),t.open()}),p.querySelector("a").replaceWith(r),document.querySelector("h2#My_user_scripts + .mw-editsection").after(p);class a extends OO.ui.ProcessDialog{repoOwner="Eejit43";repoName="wikipedia-scripts";content;checkboxElements=[];actionsMultiselect;latestCommitHash;scripts;constructor(){super({size:"medium"}),a.static.name="ScriptUpdaterDialog",a.static.title="What scripts do you want to update?",a.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}getSetupProcess=()=>a.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){let i=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(i.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1});for(let i of this.scripts){let s=new OO.ui.CheckboxInputWidget;this.checkboxElements.push([i.name,s]);let o=new OO.ui.FieldLayout(s,{align:"inline",label:i.name});this.content.$element.append(o.$element)}this.actionsMultiselect=new OO.ui.CheckboxMultiselectWidget({items:[{id:"documentation",name:"Update script documentation"},{id:"script",name:"Update script code"},{id:"talk",name:"Create talk redirect",selectedDefault:!1}].map(({id:i,name:s,selectedDefault:o})=>new OO.ui.CheckboxMultioptionWidget({data:i,label:s,selected:o??!0}))});let t=new OO.ui.FieldLayout(this.actionsMultiselect,{label:new OO.ui.HtmlSnippet("<b>Actions to take (if applicable):</b>"),align:"inline"});this.content.$element.append(t.$element),this.$body.append(this.content.$element)}));getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.close()}):e==="save"?new OO.ui.Process(()=>{let t=[];for(let[i,s]of this.checkboxElements)s.isSelected()&&t.push(this.scripts.find(o=>o.name===i));this.close(),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(t.map(i=>this.handleScript(i))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(i=>!i.personal&&!i.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(i=>i.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(i=>i.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${t.length} script${t.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):a.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>a.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});wrapAsyncMethod(e){let t=$.Deferred();return e().then(i=>t.resolve(i)),t.promise()}loadScriptData=async()=>{let e=await fetch(`https://api.github.com/repos/${this.repoOwner}/${this.repoName}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;let t=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/scripts.json`);if(!t.ok)return`Failed to fetch script data from GitHub: ${t.statusText} (${t.status})`;this.scripts=await t.json()};async handleScript(e){let t=this.actionsMultiselect.findSelectedItemsData(),i=`User:Eejit43/scripts/${e.name}`,s=`User talk:Eejit43/scripts/${e.name}`,o=`${i}.js`,u=["{{User:Eejit43/script-documentation",e.image===!1?`| image             = ${e.image}`:null,e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = ${e["use-instead"].includes("User:")?e["use-instead"]:`[[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`}`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(n=>`[[User:${n}|${n}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.configuration?`| configuration     = ${e.configuration}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([n,l])=>`* '''{{start date and age|${n}}}:'''${Array.isArray(l)?`
${l.map(m=>`** ${m}`).join(`
`)}`:` ${l}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/script-documentation/skin-support|${Object.entries(e["skin-support"]).map(([n,l])=>`${n}=${l}`).join("|")}}}`,e["source-multiple"]?`| source-multiple   = ${e["source-multiple"]}`:null,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean),c=null;if(t.includes("script")){let n=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/dist/scripts/${e.name}.js`);if(n.ok)c=await n.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${n.statusText} (${n.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(t.includes("documentation")&&await this.editOrCreate(i,u.join(`
`),"Syncing script documentation from GitHub"),t.includes("talk")&&await this.editOrCreate(s,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),c&&await this.editOrCreate(o,c,"Syncing script from GitHub")}mapScripts(e){return e.map(t=>`* [[User:Eejit43/scripts/${t.name}${t.personal?".js":""}|${t.name}]] - ${t["short-description"]||t.description}${t["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${t["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,t,i){i+=" (via [[User:Eejit43/scripts/script-updater.js|script]])",await new mw.Api().edit(e,()=>({text:t,summary:i,watchlist:"watch"})).catch(async(s,o)=>{if(s==="nocreate-missing")await new mw.Api().create(e,{summary:i,watchlist:"watch"},t).catch((u,c)=>{mw.notify(`Error creating ${e}: ${c?.error.info??"Unknown error"} (${u})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${o?.error.info??"Unknown error"} (${s})`,{type:"error"});return}})}}Object.assign(a.prototype,OO.ui.ProcessDialog.prototype)});})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
