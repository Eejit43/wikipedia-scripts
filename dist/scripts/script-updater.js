"use strict";mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;const i="Eejit43",n="wikipedia-scripts";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Sync user scripts from GitHub","sync-scripts").addEventListener("click",async h=>{h.preventDefault();const m=await fetch(`https://api.github.com/repos/${i}/${n}/commits`);if(!m.ok)return mw.notify(`Failed to fetch latest commit hash from GitHub: ${m.statusText} (${m.status})`,{type:"error",tag:"sync-scripts-notification"});const g=(await m.json())[0].sha,p=await fetch(`https://raw.githubusercontent.com/${i}/${n}/${g}/scripts.json`);if(!p.ok)return mw.notify(`Failed to fetch script data from GitHub: ${p.statusText} (${p.status})`,{type:"error",tag:"sync-scripts-notification"});const a=await p.json();mw.notify("Syncing scripts...",{autoHide:!1,tag:"sync-scripts-notification"}),await Promise.all(a.map(async t=>{const e=`User:Eejit43/scripts/${t.name}`,o=`User talk:Eejit43/scripts/${t.name}`,u=`${e}.js`,d=`${e}.css`,$=["{{User:Eejit43/script-documentation",t["use-instead"]?`| use-instead       = [[User:Eejit43/scripts/${t["use-instead"]}|${t["use-instead"]}]]`:null,t["image-size"]?`| image-size        = ${t["image-size"]}`:null,t["image-caption"]?`| image-caption     = ${t["image-caption"]}`:null,t["other-authors"]?`| other-authors     = ${t["other-authors"].map(s=>`[[User:${s}|${s}]]`).join(", ")}`:null,`| description-short = ${t["short-description"]}`,`| description       = ${t.description}`,t.usage?`| usage             = ${t.usage}`:null,`| skin-support      = {{User:Eejit43/skin-support|${Object.entries(t["skin-support"]).map(([s,y])=>`${s}=${y}`).join("|")}}}`,`| released          = {{start date and age|${t.released}}}`,`| updated           = {{start date and age|${t.updated}}}`,"}}"].filter(Boolean);let c=null;const l=await fetch(`https://raw.githubusercontent.com/${i}/${n}/${g}/dist/scripts/${t.name}.js`);if(l.ok)c=await l.text();else return mw.notify(`Failed to fetch "${t.name}.js" from GitHub: ${l.statusText} (${l.status})`,{type:"error",tag:"sync-scripts-notification"});let w=null;if(t.css){const s=await fetch(`https://raw.githubusercontent.com/${i}/${n}/${g}/dist/styles/${t.name}.css`);s.ok?w=await s.text():mw.notify(`Failed to fetch "${t.name}.css" from GitHub: ${s.statusText} (${s.status})`,{type:"error",tag:"sync-scripts-notification"})}t.personal||(await r(e,$.join(`
`),"Syncing script documentation from GitHub"),await r(o,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),c&&await r(u,`// <nowiki>
// Note: This script was compiled from TypeScript. For a more readable version, see https://github.com/${i}/${n}/blob/main/scripts/${t.name}.ts

${c}
// </nowiki>`,"Syncing script from GitHub"),t.css&&w&&await r(d,`/* <nowiki> */
/* Note: This script was compiled from modern CSS. For a more readable version, see https://github.com/${i}/${n}/blob/main/styles/${t.name}.css */

${w}
/* </nowiki> */`,"Syncing styles from GitHub")})),await r("User:Eejit43/scripts-info",[f(a.filter(t=>!t.personal&&!t.fork)),"","=== Personal-use scripts ===",f(a.filter(t=>t.personal)),"","=== Forks ===",f(a.filter(t=>t.fork))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${a.length} scripts from GitHub!`,{type:"success",tag:"sync-scripts-notification"});function f(t){return t.map(e=>`* [[User:Eejit43/scripts/${e.name}${e.personal?".js":""}|${e.name}]] - ${e["short-description"]||e.description}${e["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async function r(t,e,o){o+=" (via [[User:Eejit43/scripts/script-updater.js|script]])",await new mw.Api().edit(t,()=>({text:e,summary:o,watchlist:"watch"})).catch(async(u,d)=>{if(u==="nocreate-missing")await new mw.Api().create(t,{summary:o,watchlist:"watch"},e).catch(($,c)=>{mw.notify(`Error creating ${t}: ${c?.error.info??"Unknown error"} (${$})`,{type:"error"})});else{mw.notify(`Error editing or creating ${t}: ${d?.error.info??"Unknown error"} (${u})`,{type:"error"});return}})}})});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9zY3JpcHQtdXBkYXRlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgTWVkaWFXaWtpRGF0YUVycm9yIH0gZnJvbSAnLi4vZ2xvYmFsLXR5cGVzJztcblxuaW50ZXJmYWNlIFNjcmlwdCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgICd1c2UtaW5zdGVhZCc/OiBzdHJpbmc7XG4gICAgJ2ltYWdlLXNpemUnPzogc3RyaW5nO1xuICAgICdpbWFnZS1jYXB0aW9uJz86IHN0cmluZztcbiAgICAnc2hvcnQtZGVzY3JpcHRpb24nOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICB1c2FnZT86IHN0cmluZztcbiAgICAnb3RoZXItYXV0aG9ycyc/OiBzdHJpbmdbXTtcbiAgICBmb3JrPzogdHJ1ZTtcbiAgICBwZXJzb25hbD86IHRydWU7XG4gICAgJ3NraW4tc3VwcG9ydCc6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+O1xuICAgIHJlbGVhc2VkOiBzdHJpbmc7XG4gICAgdXBkYXRlZDogc3RyaW5nO1xuICAgIGNzcz86IHRydWU7XG59XG5cbm13LmxvYWRlci51c2luZyhbJ21lZGlhd2lraS51dGlsJ10sICgpID0+IHtcbiAgICBpZiAobXcuY29uZmlnLmdldCgnd2dVc2VyTmFtZScpICE9PSAnRWVqaXQ0MycgfHwgbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpICE9PSAnVXNlcjpFZWppdDQzJykgcmV0dXJuO1xuXG4gICAgY29uc3QgcmVwb093bmVyID0gJ0Vlaml0NDMnO1xuICAgIGNvbnN0IHJlcG9OYW1lID0gJ3dpa2lwZWRpYS1zY3JpcHRzJztcblxuICAgIGNvbnN0IGxpbmsgPSBtdy51dGlsLmFkZFBvcnRsZXRMaW5rKG13LmNvbmZpZy5nZXQoJ3NraW4nKSA9PT0gJ21pbmVydmEnID8gJ3AtdGInIDogJ3AtY2FjdGlvbnMnLCAnIycsICdTeW5jIHVzZXIgc2NyaXB0cyBmcm9tIEdpdEh1YicsICdzeW5jLXNjcmlwdHMnKSE7XG5cbiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgbGF0ZXN0Q29tbWl0SGFzaFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJHtyZXBvT3duZXJ9LyR7cmVwb05hbWV9L2NvbW1pdHNgKTtcbiAgICAgICAgaWYgKCFsYXRlc3RDb21taXRIYXNoUmVzcG9uc2Uub2spXG4gICAgICAgICAgICByZXR1cm4gbXcubm90aWZ5KGBGYWlsZWQgdG8gZmV0Y2ggbGF0ZXN0IGNvbW1pdCBoYXNoIGZyb20gR2l0SHViOiAke2xhdGVzdENvbW1pdEhhc2hSZXNwb25zZS5zdGF0dXNUZXh0fSAoJHtsYXRlc3RDb21taXRIYXNoUmVzcG9uc2Uuc3RhdHVzfSlgLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICB0YWc6ICdzeW5jLXNjcmlwdHMtbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGxhdGVzdENvbW1pdEhhc2ggPSAoKGF3YWl0IGxhdGVzdENvbW1pdEhhc2hSZXNwb25zZS5qc29uKCkpIGFzIHsgc2hhOiBzdHJpbmcgfVtdKVswXS5zaGE7XG5cbiAgICAgICAgY29uc3Qgc2NyaXB0RGF0YVJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8ke3JlcG9Pd25lcn0vJHtyZXBvTmFtZX0vJHtsYXRlc3RDb21taXRIYXNofS9zY3JpcHRzLmpzb25gKTtcbiAgICAgICAgaWYgKCFzY3JpcHREYXRhUmVzcG9uc2Uub2spXG4gICAgICAgICAgICByZXR1cm4gbXcubm90aWZ5KGBGYWlsZWQgdG8gZmV0Y2ggc2NyaXB0IGRhdGEgZnJvbSBHaXRIdWI6ICR7c2NyaXB0RGF0YVJlc3BvbnNlLnN0YXR1c1RleHR9ICgke3NjcmlwdERhdGFSZXNwb25zZS5zdGF0dXN9KWAsIHsgdHlwZTogJ2Vycm9yJywgdGFnOiAnc3luYy1zY3JpcHRzLW5vdGlmaWNhdGlvbicgfSk7XG5cbiAgICAgICAgY29uc3Qgc2NyaXB0RGF0YSA9IChhd2FpdCBzY3JpcHREYXRhUmVzcG9uc2UuanNvbigpKSBhcyBTY3JpcHRbXTtcblxuICAgICAgICBtdy5ub3RpZnkoJ1N5bmNpbmcgc2NyaXB0cy4uLicsIHsgYXV0b0hpZGU6IGZhbHNlLCB0YWc6ICdzeW5jLXNjcmlwdHMtbm90aWZpY2F0aW9uJyB9KTtcblxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgIHNjcmlwdERhdGEubWFwKGFzeW5jIChzY3JpcHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJwYWdlTmFtZSA9IGBVc2VyOkVlaml0NDMvc2NyaXB0cy8ke3NjcmlwdC5uYW1lfWA7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VicGFnZVRhbGtOYW1lID0gYFVzZXIgdGFsazpFZWppdDQzL3NjcmlwdHMvJHtzY3JpcHQubmFtZX1gO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdE5hbWUgPSBgJHtzdWJwYWdlTmFtZX0uanNgO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlTmFtZSA9IGAke3N1YnBhZ2VOYW1lfS5jc3NgO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZnVsbFN1YnBhZ2VJbmZvID0gW1xuICAgICAgICAgICAgICAgICAgICAne3tVc2VyOkVlaml0NDMvc2NyaXB0LWRvY3VtZW50YXRpb24nLCAvL1xuICAgICAgICAgICAgICAgICAgICBzY3JpcHRbJ3VzZS1pbnN0ZWFkJ10gPyBgfCB1c2UtaW5zdGVhZCAgICAgICA9IFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvJHtzY3JpcHRbJ3VzZS1pbnN0ZWFkJ119fCR7c2NyaXB0Wyd1c2UtaW5zdGVhZCddfV1dYCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdFsnaW1hZ2Utc2l6ZSddID8gYHwgaW1hZ2Utc2l6ZSAgICAgICAgPSAke3NjcmlwdFsnaW1hZ2Utc2l6ZSddfWAgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzY3JpcHRbJ2ltYWdlLWNhcHRpb24nXSA/IGB8IGltYWdlLWNhcHRpb24gICAgID0gJHtzY3JpcHRbJ2ltYWdlLWNhcHRpb24nXX1gIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0WydvdGhlci1hdXRob3JzJ10gPyBgfCBvdGhlci1hdXRob3JzICAgICA9ICR7c2NyaXB0WydvdGhlci1hdXRob3JzJ10ubWFwKChhdXRob3IpID0+IGBbW1VzZXI6JHthdXRob3J9fCR7YXV0aG9yfV1dYCkuam9pbignLCAnKX1gIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgYHwgZGVzY3JpcHRpb24tc2hvcnQgPSAke3NjcmlwdFsnc2hvcnQtZGVzY3JpcHRpb24nXX1gLFxuICAgICAgICAgICAgICAgICAgICBgfCBkZXNjcmlwdGlvbiAgICAgICA9ICR7c2NyaXB0LmRlc2NyaXB0aW9ufWAsXG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdC51c2FnZSA/IGB8IHVzYWdlICAgICAgICAgICAgID0gJHtzY3JpcHQudXNhZ2V9YCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGB8IHNraW4tc3VwcG9ydCAgICAgID0ge3tVc2VyOkVlaml0NDMvc2tpbi1zdXBwb3J0fCR7T2JqZWN0LmVudHJpZXMoc2NyaXB0Wydza2luLXN1cHBvcnQnXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKFtza2luLCBzdGF0dXNdKSA9PiBgJHtza2lufT0ke3N0YXR1c31gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJ3wnKX19fWAsXG4gICAgICAgICAgICAgICAgICAgIGB8IHJlbGVhc2VkICAgICAgICAgID0ge3tzdGFydCBkYXRlIGFuZCBhZ2V8JHtzY3JpcHQucmVsZWFzZWR9fX1gLFxuICAgICAgICAgICAgICAgICAgICBgfCB1cGRhdGVkICAgICAgICAgICA9IHt7c3RhcnQgZGF0ZSBhbmQgYWdlfCR7c2NyaXB0LnVwZGF0ZWR9fX1gLFxuICAgICAgICAgICAgICAgICAgICAnfX0nLFxuICAgICAgICAgICAgICAgIF0uZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgICAgICAgICAgICAgbGV0IHNjcmlwdENvbnRlbnQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0Q29udGVudFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8ke3JlcG9Pd25lcn0vJHtyZXBvTmFtZX0vJHtsYXRlc3RDb21taXRIYXNofS9kaXN0L3NjcmlwdHMvJHtzY3JpcHQubmFtZX0uanNgKTtcbiAgICAgICAgICAgICAgICBpZiAoc2NyaXB0Q29udGVudFJlc3BvbnNlLm9rKSBzY3JpcHRDb250ZW50ID0gYXdhaXQgc2NyaXB0Q29udGVudFJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtdy5ub3RpZnkoYEZhaWxlZCB0byBmZXRjaCBcIiR7c2NyaXB0Lm5hbWV9LmpzXCIgZnJvbSBHaXRIdWI6ICR7c2NyaXB0Q29udGVudFJlc3BvbnNlLnN0YXR1c1RleHR9ICgke3NjcmlwdENvbnRlbnRSZXNwb25zZS5zdGF0dXN9KWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWc6ICdzeW5jLXNjcmlwdHMtbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgc3R5bGVDb250ZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoc2NyaXB0LmNzcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZUNvbnRlbnRSZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vJHtyZXBvT3duZXJ9LyR7cmVwb05hbWV9LyR7bGF0ZXN0Q29tbWl0SGFzaH0vZGlzdC9zdHlsZXMvJHtzY3JpcHQubmFtZX0uY3NzYCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlQ29udGVudFJlc3BvbnNlLm9rKSBzdHlsZUNvbnRlbnQgPSBhd2FpdCBzdHlsZUNvbnRlbnRSZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgRmFpbGVkIHRvIGZldGNoIFwiJHtzY3JpcHQubmFtZX0uY3NzXCIgZnJvbSBHaXRIdWI6ICR7c3R5bGVDb250ZW50UmVzcG9uc2Uuc3RhdHVzVGV4dH0gKCR7c3R5bGVDb250ZW50UmVzcG9uc2Uuc3RhdHVzfSlgLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWc6ICdzeW5jLXNjcmlwdHMtbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghc2NyaXB0LnBlcnNvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGVkaXRPckNyZWF0ZShzdWJwYWdlTmFtZSwgZnVsbFN1YnBhZ2VJbmZvLmpvaW4oJ1xcbicpLCAnU3luY2luZyBzY3JpcHQgZG9jdW1lbnRhdGlvbiBmcm9tIEdpdEh1YicpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBlZGl0T3JDcmVhdGUoc3VicGFnZVRhbGtOYW1lLCAnI1JFRElSRUNUIFtbVXNlciB0YWxrOkVlaml0NDNdXScsICdSZWRpcmVjdGluZyBzY3JpcHQgZG9jdW1lbnRhdGlvbiB0YWxrIHBhZ2UgdG8gbWFpbiB1c2VyIHRhbGsgcGFnZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzY3JpcHRDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBlZGl0T3JDcmVhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgYC8vIDxub3dpa2k+XFxuLy8gTm90ZTogVGhpcyBzY3JpcHQgd2FzIGNvbXBpbGVkIGZyb20gVHlwZVNjcmlwdC4gRm9yIGEgbW9yZSByZWFkYWJsZSB2ZXJzaW9uLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tLyR7cmVwb093bmVyfS8ke3JlcG9OYW1lfS9ibG9iL21haW4vc2NyaXB0cy8ke3NjcmlwdC5uYW1lfS50c1xcblxcbiR7c2NyaXB0Q29udGVudH1cXG4vLyA8L25vd2lraT5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1N5bmNpbmcgc2NyaXB0IGZyb20gR2l0SHViJyxcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmIChzY3JpcHQuY3NzICYmIHN0eWxlQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZWRpdE9yQ3JlYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgYC8qIDxub3dpa2k+ICovXFxuLyogTm90ZTogVGhpcyBzY3JpcHQgd2FzIGNvbXBpbGVkIGZyb20gbW9kZXJuIENTUy4gRm9yIGEgbW9yZSByZWFkYWJsZSB2ZXJzaW9uLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tLyR7cmVwb093bmVyfS8ke3JlcG9OYW1lfS9ibG9iL21haW4vc3R5bGVzLyR7c2NyaXB0Lm5hbWV9LmNzcyAqL1xcblxcbiR7c3R5bGVDb250ZW50fVxcbi8qIDwvbm93aWtpPiAqL2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAnU3luY2luZyBzdHlsZXMgZnJvbSBHaXRIdWInLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG5cbiAgICAgICAgYXdhaXQgZWRpdE9yQ3JlYXRlKFxuICAgICAgICAgICAgJ1VzZXI6RWVqaXQ0My9zY3JpcHRzLWluZm8nLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIG1hcFNjcmlwdHMoc2NyaXB0RGF0YS5maWx0ZXIoKHNjcmlwdCkgPT4gIXNjcmlwdC5wZXJzb25hbCAmJiAhc2NyaXB0LmZvcmspKSwgLy9cbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAnPT09IFBlcnNvbmFsLXVzZSBzY3JpcHRzID09PScsXG4gICAgICAgICAgICAgICAgbWFwU2NyaXB0cyhzY3JpcHREYXRhLmZpbHRlcigoc2NyaXB0KSA9PiBzY3JpcHQucGVyc29uYWwpKSxcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAnPT09IEZvcmtzID09PScsXG4gICAgICAgICAgICAgICAgbWFwU2NyaXB0cyhzY3JpcHREYXRhLmZpbHRlcigoc2NyaXB0KSA9PiBzY3JpcHQuZm9yaykpLFxuICAgICAgICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICdTeW5jaW5nIHNjcmlwdCBsaXN0IGZyb20gR2l0SHViJyxcbiAgICAgICAgKTtcblxuICAgICAgICBtdy5ub3RpZnkoYFN5bmNlZCAke3NjcmlwdERhdGEubGVuZ3RofSBzY3JpcHRzIGZyb20gR2l0SHViIWAsIHsgdHlwZTogJ3N1Y2Nlc3MnLCB0YWc6ICdzeW5jLXNjcmlwdHMtbm90aWZpY2F0aW9uJyB9KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcyBzY3JpcHRzIHRvIGEgYnVsbGV0ZWQgbGlzdC5cbiAgICAgICAgICogQHBhcmFtIHNjcmlwdHMgVGhlIHNjcmlwdHMgdG8gbWFwLlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgbWFwcGVkIHNjcmlwdHMuXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBtYXBTY3JpcHRzKHNjcmlwdHM6IFNjcmlwdFtdKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NyaXB0c1xuICAgICAgICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICAgICAgICAgIChzY3JpcHQpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBgKiBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzLyR7c2NyaXB0Lm5hbWV9JHtzY3JpcHQucGVyc29uYWwgPyAnLmpzJyA6ICcnfXwke3NjcmlwdC5uYW1lfV1dIC0gJHtzY3JpcHRbJ3Nob3J0LWRlc2NyaXB0aW9uJ10gfHwgc2NyaXB0LmRlc2NyaXB0aW9ufSR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0Wyd1c2UtaW5zdGVhZCddID8gJyAoPHNwYW4gc3R5bGU9XCJjb2xvcjogI2JkMjgyOFwiPmRlcHJlY2F0ZWQ8L3NwYW4+KScgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFZGl0cyBhIHBhZ2UsIG9yIGNyZWF0ZXMgaXQgaWYgaXQgZG9lc24ndCBleGlzdC5cbiAgICAgICAgICogQHBhcmFtIHRpdGxlIFRoZSB0aXRsZSBvZiB0aGUgcGFnZSB0byBlZGl0LlxuICAgICAgICAgKiBAcGFyYW0gdGV4dCBUaGUgcGFnZSBjb250ZW50IHRvIHNldC5cbiAgICAgICAgICogQHBhcmFtIHN1bW1hcnkgVGhlIGVkaXQgc3VtbWFyeSAod2lsbCBhcHBlbmQgc2NyaXB0IG5vdGljZSkuXG4gICAgICAgICAqL1xuICAgICAgICBhc3luYyBmdW5jdGlvbiBlZGl0T3JDcmVhdGUodGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nLCBzdW1tYXJ5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgICAgIHN1bW1hcnkgKz0gJyAodmlhIFtbVXNlcjpFZWppdDQzL3NjcmlwdHMvc2NyaXB0LXVwZGF0ZXIuanN8c2NyaXB0XV0pJztcbiAgICAgICAgICAgIGF3YWl0IG5ldyBtdy5BcGkoKVxuICAgICAgICAgICAgICAgIC5lZGl0KHRpdGxlLCAoKSA9PiAoeyB0ZXh0LCBzdW1tYXJ5LCB3YXRjaGxpc3Q6ICd3YXRjaCcgfSkpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGFzeW5jIChlcnJvckNvZGU6IHN0cmluZywgZXJyb3JJbmZvOiBNZWRpYVdpa2lEYXRhRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ25vY3JlYXRlLW1pc3NpbmcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmV3IG13LkFwaSgpLmNyZWF0ZSh0aXRsZSwgeyBzdW1tYXJ5LCB3YXRjaGxpc3Q6ICd3YXRjaCcgfSwgdGV4dCkuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCBlcnJvckluZm86IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgRXJyb3IgY3JlYXRpbmcgJHt0aXRsZX06ICR7ZXJyb3JJbmZvPy5lcnJvci5pbmZvID8/ICdVbmtub3duIGVycm9yJ30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBFcnJvciBlZGl0aW5nIG9yIGNyZWF0aW5nICR7dGl0bGV9OiAke2Vycm9ySW5mbz8uZXJyb3IuaW5mbyA/PyAnVW5rbm93biBlcnJvcid9ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogImFBbUJBLEdBQUcsT0FBTyxNQUFNLENBQUMsZ0JBQWdCLEVBQUcsSUFBTSxDQUN0QyxHQUFJLEdBQUcsT0FBTyxJQUFJLFlBQVksSUFBTSxXQUFhLEdBQUcsT0FBTyxJQUFJLFlBQVksSUFBTSxlQUFnQixPQUVqRyxNQUFNQSxFQUFZLFVBQ1pDLEVBQVcsb0JBRUosR0FBRyxLQUFLLGVBQWUsR0FBRyxPQUFPLElBQUksTUFBTSxJQUFNLFVBQVksT0FBUyxhQUFjLElBQUssZ0NBQWlDLGNBQWMsRUFFaEosaUJBQWlCLFFBQVMsTUFBT0MsR0FBVSxDQUM1Q0EsRUFBTSxlQUFlLEVBRXJCLE1BQU1DLEVBQTJCLE1BQU0sTUFBTSxnQ0FBZ0NILENBQVMsSUFBSUMsQ0FBUSxVQUFVLEVBQzVHLEdBQUksQ0FBQ0UsRUFBeUIsR0FDMUIsT0FBTyxHQUFHLE9BQU8sbURBQW1EQSxFQUF5QixVQUFVLEtBQUtBLEVBQXlCLE1BQU0sSUFBSyxDQUM1SSxLQUFNLFFBQ04sSUFBSywyQkFDVCxDQUFDLEVBRUwsTUFBTUMsR0FBcUIsTUFBTUQsRUFBeUIsS0FBSyxHQUF5QixDQUFDLEVBQUUsSUFFckZFLEVBQXFCLE1BQU0sTUFBTSxxQ0FBcUNMLENBQVMsSUFBSUMsQ0FBUSxJQUFJRyxDQUFnQixlQUFlLEVBQ3BJLEdBQUksQ0FBQ0MsRUFBbUIsR0FDcEIsT0FBTyxHQUFHLE9BQU8sNENBQTRDQSxFQUFtQixVQUFVLEtBQUtBLEVBQW1CLE1BQU0sSUFBSyxDQUFFLEtBQU0sUUFBUyxJQUFLLDJCQUE0QixDQUFDLEVBRXBMLE1BQU1DLEVBQWMsTUFBTUQsRUFBbUIsS0FBSyxFQUVsRCxHQUFHLE9BQU8scUJBQXNCLENBQUUsU0FBVSxHQUFPLElBQUssMkJBQTRCLENBQUMsRUFFckYsTUFBTSxRQUFRLElBQ1ZDLEVBQVcsSUFB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QSxFQUFPLElBQUksQ0FBQyxDQUN6RCxFQUFFLEtBQUs7QUFBQSxDQUFJLEVBQ1gsaUNBQ0osRUFFQSxHQUFHLE9BQU8sVUFBVUQsRUFBVyxNQUFNLHdCQUF5QixDQUFFLEtBQU0sVUFBVyxJQUFLLDJCQUE0QixDQUFDLEVBT25ILFNBQVNlLEVBQVdDLEVBQW1CLENBQ25DLE9BQU9BLEVBQ0YsSUFDSWYsR0FDRyw0QkFBNEJBLEVBQU8sSUFBSSxHQUFHQSxFQUFPLFNBQVcsTUFBUSxFQUFFLElBQUlBLEVBQU8sSUFBSSxRQUFRQSxFQUFPLG1CQUFtQixHQUFLQSxFQUFPLFdBQVcsR0FDMUlBLEVBQU8sYUFBYSxFQUFJLG9EQUFzRCxFQUNsRixFQUNSLEVBQ0MsS0FBSztBQUFBLENBQUksQ0FDbEIsQ0FRQSxlQUFlYSxFQUFhRyxFQUFlQyxFQUFjQyxFQUFnQyxDQUNyRkEsR0FBVywyREFDWCxNQUFNLElBQUksR0FBRyxJQUFJLEVBQ1osS0FBS0YsRUFBTyxLQUFPLENBQUUsS0FBQUMsRUFBTSxRQUFBQyxFQUFTLFVBQVcsT0FBUSxFQUFFLEVBQ3pELE1BQU0sTUFBT0MsRUFBbUJDLElBQWtDLENBQy9ELEdBQUlELElBQWMsbUJBQ2QsTUFBTSxJQUFJLEdBQUcsSUFBSSxFQUFFLE9BQU9ILEVBQU8sQ0FBRSxRQUFBRSxFQUFTLFVBQVcsT0FBUSxFQUFHRCxDQUFJLEVBQUUsTUFBTSxDQUFDRSxFQUFtQkMsSUFBa0MsQ0FDaEksR0FBRyxPQUFPLGtCQUFrQkosQ0FBSyxLQUFLSSxHQUFXLE1BQU0sTUFBUSxlQUFlLEtBQUtELENBQVMsSUFBSyxDQUFFLEtBQU0sT0FBUSxDQUFDLENBRXRILENBQUMsTUFDQSxDQUNELEdBQUcsT0FBTyw2QkFBNkJILENBQUssS0FBS0ksR0FBVyxNQUFNLE1BQVEsZUFBZSxLQUFLRCxDQUFTLElBQUssQ0FBRSxLQUFNLE9BQVEsQ0FBQyxFQUM3SCxNQUNKLENBQ0osQ0FBQyxDQUNULENBQ0osQ0FBQyxDQUNMLENBQUMiLAogICJuYW1lcyI6IFsicmVwb093bmVyIiwgInJlcG9OYW1lIiwgImV2ZW50IiwgImxhdGVzdENvbW1pdEhhc2hSZXNwb25zZSIsICJsYXRlc3RDb21taXRIYXNoIiwgInNjcmlwdERhdGFSZXNwb25zZSIsICJzY3JpcHREYXRhIiwgInNjcmlwdCIsICJzdWJwYWdlTmFtZSIsICJzdWJwYWdlVGFsa05hbWUiLCAic2NyaXB0TmFtZSIsICJzdHlsZU5hbWUiLCAiZnVsbFN1YnBhZ2VJbmZvIiwgImF1dGhvciIsICJza2luIiwgInN0YXR1cyIsICJzY3JpcHRDb250ZW50IiwgInNjcmlwdENvbnRlbnRSZXNwb25zZSIsICJzdHlsZUNvbnRlbnQiLCAic3R5bGVDb250ZW50UmVzcG9uc2UiLCAiZWRpdE9yQ3JlYXRlIiwgIm1hcFNjcmlwdHMiLCAic2NyaXB0cyIsICJ0aXRsZSIsICJ0ZXh0IiwgInN1bW1hcnkiLCAiZXJyb3JDb2RlIiwgImVycm9ySW5mbyJdCn0K
