"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Sync user scripts from GitHub","sync-scripts").addEventListener("click",d=>{d.preventDefault();const l=new OO.ui.WindowManager;document.body.append(l.$element[0]);const e=new n;l.addWindows([e]),e.open()});class n extends OO.ui.ProcessDialog{constructor(){super({size:"medium"});this.repoOwner="Eejit43";this.repoName="wikipedia-scripts";this.checkboxElements=[];this.getSetupProcess=()=>n.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){const t=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(t.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1});for(const t of this.scripts){const s=new OO.ui.CheckboxInputWidget;this.checkboxElements.push([t.name,s]);const a=new OO.ui.FieldLayout(s,{align:"inline",label:t.name});this.content.$element.append(a.$element)}this.$body.append(this.content.$element)}));this.getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):e==="save"?new OO.ui.Process(()=>{const t=[];for(const[s,a]of this.checkboxElements)a.isSelected()&&t.push(this.scripts.find(r=>r.name===s));this.getManager().closeWindow(this),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(t.map(s=>this.handleScript(s))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(s=>!s.personal&&!s.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(s=>s.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(s=>s.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${t.length} script${t.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):n.super.prototype.getActionProcess.call(this,e);this.getTeardownProcess=()=>n.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});this.loadScriptData=async()=>{const e=await fetch(`https://api.github.com/repos/${this.repoOwner}/${this.repoName}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;const t=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/scripts.json`);if(!t.ok)return`Failed to fetch script data from GitHub: ${t.statusText} (${t.status})`;this.scripts=await t.json()};n.static.name="ScriptUpdaterDialog",n.static.title="What scripts do you want to update?",n.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}wrapAsyncMethod(e){const t=$.Deferred();return e().then(s=>t.resolve(s)),t.promise()}async handleScript(e){const t=`User:Eejit43/scripts/${e.name}`,s=`User talk:Eejit43/scripts/${e.name}`,a=`${t}.js`,r=`${t}.css`,m=["{{User:Eejit43/script-documentation",e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = [[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`:null,e["image-size"]?`| image-size        = ${e["image-size"]}`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(i=>`[[User:${i}|${i}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([i,c])=>`* '''{{start date and age|${i}}}:'''${Array.isArray(c)?`
${c.map(h=>`** ${h}`).join(`
`)}`:` ${c}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/skin-support|${Object.entries(e["skin-support"]).map(([i,c])=>`${i}=${c}`).join("|")}}}`,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean);let o=null;const p=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/dist/scripts/${e.name}.js`);if(p.ok)o=await p.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${p.statusText} (${p.status})`,{type:"error",tag:"sync-scripts-notification"});let u=null;if(e.css){const i=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/dist/styles/${e.name}.css`);i.ok?u=await i.text():mw.notify(`Failed to fetch "${e.name}.css" from GitHub: ${i.statusText} (${i.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(await this.editOrCreate(t,m.join(`
`),"Syncing script documentation from GitHub"),await this.editOrCreate(s,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),o&&await this.editOrCreate(a,`// <nowiki>
// Note: This script was compiled from TypeScript. For a more readable version, see https://github.com/${this.repoOwner}/${this.repoName}/blob/main/scripts/${e.name}.ts

${o}
// </nowiki>`,"Syncing script from GitHub"),e.css&&u&&await this.editOrCreate(r,`/* <nowiki> */
/* Note: This script was compiled from modern CSS. For a more readable version, see https://github.com/${this.repoOwner}/${this.repoName}/blob/main/styles/${e.name}.css */

${u}
/* </nowiki> */`,"Syncing styles from GitHub")}mapScripts(e){return e.map(t=>`* [[User:Eejit43/scripts/${t.name}${t.personal?".js":""}|${t.name}]] - ${t["short-description"]||t.description}${t["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${t["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,t,s){s+=" (via [[User:Eejit43/scripts/script-updater.js|script]])",await new mw.Api().edit(e,()=>({text:t,summary:s,watchlist:"watch"})).catch(async(a,r)=>{if(a==="nocreate-missing")await new mw.Api().create(e,{summary:s,watchlist:"watch"},t).catch((m,o)=>{mw.notify(`Error creating ${e}: ${o?.error.info??"Unknown error"} (${m})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${r?.error.info??"Unknown error"} (${a})`,{type:"error"});return}})}}Object.assign(n.prototype,OO.ui.ProcessDialog.prototype)});
//# sourceMappingURL=data:application/json;base64,
