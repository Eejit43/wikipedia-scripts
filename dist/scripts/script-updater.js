"use strict";mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;const i="Eejit43",n="wikipedia-scripts";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Sync user scripts from GitHub","sync-scripts").addEventListener("click",async y=>{y.preventDefault();const g=await fetch(`https://api.github.com/repos/${i}/${n}/commits`);if(!g.ok)return mw.notify(`Failed to fetch latest commit hash from GitHub: ${g.statusText} (${g.status})`,{type:"error",tag:"sync-scripts-notification"});const $=(await g.json())[0].sha,u=await fetch(`https://raw.githubusercontent.com/${i}/${n}/${$}/scripts.json`);if(!u.ok)return mw.notify(`Failed to fetch script data from GitHub: ${u.statusText} (${u.status})`,{type:"error",tag:"sync-scripts-notification"});const a=await u.json();mw.notify("Syncing scripts...",{autoHide:!1,tag:"sync-scripts-notification"}),await Promise.all(a.map(async t=>{const e=`User:Eejit43/scripts/${t.name}`,o=`User talk:Eejit43/scripts/${t.name}`,l=`${e}.js`,d=`${e}.css`,w=["{{User:Eejit43/script-documentation",t["use-instead"]?`| use-instead       = [[User:Eejit43/scripts/${t["use-instead"]}|${t["use-instead"]}]]`:null,t["image-size"]?`| image-size        = ${t["image-size"]}`:null,t["image-caption"]?`| image-caption     = ${t["image-caption"]}`:null,t["other-authors"]?`| other-authors     = ${t["other-authors"].map(s=>`[[User:${s}|${s}]]`).join(", ")}`:null,`| description-short = ${t["short-description"]}`,`| description       = ${t.description}`,t.usage?`| usage             = ${t.usage}`:null,t.changelog?`| changelog         = 
${Object.entries(t.changelog).map(([s,m])=>`* '''{{start date and age|${s}}}:'''${Array.isArray(m)?`
${m.map(k=>`** ${k}`).join(`
`)}`:` ${m}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/skin-support|${Object.entries(t["skin-support"]).map(([s,m])=>`${s}=${m}`).join("|")}}}`,`| released          = {{start date and age|${t.released}}}`,`| updated           = {{start date and age|${t.updated}}}`,"}}"].filter(Boolean);let c=null;const p=await fetch(`https://raw.githubusercontent.com/${i}/${n}/${$}/dist/scripts/${t.name}.js`);if(p.ok)c=await p.text();else return mw.notify(`Failed to fetch "${t.name}.js" from GitHub: ${p.statusText} (${p.status})`,{type:"error",tag:"sync-scripts-notification"});let h=null;if(t.css){const s=await fetch(`https://raw.githubusercontent.com/${i}/${n}/${$}/dist/styles/${t.name}.css`);s.ok?h=await s.text():mw.notify(`Failed to fetch "${t.name}.css" from GitHub: ${s.statusText} (${s.status})`,{type:"error",tag:"sync-scripts-notification"})}t.personal||(await r(e,w.join(`
`),"Syncing script documentation from GitHub"),await r(o,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),c&&await r(l,`// <nowiki>
// Note: This script was compiled from TypeScript. For a more readable version, see https://github.com/${i}/${n}/blob/main/scripts/${t.name}.ts

${c}
// </nowiki>`,"Syncing script from GitHub"),t.css&&h&&await r(d,`/* <nowiki> */
/* Note: This script was compiled from modern CSS. For a more readable version, see https://github.com/${i}/${n}/blob/main/styles/${t.name}.css */

${h}
/* </nowiki> */`,"Syncing styles from GitHub")})),await r("User:Eejit43/scripts-info",[f(a.filter(t=>!t.personal&&!t.fork)),"","=== Forks ===",f(a.filter(t=>t.fork)),"","=== Personal scripts ===",f(a.filter(t=>t.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${a.length} scripts from GitHub!`,{type:"success",tag:"sync-scripts-notification"});function f(t){return t.map(e=>`* [[User:Eejit43/scripts/${e.name}${e.personal?".js":""}|${e.name}]] - ${e["short-description"]||e.description}${e["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async function r(t,e,o){o+=" (via [[User:Eejit43/scripts/script-updater.js|script]])",await new mw.Api().edit(t,()=>({text:e,summary:o,watchlist:"watch"})).catch(async(l,d)=>{if(l==="nocreate-missing")await new mw.Api().create(t,{summary:o,watchlist:"watch"},e).catch((w,c)=>{mw.notify(`Error creating ${t}: ${c?.error.info??"Unknown error"} (${w})`,{type:"error"})});else{mw.notify(`Error editing or creating ${t}: ${d?.error.info??"Unknown error"} (${l})`,{type:"error"});return}})}})});
//# sourceMappingURL=data:application/json;base64,
