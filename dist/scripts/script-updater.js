// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/script-updater.ts

"use strict";mw.loader.using(["mediawiki.util","oojs-ui-core","oojs-ui-widgets","oojs-ui-windows"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;const m=document.querySelector(".mw-editsection").cloneNode(!0),r=document.createElement("a");r.href="#",r.style.fontWeight="bold",r.textContent="Sync from GitHub",r.addEventListener("click",h=>{h.preventDefault();const e=new OO.ui.WindowManager;document.body.append(e.$element[0]);const t=new i;e.addWindows([t]),t.open()}),m.querySelector("a").replaceWith(r),document.querySelector("#My_user_scripts.mw-headline").after(m);class i extends OO.ui.ProcessDialog{repoOwner="Eejit43";repoName="wikipedia-scripts";content;checkboxElements=[];latestCommitHash;scripts;constructor(){super({size:"medium"}),i.static.name="ScriptUpdaterDialog",i.static.title="What scripts do you want to update?",i.static.actions=[{action:"cancel",label:"Close",flags:["safe","close"]},{action:"save",label:"Run",flags:["primary","progressive"]}]}getSetupProcess=()=>i.super.prototype.getSetupProcess.call(this).next(()=>this.wrapAsyncMethod(this.loadScriptData).then(e=>{if(e){const t=new OO.ui.MessageWidget({type:"error",label:e});this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1}),this.content.$element.append(t.$element),this.$body.append(this.content.$element),this.getActions().setAbilities({save:!1});return}this.content=new OO.ui.PanelLayout({padded:!0,expanded:!1});for(const t of this.scripts){const s=new OO.ui.CheckboxInputWidget;this.checkboxElements.push([t.name,s]);const a=new OO.ui.FieldLayout(s,{align:"inline",label:t.name});this.content.$element.append(a.$element)}this.$body.append(this.content.$element)}));getActionProcess=e=>e==="cancel"?new OO.ui.Process(()=>{this.getManager().closeWindow(this)}):e==="save"?new OO.ui.Process(()=>{const t=[];for(const[s,a]of this.checkboxElements)a.isSelected()&&t.push(this.scripts.find(o=>o.name===s));this.getManager().closeWindow(this),(async()=>(mw.notify("Syncing scripts...",{tag:"sync-scripts-notification"}),await Promise.all(t.map(s=>this.handleScript(s))),await this.editOrCreate("User:Eejit43/scripts-info",[this.mapScripts(this.scripts.filter(s=>!s.personal&&!s.fork)),"","=== Forks ===",this.mapScripts(this.scripts.filter(s=>s.fork)),"","=== Personal scripts ===",this.mapScripts(this.scripts.filter(s=>s.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${t.length} script${t.length===1?"":"s"} from GitHub!`,{type:"success",tag:"sync-scripts-notification"})))()}):i.super.prototype.getActionProcess.call(this,e);getTeardownProcess=()=>i.super.prototype.getTeardownProcess.call(this).next(()=>{this.$body.empty()});wrapAsyncMethod(e){const t=$.Deferred();return e().then(s=>t.resolve(s)),t.promise()}loadScriptData=async()=>{const e=await fetch(`https://api.github.com/repos/${this.repoOwner}/${this.repoName}/commits`);if(!e.ok)return`Failed to fetch latest commit hash from GitHub: ${e.statusText} (${e.status})`;this.latestCommitHash=(await e.json())[0].sha;const t=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/scripts.json`);if(!t.ok)return`Failed to fetch script data from GitHub: ${t.statusText} (${t.status})`;this.scripts=await t.json()};async handleScript(e){const t=`User:Eejit43/scripts/${e.name}`,s=`User talk:Eejit43/scripts/${e.name}`,a=`${t}.js`,o=`${t}.css`,u=["{{User:Eejit43/script-documentation",e.image===!1?`| image             = ${e.image}`:null,e["in-development"]?`| in-development    = ${e["in-development"]}`:null,e["use-instead"]?`| use-instead       = [[User:Eejit43/scripts/${e["use-instead"]}|${e["use-instead"]}]]`:null,e["image-caption"]?`| image-caption     = ${e["image-caption"]}`:null,e["other-authors"]?`| other-authors     = ${e["other-authors"].map(n=>`[[User:${n}|${n}]]`).join(", ")}`:null,`| description-short = ${e["short-description"]}`,`| description       = ${e.description}`,e.usage?`| usage             = ${e.usage}`:null,e.changelog?`| changelog         = 
${Object.entries(e.changelog).map(([n,l])=>`* '''{{start date and age|${n}}}:'''${Array.isArray(l)?`
${l.map(g=>`** ${g}`).join(`
`)}`:` ${l}`}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/skin-support|${Object.entries(e["skin-support"]).map(([n,l])=>`${n}=${l}`).join("|")}}}`,`| released          = {{start date and age|${e.released}}}`,`| updated           = {{start date and age|${e.updated}}}`,"}}"].filter(Boolean);let c=null;const p=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/dist/scripts/${e.name}.js`);if(p.ok)c=await p.text();else return mw.notify(`Failed to fetch "${e.name}.js" from GitHub: ${p.statusText} (${p.status})`,{type:"error",tag:"sync-scripts-notification"});let d=null;if(e.css){const n=await fetch(`https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/${this.latestCommitHash}/dist/styles/${e.name}.css`);n.ok?d=await n.text():mw.notify(`Failed to fetch "${e.name}.css" from GitHub: ${n.statusText} (${n.status})`,{type:"error",tag:"sync-scripts-notification"})}e.personal||(await this.editOrCreate(t,u.join(`
`),"Syncing script documentation from GitHub"),await this.editOrCreate(s,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),c&&await this.editOrCreate(a,c,"Syncing script from GitHub"),e.css&&d&&await this.editOrCreate(o,d,"Syncing styles from GitHub")}mapScripts(e){return e.map(t=>`* [[User:Eejit43/scripts/${t.name}${t.personal?".js":""}|${t.name}]] - ${t["short-description"]||t.description}${t["in-development"]?' (<span style="color: #bd2828">in development</span>)':""}${t["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async editOrCreate(e,t,s){s+=" (via [[User:Eejit43/scripts/script-updater.js|script]])",await new mw.Api().edit(e,()=>({text:t,summary:s,watchlist:"watch"})).catch(async(a,o)=>{if(a==="nocreate-missing")await new mw.Api().create(e,{summary:s,watchlist:"watch"},t).catch((u,c)=>{mw.notify(`Error creating ${e}: ${c?.error.info??"Unknown error"} (${u})`,{type:"error"})});else{mw.notify(`Error editing or creating ${e}: ${o?.error.info??"Unknown error"} (${a})`,{type:"error"});return}})}}Object.assign(i.prototype,OO.ui.ProcessDialog.prototype)});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
