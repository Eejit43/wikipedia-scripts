"use strict";mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgUserName")!=="Eejit43"||mw.config.get("wgPageName")!=="User:Eejit43")return;const s="Eejit43",n="wikipedia-scripts";mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Sync user scripts from GitHub","sync-scripts").addEventListener("click",async y=>{y.preventDefault();const m=await fetch(`https://api.github.com/repos/${s}/${n}/commits`);if(!m.ok)return mw.notify(`Failed to fetch latest commit hash from GitHub: ${m.statusText} (${m.status})`,{type:"error",tag:"sync-scripts-notification"});const l=(await m.json())[0].sha,p=await fetch(`https://raw.githubusercontent.com/${s}/${n}/${l}/scripts.json`);if(!p.ok)return mw.notify(`Failed to fetch script data from GitHub: ${p.statusText} (${p.status})`,{type:"error",tag:"sync-scripts-notification"});const a=await p.json();mw.notify("Syncing scripts...",{autoHide:!1,tag:"sync-scripts-notification"}),await Promise.all(a.map(async t=>{const e=`User:Eejit43/scripts/${t.name}`,o=`User talk:Eejit43/scripts/${t.name}`,u=`${e}.js`,f=`${e}.css`,$=["{{User:Eejit43/script-documentation",t["use-instead"]?`| use-instead       = [[User:Eejit43/scripts/${t["use-instead"]}|${t["use-instead"]}]]`:null,t["image-size"]?`| image-size        = ${t["image-size"]}`:null,t["image-caption"]?`| image-caption     = ${t["image-caption"]}`:null,t["other-authors"]?`| other-authors     = ${t["other-authors"].map(i=>`[[User:${i}|${i}]]`).join(", ")}`:null,`| description-short = ${t["short-description"]}`,`| description       = ${t.description}`,t.usage?`| usage             = ${t.usage}`:null,t.changelog?`| changelog         = ${Object.entries(t.changelog).map(([i,h])=>`* '''{{start date and age|${i}}}:''' ${h}`).join(`
`)}`:null,`| skin-support      = {{User:Eejit43/skin-support|${Object.entries(t["skin-support"]).map(([i,h])=>`${i}=${h}`).join("|")}}}`,`| released          = {{start date and age|${t.released}}}`,`| updated           = {{start date and age|${t.updated}}}`,"}}"].filter(Boolean);let c=null;const g=await fetch(`https://raw.githubusercontent.com/${s}/${n}/${l}/dist/scripts/${t.name}.js`);if(g.ok)c=await g.text();else return mw.notify(`Failed to fetch "${t.name}.js" from GitHub: ${g.statusText} (${g.status})`,{type:"error",tag:"sync-scripts-notification"});let w=null;if(t.css){const i=await fetch(`https://raw.githubusercontent.com/${s}/${n}/${l}/dist/styles/${t.name}.css`);i.ok?w=await i.text():mw.notify(`Failed to fetch "${t.name}.css" from GitHub: ${i.statusText} (${i.status})`,{type:"error",tag:"sync-scripts-notification"})}t.personal||(await r(e,$.join(`
`),"Syncing script documentation from GitHub"),await r(o,"#REDIRECT [[User talk:Eejit43]]","Redirecting script documentation talk page to main user talk page")),c&&await r(u,`// <nowiki>
// Note: This script was compiled from TypeScript. For a more readable version, see https://github.com/${s}/${n}/blob/main/scripts/${t.name}.ts

${c}
// </nowiki>`,"Syncing script from GitHub"),t.css&&w&&await r(f,`/* <nowiki> */
/* Note: This script was compiled from modern CSS. For a more readable version, see https://github.com/${s}/${n}/blob/main/styles/${t.name}.css */

${w}
/* </nowiki> */`,"Syncing styles from GitHub")})),await r("User:Eejit43/scripts-info",[d(a.filter(t=>!t.personal&&!t.fork)),"","=== Forks ===",d(a.filter(t=>t.fork)),"","=== Personal scripts ===",d(a.filter(t=>t.personal))].join(`
`),"Syncing script list from GitHub"),mw.notify(`Synced ${a.length} scripts from GitHub!`,{type:"success",tag:"sync-scripts-notification"});function d(t){return t.map(e=>`* [[User:Eejit43/scripts/${e.name}${e.personal?".js":""}|${e.name}]] - ${e["short-description"]||e.description}${e["use-instead"]?' (<span style="color: #bd2828">deprecated</span>)':""}`).join(`
`)}async function r(t,e,o){o+=" (via [[User:Eejit43/scripts/script-updater.js|script]])",await new mw.Api().edit(t,()=>({text:e,summary:o,watchlist:"watch"})).catch(async(u,f)=>{if(u==="nocreate-missing")await new mw.Api().create(t,{summary:o,watchlist:"watch"},e).catch(($,c)=>{mw.notify(`Error creating ${t}: ${c?.error.info??"Unknown error"} (${$})`,{type:"error"})});else{mw.notify(`Error editing or creating ${t}: ${f?.error.info??"Unknown error"} (${u})`,{type:"error"});return}})}})});
//# sourceMappingURL=data:application/json;base64,
