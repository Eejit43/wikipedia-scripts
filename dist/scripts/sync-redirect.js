"use strict";
mw.loader.using(["mediawiki.util"], async () => {
  if (!mw.Title.isTalkNamespace(mw.config.get("wgNamespaceNumber")))
    return;
  const mainPageInfoRevisions = await new mw.Api().get({ action: "query", formatversion: 2, prop: "info|revisions", rvprop: "content", rvslots: "*", titles: `${mw.config.get("wgFormattedNamespaces")[mw.config.get("wgNamespaceNumber") - 1]}:${mw.config.get("wgTitle")}` });
  if (!mainPageInfoRevisions.query.pages[0].redirect)
    return;
  const link = mw.util.addPortletLink(mw.config.get("skin") === "minerva" ? "p-tb" : "p-cactions", "#", "Sync with main page redirect", "sync-redirect");
  link.addEventListener("click", async (event) => {
    event.preventDefault();
    mw.notify("Editing...", { tag: "sync-redirect-notification" });
    const mainPageContent = mainPageInfoRevisions.query.pages[0].revisions[0].slots.main.content;
    const redirectTarget = /#redirect:? *\[\[(.+)]]/i.exec(mainPageContent)?.[1].replaceAll("_", " ").split("|")[0].split("#")[0].trim();
    if (!redirectTarget)
      return mw.notify("Failed to parse redirect target!", { type: "error", tag: "sync-redirect-notification" });
    const redirectTargetParsed = new DOMParser().parseFromString(redirectTarget, "text/html").documentElement.textContent;
    if (!redirectTargetParsed)
      return mw.notify("Failed to parse redirect target!", { type: "error", tag: "sync-redirect-notification" });
    const mwRedirectTarget = mw.Title.newFromText(redirectTargetParsed);
    if (!mwRedirectTarget)
      return mw.notify("Failed to parse redirect target!", { type: "error", tag: "sync-redirect-notification" });
    const mainTargetText = mwRedirectTarget.getMainText();
    const pageMove = /{{ *r(edirect)?( from)?(( a)? page)? (move|rename|pm) *}}/i.test(mainPageContent);
    const destinationTalkNamespaceName = mw.config.get("wgFormattedNamespaces")[mwRedirectTarget.getNamespaceId() + 1];
    await new mw.Api().edit(mw.config.get("wgPageName"), () => ({ text: `#REDIRECT [[${destinationTalkNamespaceName}:${mainTargetText}]]${pageMove ? "\n\n{{Redirect category shell|\n{{R from move}}\n}}" : ""}`, summary: `Sync redirect with main page, to [[${destinationTalkNamespaceName}:${mainTargetText}]] (via [[User:Eejit43/scripts/sync-redirect|script]])`, minor: true })).catch(async (errorCode, { error }) => {
      if (errorCode === "nocreate-missing")
        await new mw.Api().create(mw.config.get("wgPageName"), { summary: `Create redirect matching main page, to [[${destinationTalkNamespaceName}:${mainTargetText}]] (via [[User:Eejit43/scripts/sync-redirect|script]])` }, `#REDIRECT [[${destinationTalkNamespaceName}:${mainTargetText}]]${pageMove ? "\n\n{{Redirect category shell|\n{{R from move}}\n}}" : ""}`).catch((errorCode2, { error: error2 }) => {
          mw.notify(`Failed to redirect page: ${error2.info} (${errorCode2})`, { type: "error", tag: "sync-redirect-notification" });
        });
      else
        mw.notify(`Failed to redirect page: ${error.info} (${errorCode})`, { type: "error", tag: "sync-redirect-notification" });
    });
    mw.notify("Successfully redirected page, reloading...", { type: "success", tag: "sync-redirect-notification" });
    const newUrl = new URL(window.location.href);
    newUrl.searchParams.set("redirect", "no");
    window.location.href = newUrl.href;
  });
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy9zeW5jLXJlZGlyZWN0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBNZWRpYVdpa2lEYXRhRXJyb3IsIFBhZ2VSZXZpc2lvbnNSZXN1bHQgfSBmcm9tICcuLi9nbG9iYWwtdHlwZXMnO1xuXG5tdy5sb2FkZXIudXNpbmcoWydtZWRpYXdpa2kudXRpbCddLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFtdy5UaXRsZS5pc1RhbGtOYW1lc3BhY2UobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSkpIHJldHVybjtcbiAgICBjb25zdCBtYWluUGFnZUluZm9SZXZpc2lvbnMgPSAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7IGFjdGlvbjogJ3F1ZXJ5JywgZm9ybWF0dmVyc2lvbjogMiwgcHJvcDogJ2luZm98cmV2aXNpb25zJywgcnZwcm9wOiAnY29udGVudCcsIHJ2c2xvdHM6ICcqJywgdGl0bGVzOiBgJHttdy5jb25maWcuZ2V0KCd3Z0Zvcm1hdHRlZE5hbWVzcGFjZXMnKVttdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpIC0gMV19OiR7bXcuY29uZmlnLmdldCgnd2dUaXRsZScpfWAgfSkpIGFzIFBhZ2VSZXZpc2lvbnNSZXN1bHQgJiB7IHF1ZXJ5OiB7IHBhZ2VzOiB7IHJlZGlyZWN0PzogYm9vbGVhbiB9W10gfSB9O1xuICAgIGlmICghbWFpblBhZ2VJbmZvUmV2aXNpb25zLnF1ZXJ5LnBhZ2VzWzBdLnJlZGlyZWN0KSByZXR1cm47XG5cbiAgICBjb25zdCBsaW5rID0gbXcudXRpbC5hZGRQb3J0bGV0TGluayhtdy5jb25maWcuZ2V0KCdza2luJykgPT09ICdtaW5lcnZhJyA/ICdwLXRiJyA6ICdwLWNhY3Rpb25zJywgJyMnLCAnU3luYyB3aXRoIG1haW4gcGFnZSByZWRpcmVjdCcsICdzeW5jLXJlZGlyZWN0Jyk7XG5cbiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgbXcubm90aWZ5KCdFZGl0aW5nLi4uJywgeyB0YWc6ICdzeW5jLXJlZGlyZWN0LW5vdGlmaWNhdGlvbicgfSk7XG5cbiAgICAgICAgY29uc3QgbWFpblBhZ2VDb250ZW50OiBzdHJpbmcgPSBtYWluUGFnZUluZm9SZXZpc2lvbnMucXVlcnkucGFnZXNbMF0ucmV2aXNpb25zWzBdLnNsb3RzLm1haW4uY29udGVudDtcblxuICAgICAgICBjb25zdCByZWRpcmVjdFRhcmdldCA9IC8jcmVkaXJlY3Q6PyAqXFxbXFxbKC4rKV1dL2kuZXhlYyhtYWluUGFnZUNvbnRlbnQpPy5bMV0ucmVwbGFjZUFsbCgnXycsICcgJykuc3BsaXQoJ3wnKVswXS5zcGxpdCgnIycpWzBdLnRyaW0oKTtcbiAgICAgICAgaWYgKCFyZWRpcmVjdFRhcmdldCkgcmV0dXJuIG13Lm5vdGlmeSgnRmFpbGVkIHRvIHBhcnNlIHJlZGlyZWN0IHRhcmdldCEnLCB7IHR5cGU6ICdlcnJvcicsIHRhZzogJ3N5bmMtcmVkaXJlY3Qtbm90aWZpY2F0aW9uJyB9KTtcblxuICAgICAgICBjb25zdCByZWRpcmVjdFRhcmdldFBhcnNlZCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcocmVkaXJlY3RUYXJnZXQsICd0ZXh0L2h0bWwnKS5kb2N1bWVudEVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgICAgIGlmICghcmVkaXJlY3RUYXJnZXRQYXJzZWQpIHJldHVybiBtdy5ub3RpZnkoJ0ZhaWxlZCB0byBwYXJzZSByZWRpcmVjdCB0YXJnZXQhJywgeyB0eXBlOiAnZXJyb3InLCB0YWc6ICdzeW5jLXJlZGlyZWN0LW5vdGlmaWNhdGlvbicgfSk7XG5cbiAgICAgICAgY29uc3QgbXdSZWRpcmVjdFRhcmdldCA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KHJlZGlyZWN0VGFyZ2V0UGFyc2VkKTtcbiAgICAgICAgaWYgKCFtd1JlZGlyZWN0VGFyZ2V0KSByZXR1cm4gbXcubm90aWZ5KCdGYWlsZWQgdG8gcGFyc2UgcmVkaXJlY3QgdGFyZ2V0IScsIHsgdHlwZTogJ2Vycm9yJywgdGFnOiAnc3luYy1yZWRpcmVjdC1ub3RpZmljYXRpb24nIH0pO1xuXG4gICAgICAgIGNvbnN0IG1haW5UYXJnZXRUZXh0ID0gbXdSZWRpcmVjdFRhcmdldC5nZXRNYWluVGV4dCgpO1xuXG4gICAgICAgIGNvbnN0IHBhZ2VNb3ZlID0gL3t7ICpyKGVkaXJlY3QpPyggZnJvbSk/KCggYSk/IHBhZ2UpPyAobW92ZXxyZW5hbWV8cG0pICp9fS9pLnRlc3QobWFpblBhZ2VDb250ZW50KTtcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb25UYWxrTmFtZXNwYWNlTmFtZSA9IG13LmNvbmZpZy5nZXQoJ3dnRm9ybWF0dGVkTmFtZXNwYWNlcycpW213UmVkaXJlY3RUYXJnZXQuZ2V0TmFtZXNwYWNlSWQoKSArIDFdO1xuICAgICAgICBhd2FpdCBuZXcgbXcuQXBpKClcbiAgICAgICAgICAgIC5lZGl0KG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSwgKCkgPT4gKHsgdGV4dDogYCNSRURJUkVDVCBbWyR7ZGVzdGluYXRpb25UYWxrTmFtZXNwYWNlTmFtZX06JHttYWluVGFyZ2V0VGV4dH1dXSR7cGFnZU1vdmUgPyAnXFxuXFxue3tSZWRpcmVjdCBjYXRlZ29yeSBzaGVsbHxcXG57e1IgZnJvbSBtb3ZlfX1cXG59fScgOiAnJ31gLCBzdW1tYXJ5OiBgU3luYyByZWRpcmVjdCB3aXRoIG1haW4gcGFnZSwgdG8gW1ske2Rlc3RpbmF0aW9uVGFsa05hbWVzcGFjZU5hbWV9OiR7bWFpblRhcmdldFRleHR9XV0gKHZpYSBbW1VzZXI6RWVqaXQ0My9zY3JpcHRzL3N5bmMtcmVkaXJlY3R8c2NyaXB0XV0pYCwgbWlub3I6IHRydWUgfSkpXG4gICAgICAgICAgICAuY2F0Y2goYXN5bmMgKGVycm9yQ29kZTogc3RyaW5nLCB7IGVycm9yIH06IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdub2NyZWF0ZS1taXNzaW5nJylcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmV3IG13LkFwaSgpLmNyZWF0ZShtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyksIHsgc3VtbWFyeTogYENyZWF0ZSByZWRpcmVjdCBtYXRjaGluZyBtYWluIHBhZ2UsIHRvIFtbJHtkZXN0aW5hdGlvblRhbGtOYW1lc3BhY2VOYW1lfToke21haW5UYXJnZXRUZXh0fV1dICh2aWEgW1tVc2VyOkVlaml0NDMvc2NyaXB0cy9zeW5jLXJlZGlyZWN0fHNjcmlwdF1dKWAgfSwgYCNSRURJUkVDVCBbWyR7ZGVzdGluYXRpb25UYWxrTmFtZXNwYWNlTmFtZX06JHttYWluVGFyZ2V0VGV4dH1dXSR7cGFnZU1vdmUgPyAnXFxuXFxue3tSZWRpcmVjdCBjYXRlZ29yeSBzaGVsbHxcXG57e1IgZnJvbSBtb3ZlfX1cXG59fScgOiAnJ31gKS5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIHsgZXJyb3IgfTogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEZhaWxlZCB0byByZWRpcmVjdCBwYWdlOiAke2Vycm9yLmluZm99ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InLCB0YWc6ICdzeW5jLXJlZGlyZWN0LW5vdGlmaWNhdGlvbicgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVsc2UgbXcubm90aWZ5KGBGYWlsZWQgdG8gcmVkaXJlY3QgcGFnZTogJHtlcnJvci5pbmZvfSAoJHtlcnJvckNvZGV9KWAsIHsgdHlwZTogJ2Vycm9yJywgdGFnOiAnc3luYy1yZWRpcmVjdC1ub3RpZmljYXRpb24nIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbXcubm90aWZ5KCdTdWNjZXNzZnVsbHkgcmVkaXJlY3RlZCBwYWdlLCByZWxvYWRpbmcuLi4nLCB7IHR5cGU6ICdzdWNjZXNzJywgdGFnOiAnc3luYy1yZWRpcmVjdC1ub3RpZmljYXRpb24nIH0pO1xuXG4gICAgICAgIGNvbnN0IG5ld1VybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldCgncmVkaXJlY3QnLCAnbm8nKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG5ld1VybC5ocmVmO1xuICAgIH0pO1xufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBRUEsR0FBRyxPQUFPLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxZQUFZO0FBQzVDLE1BQUksQ0FBQyxHQUFHLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxJQUFJLG1CQUFtQixDQUFDO0FBQUc7QUFDbkUsUUFBTSx3QkFBeUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLFNBQVMsZUFBZSxHQUFHLE1BQU0sa0JBQWtCLFFBQVEsV0FBVyxTQUFTLEtBQUssUUFBUSxHQUFHLEdBQUcsT0FBTyxJQUFJLHVCQUF1QixFQUFFLEdBQUcsT0FBTyxJQUFJLG1CQUFtQixJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsT0FBTyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUM7QUFDN1EsTUFBSSxDQUFDLHNCQUFzQixNQUFNLE1BQU0sQ0FBQyxFQUFFO0FBQVU7QUFFcEQsUUFBTSxPQUFPLEdBQUcsS0FBSyxlQUFlLEdBQUcsT0FBTyxJQUFJLE1BQU0sTUFBTSxZQUFZLFNBQVMsY0FBYyxLQUFLLGdDQUFnQyxlQUFlO0FBRXJKLE9BQUssaUJBQWlCLFNBQVMsT0FBTyxVQUFVO0FBQzVDLFVBQU0sZUFBZTtBQUVyQixPQUFHLE9BQU8sY0FBYyxFQUFFLEtBQUssNkJBQTZCLENBQUM7QUFFN0QsVUFBTSxrQkFBMEIsc0JBQXNCLE1BQU0sTUFBTSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsTUFBTSxLQUFLO0FBRTdGLFVBQU0saUJBQWlCLDJCQUEyQixLQUFLLGVBQWUsSUFBSSxDQUFDLEVBQUUsV0FBVyxLQUFLLEdBQUcsRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUs7QUFDbkksUUFBSSxDQUFDO0FBQWdCLGFBQU8sR0FBRyxPQUFPLG9DQUFvQyxFQUFFLE1BQU0sU0FBUyxLQUFLLDZCQUE2QixDQUFDO0FBRTlILFVBQU0sdUJBQXVCLElBQUksVUFBVSxFQUFFLGdCQUFnQixnQkFBZ0IsV0FBVyxFQUFFLGdCQUFnQjtBQUMxRyxRQUFJLENBQUM7QUFBc0IsYUFBTyxHQUFHLE9BQU8sb0NBQW9DLEVBQUUsTUFBTSxTQUFTLEtBQUssNkJBQTZCLENBQUM7QUFFcEksVUFBTSxtQkFBbUIsR0FBRyxNQUFNLFlBQVksb0JBQW9CO0FBQ2xFLFFBQUksQ0FBQztBQUFrQixhQUFPLEdBQUcsT0FBTyxvQ0FBb0MsRUFBRSxNQUFNLFNBQVMsS0FBSyw2QkFBNkIsQ0FBQztBQUVoSSxVQUFNLGlCQUFpQixpQkFBaUIsWUFBWTtBQUVwRCxVQUFNLFdBQVcsNkRBQTZELEtBQUssZUFBZTtBQUNsRyxVQUFNLCtCQUErQixHQUFHLE9BQU8sSUFBSSx1QkFBdUIsRUFBRSxpQkFBaUIsZUFBZSxJQUFJLENBQUM7QUFDakgsVUFBTSxJQUFJLEdBQUcsSUFBSSxFQUNaLEtBQUssR0FBRyxPQUFPLElBQUksWUFBWSxHQUFHLE9BQU8sRUFBRSxNQUFNLGVBQWUsNEJBQTRCLElBQUksY0FBYyxLQUFLLFdBQVcsd0RBQXdELEVBQUUsSUFBSSxTQUFTLHNDQUFzQyw0QkFBNEIsSUFBSSxjQUFjLDBEQUEwRCxPQUFPLEtBQUssRUFBRSxFQUNqVyxNQUFNLE9BQU8sV0FBbUIsRUFBRSxNQUFNLE1BQTBCO0FBQy9ELFVBQUksY0FBYztBQUNkLGNBQU0sSUFBSSxHQUFHLElBQUksRUFBRSxPQUFPLEdBQUcsT0FBTyxJQUFJLFlBQVksR0FBRyxFQUFFLFNBQVMsNENBQTRDLDRCQUE0QixJQUFJLGNBQWMseURBQXlELEdBQUcsZUFBZSw0QkFBNEIsSUFBSSxjQUFjLEtBQUssV0FBVyx3REFBd0QsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDQSxZQUFtQixFQUFFLE9BQUFDLE9BQU0sTUFBMEI7QUFDM1osYUFBRyxPQUFPLDRCQUE0QkEsT0FBTSxJQUFJLEtBQUtELFVBQVMsS0FBSyxFQUFFLE1BQU0sU0FBUyxLQUFLLDZCQUE2QixDQUFDO0FBQUEsUUFDM0gsQ0FBQztBQUFBO0FBQ0EsV0FBRyxPQUFPLDRCQUE0QixNQUFNLElBQUksS0FBSyxTQUFTLEtBQUssRUFBRSxNQUFNLFNBQVMsS0FBSyw2QkFBNkIsQ0FBQztBQUFBLElBQ2hJLENBQUM7QUFFTCxPQUFHLE9BQU8sOENBQThDLEVBQUUsTUFBTSxXQUFXLEtBQUssNkJBQTZCLENBQUM7QUFFOUcsVUFBTSxTQUFTLElBQUksSUFBSSxPQUFPLFNBQVMsSUFBSTtBQUMzQyxXQUFPLGFBQWEsSUFBSSxZQUFZLElBQUk7QUFFeEMsV0FBTyxTQUFTLE9BQU8sT0FBTztBQUFBLEVBQ2xDLENBQUM7QUFDTCxDQUFDOyIsCiAgIm5hbWVzIjogWyJlcnJvckNvZGUiLCAiZXJyb3IiXQp9Cg==
