// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/sync-redirect.ts

"use strict";mw.loader.using(["mediawiki.util"],async()=>{if(!mw.Title.isTalkNamespace(mw.config.get("wgNamespaceNumber")))return;const r=await new mw.Api().get({action:"query",formatversion:"2",prop:["info","revisions"],rvprop:"content",rvslots:"main",titles:`${mw.config.get("wgFormattedNamespaces")[mw.config.get("wgNamespaceNumber")-1]}:${mw.config.get("wgTitle")}`});if(!r.query.pages[0].redirect)return;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Sync with main page redirect","sync-redirect").addEventListener("click",async g=>{g.preventDefault(),mw.notify("Editing...",{tag:"sync-redirect-notification"});const a=r.query.pages[0].revisions[0].slots.main.content,n=/#redirect:? *\[\[(.+)]]/i.exec(a)?.[1].replaceAll("_"," ").split("|")[0].split("#")[0].trim();if(!n)return mw.notify("Failed to parse redirect target!",{type:"error",tag:"sync-redirect-notification"});const o=new DOMParser().parseFromString(n,"text/html").documentElement.textContent;if(!o)return mw.notify("Failed to parse redirect target!",{type:"error",tag:"sync-redirect-notification"});const i=mw.Title.newFromText(o);if(!i)return mw.notify("Failed to parse redirect target!",{type:"error",tag:"sync-redirect-notification"});const e=i.getMainText(),s=/{{ *r(edirect)?( from)?(( a)? page)? (move|rename|pm) *}}/i.test(a),t=mw.config.get("wgFormattedNamespaces")[i.getNamespaceId()+1];await new mw.Api().edit(mw.config.get("wgPageName"),()=>({text:`#REDIRECT [[${t}:${e}]]${s?`

{{Redirect category shell|
{{R from move}}
}}`:""}`,summary:`Sync redirect with main page, to [[${t}:${e}]] (via [[User:Eejit43/scripts/sync-redirect|script]])`,minor:!0})).catch(async(m,p)=>{m==="nocreate-missing"?await new mw.Api().create(mw.config.get("wgPageName"),{summary:`Create redirect matching main page, to [[${t}:${e}]] (via [[User:Eejit43/scripts/sync-redirect|script]])`},`#REDIRECT [[${t}:${e}]]${s?`

{{Redirect category shell|
{{R from move}}
}}`:""}`).catch((d,w)=>{mw.notify(`Failed to redirect page: ${w?.error.info??"Unknown error"} (${d})`,{type:"error",tag:"sync-redirect-notification"})}):mw.notify(`Failed to redirect page: ${p?.error.info??"Unknown error"} (${m})`,{type:"error",tag:"sync-redirect-notification"})}),mw.notify("Successfully redirected page, reloading...",{type:"success",tag:"sync-redirect-notification"});const c=new URL(window.location.href);c.searchParams.set("redirect","no"),window.location.href=c.href})});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
