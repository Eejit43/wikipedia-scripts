// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/to-monitor-list.ts

"use strict";(()=>{var n=class{api=new mw.Api;link;toCheck;totalToCheck;isRunning=!1;handledRequests=0;load(){mw.util.addCSS(`
.to-monitor-list-count {
    cursor: pointer;
}`);let i=document.querySelector(".mw-editsection").cloneNode(!0);this.link=document.createElement("a"),this.link.href="#",this.link.style.fontWeight="bold",this.link.textContent="Add missing counts",this.link.addEventListener("click",async r=>{if(r.preventDefault(),!this.isRunning){this.isRunning=!0;for(let e of document.querySelectorAll(".to-monitor-list-count"))e.id&&(e.innerHTML='<span style="color: #ed8e07; font-weight: bold">?</span>');await this.loadToCheckData();for(let e of this.toCheck.categories)this.handleCheck(e,async()=>{let t=await this.api.get({action:"query",list:"search",srinfo:"totalhits",srnamespace:this.getCategory(e),srsearch:`incategory:"${e.category}"`}).catch((s,a)=>(mw.notify(`An error occurred while trying to get category members: ${a?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(t)return t.query.searchinfo.totalhits});for(let e of this.toCheck.searches)this.handleCheck(e,async()=>{let t=await this.api.get({action:"query",list:"search",srinfo:"totalhits",srnamespace:this.getCategory(e),srsearch:e.search}).catch((s,a)=>(mw.notify(`An error occurred while trying to get search results: ${a?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(t)return t.query.searchinfo.totalhits});for(let e of this.toCheck.whatLinksHere)this.handleCheck(e,async()=>{let t=await this.api.get({action:"query",list:"backlinks",bllimit:500,blnamespace:this.getCategory(e),bltitle:e.title}).catch((s,a)=>(mw.notify(`An error occurred while trying to get backlinks: ${a?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(t)return t.query.backlinks.length});for(let e of this.toCheck.transclusions)this.handleCheck(e,async()=>{let t=await this.api.get({action:"query",list:"embeddedin",eilimit:500,einamespace:this.getCategory(e),eititle:e.title}).catch((s,a)=>(mw.notify(`An error occurred while trying to get transclusions: ${a?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(t)return t.query.embeddedin.length})}}),i.querySelector("a").replaceWith(this.link),document.querySelector("h2#Stuff_to_monitor + .mw-editsection").after(i);for(let r of document.querySelectorAll(".to-monitor-list-count"))r.addEventListener("click",()=>{r.innerHTML='<span style="color: #00733f">None</span>'})}async loadToCheckData(){this.toCheck=JSON.parse((await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/to-monitor-list.json"})).query.pages[0].revisions[0].slots.main.content),this.totalToCheck=Object.values(this.toCheck).flat().length}async handleCheck(i,r){let e=await r();if(e===void 0)return;let t=document.querySelector(`#to-monitor-list-${i.id}`);if(!t)return mw.notify(`Failed to find element for ID "${i.id}"`);t.innerHTML=e===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${e===500?"500+":e}</span></b>`,this.handledRequests++,this.link.textContent=`Add missing counts (${this.handledRequests}/${this.totalToCheck} loaded)`,this.handledRequests===this.totalToCheck&&setTimeout(()=>{this.isRunning=!1,this.handledRequests=0,this.link.textContent="Add missing counts"},1e3)}getCategory({namespace:i,notNamespace:r}){if(!i&&!r)return 0;if(i){let e=Object.entries(mw.config.get("wgFormattedNamespaces")).find(([,t])=>t===i);return e?Number.parseInt(e[0]):0}else return Object.entries(mw.config.get("wgFormattedNamespaces")).filter(([,e])=>r!==(e||"Article")).map(([e])=>Number.parseInt(e))}};mw.loader.using(["mediawiki.util"],()=>{mw.config.get("wgPageName")==="User:Eejit43"&&new n().load()});})();

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
