"use strict";mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="User:Eejit43")return;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Add counts to monitoring list","add-monitoring-counts").addEventListener("click",async l=>{l.preventDefault();const r=JSON.parse((await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/to-monitor-list.json"})).query.pages[0].revisions[0].slots.main.content);r.categories.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"search",srinfo:"totalhits",srnamespace:getCategory(e),srsearch:`incategory:"${e.category}"`}).catch((s,a)=>(mw.notify(`An error occurred while trying to get category members: ${a?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(!n)return;const t=n.query.searchinfo.totalhits,i=document.querySelector(`#to-monitor-list-${e.id}`);if(!i)return mw.notify(`Failed to find element for ID "${e.id}"`);i.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t===500?"500+":t}</span></b>`}),r.searches.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"search",srinfo:"totalhits",srnamespace:getCategory(e),srsearch:e.search}).catch((s,a)=>(mw.notify(`An error occurred while trying to get search results: ${a?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(!n)return;const t=n.query.searchinfo.totalhits,i=document.querySelector(`#to-monitor-list-${e.id}`);if(!i)return mw.notify(`Failed to find element for ID "${e.id}"`);i.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t.toLocaleString()}</span></b>`}),r.whatLinksHere.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"backlinks",bllimit:500,blnamespace:getCategory(e),bltitle:e.title}).catch((s,a)=>(mw.notify(`An error occurred while trying to get backlinks: ${a?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(!n)return;const t=n.query.backlinks.length,i=document.querySelector(`#to-monitor-list-${e.id}`);if(!i)return mw.notify(`Failed to find element for ID "${e.id}"`);i.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t===500?"500+":t}</span></b>`}),r.transclusions.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"embeddedin",eilimit:500,einamespace:getCategory(e),eititle:e.title}).catch((s,a)=>(mw.notify(`An error occurred while trying to get transclusions: ${a?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(!n)return;const t=n.query.embeddedin.length,i=document.querySelector(`#to-monitor-list-${e.id}`);if(!i)return mw.notify(`Failed to find element for ID "${e.id}"`);i.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t===500?"500+":t}</span></b>`}),mw.notify('Successfully added missing counts to "Stuff to monitor"',{type:"success"})})});function getCategory({namespace:o,notNamespace:l}){if(!o&&!l)return 0;if(o){const r=Object.entries(mw.config.get("wgFormattedNamespaces")).find(([,e])=>e===o);return r?Number.parseInt(r[0]):0}else return Object.entries(mw.config.get("wgFormattedNamespaces")).filter(([,r])=>l!==(r||"Article")).map(([r])=>Number.parseInt(r))}
//# sourceMappingURL=data:application/json;base64,
