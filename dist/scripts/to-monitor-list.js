// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/to-monitor-list.ts

"use strict";mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="User:Eejit43")return;const u=document.querySelector(".mw-editsection").cloneNode(!0),r=document.createElement("a");r.href="#",r.style.fontWeight="bold",r.textContent="Add missing counts",r.addEventListener("click",async s=>{s.preventDefault();const o=JSON.parse((await new mw.Api().get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/to-monitor-list.json"})).query.pages[0].revisions[0].slots.main.content),m=Object.entries(o).reduce((e,[,n])=>e+n.length,0);let a=0;o.categories.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"search",srinfo:"totalhits",srnamespace:getCategory(e),srsearch:`incategory:"${e.category}"`}).catch((l,c)=>(mw.notify(`An error occurred while trying to get category members: ${c?.error.info??"Unknown error"} (${l})`,{type:"error"}),null));if(!n)return;const t=n.query.searchinfo.totalhits,i=document.querySelector(`#to-monitor-list-${e.id}`);if(!i)return mw.notify(`Failed to find element for ID "${e.id}"`);i.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t===500?"500+":t}</span></b>`,a++,r.textContent=`Add missing counts (${a}/${m} loaded)`}),o.searches.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"search",srinfo:"totalhits",srnamespace:getCategory(e),srsearch:e.search}).catch((l,c)=>(mw.notify(`An error occurred while trying to get search results: ${c?.error.info??"Unknown error"} (${l})`,{type:"error"}),null));if(!n)return;const t=n.query.searchinfo.totalhits,i=document.querySelector(`#to-monitor-list-${e.id}`);if(!i)return mw.notify(`Failed to find element for ID "${e.id}"`);i.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t.toLocaleString()}</span></b>`,a++,r.textContent=`Add missing counts (${a}/${m} loaded)`}),o.whatLinksHere.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"backlinks",bllimit:500,blnamespace:getCategory(e),bltitle:e.title}).catch((l,c)=>(mw.notify(`An error occurred while trying to get backlinks: ${c?.error.info??"Unknown error"} (${l})`,{type:"error"}),null));if(!n)return;const t=n.query.backlinks.length,i=document.querySelector(`#to-monitor-list-${e.id}`);if(!i)return mw.notify(`Failed to find element for ID "${e.id}"`);i.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t===500?"500+":t}</span></b>`,a++,r.textContent=`Add missing counts (${a}/${m} loaded)`}),o.transclusions.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"embeddedin",eilimit:500,einamespace:getCategory(e),eititle:e.title}).catch((l,c)=>(mw.notify(`An error occurred while trying to get transclusions: ${c?.error.info??"Unknown error"} (${l})`,{type:"error"}),null));if(!n)return;const t=n.query.embeddedin.length,i=document.querySelector(`#to-monitor-list-${e.id}`);if(!i)return mw.notify(`Failed to find element for ID "${e.id}"`);i.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t===500?"500+":t}</span></b>`,a++,r.textContent=`Add missing counts (${a}/${m} loaded)`})}),u.querySelector("a").replaceWith(r),document.querySelector("#Stuff_to_monitor.mw-headline").after(u)});function getCategory({namespace:u,notNamespace:r}){if(!u&&!r)return 0;if(u){const s=Object.entries(mw.config.get("wgFormattedNamespaces")).find(([,o])=>o===u);return s?Number.parseInt(s[0]):0}else return Object.entries(mw.config.get("wgFormattedNamespaces")).filter(([,s])=>r!==(s||"Article")).map(([s])=>Number.parseInt(s))}

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
