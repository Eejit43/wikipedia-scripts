"use strict";mw.loader.using(["mediawiki.util"],()=>{if(mw.config.get("wgPageName")!=="User:Eejit43")return;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Add counts to monitoring list","add-monitoring-counts").addEventListener("click",async l=>{l.preventDefault();const i=JSON.parse((await new mw.Api().get({action:"query",formatversion:2,prop:"revisions",rvprop:"content",rvslots:"*",titles:"User:Eejit43/scripts/to-monitor-list.json"})).query.pages[0].revisions[0].slots.main.content);i.categories.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"search",srinfo:"totalhits",srnamespace:getCategory(e),srsearch:`incategory:"${e.category}"`}).catch((s,o)=>(mw.notify(`An error occurred while trying to get category members: ${o?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(!n)return;const t=n.query.searchinfo.totalhits,r=document.querySelector(`#to-monitor-list-${e.id}`);if(!r)return mw.notify(`Failed to find element for ID "${e.id}"`);r.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t===500?"500+":t}</span></b>`}),i.searches.forEach(async e=>{const n=await new mw.Api().get({action:"query",list:"search",srinfo:"totalhits",srnamespace:getCategory(e),srsearch:e.search}).catch((s,o)=>(mw.notify(`An error occurred while trying to get search results: ${o?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(!n)return;const t=n.query.searchinfo.totalhits,r=document.querySelector(`#to-monitor-list-${e.id}`);if(!r)return mw.notify(`Failed to find element for ID "${e.id}"`);r.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t.toLocaleString()}</span></b>`}),i.whatLinksHere.forEach(async e=>{const n=await new mw.Api().get({action:"query",bllimit:500,blnamespace:getCategory(e),bltitle:e.title,list:"backlinks"}).catch((s,o)=>(mw.notify(`An error occurred while trying to get backlinks: ${o?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(!n)return;const t=n.query.backlinks.length,r=document.querySelector(`#to-monitor-list-${e.id}`);if(!r)return mw.notify(`Failed to find element for ID "${e.id}"`);r.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t===500?"500+":t}</span></b>`}),i.transclusions.forEach(async e=>{const n=await new mw.Api().get({action:"query",eilimit:500,einamespace:getCategory(e),eititle:e.title,list:"embeddedin"}).catch((s,o)=>(mw.notify(`An error occurred while trying to get transclusions: ${o?.error.info??"Unknown error"} (${s})`,{type:"error"}),null));if(!n)return;const t=n.query.embeddedin.length,r=document.querySelector(`#to-monitor-list-${e.id}`);if(!r)return mw.notify(`Failed to find element for ID "${e.id}"`);r.innerHTML=t===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${t===500?"500+":t}</span></b>`}),mw.notify('Successfully added missing counts to "Stuff to monitor"',{type:"success"})})});function getCategory({namespace:a,notNamespace:l}){return!a&&!l?0:a?Object.entries(mw.config.get("wgFormattedNamespaces")).find(([,i])=>i===a)?.[0]??0:Object.entries(mw.config.get("wgFormattedNamespaces")).filter(([,i])=>l!==(i||"Article")).map(([i])=>i).join("|")}
//# sourceMappingURL=data:application/json;base64,
