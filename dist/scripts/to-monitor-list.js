// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/to-monitor-list.ts

"use strict";class MonitoringListManager{api=new mw.Api;link;toCheck;totalToCheck;isRunning=!1;handledRequests=0;load(){const i=document.querySelector(".mw-editsection").cloneNode(!0);this.link=document.createElement("a"),this.link.href="#",this.link.style.fontWeight="bold",this.link.textContent="Add missing counts",this.link.addEventListener("click",async a=>{if(a.preventDefault(),!this.isRunning){this.isRunning=!0,await this.loadToCheckData();for(const e of this.toCheck.categories)this.handleCheck(e,async()=>{const t=await this.api.get({action:"query",list:"search",srinfo:"totalhits",srnamespace:this.getCategory(e),srsearch:`incategory:"${e.category}"`}).catch((r,s)=>(mw.notify(`An error occurred while trying to get category members: ${s?.error.info??"Unknown error"} (${r})`,{type:"error"}),null));if(t)return t.query.searchinfo.totalhits});for(const e of this.toCheck.searches)this.handleCheck(e,async()=>{const t=await this.api.get({action:"query",list:"search",srinfo:"totalhits",srnamespace:this.getCategory(e),srsearch:e.search}).catch((r,s)=>(mw.notify(`An error occurred while trying to get search results: ${s?.error.info??"Unknown error"} (${r})`,{type:"error"}),null));if(t)return t.query.searchinfo.totalhits});for(const e of this.toCheck.whatLinksHere)this.handleCheck(e,async()=>{const t=await this.api.get({action:"query",list:"backlinks",bllimit:500,blnamespace:this.getCategory(e),bltitle:e.title}).catch((r,s)=>(mw.notify(`An error occurred while trying to get backlinks: ${s?.error.info??"Unknown error"} (${r})`,{type:"error"}),null));if(t)return t.query.backlinks.length});for(const e of this.toCheck.transclusions)this.handleCheck(e,async()=>{const t=await this.api.get({action:"query",list:"embeddedin",eilimit:500,einamespace:this.getCategory(e),eititle:e.title}).catch((r,s)=>(mw.notify(`An error occurred while trying to get transclusions: ${s?.error.info??"Unknown error"} (${r})`,{type:"error"}),null));if(t)return t.query.embeddedin.length})}}),i.querySelector("a").replaceWith(this.link),document.querySelector("h2#Stuff_to_monitor + .mw-editsection").after(i)}async loadToCheckData(){this.toCheck=JSON.parse((await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/to-monitor-list.json"})).query.pages[0].revisions[0].slots.main.content),this.totalToCheck=Object.values(this.toCheck).flat().length}async handleCheck(i,a){const e=await a();if(e===void 0)return;const t=document.querySelector(`#to-monitor-list-${i.id}`);if(!t)return mw.notify(`Failed to find element for ID "${i.id}"`);t.innerHTML=e===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${e===500?"500+":e}</span></b>`,this.handledRequests++,this.link.textContent=`Add missing counts (${this.handledRequests}/${this.totalToCheck} loaded)`,this.handledRequests===this.totalToCheck&&setTimeout(()=>{this.isRunning=!1,this.handledRequests=0,this.link.textContent="Add missing counts"},1e3)}getCategory({namespace:i,notNamespace:a}){if(!i&&!a)return 0;if(i){const e=Object.entries(mw.config.get("wgFormattedNamespaces")).find(([,t])=>t===i);return e?Number.parseInt(e[0]):0}else return Object.entries(mw.config.get("wgFormattedNamespaces")).filter(([,e])=>a!==(e||"Article")).map(([e])=>Number.parseInt(e))}}mw.loader.using(["mediawiki.util"],()=>{mw.config.get("wgPageName")==="User:Eejit43"&&new MonitoringListManager().load()});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy90by1tb25pdG9yLWxpc3QudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEJhY2tsaW5rc1Jlc3VsdCwgRW1iZWRkZWRpblJlc3VsdCwgTWVkaWFXaWtpRGF0YUVycm9yLCBQYWdlUmV2aXNpb25zUmVzdWx0LCBTZWFyY2hSZXN1bHQgfSBmcm9tICcuLi9nbG9iYWwtdHlwZXMnO1xuaW1wb3J0IHsgQXBpUXVlcnlCYWNrbGlua3NQYXJhbXMsIEFwaVF1ZXJ5UmV2aXNpb25zUGFyYW1zLCBBcGlRdWVyeVNlYXJjaFBhcmFtcyB9IGZyb20gJy4uL25vZGVfbW9kdWxlcy90eXBlcy1tZWRpYXdpa2kvYXBpX3BhcmFtcy9pbmRleCc7XG5cbmludGVyZmFjZSBTZWFyY2hEYXRhIHtcbiAgICBjYXRlZ29yaWVzOiB7IGlkOiBzdHJpbmc7IGNhdGVnb3J5OiBzdHJpbmc7IG5hbWVzcGFjZT86IHN0cmluZzsgbm90TmFtZXNwYWNlPzogc3RyaW5nIH1bXTtcbiAgICBzZWFyY2hlczogeyBpZDogc3RyaW5nOyBzZWFyY2g6IHN0cmluZzsgbmFtZXNwYWNlPzogc3RyaW5nOyBub3ROYW1lc3BhY2U/OiBzdHJpbmcgfVtdO1xuICAgIHdoYXRMaW5rc0hlcmU6IHsgaWQ6IHN0cmluZzsgdGl0bGU6IHN0cmluZzsgbmFtZXNwYWNlPzogc3RyaW5nOyBub3ROYW1lc3BhY2U/OiBzdHJpbmcgfVtdO1xuICAgIHRyYW5zY2x1c2lvbnM6IHsgaWQ6IHN0cmluZzsgdGl0bGU6IHN0cmluZzsgbmFtZXNwYWNlPzogc3RyaW5nOyBub3ROYW1lc3BhY2U/OiBzdHJpbmcgfVtdO1xufVxuXG50eXBlIFNlYXJjaERhdGFDaGVjayA9IFNlYXJjaERhdGFbJ2NhdGVnb3JpZXMnXVswXSB8IFNlYXJjaERhdGFbJ3NlYXJjaGVzJ11bMF0gfCBTZWFyY2hEYXRhWyd3aGF0TGlua3NIZXJlJ11bMF0gfCBTZWFyY2hEYXRhWyd0cmFuc2NsdXNpb25zJ11bMF07XG5cbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBoYW5kbGVzIHRoZSBlbnRpcmUgZnVuY3Rpb25hbGl0eSBvZiB0aGUgdG8tbW9uaXRvci1saXN0IHNjcmlwdC5cbiAqL1xuY2xhc3MgTW9uaXRvcmluZ0xpc3RNYW5hZ2VyIHtcbiAgICBwcml2YXRlIGFwaSA9IG5ldyBtdy5BcGkoKTtcblxuICAgIHByaXZhdGUgbGluayE6IEhUTUxBbmNob3JFbGVtZW50O1xuXG4gICAgcHJpdmF0ZSB0b0NoZWNrITogU2VhcmNoRGF0YTtcbiAgICBwcml2YXRlIHRvdGFsVG9DaGVjayE6IG51bWJlcjtcblxuICAgIHByaXZhdGUgaXNSdW5uaW5nID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIGhhbmRsZWRSZXF1ZXN0cyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgXCJBZGQgbWlzc2luZyBjb3VudHNcIiBsaW5rIGVsZW1lbnQuXG4gICAgICovXG4gICAgcHVibGljIGxvYWQoKSB7XG4gICAgICAgIGNvbnN0IGZ1bGxMaW5rRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tdy1lZGl0c2VjdGlvbicpIS5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTFNwYW5FbGVtZW50O1xuXG4gICAgICAgIHRoaXMubGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgdGhpcy5saW5rLmhyZWYgPSAnIyc7XG4gICAgICAgIHRoaXMubGluay5zdHlsZS5mb250V2VpZ2h0ID0gJ2JvbGQnO1xuICAgICAgICB0aGlzLmxpbmsudGV4dENvbnRlbnQgPSAnQWRkIG1pc3NpbmcgY291bnRzJztcbiAgICAgICAgdGhpcy5saW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkVG9DaGVja0RhdGEoKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLnRvQ2hlY2suY2F0ZWdvcmllcylcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUNoZWNrKGNoZWNrLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGE6IFNlYXJjaFJlc3VsdCB8IG51bGwgPSBhd2FpdCB0aGlzLmFwaVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Q6ICdzZWFyY2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyaW5mbzogJ3RvdGFsaGl0cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JuYW1lc3BhY2U6IHRoaXMuZ2V0Q2F0ZWdvcnkoY2hlY2spLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyc2VhcmNoOiBgaW5jYXRlZ29yeTpcIiR7Y2hlY2suY2F0ZWdvcnl9XCJgLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBzYXRpc2ZpZXMgQXBpUXVlcnlTZWFyY2hQYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCBlcnJvckluZm86IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13Lm5vdGlmeShgQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIGdldCBjYXRlZ29yeSBtZW1iZXJzOiAke2Vycm9ySW5mbz8uZXJyb3IuaW5mbyA/PyAnVW5rbm93biBlcnJvcid9ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZGF0YSBhcyBTZWFyY2hSZXN1bHQpLnF1ZXJ5LnNlYXJjaGluZm8udG90YWxoaXRzO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMudG9DaGVjay5zZWFyY2hlcylcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUNoZWNrKGNoZWNrLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGE6IFNlYXJjaFJlc3VsdCB8IG51bGwgPSBhd2FpdCB0aGlzLmFwaVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Q6ICdzZWFyY2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyaW5mbzogJ3RvdGFsaGl0cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JuYW1lc3BhY2U6IHRoaXMuZ2V0Q2F0ZWdvcnkoY2hlY2spLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyc2VhcmNoOiBjaGVjay5zZWFyY2gsXG4gICAgICAgICAgICAgICAgICAgICAgICB9IHNhdGlzZmllcyBBcGlRdWVyeVNlYXJjaFBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9ySW5mbzogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gZ2V0IHNlYXJjaCByZXN1bHRzOiAke2Vycm9ySW5mbz8uZXJyb3IuaW5mbyA/PyAnVW5rbm93biBlcnJvcid9ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZGF0YSBhcyBTZWFyY2hSZXN1bHQpLnF1ZXJ5LnNlYXJjaGluZm8udG90YWxoaXRzO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMudG9DaGVjay53aGF0TGlua3NIZXJlKVxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2hlY2soY2hlY2ssIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YTogQmFja2xpbmtzUmVzdWx0IHwgbnVsbCA9IGF3YWl0IHRoaXMuYXBpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdDogJ2JhY2tsaW5rcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxsaW1pdDogNTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsbmFtZXNwYWNlOiB0aGlzLmdldENhdGVnb3J5KGNoZWNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibHRpdGxlOiBjaGVjay50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gc2F0aXNmaWVzIEFwaVF1ZXJ5QmFja2xpbmtzUGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvckNvZGU6IHN0cmluZywgZXJyb3JJbmZvOiBNZWRpYVdpa2lEYXRhRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBnZXQgYmFja2xpbmtzOiAke2Vycm9ySW5mbz8uZXJyb3IuaW5mbyA/PyAnVW5rbm93biBlcnJvcid9ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZGF0YSBhcyBCYWNrbGlua3NSZXN1bHQpLnF1ZXJ5LmJhY2tsaW5rcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hlY2sgb2YgdGhpcy50b0NoZWNrLnRyYW5zY2x1c2lvbnMpXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDaGVjayhjaGVjaywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhOiBFbWJlZGRlZGluUmVzdWx0IHwgbnVsbCA9IGF3YWl0IHRoaXMuYXBpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdxdWVyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdDogJ2VtYmVkZGVkaW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVpbGltaXQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlaW5hbWVzcGFjZTogdGhpcy5nZXRDYXRlZ29yeShjaGVjayksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWl0aXRsZTogY2hlY2sudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9IHNhdGlzZmllcyBBcGlRdWVyeUJhY2tsaW5rc1BhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9ySW5mbzogTWVkaWFXaWtpRGF0YUVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gZ2V0IHRyYW5zY2x1c2lvbnM6ICR7ZXJyb3JJbmZvPy5lcnJvci5pbmZvID8/ICdVbmtub3duIGVycm9yJ30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChkYXRhIGFzIEVtYmVkZGVkaW5SZXN1bHQpLnF1ZXJ5LmVtYmVkZGVkaW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdWxsTGlua0VsZW1lbnQucXVlcnlTZWxlY3RvcignYScpIS5yZXBsYWNlV2l0aCh0aGlzLmxpbmspO1xuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2gyI1N0dWZmX3RvX21vbml0b3IgKyAubXctZWRpdHNlY3Rpb24nKSEuYWZ0ZXIoZnVsbExpbmtFbGVtZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgZGF0YSBvZiBjaGVja3MgdG8gaGFuZGxlLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBsb2FkVG9DaGVja0RhdGEoKSB7XG4gICAgICAgIHRoaXMudG9DaGVjayA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgKGF3YWl0IHRoaXMuYXBpLmdldCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogJzInLFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiAncmV2aXNpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgcnZwcm9wOiAnY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgIHJ2c2xvdHM6ICdtYWluJyxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVzOiAnVXNlcjpFZWppdDQzL3NjcmlwdHMvdG8tbW9uaXRvci1saXN0Lmpzb24nLFxuICAgICAgICAgICAgICAgIH0gc2F0aXNmaWVzIEFwaVF1ZXJ5UmV2aXNpb25zUGFyYW1zKSkgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdFxuICAgICAgICAgICAgKS5xdWVyeS5wYWdlc1swXS5yZXZpc2lvbnNbMF0uc2xvdHMubWFpbi5jb250ZW50LFxuICAgICAgICApIGFzIFNlYXJjaERhdGE7XG5cbiAgICAgICAgdGhpcy50b3RhbFRvQ2hlY2sgPSBPYmplY3QudmFsdWVzKHRoaXMudG9DaGVjaykuZmxhdCgpLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGEgZ2l2ZW4gY2hlY2suXG4gICAgICogQHBhcmFtIGNoZWNrIFRoZSBjaGVjayBkYXRhIHRvIGhhbmRsZS5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBUaGUgaGFuZGxlciB0byBmaW5kIHRoZSBjb3VudCBmcm9tIGEgY2hlY2suXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBoYW5kbGVDaGVjayhjaGVjazogU2VhcmNoRGF0YUNoZWNrLCBoYW5kbGVyOiAoKSA9PiBQcm9taXNlPG51bWJlciB8IHZvaWQ+KSB7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gYXdhaXQgaGFuZGxlcigpO1xuICAgICAgICBpZiAoY291bnQgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjdG8tbW9uaXRvci1saXN0LSR7Y2hlY2suaWR9YCk7XG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuIG13Lm5vdGlmeShgRmFpbGVkIHRvIGZpbmQgZWxlbWVudCBmb3IgSUQgXCIke2NoZWNrLmlkfVwiYCk7XG4gICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gY291bnQgPT09IDAgPyAnPHNwYW4gc3R5bGU9XCJjb2xvcjogIzAwNzMzZlwiPk5vbmU8L3NwYW4+JyA6IGA8Yj48c3BhbiBzdHlsZT1cImNvbG9yOiAjYmQyODI4XCI+JHtjb3VudCA9PT0gNTAwID8gJzUwMCsnIDogY291bnR9PC9zcGFuPjwvYj5gO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlZFJlcXVlc3RzKys7XG4gICAgICAgIHRoaXMubGluay50ZXh0Q29udGVudCA9IGBBZGQgbWlzc2luZyBjb3VudHMgKCR7dGhpcy5oYW5kbGVkUmVxdWVzdHN9LyR7dGhpcy50b3RhbFRvQ2hlY2t9IGxvYWRlZClgO1xuXG4gICAgICAgIGlmICh0aGlzLmhhbmRsZWRSZXF1ZXN0cyA9PT0gdGhpcy50b3RhbFRvQ2hlY2spXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVkUmVxdWVzdHMgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMubGluay50ZXh0Q29udGVudCA9ICdBZGQgbWlzc2luZyBjb3VudHMnO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBzZWFyY2hlZCBjYXRlZ29yaWVzIGZyb20gdGhlIGNoZWNrIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gY2hlY2sgVGhlIGNoZWNrIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gY2hlY2submFtZXNwYWNlIFRoZSBuYW1lc3BhY2UgdG8gc2VhcmNoIGluLlxuICAgICAqIEBwYXJhbSBjaGVjay5ub3ROYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSB0byBleGNsdWRlIGZyb20gdGhlIHNlYXJjaC5cbiAgICAgKiBAcmV0dXJucyBUaGUgY2F0ZWdvcnkgSUQgb3IgbGlzdCBvZiBjYXRlZ29yeSBJRHMgKHNlcGFyYXRlZCBieSAnfCcpLlxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0Q2F0ZWdvcnkoeyBuYW1lc3BhY2UsIG5vdE5hbWVzcGFjZSB9OiB7IG5hbWVzcGFjZT86IHN0cmluZzsgbm90TmFtZXNwYWNlPzogc3RyaW5nIH0pIHtcbiAgICAgICAgaWYgKCFuYW1lc3BhY2UgJiYgIW5vdE5hbWVzcGFjZSkgcmV0dXJuIDA7XG4gICAgICAgIGVsc2UgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgY29uc3QgZm91bmROYW1lc3BhY2UgPSBPYmplY3QuZW50cmllcyhtdy5jb25maWcuZ2V0KCd3Z0Zvcm1hdHRlZE5hbWVzcGFjZXMnKSkuZmluZCgoWywgbmFtZXNwYWNlTmFtZV0pID0+IG5hbWVzcGFjZU5hbWUgPT09IG5hbWVzcGFjZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmb3VuZE5hbWVzcGFjZSA/IE51bWJlci5wYXJzZUludChmb3VuZE5hbWVzcGFjZVswXSkgOiAwO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZW50cmllcyhtdy5jb25maWcuZ2V0KCd3Z0Zvcm1hdHRlZE5hbWVzcGFjZXMnKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChbLCBuYW1lc3BhY2VOYW1lXSkgPT4gbm90TmFtZXNwYWNlICE9PSAobmFtZXNwYWNlTmFtZSB8fCAnQXJ0aWNsZScpKVxuICAgICAgICAgICAgICAgIC5tYXAoKFtuYW1lc3BhY2VJZF0pID0+IE51bWJlci5wYXJzZUludChuYW1lc3BhY2VJZCkpO1xuICAgIH1cbn1cblxubXcubG9hZGVyLnVzaW5nKFsnbWVkaWF3aWtpLnV0aWwnXSwgKCkgPT4ge1xuICAgIGlmIChtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJykgPT09ICdVc2VyOkVlaml0NDMnKSBuZXcgTW9uaXRvcmluZ0xpc3RNYW5hZ2VyKCkubG9hZCgpO1xufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7YUFlQSxNQUFNLHFCQUFzQixDQUNoQixJQUFNLElBQUksR0FBRyxJQUViLEtBRUEsUUFDQSxhQUVBLFVBQVksR0FFWixnQkFBa0IsRUFLbkIsTUFBTyxDQUNWLE1BQU1BLEVBQWtCLFNBQVMsY0FBYyxpQkFBaUIsRUFBRyxVQUFVLEVBQUksRUFFakYsS0FBSyxLQUFPLFNBQVMsY0FBYyxHQUFHLEVBQ3RDLEtBQUssS0FBSyxLQUFPLElBQ2pCLEtBQUssS0FBSyxNQUFNLFdBQWEsT0FDN0IsS0FBSyxLQUFLLFlBQWMscUJBQ3hCLEtBQUssS0FBSyxpQkFBaUIsUUFBUyxNQUFPQyxHQUFVLENBR2pELEdBRkFBLEVBQU0sZUFBZSxFQUVqQixNQUFLLFVBQ1QsTUFBSyxVQUFZLEdBRWpCLE1BQU0sS0FBSyxnQkFBZ0IsRUFFM0IsVUFBV0MsS0FBUyxLQUFLLFFBQVEsV0FDN0IsS0FBSyxZQUFZQSxFQUFPLFNBQVksQ0FDaEMsTUFBTUMsRUFBNEIsTUFBTSxLQUFLLElBQ3hDLElBQUksQ0FDRCxPQUFRLFFBQ1IsS0FBTSxTQUNOLE9BQVEsWUFDUixZQUFhLEtBQUssWUFBWUQsQ0FBSyxFQUNuQyxTQUFVLGVBQWVBLEVBQU0sUUFBUSxHQUMzQyxDQUFnQyxFQUMvQixNQUFNLENBQUNFLEVBQW1CQyxLQUN2QixHQUFHLE9BQU8sMkRBQTJEQSxHQUFXLE1BQU0sTUFBUSxlQUFlLEtBQUtELENBQVMsSUFBSyxDQUFFLEtBQU0sT0FBUSxDQUFDLEVBQzFJLEtBQ1YsRUFDTCxHQUFLRCxFQUVMLE9BQVFBLEVBQXNCLE1BQU0sV0FBVyxTQUNuRCxDQUFDLEVBRUwsVUFBV0QsS0FBUyxLQUFLLFFBQVEsU0FDN0IsS0FBSyxZQUFZQSxFQUFPLFNBQVksQ0FDaEMsTUFBTUMsRUFBNEIsTUFBTSxLQUFLLElBQ3hDLElBQUksQ0FDRCxPQUFRLFFBQ1IsS0FBTSxTQUNOLE9BQVEsWUFDUixZQUFhLEtBQUssWUFBWUQsQ0FBSyxFQUNuQyxTQUFVQSxFQUFNLE1BQ3BCLENBQWdDLEVBQy9CLE1BQU0sQ0FBQ0UsRUFBbUJDLEtBQ3ZCLEdBQUcsT0FBTyx5REFBeURBLEdBQVcsTUFBTSxNQUFRLGVBQWUsS0FBS0QsQ0FBUyxJQUFLLENBQUUsS0FBTSxPQUFRLENBQUMsRUFDeEksS0FDVixFQUNMLEdBQUtELEVBRUwsT0FBUUEsRUFBc0IsTUFBTSxXQUFXLFNBQ25ELENBQUMsRUFFTCxVQUFXRCxLQUFTLEtBQUssUUFBUSxjQUM3QixLQUFLLFlBQVlBLEVBQU8sU0FBWSxDQUNoQyxNQUFNQyxFQUErQixNQUFNLEtBQUssSUFDM0MsSUFBSSxDQUNELE9BQVEsUUFDUixLQUFNLFlBQ04sUUFBUyxJQUNULFlBQWEsS0FBSyxZQUFZRCxDQUFLLEVBQ25DLFFBQVNBLEVBQU0sS0FDbkIsQ0FBbUMsRUFDbEMsTUFBTSxDQUFDRSxFQUFtQkMsS0FDdkIsR0FBRyxPQUFPLG9EQUFvREEsR0FBVyxNQUFNLE1BQVEsZUFBZSxLQUFLRCxDQUFTLElBQUssQ0FBRSxLQUFNLE9BQVEsQ0FBQyxFQUNuSSxLQUNWLEVBQ0wsR0FBS0QsRUFFTCxPQUFRQSxFQUF5QixNQUFNLFVBQVUsTUFDckQsQ0FBQyxFQUVMLFVBQVdELEtBQVMsS0FBSyxRQUFRLGNBQzdCLEtBQUssWUFBWUEsRUFBTyxTQUFZLENBQ2hDLE1BQU1DLEVBQWdDLE1BQU0sS0FBSyxJQUM1QyxJQUFJLENBQ0QsT0FBUSxRQUNSLEtBQU0sYUFDTixRQUFTLElBQ1QsWUFBYSxLQUFLLFlBQVlELENBQUssRUFDbkMsUUFBU0EsRUFBTSxLQUNuQixDQUFtQyxFQUNsQyxNQUFNLENBQUNFLEVBQW1CQyxLQUN2QixHQUFHLE9BQU8sd0RBQXdEQSxHQUFXLE1BQU0sTUFBUSxlQUFlLEtBQUtELENBQVMsSUFBSyxDQUFFLEtBQU0sT0FBUSxDQUFDLEVBQ3ZJLEtBQ1YsRUFDTCxHQUFLRCxFQUVMLE9BQVFBLEVBQTBCLE1BQU0sV0FBVyxNQUN2RCxDQUFDLEVBQ1QsQ0FBQyxFQUVESCxFQUFnQixjQUFjLEdBQUcsRUFBRyxZQUFZLEtBQUssSUFBSSxFQUV6RCxTQUFTLGNBQWMsdUNBQXVDLEVBQUcsTUFBTUEsQ0FBZSxDQUMxRixDQUtBLE1BQWEsaUJBQWtCLENBQzNCLEtBQUssUUFBVSxLQUFLLE9BRVgsTUFBTSxLQUFLLElBQUksSUFBSSxDQUNoQixPQUFRLFFBQ1IsY0FBZSxJQUNmLEtBQU0sWUFDTixPQUFRLFVBQ1IsUUFBUyxPQUNULE9BQVEsMkNBQ1osQ0FBbUMsR0FDckMsTUFBTSxNQUFNLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxNQUFNLEtBQUssT0FDN0MsRUFFQSxLQUFLLGFBQWUsT0FBTyxPQUFPLEtBQUssT0FBTyxFQUFFLEtBQUssRUFBRSxNQUMzRCxDQU9BLE1BQWMsWUFBWUUsRUFBd0JJLEVBQXVDLENBQ3JGLE1BQU1DLEVBQVEsTUFBTUQsRUFBUSxFQUM1QixHQUFJQyxJQUFVLE9BQVcsT0FFekIsTUFBTUMsRUFBVSxTQUFTLGNBQWMsb0JBQW9CTixFQUFNLEVBQUUsRUFBRSxFQUNyRSxHQUFJLENBQUNNLEVBQVMsT0FBTyxHQUFHLE9BQU8sa0NBQWtDTixFQUFNLEVBQUUsR0FBRyxFQUM1RU0sRUFBUSxVQUFZRCxJQUFVLEVBQUksMkNBQTZDLG1DQUFtQ0EsSUFBVSxJQUFNLE9BQVNBLENBQUssY0FFaEosS0FBSyxrQkFDTCxLQUFLLEtBQUssWUFBYyx1QkFBdUIsS0FBSyxlQUFlLElBQUksS0FBSyxZQUFZLFdBRXBGLEtBQUssa0JBQW9CLEtBQUssY0FDOUIsV0FBVyxJQUFNLENBQ2IsS0FBSyxVQUFZLEdBRWpCLEtBQUssZ0JBQWtCLEVBQ3ZCLEtBQUssS0FBSyxZQUFjLG9CQUM1QixFQUFHLEdBQUksQ0FDZixDQVNRLFlBQVksQ0FBRSxVQUFBRSxFQUFXLGFBQUFDLENBQWEsRUFBa0QsQ0FDNUYsR0FBSSxDQUFDRCxHQUFhLENBQUNDLEVBQWMsTUFBTyxHQUNuQyxHQUFJRCxFQUFXLENBQ2hCLE1BQU1FLEVBQWlCLE9BQU8sUUFBUSxHQUFHLE9BQU8sSUFBSSx1QkFBdUIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUVDLENBQWEsSUFBTUEsSUFBa0JILENBQVMsRUFFckksT0FBT0UsRUFBaUIsT0FBTyxTQUFTQSxFQUFlLENBQUMsQ0FBQyxFQUFJLENBQ2pFLEtBQ0ksUUFBTyxPQUFPLFFBQVEsR0FBRyxPQUFPLElBQUksdUJBQXVCLENBQUMsRUFDdkQsT0FBTyxDQUFDLENBQUMsQ0FBRUMsQ0FBYSxJQUFNRixLQUFrQkUsR0FBaUIsVUFBVSxFQUMzRSxJQUFJLENBQUMsQ0FBQ0MsQ0FBVyxJQUFNLE9BQU8sU0FBU0EsQ0FBVyxDQUFDLENBQ2hFLENBQ0osQ0FFQSxHQUFHLE9BQU8sTUFBTSxDQUFDLGdCQUFnQixFQUFHLElBQU0sQ0FDbEMsR0FBRyxPQUFPLElBQUksWUFBWSxJQUFNLGdCQUFnQixJQUFJLHNCQUFzQixFQUFFLEtBQUssQ0FDekYsQ0FBQyIsCiAgIm5hbWVzIjogWyJmdWxsTGlua0VsZW1lbnQiLCAiZXZlbnQiLCAiY2hlY2siLCAiZGF0YSIsICJlcnJvckNvZGUiLCAiZXJyb3JJbmZvIiwgImhhbmRsZXIiLCAiY291bnQiLCAiZWxlbWVudCIsICJuYW1lc3BhY2UiLCAibm90TmFtZXNwYWNlIiwgImZvdW5kTmFtZXNwYWNlIiwgIm5hbWVzcGFjZU5hbWUiLCAibmFtZXNwYWNlSWQiXQp9Cg==
