"use strict";
mw.loader.using(["mediawiki.util"], () => {
  if (mw.config.get("wgPageName") !== "User:Eejit43")
    return;
  const link = mw.util.addPortletLink(mw.config.get("skin") === "minerva" ? "p-tb" : "p-cactions", "#", "Add counts to monitoring list", "add-monitoring-counts");
  link.addEventListener("click", async (event) => {
    event.preventDefault();
    const toCheck = JSON.parse(
      (await new mw.Api().get({
        action: "query",
        formatversion: 2,
        prop: "revisions",
        rvprop: "content",
        rvslots: "*",
        titles: "User:Eejit43/scripts/to-monitor-list.json"
      })).query.pages[0].revisions[0].slots.main.content
    );
    toCheck.categories.forEach(async (check) => {
      const data = await new mw.Api().get({
        action: "query",
        list: "search",
        srinfo: "totalhits",
        srnamespace: getCategory(check),
        srsearch: `incategory:"${check.category}"`
      }).catch((errorCode, { error }) => {
        mw.notify(`An error occurred while trying to get category members: ${error.info} (${errorCode})`, { type: "error" });
        return null;
      });
      if (!data)
        return;
      const count = data.query.searchinfo.totalhits;
      const element = document.querySelector(`#to-monitor-list-${check.id}`);
      if (!element)
        return mw.notify(`Failed to find element for ID "${check.id}"`);
      element.innerHTML = count === 0 ? '<span style="color: #00733f">None</span>' : `<b><span style="color: #bd2828">${count === 500 ? "500+" : count}</span></b>`;
    });
    toCheck.searches.forEach(async (check) => {
      const data = await new mw.Api().get({
        action: "query",
        list: "search",
        srinfo: "totalhits",
        srnamespace: getCategory(check),
        srsearch: check.search
      }).catch((errorCode, { error }) => {
        mw.notify(`An error occurred while trying to get search results: ${error.info} (${errorCode})`, { type: "error" });
        return null;
      });
      if (!data)
        return;
      const count = data.query.searchinfo.totalhits;
      const element = document.querySelector(`#to-monitor-list-${check.id}`);
      if (!element)
        return mw.notify(`Failed to find element for ID "${check.id}"`);
      element.innerHTML = count === 0 ? '<span style="color: #00733f">None</span>' : `<b><span style="color: #bd2828">${count.toLocaleString()}</span></b>`;
    });
    toCheck.whatLinksHere.forEach(async (check) => {
      const data = await new mw.Api().get({
        action: "query",
        bllimit: 500,
        blnamespace: getCategory(check),
        bltitle: check.title,
        list: "backlinks"
      }).catch((errorCode, { error }) => {
        mw.notify(`An error occurred while trying to get backlinks: ${error.info} (${errorCode})`, { type: "error" });
        return null;
      });
      if (!data)
        return;
      const count = data.query.backlinks.length;
      const element = document.querySelector(`#to-monitor-list-${check.id}`);
      if (!element)
        return mw.notify(`Failed to find element for ID "${check.id}"`);
      element.innerHTML = count === 0 ? '<span style="color: #00733f">None</span>' : `<b><span style="color: #bd2828">${count === 500 ? "500+" : count}</span></b>`;
    });
    toCheck.transclusions.forEach(async (check) => {
      const data = await new mw.Api().get({
        action: "query",
        eilimit: 500,
        einamespace: getCategory(check),
        eititle: check.title,
        list: "embeddedin"
      }).catch((errorCode, { error }) => {
        mw.notify(`An error occurred while trying to get transclusions: ${error.info} (${errorCode})`, { type: "error" });
        return null;
      });
      if (!data)
        return;
      const count = data.query.embeddedin.length;
      const element = document.querySelector(`#to-monitor-list-${check.id}`);
      if (!element)
        return mw.notify(`Failed to find element for ID "${check.id}"`);
      element.innerHTML = count === 0 ? '<span style="color: #00733f">None</span>' : `<b><span style="color: #bd2828">${count === 500 ? "500+" : count}</span></b>`;
    });
    mw.notify('Successfully added missing counts to "Stuff to monitor"', { type: "success" });
  });
});
function getCategory({ namespace, notNamespace }) {
  if (!namespace && !notNamespace)
    return 0;
  else if (namespace)
    return Object.entries(mw.config.get("wgFormattedNamespaces")).find(([, value]) => value === namespace)?.[0] ?? 0;
  else
    return Object.entries(mw.config.get("wgFormattedNamespaces")).filter(([, value]) => notNamespace !== (value || "Article")).map(([key]) => key).join("|");
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2NyaXB0cy90by1tb25pdG9yLWxpc3QudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IE1lZGlhV2lraURhdGFFcnJvciwgUGFnZVJldmlzaW9uc1Jlc3VsdCB9IGZyb20gJy4uL2dsb2JhbC10eXBlcyc7XG5cbmludGVyZmFjZSBTZWFyY2hEYXRhIHtcbiAgICBjYXRlZ29yaWVzOiB7IGlkOiBzdHJpbmc7IGNhdGVnb3J5OiBzdHJpbmc7IG5hbWVzcGFjZT86IHN0cmluZzsgbm90TmFtZXNwYWNlPzogc3RyaW5nIH1bXTtcbiAgICBzZWFyY2hlczogeyBpZDogc3RyaW5nOyBzZWFyY2g6IHN0cmluZzsgbmFtZXNwYWNlPzogc3RyaW5nOyBub3ROYW1lc3BhY2U/OiBzdHJpbmcgfVtdO1xuICAgIHdoYXRMaW5rc0hlcmU6IHsgaWQ6IHN0cmluZzsgdGl0bGU6IHN0cmluZzsgbmFtZXNwYWNlPzogc3RyaW5nOyBub3ROYW1lc3BhY2U/OiBzdHJpbmcgfVtdO1xuICAgIHRyYW5zY2x1c2lvbnM6IHsgaWQ6IHN0cmluZzsgdGl0bGU6IHN0cmluZzsgbmFtZXNwYWNlPzogc3RyaW5nOyBub3ROYW1lc3BhY2U/OiBzdHJpbmcgfVtdO1xufVxuXG5pbnRlcmZhY2UgU2VhcmNoUmVzdWx0IHtcbiAgICBxdWVyeTogeyBzZWFyY2hpbmZvOiB7IHRvdGFsaGl0czogbnVtYmVyIH0gfTtcbn1cbmludGVyZmFjZSBCYWNrbGlua3NSZXN1bHQge1xuICAgIHF1ZXJ5OiB7IGJhY2tsaW5rczogb2JqZWN0W10gfTtcbn1cbmludGVyZmFjZSBFbWJlZGRlZGluUmVzdWx0IHtcbiAgICBxdWVyeTogeyBlbWJlZGRlZGluOiBvYmplY3RbXSB9O1xufVxuXG5tdy5sb2FkZXIudXNpbmcoWydtZWRpYXdpa2kudXRpbCddLCAoKSA9PiB7XG4gICAgaWYgKG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSAhPT0gJ1VzZXI6RWVqaXQ0MycpIHJldHVybjtcblxuICAgIGNvbnN0IGxpbmsgPSBtdy51dGlsLmFkZFBvcnRsZXRMaW5rKG13LmNvbmZpZy5nZXQoJ3NraW4nKSA9PT0gJ21pbmVydmEnID8gJ3AtdGInIDogJ3AtY2FjdGlvbnMnLCAnIycsICdBZGQgY291bnRzIHRvIG1vbml0b3JpbmcgbGlzdCcsICdhZGQtbW9uaXRvcmluZy1jb3VudHMnKTtcblxuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zdCB0b0NoZWNrID0gSlNPTi5wYXJzZShcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAoYXdhaXQgbmV3IG13LkFwaSgpLmdldCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dmVyc2lvbjogMixcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ3JldmlzaW9ucycsXG4gICAgICAgICAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICBydnNsb3RzOiAnKicsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlczogJ1VzZXI6RWVqaXQ0My9zY3JpcHRzL3RvLW1vbml0b3ItbGlzdC5qc29uJyxcbiAgICAgICAgICAgICAgICB9KSkgYXMgUGFnZVJldmlzaW9uc1Jlc3VsdFxuICAgICAgICAgICAgKS5xdWVyeS5wYWdlc1swXS5yZXZpc2lvbnNbMF0uc2xvdHMubWFpbi5jb250ZW50LFxuICAgICAgICApIGFzIFNlYXJjaERhdGE7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tYXJyYXktZm9yLWVhY2hcbiAgICAgICAgdG9DaGVjay5jYXRlZ29yaWVzLmZvckVhY2goYXN5bmMgKGNoZWNrKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhOiBTZWFyY2hSZXN1bHQgfCBudWxsID0gYXdhaXQgbmV3IG13LkFwaSgpXG4gICAgICAgICAgICAgICAgLmdldCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgbGlzdDogJ3NlYXJjaCcsXG4gICAgICAgICAgICAgICAgICAgIHNyaW5mbzogJ3RvdGFsaGl0cycsXG4gICAgICAgICAgICAgICAgICAgIHNybmFtZXNwYWNlOiBnZXRDYXRlZ29yeShjaGVjayksXG4gICAgICAgICAgICAgICAgICAgIHNyc2VhcmNoOiBgaW5jYXRlZ29yeTpcIiR7Y2hlY2suY2F0ZWdvcnl9XCJgLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvckNvZGU6IHN0cmluZywgeyBlcnJvciB9OiBNZWRpYVdpa2lEYXRhRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gZ2V0IGNhdGVnb3J5IG1lbWJlcnM6ICR7ZXJyb3IuaW5mb30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3QgY291bnQgPSAoZGF0YSBhcyBTZWFyY2hSZXN1bHQpLnF1ZXJ5LnNlYXJjaGluZm8udG90YWxoaXRzO1xuXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3RvLW1vbml0b3ItbGlzdC0ke2NoZWNrLmlkfWApO1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm4gbXcubm90aWZ5KGBGYWlsZWQgdG8gZmluZCBlbGVtZW50IGZvciBJRCBcIiR7Y2hlY2suaWR9XCJgKTtcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gY291bnQgPT09IDAgPyAnPHNwYW4gc3R5bGU9XCJjb2xvcjogIzAwNzMzZlwiPk5vbmU8L3NwYW4+JyA6IGA8Yj48c3BhbiBzdHlsZT1cImNvbG9yOiAjYmQyODI4XCI+JHtjb3VudCA9PT0gNTAwID8gJzUwMCsnIDogY291bnR9PC9zcGFuPjwvYj5gO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby1hcnJheS1mb3ItZWFjaFxuICAgICAgICB0b0NoZWNrLnNlYXJjaGVzLmZvckVhY2goYXN5bmMgKGNoZWNrKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhOiBTZWFyY2hSZXN1bHQgfCBudWxsID0gYXdhaXQgbmV3IG13LkFwaSgpXG4gICAgICAgICAgICAgICAgLmdldCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgbGlzdDogJ3NlYXJjaCcsXG4gICAgICAgICAgICAgICAgICAgIHNyaW5mbzogJ3RvdGFsaGl0cycsXG4gICAgICAgICAgICAgICAgICAgIHNybmFtZXNwYWNlOiBnZXRDYXRlZ29yeShjaGVjayksXG4gICAgICAgICAgICAgICAgICAgIHNyc2VhcmNoOiBjaGVjay5zZWFyY2gsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCB7IGVycm9yIH06IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBnZXQgc2VhcmNoIHJlc3VsdHM6ICR7ZXJyb3IuaW5mb30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3QgY291bnQgPSAoZGF0YSBhcyBTZWFyY2hSZXN1bHQpLnF1ZXJ5LnNlYXJjaGluZm8udG90YWxoaXRzO1xuXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3RvLW1vbml0b3ItbGlzdC0ke2NoZWNrLmlkfWApO1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm4gbXcubm90aWZ5KGBGYWlsZWQgdG8gZmluZCBlbGVtZW50IGZvciBJRCBcIiR7Y2hlY2suaWR9XCJgKTtcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gY291bnQgPT09IDAgPyAnPHNwYW4gc3R5bGU9XCJjb2xvcjogIzAwNzMzZlwiPk5vbmU8L3NwYW4+JyA6IGA8Yj48c3BhbiBzdHlsZT1cImNvbG9yOiAjYmQyODI4XCI+JHtjb3VudC50b0xvY2FsZVN0cmluZygpfTwvc3Bhbj48L2I+YDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tYXJyYXktZm9yLWVhY2hcbiAgICAgICAgdG9DaGVjay53aGF0TGlua3NIZXJlLmZvckVhY2goYXN5bmMgKGNoZWNrKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhOiBCYWNrbGlua3NSZXN1bHQgfCBudWxsID0gYXdhaXQgbmV3IG13LkFwaSgpXG4gICAgICAgICAgICAgICAgLmdldCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgYmxsaW1pdDogNTAwLFxuICAgICAgICAgICAgICAgICAgICBibG5hbWVzcGFjZTogZ2V0Q2F0ZWdvcnkoY2hlY2spLFxuICAgICAgICAgICAgICAgICAgICBibHRpdGxlOiBjaGVjay50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgbGlzdDogJ2JhY2tsaW5rcycsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yQ29kZTogc3RyaW5nLCB7IGVycm9yIH06IE1lZGlhV2lraURhdGFFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtdy5ub3RpZnkoYEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBnZXQgYmFja2xpbmtzOiAke2Vycm9yLmluZm99ICgke2Vycm9yQ29kZX0pYCwgeyB0eXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gKGRhdGEgYXMgQmFja2xpbmtzUmVzdWx0KS5xdWVyeS5iYWNrbGlua3MubGVuZ3RoO1xuXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3RvLW1vbml0b3ItbGlzdC0ke2NoZWNrLmlkfWApO1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm4gbXcubm90aWZ5KGBGYWlsZWQgdG8gZmluZCBlbGVtZW50IGZvciBJRCBcIiR7Y2hlY2suaWR9XCJgKTtcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gY291bnQgPT09IDAgPyAnPHNwYW4gc3R5bGU9XCJjb2xvcjogIzAwNzMzZlwiPk5vbmU8L3NwYW4+JyA6IGA8Yj48c3BhbiBzdHlsZT1cImNvbG9yOiAjYmQyODI4XCI+JHtjb3VudCA9PT0gNTAwID8gJzUwMCsnIDogY291bnR9PC9zcGFuPjwvYj5gO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby1hcnJheS1mb3ItZWFjaFxuICAgICAgICB0b0NoZWNrLnRyYW5zY2x1c2lvbnMuZm9yRWFjaChhc3luYyAoY2hlY2spID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGE6IEVtYmVkZGVkaW5SZXN1bHQgfCBudWxsID0gYXdhaXQgbmV3IG13LkFwaSgpXG4gICAgICAgICAgICAgICAgLmdldCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgZWlsaW1pdDogNTAwLFxuICAgICAgICAgICAgICAgICAgICBlaW5hbWVzcGFjZTogZ2V0Q2F0ZWdvcnkoY2hlY2spLFxuICAgICAgICAgICAgICAgICAgICBlaXRpdGxlOiBjaGVjay50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgbGlzdDogJ2VtYmVkZGVkaW4nLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvckNvZGU6IHN0cmluZywgeyBlcnJvciB9OiBNZWRpYVdpa2lEYXRhRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbXcubm90aWZ5KGBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gZ2V0IHRyYW5zY2x1c2lvbnM6ICR7ZXJyb3IuaW5mb30gKCR7ZXJyb3JDb2RlfSlgLCB7IHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3QgY291bnQgPSAoZGF0YSBhcyBFbWJlZGRlZGluUmVzdWx0KS5xdWVyeS5lbWJlZGRlZGluLmxlbmd0aDtcblxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCN0by1tb25pdG9yLWxpc3QtJHtjaGVjay5pZH1gKTtcbiAgICAgICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuIG13Lm5vdGlmeShgRmFpbGVkIHRvIGZpbmQgZWxlbWVudCBmb3IgSUQgXCIke2NoZWNrLmlkfVwiYCk7XG4gICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGNvdW50ID09PSAwID8gJzxzcGFuIHN0eWxlPVwiY29sb3I6ICMwMDczM2ZcIj5Ob25lPC9zcGFuPicgOiBgPGI+PHNwYW4gc3R5bGU9XCJjb2xvcjogI2JkMjgyOFwiPiR7Y291bnQgPT09IDUwMCA/ICc1MDArJyA6IGNvdW50fTwvc3Bhbj48L2I+YDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbXcubm90aWZ5KCdTdWNjZXNzZnVsbHkgYWRkZWQgbWlzc2luZyBjb3VudHMgdG8gXCJTdHVmZiB0byBtb25pdG9yXCInLCB7IHR5cGU6ICdzdWNjZXNzJyB9KTtcbiAgICB9KTtcbn0pO1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgc2VhcmNoZWQgY2F0ZWdvcmllcyBmcm9tIHRoZSBjaGVjayBvYmplY3QuXG4gKiBAcGFyYW0gY2hlY2sgVGhlIGNoZWNrIG9iamVjdC5cbiAqIEBwYXJhbSBjaGVjay5uYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSB0byBzZWFyY2ggaW4uXG4gKiBAcGFyYW0gY2hlY2subm90TmFtZXNwYWNlIFRoZSBuYW1lc3BhY2UgdG8gZXhjbHVkZSBmcm9tIHRoZSBzZWFyY2guXG4gKiBAcmV0dXJucyBUaGUgY2F0ZWdvcnkgSUQgb3IgbGlzdCBvZiBjYXRlZ29yeSBJRHMgKHNlcGFyYXRlZCBieSAnfCcpLlxuICovXG5mdW5jdGlvbiBnZXRDYXRlZ29yeSh7IG5hbWVzcGFjZSwgbm90TmFtZXNwYWNlIH06IHsgbmFtZXNwYWNlPzogc3RyaW5nOyBub3ROYW1lc3BhY2U/OiBzdHJpbmcgfSk6IG51bWJlciB8IHN0cmluZyB7XG4gICAgaWYgKCFuYW1lc3BhY2UgJiYgIW5vdE5hbWVzcGFjZSkgcmV0dXJuIDA7XG4gICAgZWxzZSBpZiAobmFtZXNwYWNlKSByZXR1cm4gT2JqZWN0LmVudHJpZXMobXcuY29uZmlnLmdldCgnd2dGb3JtYXR0ZWROYW1lc3BhY2VzJykpLmZpbmQoKFssIHZhbHVlXSkgPT4gdmFsdWUgPT09IG5hbWVzcGFjZSk/LlswXSA/PyAwO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG13LmNvbmZpZy5nZXQoJ3dnRm9ybWF0dGVkTmFtZXNwYWNlcycpKVxuICAgICAgICAgICAgLmZpbHRlcigoWywgdmFsdWVdKSA9PiBub3ROYW1lc3BhY2UgIT09ICh2YWx1ZSB8fCAnQXJ0aWNsZScpKVxuICAgICAgICAgICAgLm1hcCgoW2tleV0pID0+IGtleSlcbiAgICAgICAgICAgIC5qb2luKCd8Jyk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBbUJBLEdBQUcsT0FBTyxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsTUFBTTtBQUN0QyxNQUFJLEdBQUcsT0FBTyxJQUFJLFlBQVksTUFBTTtBQUFnQjtBQUVwRCxRQUFNLE9BQU8sR0FBRyxLQUFLLGVBQWUsR0FBRyxPQUFPLElBQUksTUFBTSxNQUFNLFlBQVksU0FBUyxjQUFjLEtBQUssaUNBQWlDLHVCQUF1QjtBQUU5SixPQUFLLGlCQUFpQixTQUFTLE9BQU8sVUFBVTtBQUM1QyxVQUFNLGVBQWU7QUFFckIsVUFBTSxVQUFVLEtBQUs7QUFBQSxPQUVaLE1BQU0sSUFBSSxHQUFHLElBQUksRUFBRSxJQUFJO0FBQUEsUUFDcEIsUUFBUTtBQUFBLFFBQ1IsZUFBZTtBQUFBLFFBQ2YsTUFBTTtBQUFBLFFBQ04sUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLE1BQ1osQ0FBQyxHQUNILE1BQU0sTUFBTSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsTUFBTSxLQUFLO0FBQUEsSUFDN0M7QUFHQSxZQUFRLFdBQVcsUUFBUSxPQUFPLFVBQVU7QUFDeEMsWUFBTSxPQUE0QixNQUFNLElBQUksR0FBRyxJQUFJLEVBQzlDLElBQUk7QUFBQSxRQUNELFFBQVE7QUFBQSxRQUNSLE1BQU07QUFBQSxRQUNOLFFBQVE7QUFBQSxRQUNSLGFBQWEsWUFBWSxLQUFLO0FBQUEsUUFDOUIsVUFBVSxlQUFlLE1BQU0sUUFBUTtBQUFBLE1BQzNDLENBQUMsRUFDQSxN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
