// <nowiki>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/to-monitor-list.ts

"use strict";class MonitoringListManager{constructor(){this.api=new mw.Api;this.handledRequests=0}load(){const r=document.querySelector(".mw-editsection").cloneNode(!0);this.link=document.createElement("a"),this.link.href="#",this.link.style.fontWeight="bold",this.link.textContent="Add missing counts",this.link.addEventListener("click",async s=>{s.preventDefault(),await this.loadToCheckData();for(const e of this.toCheck.categories)this.handleCheck(e,async()=>{const t=await this.api.get({action:"query",list:"search",srinfo:"totalhits",srnamespace:this.getCategory(e),srsearch:`incategory:"${e.category}"`}).catch((i,a)=>(mw.notify(`An error occurred while trying to get category members: ${a?.error.info??"Unknown error"} (${i})`,{type:"error"}),null));if(t)return t.query.searchinfo.totalhits});for(const e of this.toCheck.searches)this.handleCheck(e,async()=>{const t=await this.api.get({action:"query",list:"search",srinfo:"totalhits",srnamespace:this.getCategory(e),srsearch:e.search}).catch((i,a)=>(mw.notify(`An error occurred while trying to get search results: ${a?.error.info??"Unknown error"} (${i})`,{type:"error"}),null));if(t)return t.query.searchinfo.totalhits});for(const e of this.toCheck.whatLinksHere)this.handleCheck(e,async()=>{const t=await this.api.get({action:"query",list:"backlinks",bllimit:500,blnamespace:this.getCategory(e),bltitle:e.title}).catch((i,a)=>(mw.notify(`An error occurred while trying to get backlinks: ${a?.error.info??"Unknown error"} (${i})`,{type:"error"}),null));if(t)return t.query.backlinks.length});for(const e of this.toCheck.transclusions)this.handleCheck(e,async()=>{const t=await this.api.get({action:"query",list:"embeddedin",eilimit:500,einamespace:this.getCategory(e),eititle:e.title}).catch((i,a)=>(mw.notify(`An error occurred while trying to get transclusions: ${a?.error.info??"Unknown error"} (${i})`,{type:"error"}),null));if(t)return t.query.embeddedin.length})}),r.querySelector("a").replaceWith(this.link),document.querySelector("#Stuff_to_monitor.mw-headline").after(r)}async loadToCheckData(){this.toCheck=JSON.parse((await this.api.get({action:"query",formatversion:"2",prop:"revisions",rvprop:"content",rvslots:"main",titles:"User:Eejit43/scripts/to-monitor-list.json"})).query.pages[0].revisions[0].slots.main.content),this.totalToCheck=Object.values(this.toCheck).flat().length}async handleCheck(r,s){const e=await s();if(e===void 0)return;const t=document.querySelector(`#to-monitor-list-${r.id}`);if(!t)return mw.notify(`Failed to find element for ID "${r.id}"`);t.innerHTML=e===0?'<span style="color: #00733f">None</span>':`<b><span style="color: #bd2828">${e===500?"500+":e}</span></b>`,this.handledRequests++,this.link.textContent=`Add missing counts (${this.handledRequests}/${this.totalToCheck} loaded)`}getCategory({namespace:r,notNamespace:s}){if(!r&&!s)return 0;if(r){const e=Object.entries(mw.config.get("wgFormattedNamespaces")).find(([,t])=>t===r);return e?Number.parseInt(e[0]):0}else return Object.entries(mw.config.get("wgFormattedNamespaces")).filter(([,e])=>s!==(e||"Article")).map(([e])=>Number.parseInt(e))}}mw.loader.using(["mediawiki.util"],()=>{mw.config.get("wgPageName")==="User:Eejit43"&&new MonitoringListManager().load()});

// </nowiki>
//# sourceMappingURL=data:application/json;base64,
