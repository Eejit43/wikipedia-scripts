// <pre>
// Note: This script was compiled and minified from TypeScript. For a more readable version, see https://github.com/Eejit43/wikipedia-scripts/blob/main/scripts/sync-redirect.ts

"use strict";(()=>{var i=new mw.Api;mw.loader.using(["mediawiki.util"],async()=>{if(!mw.Title.isTalkNamespace(mw.config.get("wgNamespaceNumber")))return;let a=await i.get({action:"query",formatversion:"2",prop:["info","revisions"],rvprop:"content",rvslots:"main",titles:`${mw.config.get("wgFormattedNamespaces")[mw.config.get("wgNamespaceNumber")-1]}:${mw.config.get("wgTitle")}`});if(!a.query.pages[0].redirect)return;mw.util.addPortletLink(mw.config.get("skin")==="minerva"?"p-tb":"p-cactions","#","Sync with main page redirect","sync-redirect").addEventListener("click",async g=>{g.preventDefault(),mw.notify("Editing...",{tag:"sync-redirect-notification"});let n=a.query.pages[0].revisions?.[0].slots.main.content??"",o=/#redirect:? *\[\[(.+)]]/i.exec(n)?.[1].replaceAll("_"," ").split("|")[0].split("#")[0].trim();if(!o)return mw.notify("Failed to parse redirect target!",{type:"error",tag:"sync-redirect-notification"});let s=new DOMParser().parseFromString(o,"text/html").documentElement.textContent;if(!s)return mw.notify("Failed to parse redirect target!",{type:"error",tag:"sync-redirect-notification"});let r=mw.Title.newFromText(s);if(!r)return mw.notify("Failed to parse redirect target!",{type:"error",tag:"sync-redirect-notification"});let e=r.getMainText(),c=/{{ *r(edirect)?( from)?(( a)? page)? (move|rename|pm) *}}/i.test(n),t=mw.config.get("wgFormattedNamespaces")[r.getNamespaceId()+1];await i.edit(mw.config.get("wgPageName"),()=>({text:`#REDIRECT [[${t}:${e}]]${c?`

{{Redirect category shell|
{{R from move}}
}}`:""}`,summary:`Sync redirect with main page, to [[${t}:${e}]] (via [[User:Eejit43/scripts/sync-redirect|script]])`,minor:!0})).catch(async(p,d)=>{p==="nocreate-missing"?await i.create(mw.config.get("wgPageName"),{summary:`Create redirect matching main page, to [[${t}:${e}]] (via [[User:Eejit43/scripts/sync-redirect|script]])`},`#REDIRECT [[${t}:${e}]]${c?`

{{Redirect category shell|
{{R from move}}
}}`:""}`).catch((y,f)=>{mw.notify(`Failed to redirect page: ${f?.error?.info??"Unknown error"} (${y})`,{type:"error",tag:"sync-redirect-notification"})}):mw.notify(`Failed to redirect page: ${d?.error?.info??"Unknown error"} (${p})`,{type:"error",tag:"sync-redirect-notification"})}),mw.notify("Successfully redirected page, reloading...",{type:"success",tag:"sync-redirect-notification"});let m=new URL(window.location.href);m.searchParams.set("redirect","no"),window.location.href=m.href})});})();

// </pre>
//# sourceMappingURL=data:application/json;base64,
